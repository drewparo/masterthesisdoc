{"task_id": "MBSWP/1", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n *\n * >>> minCost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)\n * 8\n * >>> minCost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)\n * 12\n * >>> minCost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)\n * 16\n */\nfunc minCost(cost : [[Int]], m : Int, n : Int) -> Int {\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: m)\n    dp[0][0] = cost[0][0]\n    for i in 1...m {\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    }\n    for j in 1...n {\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    }\n    for i in 1...m {\n        for j in 1...n {\n            dp[i][j] = min(dp[i-1][j] + cost[i][j], dp[i][j-1] + cost[i][j])\n        }\n    }\n    return dp[m-1][n-1]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\n *\n * >>> minCost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)\n * 8\n * >>> minCost([[2, 3, 4], [5"}
{"task_id": "MBSWP/2", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the similar elements from the given two tuple lists.\n *\n * >>> similarElements([3, 4, 5, 6], [5, 7, 4, 10])\n * [4, 5]\n * >>> similarElements([1, 2, 3, 4], [5, 4, 3, 7])\n * [3, 4]\n * >>> similarElements([11, 12, 14, 13], [17, 15, 14, 13])\n * [13, 14]\n */\nfunc similarElements(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<testTup1.count {\n        for j in 0..<testTup2.count {\n            if testTup1[i] == testTup2[j] {\n                result.append(testTup1[i])\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the similar elements from the given two tuple lists.\n *\n * >>> similarElements([3, 4, 5, 6], [5, 7, 4, 10])\n * [4, 5]\n * >>> similarElements([1, 2, 3, 4], [5, 4, 3, 7])\n * [3, 4]\n * >>> similarElements([11, 12, 14, 13], [17, 15, 14, 13])\n * [13, 14]\n */\nfunc similarElements(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<testTup1.count {\n        for j in 0..<testTup2.count {\n            if testTup1[i] == testTup2[j] {\n                result.append(testTup1[i])\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n *"}
{"task_id": "MBSWP/3", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to identify non-prime numbers.\n *\n * >>> isNotPrime(2)\n * false\n * >>> isNotPrime(10)\n * true\n * >>> isNotPrime(35)\n * true\n */\nfunc isNotPrime(n : Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2..<n {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all the non-prime numbers from 1 to n.\n *\n * >>> sumOfNonPrime(10)\n * 25\n */\nfunc sumOfNonPrime(n : Int) -> Int {\n    var sum = 0\n    for i in 1..<n {\n        if isNotPrime(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all the prime numbers from 1 to n.\n *\n * >>> sumOfPrime(10)\n * 10\n */\nfunc sumOfPrime(n : Int) -> Int {\n    var sum = 0\n    for i in 1..<n {\n        if isPrime(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all the prime numbers from 1 to n,\n *   excluding the number n.\n *\n * >>> sumOfPrimeExcluding(10)\n * 10\n */\nfunc sumOfPrimeExcluding(n : Int) -> Int {\n    var sum = 0\n    for i in 1..<n {\n        if isPrime(i) && i != n {\n            sum += i\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the"}
{"task_id": "MBSWP/4", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n *\n * >>> heapQueueLargest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n * [85, 75, 65]\n * >>> heapQueueLargest([25, 35, 22, 85, 14, 65, 75, 22, 58], 2)\n * [85, 75]\n * >>> heapQueueLargest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)\n * [85, 75, 65, 58, 35]\n */\nfunc heapQueueLargest(nums : [Int], n : Int) -> [Int] {\n    var heap = Heap(nums)\n    var largest = [Int]()\n    for i in 0..<n {\n        largest.append(heap.pop())\n    }\n    return largest\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n *\n * >>> heapQueueSmallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n * [14, 22, 22]\n * >>> heapQueueSmallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 2)\n * [14, 22]\n * >>> heapQueueSmallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)\n * [14, 22, 22, 14, 14]\n */\nfunc heapQueueSmallest(nums : [Int], n : Int) -> [Int] {\n    var heap = Heap(nums)\n    var smallest = [Int]()\n    for i in 0..<n {\n        smallest.append(heap.pop())\n    }\n    return smallest\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n *\n * >>> heapQueueLargest([25"}
{"task_id": "MBSWP/5", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\n *\n * >>> countWays(2)\n * 3\n * >>> countWays(8)\n * 153\n * >>> countWays(12)\n * 2131\n */\nfunc countWays(n : Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 7\n    }\n    if n == 5 {\n        return 11\n    }\n    if n == 6 {\n        return 18\n    }\n    if n == 7 {\n        return 29\n    }\n    if n == 8 {\n        return 47\n    }\n    if n == 9 {\n        return 76\n    }\n    if n == 10 {\n        return 123\n    }\n    if n == 11 {\n        return 199\n    }\n    if n == 12 {\n        return 318\n    }\n    if n == 13 {\n        return 438\n    }\n    if n == 14 {\n        return 562\n    }\n    if n == 15 {\n        return 691\n    }\n    if n == 16 {\n        return 823\n    }\n    if n == 17 {\n        return 957\n    }\n    if n == 18 {\n        return 1094\n    }\n    if n == 19 {\n        return 1233\n    }\n    if n == 20 {\n        return 1375\n    }\n    if n == 21 {\n        return 1519\n    }\n    if n == 22 {\n        return 1666\n    }\n    if n == 23 {\n        return 1815\n    }\n    if n == 24 {\n        return 1977\n    }\n    if n == 25 {\n        return 2138\n    }\n    if n == 26 {\n        return 2301\n    }\n    if n == 27 {\n        return 2467\n    }\n    if n == 28 {\n        return 2637\n    }\n    if n =="}
{"task_id": "MBSWP/6", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the two numbers differ at one bit position only or not.\n *\n * >>> differAtOneBitPos(13, 9)\n * true\n * >>> differAtOneBitPos(15, 8)\n * false\n * >>> differAtOneBitPos(2, 4)\n * false\n */\nfunc differAtOneBitPos(a : Int, b : Int) -> Bool {\n    let aBin = a.toBinary()\n    let bBin = b.toBinary()\n    let aBinLen = aBin.count\n    let bBinLen = bBin.count\n    let minLen = min(aBinLen, bBinLen)\n    let maxLen = max(aBinLen, bBinLen)\n    let aBinPadded = aBin.padLeft(maxLen, with: \"0\")\n    let bBinPadded = bBin.padLeft(maxLen, with: \"0\")\n    let aBinPaddedLen = aBinPadded.count\n    let bBinPaddedLen = bBinPadded.count\n    let aBinPaddedBits = aBinPadded.map { $0.toInt() }\n    let bBinPaddedBits = bBinPadded.map { $0.toInt() }\n    for i in 0..<minLen {\n        if aBinPaddedBits[i] != bBinPaddedBits[i] {\n            return true\n        }\n    }\n    return false\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the two numbers differ at one bit position only or not.\n *\n * >>> differAtOneBitPos(13, 9)\n * true\n * >>> differAtOneBitPos(15, 8)\n * false\n * >>> differAtOneBitPos(2, 4)\n * false\n */\nfunc differAtOneBitPos(a : Int, b : Int) -> Bool {\n    let aBin = a.toBinary()\n    let"}
{"task_id": "MBSWP/7", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all words which are at least 4 characters long in a string by using regex.\n *\n * >>> findCharLong(\"Please move back to stream\")\n * [\"Please\", \"move\", \"back\", \"stream\"]\n * >>> findCharLong(\"Jing Eco and Tech\")\n * [\"Jing\", \"Tech\"]\n * >>> findCharLong(\"Jhingai wulu road Zone 3\")\n * [\"Jhingai\", \"wulu\", \"road\", \"Zone\"]\n */\nfunc findCharLong(text : String) -> [String] {\n    var result = [String]()\n    let regex = \"\\\\w{4,}\"\n    let regex = NSRegularExpression(pattern: regex, options: [])\n    let matches = regex.matchesInString(text, options: [], range: NSMakeRange(0, text.length))\n    for match in matches {\n        let range = match.range\n        let word = text[range.location..<range.location+range.length]\n        result.append(word)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all words which are at least 4 characters long in a string by using regex.\n *\n * >>> findCharLong(\"Please move back to stream\")\n * [\"Please\", \"move\", \"back\", \"stream\"]\n * >>> findCharLong(\"Jing Eco and Tech\")\n * [\"Jing\", \"Tech\"]\n * >>> findCharLong(\"Jhingai wulu road Zone 3\")\n * [\"Jhingai\", \"wulu\", \"road\", \"Zone\"]\n */\nfunc findCharLong(text : String) -> [String] {\n    var result = [String]()\n    let regex = \"\\\\w{4,}\"\n    let regex = NSRegularExpression(pattern: regex, options: [])\n    let matches = regex.matchesInString(text, options: [], range: NSMakeRange(0, text.length))\n    for match in matches {\n        let range = match.range\n        let word = text[range.location..<range.location+range.length]\n        result"}
{"task_id": "MBSWP/8", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find squares of individual elements in a list using lambda function.\n *\n * >>> squareNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n * >>> squareNums([10, 20, 30])\n * [100, 400, 900]\n * >>> squareNums([12, 15])\n * [144, 225]\n */\nfunc squareNums(nums : [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find squares of individual elements in a list using map function.\n *\n * >>> squareNumsMap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n * >>> squareNumsMap([10, 20, 30])\n * [100, 400, 900]\n * >>> squareNumsMap([12, 15])\n * [144, 225]\n */\nfunc squareNumsMap(nums : [Int]) -> [Int] {\n    return nums.map { $0 * $0 }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find squares of individual elements in a list using reduce function.\n *\n * >>> squareNumsReduce([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n * >>> squareNumsReduce([10, 20, 30])\n * [100, 400, 900]\n * >>> squareNumsReduce([12, 15])\n * [144, 225]\n */\nfunc squareNumsReduce(nums : [Int]) -> [Int] {\n    return nums.reduce([]) { $0 + [$1 * $1] }\n}\n\n"}
{"task_id": "MBSWP/9", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum number of rotations required to get the same string.\n *\n * >>> findRotations(\"aaaa\")\n * 1\n * >>> findRotations(\"ab\")\n * 2\n * >>> findRotations(\"abc\")\n * 3\n */\nfunc findRotations(str : String) -> Int {\n    var str = str\n    var count = 0\n    while str != str.reversed() {\n        str = str.reversed()\n        count += 1\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/10", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get the n smallest items from a dataset.\n *\n * >>> smallNnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n * [10, 20]\n * >>> smallNnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)\n * [10, 20, 20, 40, 50]\n * >>> smallNnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)\n * [10, 20, 20]\n */\nfunc smallNnum(list1 : [Int], n : Int) -> [Int] {\n    var list2 = [Int]()\n    var list3 = [Int]()\n    var list4 = [Int]()\n    var list5 = [Int]()\n    var list6 = [Int]()\n    var list7 = [Int]()\n    var list8 = [Int]()\n    var list9 = [Int]()\n    var list10 = [Int]()\n    var list11 = [Int]()\n    var list12 = [Int]()\n    var list13 = [Int]()\n    var list14 = [Int]()\n    var list15 = [Int]()\n    var list16 = [Int]()\n    var list17 = [Int]()\n    var list18 = [Int]()\n    var list19 = [Int]()\n    var list20 = [Int]()\n    var list21 = [Int]()\n    var list22 = [Int]()\n    var list23 = [Int]()\n    var list24 = [Int]()\n    var list25 = [Int]()\n    var list26 = [Int]()\n    var list27 = [Int]()\n    var list28 = [Int]()\n    var list29 = [Int]()\n    var list30 = [Int]()\n    var list31 = [Int]()\n    var list32 = [Int]()\n    var list33 = [Int]()\n    var list34 = [Int]()\n    var"}
{"task_id": "MBSWP/11", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove first and last occurrence of a given character from the string.\n *\n * >>> removeOcc(\"hello\", \"l\")\n * \"heo\"\n * >>> removeOcc(\"abcda\", \"a\")\n * \"bcd\"\n * >>> removeOcc(\"PHP\", \"P\")\n * \"H\"\n */\nfunc removeOcc(s : String, ch : String) -> String {\n    var s = s\n    var ch = ch\n    s.removeFirst(count: s.count(of: ch))\n    s.removeLast(count: s.count(of: ch))\n    return s\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove all occurrences of a given character from the string.\n *\n * >>> removeAllOcc(\"hello\", \"l\")\n * \"heo\"\n * >>> removeAllOcc(\"abcda\", \"a\")\n * \"bcd\"\n * >>> removeAllOcc(\"PHP\", \"P\")\n * \"H\"\n */\nfunc removeAllOcc(s : String, ch : String) -> String {\n    var s = s\n    var ch = ch\n    while s.count(of: ch) > 0 {\n        s.removeFirst(count: s.count(of: ch))\n    }\n    return s\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove all occurrences of a given character from the string.\n *\n * >>> removeAllOcc(\"hello\", \"l\")\n * \"heo\"\n * >>> removeAllOcc(\"abcda\", \"a\")\n * \"bcd\"\n * >>> removeAllOcc(\"PHP\", \"P\")\n * \"H\"\n */\nfunc removeAllOcc(s : String, ch : String) -> String {\n    var s = s\n    var ch = ch\n    while s.count(of: ch) > 0 {\n        s.removeFirst(count: s.count(of: ch))\n    }\n    return s\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * *"}
{"task_id": "MBSWP/12", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a given matrix in ascending order according to the sum of its rows.\n *\n * >>> sortMatrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n * [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n * >>> sortMatrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])\n * [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n * >>> sortMatrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]])\n * [[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n */\nfunc sortMatrix(m : [[Int]]) -> [[Int]] {\n    var m = m\n    var sorted = [[Int]]()\n    var sortedIndex = 0\n    var sortedRow = 0\n    var sortedCol = 0\n    var sortedSum = 0\n    var sortedSumIndex = 0\n    var sortedSumRow = 0\n    var sortedSumCol = 0\n    var sortedSumValue = 0\n    var sortedSumValueIndex = 0\n    var sortedSumValueRow = 0\n    var sortedSumValueCol = 0\n    var sortedSumValueValue = 0\n    var sortedSumValueValueIndex = 0\n    var sortedSumValueValueRow = 0\n    var sortedSumValueValueCol = 0\n    var sortedSumValueValueValue = 0\n    var sortedSumValueValueValueIndex = 0\n    var sortedSumValueValueValueRow = 0\n    var sortedSumValueValueValueCol = 0\n    var sortedSumValueValueValueValue = 0\n    var sortedSumValueValueValueValueIndex = 0\n    var sortedSumValueValueValueValueRow = 0\n    var sortedSumValueValueValueValueCol = 0\n    var sortedSumValueValueValueValueValue = 0\n    var sortedSumValueValueValueValueValueIndex = 0\n    var sortedSumValueValueValueValueValueRow = 0\n    var sortedSumValueValueValueValueValueCol = 0\n    var sortedSumValueValueValueValueValueValue = 0\n"}
{"task_id": "MBSWP/13", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the most common words in a dictionary.\n *\n * >>> countCommon([\"red\", \"green\", \"black\", \"pink\", \"black\", \"white\", \"black\", \"eyes\", \"white\", \"black\", \"orange\", \"pink\", \"pink\", \"red\", \"red\", \"white\", \"orange\", \"white\", \"black\", \"pink\", \"green\", \"green\", \"pink\", \"green\", \"pink\", \"white\", \"orange\", \"orange\", \"red\"])\n * [[\"pink\", 6], [\"black\", 5], [\"white\", 5], [\"red\", 4]]\n * >>> countCommon([\"one\", \"two\", \"three\", \"four\", \"five\", \"one\", \"two\", \"one\", \"three\", \"one\"])\n * [[\"one\", 4], [\"two\", 2], [\"three\", 2], [\"four\", 1]]\n * >>> countCommon([\"Facebook\", \"Apple\", \"Amazon\", \"Netflix\", \"Google\", \"Apple\", \"Netflix\", \"Amazon\"])\n * [[\"Apple\", 2], [\"Amazon\", 2], [\"Netflix\", 2], [\"Facebook\", 1]]\n */\nfunc countCommon(words : [String]) -> [[AnyHashable]] {\n    var result : [[AnyHashable]] = []\n    var dict : [String : Int] = [:]\n    for word in words {\n        if let count = dict[word] {\n            dict[word] = count + 1\n        } else {\n            dict[word] = 1\n        }\n    }\n    for (key, value) in dict {\n        result.append([key, value])\n    }\n    result.sort { $0[1] > $1[1] }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the most common words in a dictionary.\n *\n * >>> countCommon([\"red\", \"green\", \"black\", \"pink\", \"black\", \"white\", \"black\", \"eyes\", \"white\", \"black\", \"orange\", \"pink\", \"pink\", \"red\", \"red\", \"white\", \"orange\", \"white\", \"black"}
{"task_id": "MBSWP/14", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the volume of a triangular prism.\n *\n * >>> findVolume(10, 8, 6)\n * 240\n * >>> findVolume(3, 2, 2)\n * 6\n * >>> findVolume(1, 2, 1)\n * 1\n */\nfunc findVolume(l : Int, b : Int, h : Int) -> Int {\n    return l * b * h\n}\n"}
{"task_id": "MBSWP/15", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to split a string at lowercase letters.\n *\n * >>> splitLowerstring(\"AbCd\")\n * [\"bC\", \"d\"]\n * >>> splitLowerstring(\"Python\")\n * [\"y\", \"t\", \"h\", \"o\", \"n\"]\n * >>> splitLowerstring(\"Programming\")\n * [\"r\", \"o\", \"g\", \"r\", \"a\", \"m\", \"m\", \"i\", \"n\", \"g\"]\n */\nfunc splitLowerstring(text : String) -> [String] {\n    var result = [String]()\n    var i = 0\n    while i < text.count {\n        if text[i].isLowercase {\n            var j = i\n            while j < text.count && text[j].isLowercase {\n                j += 1\n            }\n            result.append(text[i..<j])\n            i = j\n        } else {\n            i += 1\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to split a string at uppercase letters.\n *\n * >>> splitUpperstring(\"AbCd\")\n * [\"a\", \"d\"]\n * >>> splitUpperstring(\"Python\")\n * [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]\n * >>> splitUpperstring(\"Programming\")\n * [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\", \"m\", \"i\", \"n\", \"g\"]\n */\nfunc splitUpperstring(text : String) -> [String] {\n    var result = [String]()\n    var i = 0\n    while i < text.count {\n        if text[i].isUppercase {\n            var j = i\n            while j < text.count && text[j].isUppercase {\n                j += 1\n            }\n            result.append(text[i..<j])\n            i = j\n        } else {\n            i += 1\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift"}
{"task_id": "MBSWP/16", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find sequences of lowercase letters joined with an underscore.\n *\n * >>> textLowercaseUnderscore(\"aab_cbbbc\")\n * \"Found a match!\"\n * >>> textLowercaseUnderscore(\"aab_Abbbc\")\n * \"Not matched!\"\n * >>> textLowercaseUnderscore(\"Aaab_abbbc\")\n * \"Not matched!\"\n */\nfunc textLowercaseUnderscore(text : String) -> String {\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_"}
{"task_id": "MBSWP/17", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a square.\n *\n * >>> squarePerimeter(10)\n * 40\n * >>> squarePerimeter(5)\n * 20\n * >>> squarePerimeter(4)\n * 16\n */\nfunc squarePerimeter(a : Int) -> Int {\n    return a * 4\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a rectangle.\n *\n * >>> rectanglePerimeter(10, 5)\n * 40\n * >>> rectanglePerimeter(5, 4)\n * 20\n * >>> rectanglePerimeter(4, 3)\n * 12\n */\nfunc rectanglePerimeter(a : Int, b : Int) -> Int {\n    return a * 2 + b * 2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a circle.\n *\n * >>> circlePerimeter(10)\n * 62.83185307179586\n * >>> circlePerimeter(5)\n * 31.41592653589793\n * >>> circlePerimeter(4)\n * 22.566370614359172\n */\nfunc circlePerimeter(a : Double) -> Double {\n    return a * 2 * 3.141592653589793\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a triangle.\n *\n * >>> trianglePerimeter(10, 5)\n * 20\n * >>> trianglePerimeter(5, 4)\n * 12\n * >>> trianglePerimeter(4, 3)\n * 9\n */\nfunc trianglePerimeter(a : Int, b : Int) -> Int {\n    return a + b + a\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a parallelogram.\n *\n * >>> parallelogramPerimeter(10, 5)\n * 40\n * >>> parallelogramPerimeter(5, 4)\n * 20\n * >>> parallelogramPerimeter(4, 3)\n * 12\n */\n"}
{"task_id": "MBSWP/18", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove characters from the first string which are present in the second string.\n *\n * >>> removeDirtyChars(\"probasscurve\", \"pros\")\n * \"bacuve\"\n * >>> removeDirtyChars(\"digitalindia\", \"talent\")\n * \"digiidi\"\n * >>> removeDirtyChars(\"exoticmiles\", \"toxic\")\n * \"emles\"\n */\nfunc removeDirtyChars(string : String, secondString : String) -> String {\n    var result = \"\"\n    for char in string {\n        if !secondString.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove characters from the first string which are present in the second string.\n *\n * >>> removeDirtyChars(\"probasscurve\", \"pros\")\n * \"bacuve\"\n * >>> removeDirtyChars(\"digitalindia\", \"talent\")\n * \"digiidi\"\n * >>> removeDirtyChars(\"exoticmiles\", \"toxic\")\n * \"emles\"\n */\nfunc removeDirtyChars(string : String, secondString : String) -> String {\n    var result = \"\"\n    for char in string {\n        if !secondString.contains(char) {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove characters from the first string which are present in the second string.\n *\n * >>> removeDirtyChars(\"probasscurve\", \"pros\")\n * \"bacuve\"\n * >>> removeDirtyChars(\"digitalindia\", \"talent\")\n * \"digiidi\"\n * >>> removeDirtyChars(\"exoticmiles\", \"toxic\")\n * \"emles\"\n */\nfunc removeDirtyChars(string : String, secondString : String) -> String {\n    var result = \"\"\n    for char in string {\n"}
{"task_id": "MBSWP/19", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find whether a given array of integers contains any duplicate element.\n *\n * >>> testDuplicate([1, 2, 3, 4, 5])\n * false\n * >>> testDuplicate([1, 2, 3, 4, 4])\n * true\n * >>> testDuplicate([1, 1, 2, 2, 3, 3, 4, 4, 5])\n * true\n */\nfunc testDuplicate(arraynums : [Int]) -> Bool {\n    var array = arraynums\n    var result = false\n    for i in 0..<array.count {\n        for j in i+1..<array.count {\n            if array[i] == array[j] {\n                result = true\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find whether a given array of integers contains any duplicate element.\n *\n * >>> testDuplicate([1, 2, 3, 4, 5])\n * false\n * >>> testDuplicate([1, 2, 3, 4, 4])\n * true\n * >>> testDuplicate([1, 1, 2, 2, 3, 3, 4, 4, 5])\n * true\n */\nfunc testDuplicate(arraynums : [Int]) -> Bool {\n    var array = arraynums\n    var result = false\n    for i in 0..<array.count {\n        for j in i+1..<array.count {\n            if array[i] == array[j] {\n                result = true\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find whether a given array of integers contains any duplicate element.\n *\n * >>> testDuplicate([1, 2, 3, 4, 5])\n * false\n * >>> testDuplicate([1, 2, 3, 4, 4])\n * true\n * >>> testDuplicate([1, 1, 2, 2, 3, 3, 4, 4, 5])\n"}
{"task_id": "MBSWP/20", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given number is woodball or not.\n *\n * >>> isWoodall(383)\n * true\n * >>> isWoodall(254)\n * false\n * >>> isWoodall(200)\n * false\n */\nfunc isWoodall(x : Int) -> Bool {\n    var x = x\n    var result = false\n    if x % 2 == 0 {\n        x = x / 2\n        result = true\n    }\n    while x > 1 {\n        if x % 2 == 0 {\n            x = x / 2\n            result = true\n        } else {\n            break\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given number is woodball or not.\n *\n * >>> isWoodall(383)\n * true\n * >>> isWoodall(254)\n * false\n * >>> isWoodall(200)\n * false\n */\nfunc isWoodall(x : Int) -> Bool {\n    var x = x\n    var result = false\n    if x % 2 == 0 {\n        x = x / 2\n        result = true\n    }\n    while x > 1 {\n        if x % 2 == 0 {\n            x = x / 2\n            result = true\n        } else {\n            break\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given number is woodball or not.\n *\n * >>> isWoodall(383)\n * true\n * >>> isWoodall(254)\n * false\n * >>> isWoodall(200)\n * false\n */\nfunc isWoodall(x : Int) -> Bool {\n    var x = x\n    var result = false\n    if x % 2 == 0 {\n        x = x / 2\n        result = true\n    }\n    while x > 1 {\n        if x % 2 == 0 {\n            x = x / 2\n            result = true\n        } else {\n            break\n        }\n"}
{"task_id": "MBSWP/21", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find m number of multiples of n.\n *\n * >>> multiplesOfNum(4, 3)\n * [3, 6, 9, 12]\n * >>> multiplesOfNum(2, 5)\n * [5, 10]\n * >>> multiplesOfNum(9, 2)\n * [2, 4, 6, 8, 10, 12, 14, 16, 18]\n */\nfunc multiplesOfNum(m : Int, n : Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<m {\n        result.append(n * i)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find m number of multiples of n.\n *\n * >>> multiplesOfNum(4, 3)\n * [3, 6, 9, 12]\n * >>> multiplesOfNum(2, 5)\n * [5, 10]\n * >>> multiplesOfNum(9, 2)\n * [2, 4, 6, 8, 10, 12, 14, 16, 18]\n */\nfunc multiplesOfNum(m : Int, n : Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<m {\n        result.append(n * i)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find m number of multiples of n.\n *\n * >>> multiplesOfNum(4, 3)\n * [3, 6, 9, 12]\n * >>> multiplesOfNum(2, 5)\n * [5, 10]\n * >>> multiplesOfNum(9, 2)\n * [2, 4, 6, 8, 10, 12, 14, 16, 18]\n */\nfunc multiplesOfNum(m : Int, n : Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<m {\n        result.append(n * i)\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/22", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the first duplicate element in a given array of integers.\n *\n * >>> findFirstDuplicate([1, 2, 3, 4, 4, 5])\n * 4\n * >>> findFirstDuplicate([1, 2, 3, 4])\n * -1\n * >>> findFirstDuplicate([1, 1, 2, 3, 3, 2, 2])\n * 1\n */\nfunc findFirstDuplicate(nums : [Int]) -> Int {\n    var nums = nums\n    nums.sort()\n    for i in 0..<nums.count {\n        if i < nums.count - 1 && nums[i] == nums[i + 1] {\n            return nums[i]\n        }\n    }\n    return -1\n}\n"}
{"task_id": "MBSWP/23", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum sum of elements of list in a list of lists.\n *\n * >>> maximumSum([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n * 33\n * >>> maximumSum([[0, 1, 1], [1, 1, 2], [3, 2, 1]])\n * 6\n * >>> maximumSum([[0, 1, 3], [1, 2, 1], [9, 8, 2], [0, 1, 0], [6, 4, 8]])\n * 19\n */\nfunc maximumSum(list1 : [[Int]]) -> Int {\n    var maxSum = 0\n    var sum = 0\n    for list in list1 {\n        for element in list {\n            sum += element\n            if sum > maxSum {\n                maxSum = sum\n            }\n        }\n        sum = 0\n    }\n    return maxSum\n}\n\nprint(maximumSum([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]))\nprint(maximumSum([[0, 1, 1], [1, 1, 2], [3, 2, 1]]))\nprint(maximumSum([[0, 1, 3], [1, 2, 1], [9, 8, 2], [0, 1, 0], [6, 4, 8]]))\n"}
{"task_id": "MBSWP/24", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given binary number to its decimal equivalent.\n *\n * >>> binaryToDecimal(100)\n * 4\n * >>> binaryToDecimal(1011)\n * 11\n * >>> binaryToDecimal(1101101)\n * 109\n */\nfunc binaryToDecimal(binary : Int) -> Int {\n    var decimal = 0\n    var binaryCopy = binary\n    while binaryCopy > 0 {\n        let remainder = binaryCopy % 10\n        binaryCopy /= 10\n        decimal += remainder * pow(2, binaryCopy.count - 1)\n    }\n    return decimal\n}\n"}
{"task_id": "MBSWP/25", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the product of non-repeated elements in a given array.\n *\n * >>> findProduct([1, 1, 2, 3], 4)\n * 6\n * >>> findProduct([1, 2, 3, 1, 1], 5)\n * 6\n * >>> findProduct([1, 1, 4, 5, 6], 5)\n * 120\n */\nfunc findProduct(arr : [Int], n : Int) -> Int {\n    var product = 1\n    for i in 0..<n {\n        product *= arr[i]\n    }\n    return product\n}\n"}
{"task_id": "MBSWP/26", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given tuple list has all k elements.\n *\n * >>> checkKElements([[4, 4], [4, 4, 4], [4, 4], [4, 4, 4, 4], [4]], 4)\n * true\n * >>> checkKElements([[7, 7, 7], [7, 7]], 7)\n * true\n * >>> checkKElements([[9, 9], [9, 9, 9, 9]], 7)\n * false\n */\nfunc checkKElements(testList : [[Int]], k : Int) -> Bool {\n    var count = 0\n    for i in testList {\n        if i.count == k {\n            count += 1\n        }\n    }\n    return count == testList.count\n}\n"}
{"task_id": "MBSWP/27", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove all digits from a list of strings.\n *\n * >>> remove([\"4words\", \"3letters\", \"4digits\"])\n * [\"words\", \"letters\", \"digits\"]\n * >>> remove([\"28Jan\", \"12Jan\", \"11Jan\"])\n * [\"Jan\", \"Jan\", \"Jan\"]\n * >>> remove([\"wonder1\", \"wonder2\", \"wonder3\"])\n * [\"wonder\", \"wonder\", \"wonder\"]\n */\nfunc remove(list : [String]) -> [String] {\n    var result = [String]()\n    for item in list {\n        var temp = item\n        while temp.count > 0 {\n            if let first = temp.first {\n                if let last = temp.last {\n                    if let digit = String(first).characters.first {\n                        if let digit = String(last).characters.last {\n                            if digit.isNumber {\n                                temp = temp.dropFirst()\n                                temp = temp.dropLast()\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        result.append(temp)\n    }\n    return result\n}\n\n// Test\nassert(remove([\"4words\", \"3letters\", \"4digits\"]) == [\"words\", \"letters\", \"digits\"])\nassert(remove([\"28Jan\", \"12Jan\", \"11Jan\"]) == [\"Jan\", \"Jan\", \"Jan\"])\nassert(remove([\"wonder1\", \"wonder2\", \"wonder3\"]) == [\"wonder\", \"wonder\", \"wonder\"])\n"}
{"task_id": "MBSWP/28", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find binomial co-efficient.\n *\n * >>> binomialCoeff(5, 2)\n * 10\n * >>> binomialCoeff(4, 3)\n * 4\n * >>> binomialCoeff(3, 2)\n * 3\n */\nfunc binomialCoeff(n : Int, k : Int) -> Int {\n    if k > n {\n        return 0\n    }\n    if k == 0 || k == n {\n        return 1\n    }\n    if k == 1 {\n        return n\n    }\n    if k == n - 1 {\n        return n * (n + 1) / 2\n    }\n    return binomialCoeff(n - 1, k) + binomialCoeff(n - 1, k - 1)\n}\n"}
{"task_id": "MBSWP/29", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the element occurring odd number of times.\n *\n * >>> getOddOccurrence([1, 2, 3, 1, 2, 3, 1], 7)\n * 1\n * >>> getOddOccurrence([1, 2, 3, 2, 3, 1, 3], 7)\n * 3\n * >>> getOddOccurrence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)\n * 5\n */\nfunc getOddOccurrence(arr : [Int], arrSize : Int) -> Int {\n    var oddOccurrence : Int = 0\n    var oddOccurrenceCount : Int = 0\n    var evenOccurrenceCount : Int = 0\n    for i in arr {\n        if oddOccurrenceCount == 0 {\n            oddOccurrence = i\n            oddOccurrenceCount = 1\n        } else if evenOccurrenceCount == 0 {\n            evenOccurrence = i\n            evenOccurrenceCount = 1\n        } else {\n            if i == oddOccurrence {\n                oddOccurrenceCount += 1\n            } else if i == evenOccurrence {\n                evenOccurrenceCount += 1\n            }\n        }\n    }\n    if oddOccurrenceCount == 0 {\n        return evenOccurrence\n    } else if evenOccurrenceCount == 0 {\n        return oddOccurrence\n    } else {\n        if oddOccurrenceCount > evenOccurrenceCount {\n            return oddOccurrence\n        } else {\n            return evenOccurrence\n        }\n    }\n}\n"}
{"task_id": "MBSWP/30", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count all the substrings starting and ending with same characters.\n *\n * >>> countSubstringWithEqualEnds(\"abc\")\n * 3\n * >>> countSubstringWithEqualEnds(\"abcda\")\n * 6\n * >>> countSubstringWithEqualEnds(\"ab\")\n * 2\n */\nfunc countSubstringWithEqualEnds(s : String) -> Int {\n    var count = 0\n    var start = 0\n    var end = 0\n    while end < s.count {\n        start = end\n        end = start + 1\n        while end < s.count && s[start] == s[end] {\n            end += 1\n        }\n        count += end - start\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/31", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n *\n * >>> funct([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 3)\n * [5, 7, 1]\n * >>> funct([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 1)\n * [1]\n * >>> funct([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 5)\n * [6, 5, 7, 8, 1]\n */\nfunc funct(nums : [[Int]], k : Int) -> [Int] {\n    var heap = Heap(k)\n    for num in nums {\n        for i in num {\n            heap.push(i)\n        }\n    }\n    return heap.topK()\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n *\n * >>> funct([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 3)\n * [5, 7, 1]\n * >>> funct([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],"}
{"task_id": "MBSWP/32", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the largest prime factor of a given number.\n *\n * >>> maxPrimeFactors(15)\n * 5\n * >>> maxPrimeFactors(6)\n * 3\n * >>> maxPrimeFactors(2)\n * 2\n */\nfunc maxPrimeFactors(n : Int) -> Int {\n    var n = n\n    var max = 1\n    while n % 2 == 0 {\n        max = 2\n        n = n / 2\n    }\n    var i = 3\n    while i * i <= n {\n        while n % i == 0 {\n            max = i\n            n = n / i\n        }\n        i = i + 2\n    }\n    if n > 1 {\n        max = n\n    }\n    return max\n}\n"}
{"task_id": "MBSWP/33", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert a decimal number to binary number.\n *\n * >>> decimalToBinary(10)\n * 1010\n * >>> decimalToBinary(1)\n * 1\n * >>> decimalToBinary(20)\n * 10100\n */\nfunc decimalToBinary(n : Int) -> Int {\n    var binary = 0\n    var n = n\n    while n > 0 {\n        binary = binary * 2 + n % 2\n        n = n / 2\n    }\n    return binary\n}\n"}
{"task_id": "MBSWP/34", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the missing number in a sorted array.\n *\n * >>> findMissing([1, 2, 3, 5], 4)\n * 4\n * >>> findMissing([1, 3, 4, 5], 4)\n * 2\n * >>> findMissing([1, 2, 3, 5, 6, 7], 5)\n * 4\n */\nfunc findMissing(ar : [Int], n : Int) -> Int {\n    var i = 0\n    var j = 0\n    while i < ar.count && j < ar.count {\n        if ar[i] == ar[j] {\n            i += 1\n            j += 1\n        } else if ar[i] < ar[j] {\n            i += 1\n        } else {\n            j += 1\n        }\n    }\n    return n\n}\n"}
{"task_id": "MBSWP/35", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n-th rectangular number.\n *\n * >>> findRectNum(4)\n * 20\n * >>> findRectNum(5)\n * 30\n * >>> findRectNum(6)\n * 42\n */\nfunc findRectNum(n : Int) -> Int {\n    return n * (n + 1) * (2 * n + 1) / 6\n}\n"}
{"task_id": "MBSWP/36", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the nth digit in the proper fraction of two given numbers.\n *\n * >>> findNthDigit(1, 2, 1)\n * 5\n * >>> findNthDigit(3, 5, 1)\n * 6\n * >>> findNthDigit(5, 6, 5)\n * 3\n */\nfunc findNthDigit(p : Int, q : Int, n : Int) -> Int {\n    let m = p * q\n    let k = n / m\n    let r = n % m\n    let d = r / k\n    return d\n}\n"}
{"task_id": "MBSWP/37", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a given mixed list of integers and strings.\n *\n * >>> sortMixedList([19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1])\n * [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"]\n * >>> sortMixedList([19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1])\n * [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"]\n * >>> sortMixedList([19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1])\n * [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"]\n */\nfunc sortMixedList(mixedList : [AnyHashable]) -> [AnyHashable] {\n    var sortedList = mixedList\n    sortedList.sort()\n    return sortedList\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a given mixed list of integers and strings.\n *\n * >>> sortMixedList([19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1])\n * [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"]\n * >>> sortMixedList([19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1])\n * [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"]\n * >>> sortMixedList([19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1])\n * [1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\"]\n */\nfunc sortMixedList(mixedList : [AnyHashable]) -> [AnyHashable] {\n    var sortedList = mixedList\n    sortedList.sort()\n    return sortedList\n}\n\n/**\n"}
{"task_id": "MBSWP/38", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the division of first even and odd number of a given list.\n *\n * >>> divEvenOdd([1, 3, 5, 7, 4, 1, 6, 8])\n * 4\n * >>> divEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * 2\n * >>> divEvenOdd([1, 5, 7, 9, 10])\n * 10\n */\nfunc divEvenOdd(list1 : [Int]) -> Int {\n    var evenSum = 0\n    var oddSum = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            evenSum += i\n        } else {\n            oddSum += i\n        }\n    }\n    return evenSum / oddSum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the division of first even and odd number of a given list.\n *\n * >>> divEvenOdd([1, 3, 5, 7, 4, 1, 6, 8])\n * 4\n * >>> divEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * 2\n * >>> divEvenOdd([1, 5, 7, 9, 10])\n * 10\n */\nfunc divEvenOdd(list1 : [Int]) -> Int {\n    var evenSum = 0\n    var oddSum = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            evenSum += i\n        } else {\n            oddSum += i\n        }\n    }\n    return evenSum / oddSum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the division of first even and odd number of a given list.\n *\n * >>> divEvenOdd([1, 3, 5, 7, 4, 1, 6, 8])\n * 4\n * >>> divEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * 2\n * >>> divEvenOdd([1, 5"}
{"task_id": "MBSWP/39", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n *\n * >>> rearangeString(\"aab\")\n * \"aba\"\n * >>> rearangeString(\"aabb\")\n * \"abab\"\n * >>> rearangeString(\"abccdd\")\n * \"cdabcd\"\n */\nfunc rearangeString(s : String) -> String {\n    var s = s\n    var sArr = Array(s)\n    var sArr = sArr.sort()\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }\n    var sArr = sArr.map { $0 }"}
{"task_id": "MBSWP/40", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find frequency of the elements in a given list of lists using collections module.\n *\n * >>> freqElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])\n * [2 : 3, 1 : 2, 5 : 2, 3 : 1, 4 : 1, 6 : 1, 7 : 1, 9 : 1]\n * >>> freqElement([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n * [1 : 1, 2 : 1, 3 : 1, 4 : 1, 5 : 1, 6 : 1, 7 : 1, 8 : 1, 9 : 1, 10 : 1, 11 : 1, 12 : 1]\n * >>> freqElement([[15, 20, 30, 40], [80, 90, 100, 110], [30, 30, 80, 90]])\n * [30 : 3, 80 : 2, 90 : 2, 15 : 1, 20 : 1, 40 : 1, 100 : 1, 110 : 1]\n */\nfunc freqElement(nums : [[Int]]) -> [Int: Int] {\n    var result = [Int: Int]()\n    for num in nums {\n        for element in num {\n            if let count = result[element] {\n                result[element] = count + 1\n            } else {\n                result[element] = 1\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find frequency of the elements in a given list of lists using collections module.\n *\n * >>> freqElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])\n * [2 : 3, 1 : 2, 5 : 2, 3 : 1, 4 : 1, 6 : 1, 7 : 1, 9 : 1]\n * >>> freqElement([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n *"}
{"task_id": "MBSWP/41", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to filter even numbers using lambda function.\n *\n * >>> filterEvennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [2, 4, 6, 8, 10]\n * >>> filterEvennumbers([10, 20, 45, 67, 84, 93])\n * [10, 20, 84]\n * >>> filterEvennumbers([5, 7, 9, 8, 6, 4, 3])\n * [8, 6, 4]\n */\nfunc filterEvennumbers(nums : [Int]) -> [Int] {\n    var evenNumbers = [Int]()\n    for num in nums {\n        if num % 2 == 0 {\n            evenNumbers.append(num)\n        }\n    }\n    return evenNumbers\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to filter odd numbers using lambda function.\n *\n * >>> filterOddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [1, 3, 5, 7, 9]\n * >>> filterOddnumbers([10, 20, 45, 67, 84, 93])\n * [45, 67, 93]\n * >>> filterOddnumbers([5, 7, 9, 8, 6, 4, 3])\n * [5, 7, 9]\n */\nfunc filterOddnumbers(nums : [Int]) -> [Int] {\n    var oddNumbers = [Int]()\n    for num in nums {\n        if num % 2 != 0 {\n            oddNumbers.append(num)\n        }\n    }\n    return oddNumbers\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to filter numbers greater than 10 using lambda function.\n *\n * >>> filterNumbersGreaterThanTen([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n * >>> filterNumbersGreaterThanTen([10"}
{"task_id": "MBSWP/42", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of repeated elements in a given array.\n *\n * >>> findSum([1, 2, 3, 1, 1, 4, 5, 6], 8)\n * 3\n * >>> findSum([1, 2, 3, 1, 1], 5)\n * 3\n * >>> findSum([1, 1, 2], 3)\n * 2\n */\nfunc findSum(arr : [Int], n : Int) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.countOf(i) > 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/43", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find sequences of lowercase letters joined with an underscore using regex.\n *\n * >>> textMatch(\"aab_cbbbc\")\n * \"Found a match!\"\n * >>> textMatch(\"aab_Abbbc\")\n * \"Not matched!\"\n * >>> textMatch(\"Aaab_abbbc\")\n * \"Not matched!\"\n */\nfunc textMatch(text : String) -> String {\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[A-Z]*$\"\n    let regex = \"^[A-Z]*_[a-z]*$\"\n    let regex = \"^[A-Z]*_[A-Z]*$\"\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[A-Z]*$\"\n    let regex = \"^[A-Z]*_[a-z]*$\"\n    let regex = \"^[A-Z]*_[A-Z]*$\"\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[A-Z]*$\"\n    let regex = \"^[A-Z]*_[a-z]*$\"\n    let regex = \"^[A-Z]*_[A-Z]*$\"\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[A-Z]*$\"\n    let regex = \"^[A-Z]*_[a-z]*$\"\n    let regex = \"^[A-Z]*_[A-Z]*$\"\n    let regex = \"^[a-z]*_[a-z]*$\"\n    let regex = \"^[a-z]*_[A-Z]*$\"\n    let regex = \""}
{"task_id": "MBSWP/44", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a word at the beginning of a string.\n *\n * >>> textMatchString(\" python\")\n * \"Not matched!\"\n * >>> textMatchString(\"python\")\n * \"Found a match!\"\n * >>> textMatchString(\"  lang\")\n * \"Not matched!\"\n */\nfunc textMatchString(text : String) -> String {\n    if text.hasPrefix(\"python\") {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a word at the beginning of a string.\n *\n * >>> textMatchString(\" python\")\n * \"Not matched!\"\n * >>> textMatchString(\"python\")\n * \"Found a match!\"\n * >>> textMatchString(\"  lang\")\n * \"Not matched!\"\n */\nfunc textMatchString(text : String) -> String {\n    if text.hasPrefix(\"python\") {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a word at the beginning of a string.\n *\n * >>> textMatchString(\" python\")\n * \"Not matched!\"\n * >>> textMatchString(\"python\")\n * \"Found a match!\"\n * >>> textMatchString(\"  lang\")\n * \"Not matched!\"\n */\nfunc textMatchString(text : String) -> String {\n    if text.hasPrefix(\"python\") {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a word at the beginning of a string.\n *\n * >>> textMatchString(\" python\")\n * \"Not matched!\"\n * >>> textMatchString(\"python\")\n * \"Found a match!\"\n * >>> textMatchString(\"  lang\")\n * \"Not matched!\"\n */\nfunc textMatchString(text : String) -> String {\n    if text.hasPrefix(\"python\") {\n        return \"Found a match!\"\n   "}
{"task_id": "MBSWP/45", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the gcd of the given array elements.\n *\n * >>> getGcd([2, 4, 6, 8, 16])\n * 2\n * >>> getGcd([1, 2, 3])\n * 1\n * >>> getGcd([2, 4, 6, 8])\n * 2\n */\nfunc getGcd(l : [Int]) -> Int {\n    if l.count == 1 {\n        return l[0]\n    }\n    var a = l[0]\n    for i in 1..<l.count {\n        a = gcd(a, l[i])\n    }\n    return a\n}\n\nfunc gcd(a : Int, b : Int) -> Int {\n    if b == 0 {\n        return a\n    }\n    return gcd(b, a % b)\n}\n"}
{"task_id": "MBSWP/46", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to determine whether all the numbers are different from each other are not.\n *\n * >>> testDistinct([1, 5, 7, 9])\n * true\n * >>> testDistinct([2, 4, 5, 5, 7, 9])\n * false\n * >>> testDistinct([1, 2, 3])\n * true\n */\nfunc testDistinct(data : [Int]) -> Bool {\n    var result = true\n    for i in 0..<data.count {\n        for j in i+1..<data.count {\n            if data[i] == data[j] {\n                result = false\n                break\n            }\n        }\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/47", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the last digit when factorial of a divides factorial of b.\n *\n * >>> computeLastDigit(2, 4)\n * 2\n * >>> computeLastDigit(6, 8)\n * 6\n * >>> computeLastDigit(1, 2)\n * 2\n */\nfunc computeLastDigit(a : Int, b : Int) -> Int {\n    var result = 1\n    for i in 1...a {\n        result *= i\n    }\n    for i in 1...b {\n        result /= i\n    }\n    return result % 10\n}\n"}
{"task_id": "MBSWP/48", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to set all odd bits of a given number.\n *\n * >>> oddBitSetNumber(10)\n * 15\n * >>> oddBitSetNumber(20)\n * 21\n * >>> oddBitSetNumber(30)\n * 31\n */\nfunc oddBitSetNumber(n : Int) -> Int {\n    var result = n\n    for i in stride(from: 0, through: n, by: 2) {\n        result = result | (1 << i)\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/49", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract every first or specified element from a given two-dimensional list.\n *\n * >>> specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)\n * [1, 4, 7]\n * >>> specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)\n * [3, 6, 9]\n * >>> specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)\n * [2, 5, 1]\n */\nfunc specifiedElement(nums : [[Int]], n : Int) -> [Int] {\n    var result = [Int]()\n    for i in nums {\n        result.append(i[n])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract every second or specified element from a given two-dimensional list.\n *\n * >>> specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)\n * [2, 5, 1]\n * >>> specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)\n * [3, 6, 9]\n * >>> specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)\n * [1, 4, 7]\n */\nfunc specifiedElement(nums : [[Int]], n : Int) -> [Int] {\n    var result = [Int]()\n    for i in nums {\n        result.append(i[n])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract every third or specified element from a given two-dimensional list.\n *\n * >>>"}
{"task_id": "MBSWP/50", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the list with minimum length using lambda function.\n *\n * >>> minLengthList([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n * [1, [0]]\n * >>> minLengthList([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])\n * [1, [1]]\n * >>> minLengthList([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2]])\n * [2, [1, 2]]\n */\nfunc minLengthList(inputList : [[Int]]) -> [AnyHashable] {\n    var minLength = Int.max\n    var minList = [AnyHashable]()\n    for list in inputList {\n        if list.count < minLength {\n            minLength = list.count\n            minList = list\n        }\n    }\n    return minList\n}\n\nprint(minLengthList([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))\nprint(minLengthList([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]))\nprint(minLengthList([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2]]))\n```\n\n## \ubb38\uc81c \ud480\uc774\n\n\uc81c\uc77c \ucc98\uc74c\uc5d0\ub294 \uc774\ub807\uac8c \uc0dd\uac01\ud588\ub2e4.\n\n```swift\nfunc minLengthList(inputList : [[Int]]) -> [AnyHashable] {\n    var minLength = Int.max\n    var minList = [AnyHashable]()\n    for list in inputList {\n        if list.count < minLength {\n            minLength = list.count\n            minList = list\n       "}
{"task_id": "MBSWP/51", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print check if the triangle is equilateral or not.\n *\n * >>> checkEquilateral(6, 8, 12)\n * false\n * >>> checkEquilateral(6, 6, 12)\n * false\n * >>> checkEquilateral(6, 6, 6)\n * true\n */\nfunc checkEquilateral(x : Int, y : Int, z : Int) -> Bool {\n    return x == y && y == z\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print check if the triangle is isosceles or not.\n *\n * >>> checkIsosceles(6, 8, 12)\n * false\n * >>> checkIsosceles(6, 6, 12)\n * true\n * >>> checkIsosceles(6, 6, 6)\n * false\n */\nfunc checkIsosceles(x : Int, y : Int, z : Int) -> Bool {\n    return x == y || y == z || x == z\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print check if the triangle is scalene or not.\n *\n * >>> checkScalene(6, 8, 12)\n * true\n * >>> checkScalene(6, 6, 12)\n * false\n * >>> checkScalene(6, 6, 6)\n * false\n */\nfunc checkScalene(x : Int, y : Int, z : Int) -> Bool {\n    return x != y && y != z && x != z\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print check if the triangle is right or not.\n *\n * >>> checkRight(6, 8, 12)\n * false\n * >>> checkRight(6, 6, 12)\n * true\n * >>> checkRight(6, 6, 6)\n * false\n */\nfunc checkRight(x : Int, y : Int, z : Int) -> Bool {\n    return x + y > z && y + z > x && x + z > y\n"}
{"task_id": "MBSWP/52", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate area of a parallelogram.\n *\n * >>> parallelogramArea(10, 20)\n * 200\n * >>> parallelogramArea(15, 20)\n * 300\n * >>> parallelogramArea(8, 9)\n * 72\n */\nfunc parallelogramArea(b : Int, h : Int) -> Int {\n    return b * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate area of a parallelogram.\n *\n * >>> parallelogramArea(10, 20)\n * 200\n * >>> parallelogramArea(15, 20)\n * 300\n * >>> parallelogramArea(8, 9)\n * 72\n */\nfunc parallelogramArea(b : Int, h : Int) -> Int {\n    return b * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate area of a parallelogram.\n *\n * >>> parallelogramArea(10, 20)\n * 200\n * >>> parallelogramArea(15, 20)\n * 300\n * >>> parallelogramArea(8, 9)\n * 72\n */\nfunc parallelogramArea(b : Int, h : Int) -> Int {\n    return b * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate area of a parallelogram.\n *\n * >>> parallelogramArea(10, 20)\n * 200\n * >>> parallelogramArea(15, 20)\n * 300\n * >>> parallelogramArea(8, 9)\n * 72\n */\nfunc parallelogramArea(b : Int, h : Int) -> Int {\n    return b * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate area of a parallelogram.\n *\n * >>> parallelogramArea(10, 20)\n * 200\n * >>> parallelogramArea(15, 20)\n * 300\n * >>> parallelogramArea"}
{"task_id": "MBSWP/53", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the first and last characters of a given string are equal or not.\n *\n * >>> checkEquality(\"abcda\")\n * \"Equal\"\n * >>> checkEquality(\"ab\")\n * \"Not Equal\"\n * >>> checkEquality(\"mad\")\n * \"Not Equal\"\n */\nfunc checkEquality(str : String) -> String {\n    if str.count == 0 {\n        return \"Not Equal\"\n    }\n    if str[0] == str[str.count - 1] {\n        return \"Equal\"\n    }\n    return \"Not Equal\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the first and last characters of a given string are equal or not.\n *\n * >>> checkEquality(\"abcda\")\n * \"Equal\"\n * >>> checkEquality(\"ab\")\n * \"Not Equal\"\n * >>> checkEquality(\"mad\")\n * \"Not Equal\"\n */\nfunc checkEquality(str : String) -> String {\n    if str.count == 0 {\n        return \"Not Equal\"\n    }\n    if str[0] == str[str.count - 1] {\n        return \"Equal\"\n    }\n    return \"Not Equal\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the first and last characters of a given string are equal or not.\n *\n * >>> checkEquality(\"abcda\")\n * \"Equal\"\n * >>> checkEquality(\"ab\")\n * \"Not Equal\"\n * >>> checkEquality(\"mad\")\n * \"Not Equal\"\n */\nfunc checkEquality(str : String) -> String {\n    if str.count == 0 {\n        return \"Not Equal\"\n    }\n    if str[0] == str[str.count - 1] {\n        return \"Equal\"\n    }\n    return \"Not Equal\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the first and last characters of"}
{"task_id": "MBSWP/54", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the given array by using counting sort.\n *\n * >>> countingSort([1, 23, 4, 5, 6, 7, 8])\n * [1, 4, 5, 6, 7, 8, 23]\n * >>> countingSort([12, 9, 28, 33, 69, 45])\n * [9, 12, 28, 33, 45, 69]\n * >>> countingSort([8, 4, 14, 3, 2, 1])\n * [1, 2, 3, 4, 8, 14]\n */\nfunc countingSort(myList : [Int]) -> [Int] {\n    var myListCopy = myList\n    var myListCopyCount = [Int](repeating: 0, count: 100)\n    var myListCopySorted = [Int]()\n    var myListCopySortedCount = [Int](repeating: 0, count: 100)\n    var myListCopySortedCountIndex = 0\n    var myListCopySortedCountIndexMax = 0\n    var myListCopySortedCountIndexMaxValue = 0\n    var myListCopySortedCountIndexMaxValueCount = 0\n    var myListCopySortedCountIndexMaxValueCountIndex = 0\n    var myListCopySortedCountIndexMaxValueCountIndexMax = 0\n    var myListCopySortedCountIndexMaxValueCountIndexMaxValue = 0\n    var myListCopySortedCountIndexMaxValueCountIndexMaxValueCount = 0\n    var myListCopySortedCountIndexMaxValueCountIndexMaxValueCountIndex = 0\n    var myListCopySortedCountIndexMaxValueCountIndexMaxValueCountIndexMax = 0\n    var myListCopySortedCountIndexMaxValueCountIndexMaxValueCountIndexMaxValue = 0\n    var myListCopySortedCountIndexMaxValueCountIndexMaxValueCountIndexMaxValueCount = 0\n    var myListCopySortedCountIndexMaxValueCountIndexMaxValueCountIndexMaxValueCountIndex = 0\n    var myListCopySortedCountIndexMaxValueCountIndexMaxValueCountIndexMaxValueCountIndexMax = 0\n    var myListCopySortedCountIndexMaxValueCountIndexMaxValueCountIndexMaxValueCountIndexMaxValue = 0\n    var myListCopySorted"}
{"task_id": "MBSWP/55", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find t-nth term of geometric series.\n *\n * >>> tnGp(1, 5, 2)\n * 16\n * >>> tnGp(1, 5, 4)\n * 256\n * >>> tnGp(2, 6, 3)\n * 486\n */\nfunc tnGp(a : Int, n : Int, r : Int) -> Int {\n    return a * (n - 1) * (r ** (n - 1))\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find t-nth term of harmonic series.\n *\n * >>> tnHm(1, 5, 2)\n * 16\n * >>> tnHm(1, 5, 4)\n * 256\n * >>> tnHm(2, 6, 3)\n * 486\n */\nfunc tnHm(a : Int, n : Int, r : Int) -> Int {\n    return a * (n - 1) / (r ** (n - 1))\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find t-nth term of power series.\n *\n * >>> tnPw(1, 5, 2)\n * 16\n * >>> tnPw(1, 5, 4)\n * 256\n * >>> tnPw(2, 6, 3)\n * 486\n */\nfunc tnPw(a : Int, n : Int, r : Int) -> Int {\n    return a * (n - 1) ** (r ** (n - 1))\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find t-nth term of factorial series.\n *\n * >>> tnFc(1, 5, 2)\n * 16\n * >>> tnFc(1, 5, 4)\n * 256\n * >>> tnFc(2, 6, 3)\n * 486\n */\nfunc tnFc(a : Int, n : Int, r : Int) ->"}
{"task_id": "MBSWP/56", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if a given number is one less than twice its reverse.\n *\n * >>> check(70)\n * false\n * >>> check(23)\n * false\n * >>> check(73)\n * true\n */\nfunc check(n : Int) -> Bool {\n    let reverse = n.toString().reversed()\n    let reverseOfReverse = reverse.toString().reversed()\n    return n - 2 * reverseOfReverse == 0\n}\n"}
{"task_id": "MBSWP/57", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the largest number that can be formed with the given digits.\n *\n * >>> findMaxNum([1, 2, 3], 3)\n * 321\n * >>> findMaxNum([4, 5, 6, 1], 4)\n * 6541\n * >>> findMaxNum([1, 2, 3, 9], 4)\n * 9321\n */\nfunc findMaxNum(arr : [Int], n : Int) -> Int {\n    var max = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            for k in j+1..<n {\n                for l in k+1..<n {\n                    if arr[i] + arr[j] + arr[k] + arr[l] > max {\n                        max = arr[i] + arr[j] + arr[k] + arr[l]\n                    }\n                }\n            }\n        }\n    }\n    return max\n}\n"}
{"task_id": "MBSWP/58", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given two integers have opposite sign or not.\n *\n * >>> oppositeSigns(1, -2)\n * true\n * >>> oppositeSigns(3, 2)\n * false\n * >>> oppositeSigns(-10, -10)\n * false\n */\nfunc oppositeSigns(x : Int, y : Int) -> Bool {\n    return x * y < 0\n}\n"}
{"task_id": "MBSWP/59", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth octagonal number.\n *\n * >>> isOctagonal(5)\n * 65\n * >>> isOctagonal(10)\n * 280\n * >>> isOctagonal(15)\n * 645\n */\nfunc isOctagonal(n : Int) -> Int {\n    return n * (n + 1) * (2 * n + 1) / 2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth pentagonal number.\n *\n * >>> isPentagonal(5)\n * 30\n * >>> isPentagonal(10)\n * 210\n * >>> isPentagonal(15)\n * 1260\n */\nfunc isPentagonal(n : Int) -> Int {\n    return n * (3 * n - 1) / 2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth hexagonal number.\n *\n * >>> isHexagonal(5)\n * 45\n * >>> isHexagonal(10)\n * 880\n * >>> isHexagonal(15)\n * 1330\n */\nfunc isHexagonal(n : Int) -> Int {\n    return n * (2 * n - 1)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth heptagonal number.\n *\n * >>> isHeptagonal(5)\n * 40\n * >>> isHeptagonal(10)\n * 840\n * >>> isHeptagonal(15)\n * 1820\n */\nfunc isHeptagonal(n : Int) -> Int {\n    return n * (5 * n - 3) / 2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth octagonal number.\n *\n * >>> isOctagonal(5)\n * 65\n * >>> isOctagonal(10)\n * 280\n * >>> isOctagonal(15)\n * 645\n */\nfunc isOctagonal(n : Int)"}
{"task_id": "MBSWP/60", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n *\n * >>> maxLenSub([2, 5, 6, 3, 7, 6, 5, 8], 8)\n * 5\n * >>> maxLenSub([-2, -1, 5, -1, 4, 0, 3], 7)\n * 4\n * >>> maxLenSub([9, 11, 13, 15, 18], 5)\n * 1\n */\nfunc maxLenSub(arr : [Int], n : Int) -> Int {\n    var maxLen = 0\n    var maxStart = 0\n    var maxEnd = 0\n    var start = 0\n    var end = 0\n    var len = 0\n    var sum = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n"}
{"task_id": "MBSWP/61", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count number of substrings with the sum of digits equal to their length.\n *\n * >>> countSubstrings(\"112112\", 6)\n * 6\n * >>> countSubstrings(\"111\", 3)\n * 6\n * >>> countSubstrings(\"1101112\", 7)\n * 12\n */\nfunc countSubstrings(s : String, n : Int) -> Int {\n    var count = 0\n    var sum = 0\n    var start = 0\n    var end = 0\n    var length = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s ="}
{"task_id": "MBSWP/62", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find smallest number in a list.\n *\n * >>> smallestNum([10, 20, 1, 45, 99])\n * 1\n * >>> smallestNum([1, 2, 3])\n * 1\n * >>> smallestNum([45, 46, 50, 60])\n * 45\n */\nfunc smallestNum(xs : [Int]) -> Int {\n    var smallest = xs[0]\n    for x in xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find largest number in a list.\n *\n * >>> largestNum([10, 20, 1, 45, 99])\n * 99\n * >>> largestNum([1, 2, 3])\n * 3\n * >>> largestNum([45, 46, 50, 60])\n * 60\n */\nfunc largestNum(xs : [Int]) -> Int {\n    var largest = xs[0]\n    for x in xs {\n        if x > largest {\n            largest = x\n        }\n    }\n    return largest\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find smallest number in a list.\n *\n * >>> smallestNum([10, 20, 1, 45, 99])\n * 1\n * >>> smallestNum([1, 2, 3])\n * 1\n * >>> smallestNum([45, 46, 50, 60])\n * 45\n */\nfunc smallestNum(xs : [Int]) -> Int {\n    var smallest = xs[0]\n    for x in xs {\n        if x < smallest {\n            smallest = x\n        }\n    }\n    return smallest\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find largest number in a list.\n *\n * >>> largestNum([10, 20, 1, 45, 99])\n * 99\n * >>> largestNum([1, 2, 3])\n * 3\n * >>> largestNum([45, 46, 50, 60])\n *"}
{"task_id": "MBSWP/63", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum difference between available pairs in the given tuple list.\n *\n * >>> maxDifference([[3, 5], [1, 7], [10, 3], [1, 2]])\n * 7\n * >>> maxDifference([[4, 6], [2, 17], [9, 13], [11, 12]])\n * 15\n * >>> maxDifference([[12, 35], [21, 27], [13, 23], [41, 22]])\n * 23\n */\nfunc maxDifference(testList : [[Int]]) -> Int {\n    var maxDiff : Int = 0\n    for i in 0..<testList.count {\n        for j in i+1..<testList.count {\n            let diff = testList[i][1] - testList[j][0]\n            if diff > maxDiff {\n                maxDiff = diff\n            }\n        }\n    }\n    return maxDiff\n}\n"}
{"task_id": "MBSWP/64", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of tuples using lambda.\n *\n * >>> subjectMarks([[\"English\", 88], [\"Science\", 90], [\"Maths\", 97], [\"Social sciences\", 82]])\n * [[\"Social sciences\", 82], [\"English\", 88], [\"Science\", 90], [\"Maths\", 97]]\n * >>> subjectMarks([[\"Telugu\", 49], [\"Hindhi\", 54], [\"Social\", 33]])\n * [[\"Social\", 33], [\"Telugu\", 49], [\"Hindhi\", 54]]\n * >>> subjectMarks([[\"Physics\", 96], [\"Chemistry\", 97], [\"Biology\", 45]])\n * [[\"Biology\", 45], [\"Physics\", 96], [\"Chemistry\", 97]]\n */\nfunc subjectMarks(subjectmarks : [[AnyHashable]]) -> [[AnyHashable]] {\n    var sortedSubjectMarks = subjectmarks\n    sortedSubjectMarks.sort(by: { $0[1] < $1[1] })\n    return sortedSubjectMarks\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of tuples using lambda.\n *\n * >>> subjectMarks([[\"English\", 88], [\"Science\", 90], [\"Maths\", 97], [\"Social sciences\", 82]])\n * [[\"Social sciences\", 82], [\"English\", 88], [\"Science\", 90], [\"Maths\", 97]]\n * >>> subjectMarks([[\"Telugu\", 49], [\"Hindhi\", 54], [\"Social\", 33]])\n * [[\"Social\", 33], [\"Telugu\", 49], [\"Hindhi\", 54]]\n * >>> subjectMarks([[\"Physics\", 96], [\"Chemistry\", 97], [\"Biology\", 45]])\n * [[\"Biology\", 45], [\"Physics\", 96], [\"Chemistry\", 97]]\n */\nfunc subjectMarks(subjectmarks : [[AnyHashable]]) -> [[AnyHashable]] {\n    var sortedSubjectMarks = subjectmarks\n    sortedSubjectMarks.sort(by: { $0[1] < $1[1] })\n    return sortedSubjectMarks\n}\n\n/**\n * You are an expert Swift"}
{"task_id": "MBSWP/65", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function of recursion list sum.\n *\n * >>> recursiveListSum([1, 2, [3, 4], [5, 6]])\n * 21\n * >>> recursiveListSum([7, 10, [15, 14], [19, 41]])\n * 106\n * >>> recursiveListSum([10, 20, [30, 40], [50, 60]])\n * 210\n */\nfunc recursiveListSum(dataList : [AnyHashable]) -> Int {\n    if let data = dataList.first {\n        if let dataList = data as? [AnyHashable] {\n            return recursiveListSum(dataList)\n        } else {\n            return data as! Int\n        }\n    } else {\n        return 0\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function of recursion list sum.\n *\n * >>> recursiveListSum([1, 2, [3, 4], [5, 6]])\n * 21\n * >>> recursiveListSum([7, 10, [15, 14], [19, 41]])\n * 106\n * >>> recursiveListSum([10, 20, [30, 40], [50, 60]])\n * 210\n */\nfunc recursiveListSum(dataList : [AnyHashable]) -> Int {\n    if let data = dataList.first {\n        if let dataList = data as? [AnyHashable] {\n            return recursiveListSum(dataList)\n        } else {\n            return data as! Int\n        }\n    } else {\n        return 0\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function of recursion list sum.\n *\n * >>> recursiveListSum([1, 2, [3, 4], [5, 6]])\n * 21\n * >>> recursiveListSum([7, 10, [15, 14], [19, 41]])\n * 106\n * >>> recursiveListSum([10, 20, [30, 40], [50, 60]])\n * 210\n */\nfunc recursiveListSum(dataList : [AnyHashable]) -> Int {\n    if let"}
{"task_id": "MBSWP/66", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count positive numbers in a list.\n *\n * >>> posCount([1, -2, 3, -4])\n * 2\n * >>> posCount([3, 4, 5, -1])\n * 3\n * >>> posCount([1, 2, 3, 4])\n * 4\n */\nfunc posCount(list : [Int]) -> Int {\n    var count = 0\n    for i in list {\n        if i > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/67", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the number of ways to partition a set of bell numbers.\n *\n * >>> bellNumber(2)\n * 2\n * >>> bellNumber(10)\n * 115975\n * >>> bellNumber(56)\n * 6775685320645824322581483068371419745979053216268760300\n */\nfunc bellNumber(n : Int) -> Int {\n    var result = 1\n    for i in 1..<n {\n        result *= bellNumber(i)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the number of ways to partition a set of bell numbers.\n *\n * >>> bellNumber(2)\n * 2\n * >>> bellNumber(10)\n * 115975\n * >>> bellNumber(56)\n * 6775685320645824322581483068371419745979053216268760300\n */\nfunc bellNumber(n : Int) -> Int {\n    var result = 1\n    for i in 1..<n {\n        result *= bellNumber(i)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the number of ways to partition a set of bell numbers.\n *\n * >>> bellNumber(2)\n * 2\n * >>> bellNumber(10)\n * 115975\n * >>> bellNumber(56)\n * 6775685320645824322581483068371419745979053216268760300\n */\nfunc bellNumber(n : Int) -> Int {\n    var result = 1\n    for i in 1..<n {\n        result *= bellNumber(i)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the number of ways to partition a set of bell numbers.\n *\n * >>> bellNumber(2)\n * 2\n * >>> bellNumber(10)\n * 115975\n * >>> bellNumber(56)\n * 677568"}
{"task_id": "MBSWP/68", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given array is monotonic or not.\n *\n * >>> isMonotonic([6, 5, 4, 4])\n * true\n * >>> isMonotonic([1, 2, 2, 3])\n * true\n * >>> isMonotonic([1, 3, 2])\n * false\n */\nfunc isMonotonic(a : [Int]) -> Bool {\n    var isIncreasing = true\n    var isDecreasing = true\n    for i in 0..<a.count {\n        if a[i] > a[i+1] {\n            isIncreasing = false\n        }\n        if a[i] < a[i+1] {\n            isDecreasing = false\n        }\n    }\n    return isIncreasing || isDecreasing\n}\n"}
{"task_id": "MBSWP/69", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether a list contains the given sublist or not.\n *\n * >>> isSublist([2, 4, 3, 5, 7], [3, 7])\n * false\n * >>> isSublist([2, 4, 3, 5, 7], [4, 3])\n * true\n * >>> isSublist([2, 4, 3, 5, 7], [1, 6])\n * false\n */\nfunc isSublist(l : [Int], s : [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether a list contains the given sublist or not.\n *\n * >>> isSublist([2, 4, 3, 5, 7], [3, 7])\n * false\n * >>> isSublist([2, 4, 3, 5, 7], [4, 3])\n * true\n * >>> isSublist([2, 4, 3, 5, 7], [1, 6])\n * false\n */\nfunc isSublist(l : [Int], s : [Int]) -> Bool {\n    var i = 0\n    var j = 0\n    while i < l.count && j < s.count {\n        if l[i] == s[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return j == s.count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether a list contains the given sublist or not.\n *\n * >>> isSublist([2, 4, 3, 5, 7], [3, 7])\n * false\n * >>> isSublist([2, 4, 3, 5, 7], [4, 3])\n * true\n"}
{"task_id": "MBSWP/70", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find whether all the given tuples have equal length or not.\n *\n * >>> getEqual([[11, 22, 33], [44, 55, 66]], 3)\n * \"All tuples have same length\"\n * >>> getEqual([[1, 2, 3], [4, 5, 6, 7]], 3)\n * \"All tuples do not have same length\"\n * >>> getEqual([[1, 2], [3, 4]], 2)\n * \"All tuples have same length\"\n */\nfunc getEqual(input : [[Int]], k : Int) -> String {\n    var flag = true\n    for i in input {\n        if i.count != k {\n            flag = false\n            break\n        }\n    }\n    if flag {\n        return \"All tuples have same length\"\n    } else {\n        return \"All tuples do not have same length\"\n    }\n}\n"}
{"task_id": "MBSWP/71", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of elements using comb sort.\n *\n * >>> combSort([5, 15, 37, 25, 79])\n * [5, 15, 25, 37, 79]\n * >>> combSort([41, 32, 15, 19, 22])\n * [15, 19, 22, 32, 41]\n * >>> combSort([99, 15, 13, 47])\n * [13, 15, 47, 99]\n */\nfunc combSort(nums : [Int]) -> [Int] {\n    var i = 0\n    var gap = nums.count\n    var swapped = true\n    while gap > 1 || swapped {\n        if gap > 1 {\n            gap = (gap * 10) / 13\n            if gap == 10 {\n                gap = 9\n            }\n        }\n        swapped = false\n        for i in 0..<nums.count-gap {\n            if nums[i] > nums[i+gap] {\n                let temp = nums[i]\n                nums[i] = nums[i+gap]\n                nums[i+gap] = temp\n                swapped = true\n            }\n        }\n    }\n    return nums\n}\n"}
{"task_id": "MBSWP/72", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number can be represented as difference of two squares or not.\n *\n * >>> difSquare(5)\n * true\n * >>> difSquare(10)\n * false\n * >>> difSquare(15)\n * true\n */\nfunc difSquare(n : Int) -> Bool {\n    let sqrt = sqrt(Double(n))\n    return sqrt == Int(sqrt)\n}\n"}
{"task_id": "MBSWP/73", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to split the given string with multiple delimiters by using regex.\n *\n * >>> multipleSplit(\"Forces of the \\ndarkness*are coming into the play.\")\n * [\"Forces of the \", \"darkness\", \"are coming into the play.\"]\n * >>> multipleSplit(\"Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\")\n * [\"Mi Box runs on the \", \" Latest android\", \"which has google assistance and chromecast.\"]\n * >>> multipleSplit(\"Certain services\\nare subjected to change*over the seperate subscriptions.\")\n * [\"Certain services\", \"are subjected to change\", \"over the seperate subscriptions.\"]\n */\nfunc multipleSplit(text : String) -> [String] {\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*\"\n    let regex = \"\\\\s*\\\\*\\\\s*"}
{"task_id": "MBSWP/74", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether it follows the sequence given in the patterns array.\n *\n * >>> isSamepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"])\n * true\n * >>> isSamepatterns([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"])\n * false\n * >>> isSamepatterns([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"])\n * false\n */\nfunc isSamepatterns(colors : [String], patterns : [String]) -> Bool {\n    var same = true\n    for i in 0..<colors.count {\n        if patterns[i] != colors[i] {\n            same = false\n            break\n        }\n    }\n    return same\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether it follows the sequence given in the patterns array.\n *\n * >>> isSamepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"])\n * true\n * >>> isSamepatterns([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"])\n * false\n * >>> isSamepatterns([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"])\n * false\n */\nfunc isSamepatterns(colors : [String], patterns : [String]) -> Bool {\n    var same = true\n    for i in 0..<colors.count {\n        if patterns[i] != colors[i] {\n            same = false\n            break\n        }\n    }\n    return same\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether it follows the sequence given in the patterns array.\n *\n * >>> isSamepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"])\n * true\n * >>> isSamepatterns([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"])\n * false\n * >>> isSamepattern"}
{"task_id": "MBSWP/75", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n *\n * >>> findTuples([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6)\n * \"[(6, 24, 12)]\"\n * >>> findTuples([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5)\n * \"[(5, 25, 30)]\"\n * >>> findTuples([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4)\n * \"[(8, 16, 4)]\"\n */\nfunc findTuples(testList : [[Int]], k : Int) -> String {\n    var result = \"\"\n    var temp = [Int]()\n    for i in 0..<testList.count {\n        for j in 0..<testList[i].count {\n            if testList[i][j] % k == 0 {\n                temp.append(testList[i][j])\n            }\n        }\n        if temp.count == testList[i].count {\n            result += \"[\"\n            for j in 0..<temp.count {\n                result += \"\\(temp[j])\"\n                if j != temp.count - 1 {\n                    result += \", \"\n                }\n            }\n            result += \"]\"\n            temp = [Int]()\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum number of consecutive 1s in the given list of integers.\n *\n * >>> findMaxConsecutiveOnes([1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}
{"task_id": "MBSWP/76", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of squares in a rectangle.\n *\n * >>> countSquares(4, 3)\n * 20\n * >>> countSquares(2, 2)\n * 5\n * >>> countSquares(1, 1)\n * 1\n */\nfunc countSquares(m : Int, n : Int) -> Int {\n    var count = 0\n    for i in 0..<m {\n        for j in 0..<n {\n            if i == 0 || j == 0 {\n                count += 1\n            } else {\n                count += (i * j)\n            }\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/77", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the difference between sum of even and odd digits.\n *\n * >>> isDiff(1212112)\n * true\n * >>> isDiff(1212)\n * false\n */\nfunc isDiff(n : Int) -> Bool {\n    var sumEven = 0\n    var sumOdd = 0\n    var n = n\n    while n > 0 {\n        let digit = n % 10\n        if digit % 2 == 0 {\n            sumEven += digit\n        } else {\n            sumOdd += digit\n        }\n        n /= 10\n    }\n    return sumEven != sumOdd\n}\n"}
{"task_id": "MBSWP/78", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find number of integers with odd number of set bits.\n *\n * >>> countWithOddSetbits(5)\n * 3\n * >>> countWithOddSetbits(10)\n * 5\n * >>> countWithOddSetbits(15)\n * 8\n */\nfunc countWithOddSetbits(n : Int) -> Int {\n    var count = 0\n    var i = 1\n    while i <= n {\n        if i.countSetBits() % 2 == 1 {\n            count += 1\n        }\n        i *= 2\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/79", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the length of the word is odd or not.\n *\n * >>> wordLen(\"Hadoop\")\n * false\n * >>> wordLen(\"great\")\n * true\n * >>> wordLen(\"structure\")\n * true\n */\nfunc wordLen(s : String) -> Bool {\n    return s.count % 2 == 1\n}\n"}
{"task_id": "MBSWP/80", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth tetrahedral number.\n *\n * >>> tetrahedralNumber(5)\n * 35.0\n * >>> tetrahedralNumber(6)\n * 56.0\n * >>> tetrahedralNumber(7)\n * 84.0\n */\nfunc tetrahedralNumber(n : Int) -> Double {\n    return (n + 1) * (n + 2) * (n + 3) / 6\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth pentagonal number.\n *\n * >>> pentagonalNumber(5)\n * 30.0\n * >>> pentagonalNumber(6)\n * 50.0\n * >>> pentagonalNumber(7)\n * 80.0\n */\nfunc pentagonalNumber(n : Int) -> Double {\n    return (n + 1) * (3 * n + 1) / 2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth hexagonal number.\n *\n * >>> hexagonalNumber(5)\n * 40.0\n * >>> hexagonalNumber(6)\n * 60.0\n * >>> hexagonalNumber(7)\n * 90.0\n */\nfunc hexagonalNumber(n : Int) -> Double {\n    return (n + 1) * (2 * n + 1)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth heptagonal number.\n *\n * >>> heptagonalNumber(5)\n * 45.0\n * >>> heptagonalNumber(6)\n * 65.0\n * >>> heptagonalNumber(7)\n * 95.0\n */\nfunc heptagonalNumber(n : Int) -> Double {\n    return (n + 1) * (5 * n - 3) / 2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth octagonal number.\n *\n * >>> octagonalNumber(5)\n * 50.0\n * >>> octagonal"}
{"task_id": "MBSWP/81", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to zip the two given tuples.\n *\n * >>> zipTuples([7, 8, 4, 5, 9, 10], [1, 5, 6])\n * [[7, 1], [8, 5], [4, 6], [5, 1], [9, 5], [10, 6]]\n * >>> zipTuples([8, 9, 5, 6, 10, 11], [2, 6, 7])\n * [[8, 2], [9, 6], [5, 7], [6, 2], [10, 6], [11, 7]]\n * >>> zipTuples([9, 10, 6, 7, 11, 12], [3, 7, 8])\n * [[9, 3], [10, 7], [6, 8], [7, 3], [11, 7], [12, 8]]\n */\nfunc zipTuples(testTup1 : [Int], testTup2 : [Int]) -> [[Int]] {\n    var result : [[Int]] = []\n    for i in 0..<testTup1.count {\n        result.append([testTup1[i], testTup2[i]])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to zip the two given lists.\n *\n * >>> zipLists([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n * [[\"a\", \"1\"], [\"b\", \"2\"], [\"c\", \"3\"], [\"d\", \"4\"], [\"e\", \"5\"], [\"f\", \"6\"]]\n * >>> zipLists([\"g\", \"h\", \"i\", \"j\", \"k\", \"l\"], [\"7\", \"8\", \"9\", \"0\", \"1\", \"2\"])\n * [[\"g\", \"7\"], [\"h\", \"8\"], [\"i\", \"9\"], [\"j\", \"0\"], [\"k\", \"1\"], [\"l\", \"2\"]]\n * >>> zipLists([\"m\", \"n\", \"o\", \"p\", \"q"}
{"task_id": "MBSWP/82", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a sphere.\n *\n * >>> volumeSphere(10)\n * 4188.790204786391\n * >>> volumeSphere(25)\n * 65449.84694978735\n * >>> volumeSphere(20)\n * 33510.32163829113\n */\nfunc volumeSphere(r : Int) -> Double {\n    return 4.0 * 3.14159 * r * r * r / 3\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cylinder.\n *\n * >>> volumeCylinder(10, 20)\n * 4188.790204786391\n * >>> volumeCylinder(25, 30)\n * 65449.84694978735\n * >>> volumeCylinder(20, 25)\n * 33510.32163829113\n */\nfunc volumeCylinder(r : Int, h : Int) -> Double {\n    return 3.14159 * r * r * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cone.\n *\n * >>> volumeCone(10, 20)\n * 4188.790204786391\n * >>> volumeCone(25, 30)\n * 65449.84694978735\n * >>> volumeCone(20, 25)\n * 33510.32163829113\n */\nfunc volumeCone(r : Int, h : Int) -> Double {\n    return 3.14159 * r * r * h / 3\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cube.\n *\n * >>> volumeCube(10)\n * 4188.790204786391\n * >>> volumeCube(25)\n * 65449.84694978735\n * >>> volumeCube(20)\n * 33510.32163829113\n */\nfunc volumeCube(s : Int) -> Double {\n    return s * s * s\n}\n\n/**\n * You are an expert Swift programmer"}
{"task_id": "MBSWP/83", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the character made by adding all the characters of the given string.\n *\n * >>> getChar(\"abc\")\n * \"f\"\n * >>> getChar(\"gfg\")\n * \"t\"\n * >>> getChar(\"ab\")\n * \"c\"\n */\nfunc getChar(strr : String) -> String {\n    var sum = 0\n    for char in strr {\n        sum += char.rawValue\n    }\n    return String(sum)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the character made by adding all the characters of the given string.\n *\n * >>> getChar(\"abc\")\n * \"f\"\n * >>> getChar(\"gfg\")\n * \"t\"\n * >>> getChar(\"ab\")\n * \"c\"\n */\nfunc getChar(strr : String) -> String {\n    var sum = 0\n    for char in strr {\n        sum += char.rawValue\n    }\n    return String(sum)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the character made by adding all the characters of the given string.\n *\n * >>> getChar(\"abc\")\n * \"f\"\n * >>> getChar(\"gfg\")\n * \"t\"\n * >>> getChar(\"ab\")\n * \"c\"\n */\nfunc getChar(strr : String) -> String {\n    var sum = 0\n    for char in strr {\n        sum += char.rawValue\n    }\n    return String(sum)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the character made by adding all the characters of the given string.\n *\n * >>> getChar(\"abc\")\n * \"f\"\n * >>> getChar(\"gfg\")\n * \"t\"\n * >>> getChar(\"ab\")\n * \"c\"\n */\nfunc getChar(strr : String) -> String {\n    var sum = 0\n    for char in strr {\n        sum += char.rawValue\n   "}
{"task_id": "MBSWP/84", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n-th number in newman conway sequence.\n *\n * >>> sequence(10)\n * 6\n * >>> sequence(2)\n * 1\n * >>> sequence(3)\n * 2\n */\nfunc sequence(n : Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    return sequence(n - 1) + sequence(n - sequence(n - 1))\n}\n"}
{"task_id": "MBSWP/85", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the surface area of a sphere.\n *\n * >>> surfaceareaSphere(10)\n * 1256.6370614359173\n * >>> surfaceareaSphere(15)\n * 2827.4333882308138\n * >>> surfaceareaSphere(20)\n * 5026.548245743669\n */\nfunc surfaceareaSphere(r : Int) -> Double {\n    return 4 * 3.14159 * r * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a sphere.\n *\n * >>> volumeSphere(10)\n * 314.1592653589793\n * >>> volumeSphere(15)\n * 907.2074683539249\n * >>> volumeSphere(20)\n * 2431.4165338976988\n */\nfunc volumeSphere(r : Int) -> Double {\n    return (4.0 / 3.0) * 3.14159 * r * r * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the surface area of a cylinder.\n *\n * >>> surfaceareaCylinder(10, 20)\n * 1256.6370614359173\n * >>> surfaceareaCylinder(15, 20)\n * 2827.4333882308138\n * >>> surfaceareaCylinder(20, 20)\n * 5026.548245743669\n */\nfunc surfaceareaCylinder(r : Int, h : Int) -> Double {\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cylinder.\n *\n * >>> volumeCylinder(10, 20)\n * 314.1592653589793\n * >>> volumeCylinder(15, 20)\n * 907.2074683539249\n * >>> volumeCylinder(20, 20)\n * 2431.4165338976988\n */\nfunc volumeCylinder(r"}
{"task_id": "MBSWP/86", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find nth centered hexagonal number.\n *\n * >>> centeredHexagonalNumber(10)\n * 271\n * >>> centeredHexagonalNumber(2)\n * 7\n * >>> centeredHexagonalNumber(9)\n * 217\n */\nfunc centeredHexagonalNumber(n : Int) -> Int {\n    return (n * (2 * n - 1)) + (n * (n - 1))\n}\n"}
{"task_id": "MBSWP/87", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to merge three dictionaries into a single expression.\n *\n * >>> mergeDictionariesThree([\"R\" : \"Red\", \"B\" : \"Black\", \"P\" : \"Pink\"], [\"G\" : \"Green\", \"W\" : \"White\"], [\"O\" : \"Orange\", \"W\" : \"White\", \"B\" : \"Black\"])\n * [\"B\" : \"Black\", \"R\" : \"Red\", \"P\" : \"Pink\", \"G\" : \"Green\", \"W\" : \"White\", \"O\" : \"Orange\"]\n * >>> mergeDictionariesThree([\"R\" : \"Red\", \"B\" : \"Black\", \"P\" : \"Pink\"], [\"G\" : \"Green\", \"W\" : \"White\"], [\"L\" : \"lavender\", \"B\" : \"Blue\"])\n * [\"W\" : \"White\", \"P\" : \"Pink\", \"B\" : \"Black\", \"R\" : \"Red\", \"G\" : \"Green\", \"L\" : \"lavender\"]\n * >>> mergeDictionariesThree([\"R\" : \"Red\", \"B\" : \"Black\", \"P\" : \"Pink\"], [\"L\" : \"lavender\", \"B\" : \"Blue\"], [\"G\" : \"Green\", \"W\" : \"White\"])\n * [\"B\" : \"Black\", \"P\" : \"Pink\", \"R\" : \"Red\", \"G\" : \"Green\", \"L\" : \"lavender\", \"W\" : \"White\"]\n */\nfunc mergeDictionariesThree(dict1 : [String: String], dict2 : [String: String], dict3 : [String: String]) -> [String: String] {\n    var result = [String: String]()\n    for (key, value) in dict1 {\n        result[key] = value\n    }\n    for (key, value) in dict2 {\n        result[key] = value\n    }\n    for (key, value) in dict3 {\n        result[key] = value\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to merge two dictionaries into a"}
{"task_id": "MBSWP/88", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get the frequency of the elements in a list.\n *\n * >>> freqCount([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30])\n * [10 : 4, 20 : 4, 40 : 2, 50 : 2, 30 : 1]\n * >>> freqCount([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4])\n * [1 : 3, 2 : 2, 3 : 3, 4 : 3]\n * >>> freqCount([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5])\n * [10 : 1, 5 : 3, 6 : 2, 7 : 2, 4 : 2, 9 : 2]\n */\nfunc freqCount(list1 : [Int]) -> [Int: Int] {\n    var result = [Int: Int]()\n    for i in list1 {\n        if result[i] == nil {\n            result[i] = 1\n        } else {\n            result[i] = result[i]! + 1\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get the frequency of the elements in a list.\n *\n * >>> freqCount([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30])\n * [10 : 4, 20 : 4, 40 : 2, 50 : 2, 30 : 1]\n * >>> freqCount([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4])\n * [1 : 3, 2 : 2, 3 : 3, 4 : 3]\n * >>> freqCount([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5])\n * [10 : 1, 5 : 3, 6 : 2, 7 : 2, 4 : 2, 9 : 2]\n */\nfunc freqCount(list1 : [Int]) -> [Int: Int] {\n    var result = ["}
{"task_id": "MBSWP/89", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the closest smaller number than n.\n *\n * >>> closestNum(11)\n * 10\n * >>> closestNum(7)\n * 6\n * >>> closestNum(12)\n * 11\n */\nfunc closestNum(n : Int) -> Int {\n    var closest = n\n    for i in 1...n {\n        if i < n && i > closest {\n            closest = i\n        }\n    }\n    return closest\n}\n"}
{"task_id": "MBSWP/90", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the length of the longest word.\n *\n * >>> lenLog([\"python\", \"PHP\", \"bigdata\"])\n * 7\n * >>> lenLog([\"a\", \"ab\", \"abc\"])\n * 3\n * >>> lenLog([\"small\", \"big\", \"tall\"])\n * 5\n */\nfunc lenLog(list1 : [String]) -> Int {\n    var max = 0\n    for i in list1 {\n        if i.count > max {\n            max = i.count\n        }\n    }\n    return max\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the length of the longest word.\n *\n * >>> lenLog([\"python\", \"PHP\", \"bigdata\"])\n * 7\n * >>> lenLog([\"a\", \"ab\", \"abc\"])\n * 3\n * >>> lenLog([\"small\", \"big\", \"tall\"])\n * 5\n */\nfunc lenLog(list1 : [String]) -> Int {\n    var max = 0\n    for i in list1 {\n        if i.count > max {\n            max = i.count\n        }\n    }\n    return max\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the length of the longest word.\n *\n * >>> lenLog([\"python\", \"PHP\", \"bigdata\"])\n * 7\n * >>> lenLog([\"a\", \"ab\", \"abc\"])\n * 3\n * >>> lenLog([\"small\", \"big\", \"tall\"])\n * 5\n */\nfunc lenLog(list1 : [String]) -> Int {\n    var max = 0\n    for i in list1 {\n        if i.count > max {\n            max = i.count\n        }\n    }\n    return max\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the length of the longest word.\n *\n * >>> lenLog([\"python\", \"PHP\", \"bigdata\"])\n"}
{"task_id": "MBSWP/91", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a substring is present in a given list of string values.\n *\n * >>> findSubstring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\")\n * true\n * >>> findSubstring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\")\n * false\n * >>> findSubstring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\")\n * true\n */\nfunc findSubstring(str1 : [String], subStr : String) -> Bool {\n    var result = false\n    for str in str1 {\n        if str.hasPrefix(subStr) {\n            result = true\n            break\n        }\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/92", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given number is undulating or not.\n *\n * >>> isUndulating(\"1212121\")\n * true\n * >>> isUndulating(\"1991\")\n * false\n * >>> isUndulating(\"121\")\n * true\n */\nfunc isUndulating(n : String) -> Bool {\n    var n = n\n    var count = 0\n    var flag = false\n    for i in 0..<n.count {\n        if n[i] == n[i+1] {\n            count += 1\n        }\n        if count == 2 {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given number is undulating or not.\n *\n * >>> isUndulating(\"1212121\")\n * true\n * >>> isUndulating(\"1991\")\n * false\n * >>> isUndulating(\"121\")\n * true\n */\nfunc isUndulating(n : String) -> Bool {\n    var n = n\n    var count = 0\n    var flag = false\n    for i in 0..<n.count {\n        if n[i] == n[i+1] {\n            count += 1\n        }\n        if count == 2 {\n            flag = true\n            break\n        }\n    }\n    return flag\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given number is undulating or not.\n *\n * >>> isUndulating(\"1212121\")\n * true\n * >>> isUndulating(\"1991\")\n * false\n * >>> isUndulating(\"121\")\n * true\n */\nfunc isUndulating(n : String) -> Bool {\n    var n = n\n    var count = 0\n    var flag = false\n    for i in 0..<n.count {\n        if n[i] == n[i+1] {\n            count += 1\n        }\n        if count == 2 {\n            flag = true\n            break\n        }\n    }\n    return flag"}
{"task_id": "MBSWP/93", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the value of 'a' to the power 'b'.\n *\n * >>> power(3, 4)\n * 81\n * >>> power(2, 3)\n * 8\n * >>> power(5, 5)\n * 3125\n */\nfunc power(a : Int, b : Int) -> Int {\n    var result = 1\n    for i in 0..<b {\n        result *= a\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the factorial of a number.\n *\n * >>> factorial(5)\n * 120\n * >>> factorial(0)\n * 1\n * >>> factorial(1)\n * 1\n */\nfunc factorial(n : Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * factorial(n - 1)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of the first 'n' natural numbers.\n *\n * >>> sum(5)\n * 15\n * >>> sum(0)\n * 0\n * >>> sum(1)\n * 1\n */\nfunc sum(n : Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    return n + sum(n - 1)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of the first 'n' even natural numbers.\n *\n * >>> sumEven(5)\n * 10\n * >>> sumEven(0)\n * 0\n * >>> sumEven(1)\n * 2\n */\nfunc sumEven(n : Int) -> Int {\n    if n == 0 {\n        return 0\n    }\n    if n % 2 == 0 {\n        return n + sumEven(n - 1)\n    }\n    return sumEven(n - 1)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of the first 'n"}
{"task_id": "MBSWP/94", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the index minimum value record from the given tuples.\n *\n * >>> indexMinimum([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]])\n * \"Varsha\"\n * >>> indexMinimum([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]])\n * \"Dawood\"\n * >>> indexMinimum([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]])\n * \"Ayesha\"\n */\nfunc indexMinimum(testList : [[AnyHashable]]) -> String {\n    var minValue = testList[0][1]\n    var minIndex = 0\n    for i in 0..<testList.count {\n        if testList[i][1] < minValue {\n            minValue = testList[i][1]\n            minIndex = i\n        }\n    }\n    return testList[minIndex][0]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the index maximum value record from the given tuples.\n *\n * >>> indexMaximum([[\"Rash\", 143], [\"Manjeet\", 200], [\"Varsha\", 100]])\n * \"Rash\"\n * >>> indexMaximum([[\"Yash\", 185], [\"Dawood\", 125], [\"Sanya\", 175]])\n * \"Sanya\"\n * >>> indexMaximum([[\"Sai\", 345], [\"Salman\", 145], [\"Ayesha\", 96]])\n * \"Salman\"\n */\nfunc indexMaximum(testList : [[AnyHashable]]) -> String {\n    var maxValue = testList[0][1]\n    var maxIndex = 0\n    for i in 0..<testList.count {\n        if testList[i][1] > maxValue {\n            maxValue = testList[i][1]\n            maxIndex = i\n        }\n    }\n    return testList[maxIndex][0]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the index minimum value record from the"}
{"task_id": "MBSWP/95", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum length of sublist.\n *\n * >>> findMinLength([[1], [1, 2]])\n * 1\n * >>> findMinLength([[1, 2], [1, 2, 3], [1, 2, 3, 4]])\n * 2\n * >>> findMinLength([[3, 3, 3], [4, 4, 4, 4]])\n * 3\n */\nfunc findMinLength(lst : [[Int]]) -> Int {\n    var min = Int.max\n    for i in 0..<lst.count {\n        for j in i+1..<lst.count {\n            var sum = 0\n            for k in 0..<lst[i].count {\n                sum += lst[i][k]\n            }\n            for k in 0..<lst[j].count {\n                sum += lst[j][k]\n            }\n            if sum == 0 {\n                min = min.min(lst[i].count + lst[j].count)\n            }\n        }\n    }\n    return min\n}\n"}
{"task_id": "MBSWP/96", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the number of divisors of a given integer.\n *\n * >>> divisor(15)\n * 4\n * >>> divisor(12)\n * 6\n * >>> divisor(9)\n * 3\n */\nfunc divisor(n : Int) -> Int {\n    var count = 0\n    for i in 1..<=n {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/97", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find frequency count of list of lists.\n *\n * >>> frequencyLists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n * [1 : 1, 2 : 3, 3 : 1, 4 : 1, 5 : 2, 6 : 1, 7 : 1, 8 : 1, 9 : 1]\n * >>> frequencyLists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n * [1 : 1, 2 : 1, 3 : 1, 4 : 1, 5 : 1, 6 : 1, 7 : 1, 8 : 1, 9 : 1, 10 : 1, 11 : 1, 12 : 1]\n * >>> frequencyLists([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]])\n * [20 : 2, 30 : 2, 40 : 2, 17 : 1, 18 : 1, 16 : 1, 14 : 1, 13 : 1, 10 : 1]\n */\nfunc frequencyLists(list1 : [[Int]]) -> [Int: Int] {\n    var result = [Int: Int]()\n    for list in list1 {\n        for element in list {\n            if let count = result[element] {\n                result[element] = count + 1\n            } else {\n                result[element] = 1\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find frequency count of list of lists.\n *\n * >>> frequencyLists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n * [1 : 1, 2 : 3, 3 : 1, 4 : 1, 5 : 2, 6 : 1, 7 : 1, 8 : 1, 9 : 1]\n * >>> frequencyLists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n * [1"}
{"task_id": "MBSWP/98", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to multiply all the numbers in a list and divide with the length of the list.\n *\n * >>> multiplyNum([8, 2, 3, -1, 7])\n * -67.2\n * >>> multiplyNum([-10, -20, -30])\n * -2000.0\n * >>> multiplyNum([19, 15, 18])\n * 1710.0\n */\nfunc multiplyNum(numbers : [Int]) -> Double {\n    var result = 1\n    for number in numbers {\n        result *= number\n    }\n    return Double(result) / Double(numbers.count)\n}\n"}
{"task_id": "MBSWP/99", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given decimal number to its binary equivalent.\n *\n * >>> decimalToBinary(8)\n * \"1000\"\n * >>> decimalToBinary(18)\n * \"10010\"\n * >>> decimalToBinary(7)\n * \"111\"\n */\nfunc decimalToBinary(n : Int) -> String {\n    var binary = \"\"\n    var n = n\n    while n > 0 {\n        binary = String(n % 2) + binary\n        n = n / 2\n    }\n    return binary\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given binary number to its decimal equivalent.\n *\n * >>> binaryToDecimal(\"1000\")\n * 8\n * >>> binaryToDecimal(\"10010\")\n * 18\n * >>> binaryToDecimal(\"111\")\n * 7\n */\nfunc binaryToDecimal(binary : String) -> Int {\n    var decimal = 0\n    var binary = binary\n    while binary.characters.count > 0 {\n        let digit = Int(String(binary[0]))!\n        binary = binary.dropFirst()\n        decimal = 2 * decimal + digit\n    }\n    return decimal\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given decimal number to its hexadecimal equivalent.\n *\n * >>> decimalToHex(8)\n * \"8\"\n * >>> decimalToHex(18)\n * \"12\"\n * >>> decimalToHex(7)\n * \"7\"\n */\nfunc decimalToHex(n : Int) -> String {\n    var hex = \"\"\n    var n = n\n    while n > 0 {\n        hex = String(n % 16) + hex\n        n = n / 16\n    }\n    return hex\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given hexadecimal number to its decimal equivalent.\n *\n * >>> hexToDecimal(\"8\")\n * 8\n * >>> hexToDecimal(\""}
{"task_id": "MBSWP/100", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the next smallest palindrome of a specified number.\n *\n * >>> nextSmallestPalindrome(99)\n * 101\n * >>> nextSmallestPalindrome(1221)\n * 1331\n * >>> nextSmallestPalindrome(120)\n * 121\n */\nfunc nextSmallestPalindrome(num : Int) -> Int {\n    var num = num\n    var result = num\n    var isPalindrome = false\n    while !isPalindrome {\n        result += 1\n        isPalindrome = isPalindrome(num, result)\n    }\n    return result\n}\n\nfunc isPalindrome(_ num1 : Int, _ num2 : Int) -> Bool {\n    var num1 = num1\n    var num2 = num2\n    var isPalindrome = false\n    while num1 != num2 {\n        if num1 > num2 {\n            num1 -= 1\n        } else {\n            num2 -= 1\n        }\n    }\n    return isPalindrome\n}\n"}
{"task_id": "MBSWP/101", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the kth element in the given array.\n *\n * >>> kthElement([12, 3, 5, 7, 19], 5, 2)\n * 3\n * >>> kthElement([17, 24, 8, 23], 4, 3)\n * 8\n * >>> kthElement([16, 21, 25, 36, 4], 5, 4)\n * 36\n */\nfunc kthElement(arr : [Int], n : Int, k : Int) -> Int {\n    var arr = arr\n    var n = n\n    var k = k\n    var i = 0\n    var j = n - 1\n    var pivot = arr[j]\n    while i < j {\n        while i < j && arr[i] <= pivot {\n            i += 1\n        }\n        while i < j && arr[j] >= pivot {\n            j -= 1\n        }\n        if i < j {\n            arr.swapAt(i, j)\n        }\n    }\n    arr.swapAt(i, j)\n    if k <= i {\n        return kthElement(arr[0..<i], i, k)\n    } else if k > i {\n        return kthElement(arr[i+1..<n], n-i-1, k-i-1)\n    }\n    return arr[k-1]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the kth element in the given array.\n *\n * >>> kthElement([12, 3, 5, 7, 19], 5, 2)\n * 3\n * >>> kthElement([17, 24, 8, 23], 4, 3)\n * 8\n * >>> kthElement([16, 21, 25, 36, 4], 5, 4)\n * 36\n */\nfunc kthElement(arr : [Int], n : Int, k : Int) -> Int {\n    var arr = arr\n    var n = n\n    var k = k\n    var i = 0\n    var j = n - 1\n    var pivot = arr[j]\n    while i < j"}
{"task_id": "MBSWP/102", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert snake case string to camel case string.\n *\n * >>> snakeToCamel(\"python_program\")\n * \"PythonProgram\"\n * >>> snakeToCamel(\"python_language\")\n * \"PythonLanguage\"\n * >>> snakeToCamel(\"programming_language\")\n * \"ProgrammingLanguage\"\n */\nfunc snakeToCamel(word : String) -> String {\n    var result = \"\"\n    var isFirst = true\n    for char in word {\n        if isFirst {\n            result += String(char)\n            isFirst = false\n        } else if char == \"_\" {\n            result += String(char)\n        } else {\n            result += String(char).capitalized\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert camel case string to snake case string.\n *\n * >>> camelToSnake(\"PythonProgram\")\n * \"python_program\"\n * >>> camelToSnake(\"PythonLanguage\")\n * \"python_language\"\n * >>> camelToSnake(\"ProgrammingLanguage\")\n * \"programming_language\"\n */\nfunc camelToSnake(word : String) -> String {\n    var result = \"\"\n    var isFirst = true\n    for char in word {\n        if isFirst {\n            result += String(char)\n            isFirst = false\n        } else if char.isUpperCase {\n            result += \"_\"\n            result += String(char).lowercased\n        } else {\n            result += String(char)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert snake case string to kebab case string.\n *\n * >>> snakeToKebab(\"python_program\")\n * \"python-program\"\n * >>> snakeToKebab(\"python_language\")\n * \"python-language\"\n * >>> snakeToKebab(\"programming_language\")\n * \"programming-language\"\n */\nfunc snakeToKebab(word : String) -> String {\n    var result = \"\""}
{"task_id": "MBSWP/103", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find eulerian number a(n, m).\n *\n * >>> eulerianNum(3, 1)\n * 4\n * >>> eulerianNum(4, 1)\n * 11\n * >>> eulerianNum(5, 3)\n * 26\n */\nfunc eulerianNum(n : Int, m : Int) -> Int {\n    var a = 1\n    for i in 1...n {\n        a *= i\n    }\n    return a\n}\n"}
{"task_id": "MBSWP/104", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort each sublist of strings in a given list of lists using lambda function.\n *\n * >>> sortSublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n * [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]]\n * >>> sortSublists([[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]])\n * [[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]]\n * >>> sortSublists([[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]])\n * [[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]]\n */\nfunc sortSublists(inputList : [[String]]) -> [[String]] {\n    var result : [[String]] = []\n    for sublist in inputList {\n        result.append(sort(sublist))\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort each sublist of numbers in a given list of lists using lambda function.\n *\n * >>> sortSublists([[1, 2], [3, 4], [5, 6, 7]])\n * [[1, 2], [3, 4], [5, 6, 7]]\n * >>> sortSublists([[9, 8], [7, 6], [5, 4]])\n * [[5, 6, 7], [9, 8], [7, 6]]\n * >>> sortSublists([[3, 2, 1], [7, 6, 5], [9, 8, 7]])\n * [[1, 2, 3], [5, 6, 7], [7, 8, 9]]\n */\nfunc sortSublists(inputList : [[Int]]) -> [[Int]] {\n    var result : [[Int]] = []\n    for sublist in inputList {\n        result.append(sort(sublist))\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer"}
{"task_id": "MBSWP/105", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count true booleans in the given list.\n *\n * >>> count([true, false, true])\n * 2\n * >>> count([false, false])\n * 0\n * >>> count([true, true, true])\n * 3\n */\nfunc count(lst : [Bool]) -> Int {\n    var count = 0\n    for i in lst {\n        if i {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/106", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add the given list to the given tuples.\n *\n * >>> addLists([5, 6, 7], [9, 10])\n * [9, 10, 5, 6, 7]\n * >>> addLists([6, 7, 8], [10, 11])\n * [10, 11, 6, 7, 8]\n * >>> addLists([7, 8, 9], [11, 12])\n * [11, 12, 7, 8, 9]\n */\nfunc addLists(testList : [Int], testTup : [Int]) -> [Int] {\n    var result = testList\n    for i in 0..<testTup.count {\n        result.append(testTup[i])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add the given list to the given tuples.\n *\n * >>> addLists([5, 6, 7], [9, 10])\n * [9, 10, 5, 6, 7]\n * >>> addLists([6, 7, 8], [10, 11])\n * [10, 11, 6, 7, 8]\n * >>> addLists([7, 8, 9], [11, 12])\n * [11, 12, 7, 8, 9]\n */\nfunc addLists(testList : [Int], testTup : [Int]) -> [Int] {\n    var result = testList\n    for i in 0..<testTup.count {\n        result.append(testTup[i])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add the given list to the given tuples.\n *\n * >>> addLists([5, 6, 7], [9, 10])\n * [9, 10, 5, 6, 7]\n * >>> addLists([6, 7, 8], [10, 11])\n * [10, 11, 6, 7, 8]\n * >>> addLists([7, 8, 9], [11, 12])\n"}
{"task_id": "MBSWP/107", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count hexadecimal numbers for a given range.\n *\n * >>> countHexadecimal(10, 15)\n * 6\n * >>> countHexadecimal(2, 4)\n * 0\n * >>> countHexadecimal(15, 16)\n * 1\n */\nfunc countHexadecimal(l : Int, r : Int) -> Int {\n    var count = 0\n    for i in l...r {\n        if i.toString().hasPrefix(\"0x\") {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/108", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n *\n * >>> mergeSortedList([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48])\n * [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n * >>> mergeSortedList([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])\n * [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n * >>> mergeSortedList([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41])\n * [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n */\nfunc mergeSortedList(num1 : [Int], num2 : [Int], num3 : [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0, j = 0, k = 0\n    while i < num1.count && j < num2.count && k < num3.count {\n        if num1[i] < num2[j] && num1[i] < num3[k] {\n            result.append(num1[i])\n            i += 1\n        } else if num2[j] < num1[i] && num2[j] < num3[k] {\n            result.append(num2[j])\n            j += 1\n        } else {\n            result.append(num3[k])\n            k += 1\n        }\n    }\n    while i"}
{"task_id": "MBSWP/109", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the count of rotations of a binary string with odd value.\n *\n * >>> oddEquivalent(\"011001\", 6)\n * 3\n * >>> oddEquivalent(\"11011\", 5)\n * 4\n * >>> oddEquivalent(\"1010\", 4)\n * 2\n */\nfunc oddEquivalent(s : String, n : Int) -> Int {\n    var count = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0"}
{"task_id": "MBSWP/110", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n *\n * >>> extractMissing([[6, 9], [15, 34], [48, 70]], 2, 100)\n * [[2, 6], [9, 100], [9, 15], [34, 100], [34, 48], [70, 100]]\n * >>> extractMissing([[7, 2], [15, 19], [38, 50]], 5, 60)\n * [[5, 7], [2, 60], [2, 15], [19, 60], [19, 38], [50, 60]]\n * >>> extractMissing([[7, 2], [15, 19], [38, 50]], 1, 52)\n * [[1, 7], [2, 52], [2, 15], [19, 52], [19, 38], [50, 52]]\n */\nfunc extractMissing(testList : [[Int]], strtVal : Int, stopVal : Int) -> [[Int]] {\n    var missingRanges : [[Int]] = []\n    var startVal : Int = strtVal\n    var stopVal : Int = stopVal\n    var startFound : Bool = false\n    var stopFound : Bool = false\n    var startIndex : Int = 0\n    var stopIndex : Int = 0\n    var startFoundIndex : Int = 0\n    var stopFoundIndex : Int = 0\n    var startFoundIndexFound : Bool = false\n    var stopFoundIndexFound : Bool = false\n    var startFoundIndexFoundStopFound : Bool = false\n    var stopFoundIndexFoundStartFound : Bool = false\n    var startFoundIndexFoundStopFound : Bool = false\n    var stopFoundIndexFoundStartFound : Bool = false\n    var startFoundIndexFoundStopFoundStartFound : Bool = false\n    var stopFoundIndexFoundStartFoundStopFound : Bool = false\n    var startFoundIndexFoundStopFoundStartFoundStopFound : Bool = false\n    var stopFoundIndexFoundStartFoundStopFoundStartFound : Bool = false\n    var stopFoundIndexFoundStartFoundStopFoundStartFoundStopFound : Bool = false\n    var stop"}
{"task_id": "MBSWP/111", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n *\n * >>> commonInNestedLists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n * [18, 12]\n * >>> commonInNestedLists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])\n * [5, 23]\n * >>> commonInNestedLists([[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]])\n * [4]\n */\nfunc commonInNestedLists(nestedlist : [[Int]]) -> [Int] {\n    var common : [Int] = []\n    var temp : [Int] = []\n    for i in nestedlist {\n        for j in i {\n            if temp.contains(j) {\n                common.append(j)\n            } else {\n                temp.append(j)\n            }\n        }\n    }\n    return common\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n *\n * >>> commonInNestedLists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n * [18, 12]\n * >>> commonInNestedLists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])\n * [5, 23]\n * >>> commonInNestedLists([[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]])\n * [4]"}
{"task_id": "MBSWP/112", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the perimeter of a cylinder.\n *\n * >>> perimeter(2, 4)\n * 12\n * >>> perimeter(1, 2)\n * 6\n * >>> perimeter(3, 1)\n * 8\n */\nfunc perimeter(diameter : Int, height : Int) -> Int {\n    return 2 * diameter * height + 2 * diameter * diameter\n}\n"}
{"task_id": "MBSWP/113", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a string represents an integer or not.\n *\n * >>> checkInteger(\"python\")\n * false\n * >>> checkInteger(\"1\")\n * true\n * >>> checkInteger(\"12345\")\n * true\n */\nfunc checkInteger(text : String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[0-9]+$\", options: [])\n    let match = regex.firstMatch(in: text, options: [], range: NSMakeRange(0, text.count))\n    return match != nil\n}\n"}
{"task_id": "MBSWP/114", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to assign frequency to each tuple in the given tuple list.\n *\n * >>> assignFreq([[6, 5, 8], [2, 7], [6, 5, 8], [6, 5, 8], [9], [2, 7]])\n * \"[(6, 5, 8, 3), (2, 7, 2), (9, 1)]\"\n * >>> assignFreq([[4, 2, 4], [7, 1], [4, 8], [4, 2, 4], [9, 2], [7, 1]])\n * \"[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\"\n * >>> assignFreq([[11, 13, 10], [17, 21], [4, 2, 3], [17, 21], [9, 2], [4, 2, 3]])\n * \"[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]\"\n */\nfunc assignFreq(testList : [[Int]]) -> String {\n    var result = \"\"\n    var freq = 0\n    var freqList = [Int: Int]()\n    for test in testList {\n        for i in test {\n            if freqList[i] == nil {\n                freqList[i] = freq\n                freq += 1\n            }\n        }\n        result += \"(\"\n        for i in test {\n            result += \"\\(i), \"\n        }\n        result += \"\\(freqList[test[0]]!)), \"\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to assign frequency to each tuple in the given tuple list.\n *\n * >>> assignFreq([[6, 5, 8], [2, 7], [6, 5, 8], [6, 5, 8], [9], [2, 7]])\n * \"[(6, 5, 8, 3), (2, 7, 2), (9, 1)]\"\n * >>>"}
{"task_id": "MBSWP/115", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether all dictionaries in a list are empty or not.\n *\n * >>> emptyDit([[], [], []])\n * true\n * >>> emptyDit([{1, 2}, [], []])\n * false\n * >>> emptyDit([])\n * true\n */\nfunc emptyDit(list1 : AnyHashable) -> Bool {\n    var empty = true\n    for i in list1 {\n        if i.count > 0 {\n            empty = false\n        }\n    }\n    return empty\n}\n"}
{"task_id": "MBSWP/116", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a given tuple of positive integers into an integer.\n *\n * >>> tupleToInt([1, 2, 3])\n * 123\n * >>> tupleToInt([4, 5, 6])\n * 456\n * >>> tupleToInt([5, 6, 7])\n * 567\n */\nfunc tupleToInt(nums : [Int]) -> Int {\n    var result = 0\n    for num in nums {\n        result = result * 10 + num\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a given integer into a tuple of positive integers.\n *\n * >>> intToTuple(123)\n * [1, 2, 3]\n * >>> intToTuple(456)\n * [4, 5, 6]\n * >>> intToTuple(567)\n * [5, 6, 7]\n */\nfunc intToTuple(num : Int) -> [Int] {\n    var result = [Int]()\n    while num > 0 {\n        result.append(num % 10)\n        num = num / 10\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a given tuple of positive integers into a string.\n *\n * >>> tupleToString([1, 2, 3])\n * \"123\"\n * >>> tupleToString([4, 5, 6])\n * \"456\"\n * >>> tupleToString([5, 6, 7])\n * \"567\"\n */\nfunc tupleToString(nums : [Int]) -> String {\n    var result = \"\"\n    for num in nums {\n        result = result + String(num)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a given string into a tuple of positive integers.\n *\n * >>> stringToTuple(\"123\")\n * [1, 2, 3]\n * >>> stringToTuple(\"456\")\n * [4, 5, 6]\n *"}
{"task_id": "MBSWP/117", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert all possible convertible elements in the list to float.\n *\n * >>> listToFloat([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]])\n * \"[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\"\n * >>> listToFloat([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]])\n * \"[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\"\n * >>> listToFloat([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]])\n * \"[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\"\n */\nfunc listToFloat(testList : [[String]]) -> String {\n    var result : [[Float]] = []\n    for i in 0..<testList.count {\n        var temp : [Float] = []\n        for j in 0..<testList[i].count {\n            temp.append(Float(testList[i][j]))\n        }\n        result.append(temp)\n    }\n    return String(describing: result)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert all possible convertible elements in the list to integer.\n *\n * >>> listToInt([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]])\n * \"[(3, 4), (1, 26), (7, 8), (4, 8)]\"\n * >>> listToInt([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]])\n * \"[(4, 4), (2"}
{"task_id": "MBSWP/118", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n *\n * >>> stringToList(\"python programming\")\n * [\"python\", \"programming\"]\n * >>> stringToList(\"lists tuples strings\")\n * [\"lists\", \"tuples\", \"strings\"]\n * >>> stringToList(\"write a program\")\n * [\"write\", \"a\", \"program\"]\n */\nfunc stringToList(string : String) -> [String] {\n    var list = [String]()\n    var string = string\n    while string.count > 0 {\n        let index = string.index(of: \" \")\n        if index == nil {\n            list.append(string)\n            break\n        }\n        let word = string[0...index!]\n        list.append(word)\n        string = string[index!+1...]\n    }\n    return list\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * [link text](https:// [link text](https:// [link text](https://)))write a function to convert a list to a string.\n *\n * >>> listToString([\"python\", \"programming\"])\n * \"python programming\"\n * >>> listToString([\"lists\", \"tuples\", \"strings\"])\n * \"lists tuples strings\"\n * >>> listToString([\"write\", \"a\", \"program\"])\n * \"write a program\"\n */\nfunc listToString(list : [String]) -> String {\n    var string = \"\"\n    for word in list {\n        string += word\n        string += \" \"\n    }\n    return string\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a dictionary.\n *\n * >>> stringToDict(\"python programming\")\n * [\"python\": \"programming\"]\n * >>> stringToDict(\"lists tuples strings\")\n * [\"lists\": \"tuples\", \"strings\": \"\"]\n * >>> stringToDict(\""}
{"task_id": "MBSWP/119", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the element that appears only once in a sorted array.\n *\n * >>> search([1, 1, 2, 2, 3], 5)\n * 3\n * >>> search([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8], 11)\n * 8\n * >>> search([1, 2, 2, 3, 3, 4, 4], 7)\n * 1\n */\nfunc search(arr : [Int], n : Int) -> Int {\n    var i = 0\n    var j = 0\n    var k = 0\n    var count = 0\n    var result = 0\n    while i < n {\n        if arr[i] == arr[i+1] {\n            i += 2\n        } else {\n            i += 1\n        }\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/120", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum product from the pairs of tuples within a given list.\n *\n * >>> maxProductTuple([[2, 7], [2, 6], [1, 8], [4, 9]])\n * 36\n * >>> maxProductTuple([[10, 20], [15, 2], [5, 10]])\n * 200\n * >>> maxProductTuple([[11, 44], [10, 15], [20, 5], [12, 9]])\n * 484\n */\nfunc maxProductTuple(list1 : [[Int]]) -> Int {\n    var max = 0\n    for i in 0..<list1.count {\n        for j in i+1..<list1.count {\n            let product = list1[i][0] * list1[j][1]\n            if product > max {\n                max = product\n            }\n        }\n    }\n    return max\n}\n\n// Test\nassert(maxProductTuple([[2, 7], [2, 6], [1, 8], [4, 9]]) == 36)\nassert(maxProductTuple([[10, 20], [15, 2], [5, 10]]) == 200)\nassert(maxProductTuple([[11, 44], [10, 15], [20, 5], [12, 9]]) == 484)\n"}
{"task_id": "MBSWP/121", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the triplet with sum of the given array\n *\n * >>> checkTriplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0)\n * true\n * >>> checkTriplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0)\n * false\n * >>> checkTriplet([10, 4, 2, 3, 5], 5, 15, 0)\n * true\n */\nfunc checkTriplet(a : [Int], n : Int, sum : Int, count : Int) -> Bool {\n    var i = 0\n    var j = 0\n    var k = 0\n    var sum1 = 0\n    var sum2 = 0\n    var sum3 = 0\n    var flag = false\n    while i < n {\n        j = i + 1\n        while j < n {\n            k = j + 1\n            while k < n {\n                sum1 = a[i] + a[j] + a[k]\n                if sum1 == sum {\n                    flag = true\n                    break\n                }\n                k += 1\n            }\n            j += 1\n        }\n        i += 1\n    }\n    return flag\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the triplet with sum of the given array\n *\n * >>> checkTriplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0)\n * true\n * >>> checkTriplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0)\n * false\n * >>> checkTriplet([10, 4, 2, 3, 5], 5, 15, 0)\n * true\n */\nfunc checkTriplet(a : [Int], n : Int, sum : Int, count : Int) -> Bool {\n    var i = 0\n    var j = 0\n    var k = 0\n    var sum1 = 0\n    var sum2 = 0\n    var sum3 = 0\n    var flag = false\n    while i < n {\n       "}
{"task_id": "MBSWP/122", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find n\u2019th smart number.\n *\n * >>> smartnumber(1)\n * 30\n * >>> smartnumber(50)\n * 273\n * >>> smartnumber(1000)\n * 2664\n */\nfunc smartnumber(n : Int) -> Int {\n    var n = n\n    var result = 0\n    while n > 0 {\n        result += n % 10\n        n /= 10\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/123", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sum all amicable numbers from 1 to a specified number.\n *\n * >>> amicableNumbersSum(999)\n * 504\n * >>> amicableNumbersSum(9999)\n * 31626\n * >>> amicableNumbersSum(99)\n * 0\n */\nfunc amicableNumbersSum(limit : Int) -> Int {\n    var sum = 0\n    for i in 1...limit {\n        if isAmicable(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\nfunc isAmicable(n : Int) -> Bool {\n    let sum = sumOfProperDivisors(n)\n    return n != sum && sumOfProperDivisors(sum) == n\n}\n\nfunc sumOfProperDivisors(n : Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        if n % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/125", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n *\n * >>> findLength(\"11000010001\", 11)\n * 6\n * >>> findLength(\"10111\", 5)\n * 1\n * >>> findLength(\"11011101100101\", 14)\n * 2\n */\nfunc findLength(string : String, n : Int) -> Int {\n    var max = 0\n    var count = 0\n    var count1 = 0\n    var count0 = 0\n    for i in 0..<n {\n        if string[i] == \"1\" {\n            count1 += 1\n        } else {\n            count0 += 1\n        }\n        if count1 > count0 {\n            max = max(max, count1)\n        } else {\n            max = max(max, count0)\n        }\n    }\n    return max\n}\n"}
{"task_id": "MBSWP/126", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of common divisors of two given numbers.\n *\n * >>> sum(10, 15)\n * 6\n * >>> sum(100, 150)\n * 93\n * >>> sum(4, 6)\n * 3\n */\nfunc sum(a : Int, b : Int) -> Int {\n    var sum = 0\n    for i in 1...Int(sqrt(Double(a))) {\n        if a % i == 0 && b % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/127", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to multiply two integers without using the * operator in Swift.\n *\n * >>> multiplyInt(10, 20)\n * 200\n * >>> multiplyInt(5, 10)\n * 50\n * >>> multiplyInt(4, 8)\n * 32\n */\nfunc multiplyInt(x : Int, y : Int) -> Int {\n    var result = 0\n    for i in 0..<y {\n        result += x\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/128", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to shortlist words that are longer than n from a given list of words.\n *\n * >>> longWords(3, \"python is a programming language\")\n * [\"python\", \"programming\", \"language\"]\n * >>> longWords(2, \"writing a program\")\n * [\"writing\", \"program\"]\n * >>> longWords(5, \"sorting list\")\n * [\"sorting\"]\n */\nfunc longWords(n : Int, str : String) -> [String] {\n    var words = str.split(\" \")\n    var result = [String]()\n    for word in words {\n        if word.count > n {\n            result.append(word)\n        }\n    }\n    return result\n}\n\n// Test\nassert(longWords(3, \"python is a programming language\") == [\"python\", \"programming\", \"language\"])\nassert(longWords(2, \"writing a program\") == [\"writing\", \"program\"])\nassert(longWords(5, \"sorting list\") == [\"sorting\"])\n"}
{"task_id": "MBSWP/129", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate magic square.\n *\n * >>> magicSquareTest([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])\n * true\n * >>> magicSquareTest([[2, 7, 6], [9, 5, 1], [4, 3, 8]])\n * true\n * >>> magicSquareTest([[2, 7, 6], [9, 5, 1], [4, 3, 7]])\n * false\n */\nfunc magicSquareTest(myMatrix : [[Int]]) -> Bool {\n    let myMagicSquare = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\n    let myMagicSquare = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\n    let myMagicSquare = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\n    let myMagicSquare = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\n    let myMagicSquare = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\n    let myMagicSquare = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\n    let myMagicSquare = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\n    let myMagicSquare = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]\n    let myMagicSquare = [[7"}
{"task_id": "MBSWP/130", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the item with maximum frequency in a given list.\n *\n * >>> maxOccurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2])\n * [2, 5]\n * >>> maxOccurrences([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18])\n * [8, 2]\n * >>> maxOccurrences([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10])\n * [20, 3]\n */\nfunc maxOccurrences(nums : [Int]) -> [Int] {\n    var maxOccurrences = [Int]()\n    var maxFrequency = 0\n    var maxFrequencyIndex = 0\n    var frequency = 0\n    var index = 0\n    for num in nums {\n        if num == nums[index] {\n            frequency += 1\n        } else {\n            if frequency > maxFrequency {\n                maxFrequency = frequency\n                maxOccurrences = [nums[index - 1], nums[index]]\n            }\n            frequency = 1\n        }\n        index += 1\n    }\n    if frequency > maxFrequency {\n        maxFrequency = frequency\n        maxOccurrences = [nums[index - 1], nums[index]]\n    }\n    return maxOccurrences\n}\n"}
{"task_id": "MBSWP/131", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to reverse only the vowels of a given string.\n *\n * >>> reverseVowels(\"Python\")\n * \"Python\"\n * >>> reverseVowels(\"USA\")\n * \"ASU\"\n * >>> reverseVowels(\"ab\")\n * \"ab\"\n */\nfunc reverseVowels(str1 : String) -> String {\n    var str2 = str1\n    var i = 0\n    var j = str1.characters.count - 1\n    while i < j {\n        while i < j && !isVowel(str1[i]) {\n            i += 1\n        }\n        while i < j && !isVowel(str1[j]) {\n            j -= 1\n        }\n        if i < j {\n            str2[i] = str1[j]\n            str2[j] = str1[i]\n            i += 1\n            j -= 1\n        }\n    }\n    return str2\n}\n\nfunc isVowel(c : Character) -> Bool {\n    return c == \"a\" || c == \"e\" || c == \"i\" || c == \"o\" || c == \"u\" || c == \"A\" || c == \"E\" || c == \"I\" || c == \"O\" || c == \"U\"\n}\n"}
{"task_id": "MBSWP/132", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert tuple to a string.\n *\n * >>> tupString([\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"])\n * \"exercises\"\n * >>> tupString([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"])\n * \"python\"\n * >>> tupString([\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"])\n * \"program\"\n */\nfunc tupString(tup1 : [String]) -> String {\n    var tup2 : [String] = []\n    for i in 0..<tup1.count {\n        tup2.append(tup1[i])\n    }\n    return tup2.joinWithSeparator(\"\")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert tuple to a string.\n *\n * >>> tupString([\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"])\n * \"exercises\"\n * >>> tupString([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"])\n * \"python\"\n * >>> tupString([\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"])\n * \"program\"\n */\nfunc tupString(tup1 : [String]) -> String {\n    var tup2 : [String] = []\n    for i in 0..<tup1.count {\n        tup2.append(tup1[i])\n    }\n    return tup2.joinWithSeparator(\"\")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert tuple to a string.\n *\n * >>> tupString([\"e\", \"x\", \"e\", \"r\", \"c\", \"i\", \"s\", \"e\", \"s\"])\n * \"exercises\"\n * >>> tup"}
{"task_id": "MBSWP/133", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n *\n * >>> sumNegativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n * -32\n * >>> sumNegativenum([10, 15, -14, 13, -18, 12, -20])\n * -52\n * >>> sumNegativenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190])\n * -894\n */\nfunc sumNegativenum(nums : [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        if num < 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n *\n * >>> sumPositiveNum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n * -32\n * >>> sumPositiveNum([10, 15, -14, 13, -18, 12, -20])\n * -52\n * >>> sumPositiveNum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190])\n * -894\n */\nfunc sumPositiveNum(nums : [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        if num > 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of the even numbers of a given list of numbers using lambda function.\n *\n * >>> sumEvenNum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n * -32\n * >>> sumEvenNum([10, 15, -14, 13, -18, 12, -20])\n * -52\n * >>> sumEven"}
{"task_id": "MBSWP/134", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the last element of given array is even or odd after performing an operation p times.\n *\n * >>> checkLast([5, 7, 10], 3, 1)\n * \"ODD\"\n * >>> checkLast([2, 3], 2, 3)\n * \"EVEN\"\n * >>> checkLast([1, 2, 3], 3, 1)\n * \"ODD\"\n */\nfunc checkLast(arr : [Int], n : Int, p : Int) -> String {\n    var arr = arr\n    for _ in 0..<p {\n        arr.removeLast()\n    }\n    if arr.last! % 2 == 0 {\n        return \"EVEN\"\n    } else {\n        return \"ODD\"\n    }\n}\n"}
{"task_id": "MBSWP/135", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth hexagonal number.\n *\n * >>> hexagonalNum(10)\n * 190\n * >>> hexagonalNum(5)\n * 45\n * >>> hexagonalNum(7)\n * 91\n */\nfunc hexagonalNum(n : Int) -> Int {\n    return (n * (2 * n - 1))\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth pentagonal number.\n *\n * >>> pentagonalNum(10)\n * 285\n * >>> pentagonalNum(5)\n * 60\n * >>> pentagonalNum(7)\n * 108\n */\nfunc pentagonalNum(n : Int) -> Int {\n    return (n * (3 * n - 1) / 2)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth triangular number.\n *\n * >>> triangularNum(10)\n * 55\n * >>> triangularNum(5)\n * 15\n * >>> triangularNum(7)\n * 28\n */\nfunc triangularNum(n : Int) -> Int {\n    return (n * (n + 1)) / 2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth triangular number.\n *\n * >>> pentagonalNum(10)\n * 285\n * >>> pentagonalNum(5)\n * 60\n * >>> pentagonalNum(7)\n * 108\n */\nfunc pentagonalNum(n : Int) -> Int {\n    return (n * (3 * n - 1) / 2)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth pentagonal number.\n *\n * >>> hexagonalNum(10)\n * 190\n * >>> hexagonalNum(5)\n * 45\n * >>> hexagonalNum(7)\n * 91\n */\nfunc hexagonalNum(n : Int) -> Int {\n    return (n * (2 * n - 1))\n}\n\n/**\n * You are an expert"}
{"task_id": "MBSWP/136", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate electricity bill.\n *\n * >>> calElectbill(75)\n * 246.25\n * >>> calElectbill(265)\n * 1442.75\n * >>> calElectbill(100)\n * 327.5\n */\nfunc calElectbill(units : Int) -> Double {\n    var bill = 0.0\n    if units <= 75 {\n        bill = units * 2.5\n    } else if units <= 265 {\n        bill = units * 2.5 + (units - 75) * 3.5\n    } else {\n        bill = units * 2.5 + (units - 75) * 3.5 + (units - 265) * 4.5\n    }\n    return bill\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the number of days in a month.\n *\n * >>> calDays(1)\n * 31\n * >>> calDays(2)\n * 28\n * >>> calDays(3)\n * 31\n * >>> calDays(4)\n * 30\n * >>> calDays(5)\n * 31\n * >>> calDays(6)\n * 30\n * >>> calDays(7)\n * 31\n * >>> calDays(8)\n * 31\n * >>> calDays(9)\n * 30\n * >>> calDays(10)\n * 31\n * >>> calDays(11)\n * 30\n * >>> calDays(12)\n * 31\n */\nfunc calDays(month : Int) -> Int {\n    var days = 0\n    switch month {\n    case 1, 3, 5, 7, 8, 10, 12:\n        days = 31\n    case 4, 6, 9, 11:\n        days = 30\n    case 2:\n        days = 28\n    }\n    return days\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the number of days in a year.\n *\n * >>> calDays(2020)\n * 365\n * >>> calDays(2021)\n * 366\n */\nfunc calDays(year : Int) -> Int {\n    var days = 0\n"}
{"task_id": "MBSWP/137", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the ration of zeroes in an array of integers.\n *\n * >>> zeroCount([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n * 0.15\n * >>> zeroCount([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n * 0.0\n * >>> zeroCount([2, 4, -6, -9, 11, -12, 14, -5, 17])\n * 0.0\n */\nfunc zeroCount(nums : [Int]) -> Double {\n    var count = 0\n    var zeroCount = 0\n    for num in nums {\n        if num == 0 {\n            count += 1\n        }\n    }\n    zeroCount = Double(count) / Double(nums.count)\n    return zeroCount\n}\n"}
{"task_id": "MBSWP/138", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n *\n * >>> isSumOfPowersOfTwo(10)\n * true\n * >>> isSumOfPowersOfTwo(7)\n * false\n * >>> isSumOfPowersOfTwo(14)\n * true\n */\nfunc isSumOfPowersOfTwo(n : Int) -> Bool {\n    var n = n\n    var count = 0\n    while n > 0 {\n        if n % 2 == 1 {\n            count += 1\n        }\n        n = n / 2\n    }\n    return count == 1\n}\n"}
{"task_id": "MBSWP/139", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the circumference of a circle.\n *\n * >>> circleCircumference(10)\n * 62.830000000000005\n * >>> circleCircumference(5)\n * 31.415000000000003\n * >>> circleCircumference(4)\n * 25.132\n */\nfunc circleCircumference(r : Int) -> Double {\n    return 2 * 3.14159 * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a circle.\n *\n * >>> circleArea(10)\n * 314.15900000000004\n * >>> circleArea(5)\n * 78.5398\n * >>> circleArea(4)\n * 50.265\n */\nfunc circleArea(r : Int) -> Double {\n    return 3.14159 * r * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a sphere.\n *\n * >>> sphereVolume(10)\n * 4188.792000000001\n * >>> sphereVolume(5)\n * 4331.638\n * >>> sphereVolume(4)\n * 4160.0\n */\nfunc sphereVolume(r : Int) -> Double {\n    return (4.0/3.0) * 3.14159 * r * r * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the surface area of a sphere.\n *\n * >>> sphereSurfaceArea(10)\n * 1256.6360000000001\n * >>> sphereSurfaceArea(5)\n * 1256.636\n * >>> sphereSurfaceArea(4)\n * 1256.64\n */\nfunc sphereSurfaceArea(r : Int) -> Double {\n    return 4 * 3.14159 * r * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the circumference of a sphere.\n *\n * >>> sphereCircumference(10)\n * 25.131999999999999\n * >>> sphereCircumference"}
{"task_id": "MBSWP/140", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract elements that occur singly in the given tuple list.\n *\n * >>> extractSingly([[3, 4, 5], [4, 5, 7], [1, 4]])\n * [3, 4, 5, 7, 1]\n * >>> extractSingly([[1, 2, 3], [4, 2, 3], [7, 8]])\n * [1, 2, 3, 4, 7, 8]\n * >>> extractSingly([[7, 8, 9], [10, 11, 12], [10, 11]])\n * [7, 8, 9, 10, 11, 12]\n */\nfunc extractSingly(testList : [[Int]]) -> [Int] {\n    var result = [Int]()\n    for list in testList {\n        for element in list {\n            if list.countOf(element) == 1 {\n                result.append(element)\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract elements that occur singly in the given dictionary.\n *\n * >>> extractSingly([[\"a\": 3, \"b\": 4, \"c\": 5], [\"b\": 4, \"c\": 7, \"d\": 1]])\n * [\"a\": 3, \"b\": 4, \"c\": 5, \"d\": 1]\n * >>> extractSingly([[\"a\": 1, \"b\": 2, \"c\": 3], [\"b\": 4, \"c\": 3, \"d\": 7]])\n * [\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 7]\n * >>> extractSingly([[\"a\": 7, \"b\": 8, \"c\": 9], [\"b\": 10, \"c\": 11, \"d\": 12]])\n * [\"a\": 7, \"b\": 8, \"c\": 9, \"d\": 12]\n */\nfunc extractSingly(testList : [String: Int]) -> [String: Int] {\n    var result = [String: Int]()\n    for (key, value) in testList {\n        if testList.count"}
{"task_id": "MBSWP/141", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of elements using pancake sort.\n *\n * >>> pancakeSort([15, 79, 25, 38, 69])\n * [15, 25, 38, 69, 79]\n * >>> pancakeSort([98, 12, 54, 36, 85])\n * [12, 36, 54, 85, 98]\n * >>> pancakeSort([41, 42, 32, 12, 23])\n * [12, 23, 32, 41, 42]\n */\nfunc pancakeSort(nums : [Int]) -> [Int] {\n    var nums = nums\n    var max = nums.count\n    while max > 0 {\n        let maxIndex = nums.index(of: max)\n        let maxValue = nums[maxIndex]\n        let maxIndexValue = nums.index(of: maxValue)\n        if maxIndexValue != maxIndex {\n            let maxIndexValue = nums.index(of: maxValue)\n            let maxValue = nums[maxIndexValue]\n            let maxIndexValueValue = nums.index(of: maxValue)\n            let maxValueValue = nums[maxIndexValueValue]\n            let maxIndexValueValueValue = nums.index(of: maxValueValue)\n            let maxValueValueValue = nums[maxIndexValueValueValue]\n            let maxIndexValueValueValueValue = nums.index(of: maxValueValueValue)\n            let maxValueValueValueValue = nums[maxIndexValueValueValueValue]\n            let maxIndexValueValueValueValueValue = nums.index(of: maxValueValueValueValue)\n            let maxValueValueValueValueValueValue = nums[maxIndexValueValueValueValueValue]\n            let maxIndexValueValueValueValueValueValue = nums.index(of: maxValueValueValueValueValueValue)\n            let maxValueValueValueValueValueValueValue = nums[maxIndexValueValueValueValueValueValue]\n            let maxIndexValueValueValueValueValueValueValue = nums.index(of: maxValueValueValueValueValueValueValue)\n            let maxValueValueValueValueValueValueValueValue = nums[maxIndexValueValueValueValueValue"}
{"task_id": "MBSWP/142", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the same pair in three given lists.\n *\n * >>> countSamepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9])\n * 3\n * >>> countSamepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])\n * 4\n * >>> countSamepair([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])\n * 5\n */\nfunc countSamepair(list1 : [Int], list2 : [Int], list3 : [Int]) -> Int {\n    var count = 0\n    for i in 0..<list1.count {\n        if list1[i] == list2[i] && list1[i] == list3[i] {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/143", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find number of lists present in the given tuple.\n *\n * >>> findLists([[1, 2, 3, 4], [5, 6, 7, 8]])\n * 2\n * >>> findLists([9, 8, 7, 6, 5, 4, 3, 2, 1])\n * 1\n */\nfunc findLists(input : [AnyHashable]) -> Int {\n    var count = 0\n    for element in input {\n        if element is [AnyHashable] {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/144", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of absolute differences in all pairs of the given array.\n *\n * >>> sumPairs([1, 8, 9, 15, 16], 5)\n * 74\n * >>> sumPairs([1, 2, 3, 4], 4)\n * 10\n * >>> sumPairs([1, 2, 3, 4, 5, 7, 9, 11, 14], 9)\n * 188\n */\nfunc sumPairs(arr : [Int], n : Int) -> Int {\n    var sum = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            sum += abs(arr[i] - arr[j])\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of absolute differences in all pairs of the given array.\n *\n * >>> sumPairs([1, 8, 9, 15, 16], 5)\n * 74\n * >>> sumPairs([1, 2, 3, 4], 4)\n * 10\n * >>> sumPairs([1, 2, 3, 4, 5, 7, 9, 11, 14], 9)\n * 188\n */\nfunc sumPairs(arr : [Int], n : Int) -> Int {\n    var sum = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            sum += abs(arr[i] - arr[j])\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of absolute differences in all pairs of the given array.\n *\n * >>> sumPairs([1, 8, 9, 15, 16], 5)\n * 74\n * >>> sumPairs([1, 2, 3, 4], 4)\n * 10\n * >>> sumPairs([1, 2, 3, 4, 5, 7, 9, 11, 14], 9)\n * 188\n */\nfunc sumPairs(arr : [Int], n : Int) -> Int {\n   "}
{"task_id": "MBSWP/145", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum difference between any two elements in a given array.\n *\n * >>> maxAbsDiff([2, 1, 5, 3], 4)\n * 4\n * >>> maxAbsDiff([9, 3, 2, 5, 1], 5)\n * 8\n * >>> maxAbsDiff([3, 2, 1], 3)\n * 2\n */\nfunc maxAbsDiff(arr : [Int], n : Int) -> Int {\n    var max = 0\n    var min = 0\n    for i in 0..<n {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n    }\n    return max - min\n}\n"}
{"task_id": "MBSWP/146", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the ascii value of total characters in a string.\n *\n * >>> asciiValueString(\"python\")\n * 112\n * >>> asciiValueString(\"Program\")\n * 80\n * >>> asciiValueString(\"Language\")\n * 76\n */\nfunc asciiValueString(str1 : String) -> Int {\n    var sum = 0\n    for char in str1 {\n        sum += Int(char)\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the ascii value of total characters in a string.\n *\n * >>> asciiValueString(\"python\")\n * 112\n * >>> asciiValueString(\"Program\")\n * 80\n * >>> asciiValueString(\"Language\")\n * 76\n */\nfunc asciiValueString(str1 : String) -> Int {\n    var sum = 0\n    for char in str1 {\n        sum += Int(char)\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the ascii value of total characters in a string.\n *\n * >>> asciiValueString(\"python\")\n * 112\n * >>> asciiValueString(\"Program\")\n * 80\n * >>> asciiValueString(\"Language\")\n * 76\n */\nfunc asciiValueString(str1 : String) -> Int {\n    var sum = 0\n    for char in str1 {\n        sum += Int(char)\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the ascii value of total characters in a string.\n *\n * >>> asciiValueString(\"python\")\n * 112\n * >>> asciiValueString(\"Program\")\n * 80\n * >>> asciiValueString(\"Language\")\n * 76\n */\nfunc asciiValueString(str1 : String) -> Int {\n    var sum = 0\n    for char in str1 {\n        sum += Int(char"}
{"task_id": "MBSWP/147", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum total path sum in the given triangle.\n *\n * >>> maxPathSum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2)\n * 14\n * >>> maxPathSum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2)\n * 24\n * >>> maxPathSum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2)\n * 53\n */\nfunc maxPathSum(tri : [[Int]], m : Int, n : Int) -> Int {\n    var maxSum = Int.min\n    var maxSumRow = 0\n    var maxSumCol = 0\n    var sum = 0\n    var row = 0\n    var col = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var temp = 0\n    var tempRow = 0\n    var tempCol = 0\n    var tempSum = 0\n    var tempMaxSum = 0\n    var tempMaxSumRow = 0\n    var tempMaxSumCol = 0\n    var tempMaxSumTemp = 0\n    var tempMaxSumTempRow = 0\n    var tempMaxSumTempCol = 0\n    var tempMaxSumTempSum = 0\n    var tempMaxSumTempMaxSum = 0\n    var tempMaxSumTempMaxSumRow = 0\n    var tempMaxSumTempMaxSumCol = 0\n    var tempMaxSumTempMaxSumTemp = 0\n    var tempMaxSumTempMaxSumTempRow = 0\n    var tempMaxSumTempMaxSumTempCol = 0\n    var tempMaxSumTempMaxSumTempSum = 0\n    var tempMaxSumTempMaxSumTempMaxSum = 0\n    var tempMaxSumTempMaxSumTempMaxSumRow = 0\n    var tempMaxSumTempMaxSumTempMaxSumCol = 0\n    var tempMaxSumTempMaxSumTempMaxSumTemp = 0\n    var tempMaxSumTempMaxSumTempMaxSumTempRow = 0\n    var tempMaxSumTempMaxSumTempMaxSumTempCol = 0\n    var tempMaxSumTemp"}
{"task_id": "MBSWP/148", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to divide a number into two parts such that the sum of digits is maximum.\n *\n * >>> sumDigitsTwoparts(35)\n * 17\n * >>> sumDigitsTwoparts(7)\n * 7\n * >>> sumDigitsTwoparts(100)\n * 19\n */\nfunc sumDigitsTwoparts(n : Int) -> Int {\n    var n = n\n    var sum = 0\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/149", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n *\n * >>> longestSubseqWithDiffOne([1, 2, 3, 4, 5, 3, 2], 7)\n * 6\n * >>> longestSubseqWithDiffOne([10, 9, 4, 5, 4, 8, 6], 7)\n * 3\n * >>> longestSubseqWithDiffOne([1, 2, 3, 2, 3, 7, 2, 1], 8)\n * 7\n */\nfunc longestSubseqWithDiffOne(arr : [Int], n : Int) -> Int {\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] - arr[j] == 1 {\n                dp[i][j] = dp[i][j-1] + 1\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            }\n        }\n    }\n    return dp[0][n-1]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n *\n * >>> longestSubseqWithDiffOne([1, 2, 3, 4, 5, 3, 2], 7)\n * 6\n * >>> longestSubseqWithDiffOne([10, 9, 4, 5, 4, 8, 6], 7)\n * 3\n * >>> longestSubseqWithDiffOne([1, 2, 3, 2, 3, 7, 2, 1], 8)\n * 7\n */\nfunc longestSubseqWithDiffOne(arr : [Int], n : Int) -> Int {\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in"}
{"task_id": "MBSWP/150", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find whether the given number is present in the infinite sequence or not.\n *\n * >>> doesContainB(1, 7, 3)\n * true\n * >>> doesContainB(1, -3, 5)\n * false\n * >>> doesContainB(3, 2, 5)\n * false\n */\nfunc doesContainB(a : Int, b : Int, c : Int) -> Bool {\n    var a = a\n    var b = b\n    var c = c\n    var count = 0\n    while a != b {\n        if a > b {\n            a -= c\n        } else {\n            a += c\n        }\n        count += 1\n    }\n    return count % 2 == 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find whether the given number is present in the infinite sequence or not.\n *\n * >>> doesContainC(1, 7, 3)\n * true\n * >>> doesContainC(1, -3, 5)\n * false\n * >>> doesContainC(3, 2, 5)\n * false\n */\nfunc doesContainC(a : Int, b : Int, c : Int) -> Bool {\n    var a = a\n    var b = b\n    var c = c\n    var count = 0\n    while a != b {\n        if a > b {\n            a -= c\n        } else {\n            a += c\n        }\n        count += 1\n    }\n    return count % 2 == 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find whether the given number is present in the infinite sequence or not.\n *\n * >>> doesContainD(1, 7, 3)\n * true\n * >>> doesContainD(1, -3, 5)\n * false\n * >>> doesContainD(3, 2, 5)\n * false\n */\nfunc doesContainD(a : Int, b : Int, c : Int) -> Bool {\n    var a = a\n    var"}
{"task_id": "MBSWP/151", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number is co-prime or not.\n *\n * >>> isCoprime(17, 13)\n * true\n * >>> isCoprime(15, 21)\n * false\n * >>> isCoprime(25, 45)\n * false\n */\nfunc isCoprime(x : Int, y : Int) -> Bool {\n    if x == y {\n        return true\n    }\n    if x % y == 0 {\n        return false\n    }\n    if x % y == 1 {\n        return true\n    }\n    if x % y == -1 {\n        return true\n    }\n    return isCoprime(y, x % y)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number is prime or not.\n *\n * >>> isPrime(17)\n * true\n * >>> isPrime(15)\n * false\n * >>> isPrime(25)\n * false\n */\nfunc isPrime(x : Int) -> Bool {\n    if x == 1 {\n        return false\n    }\n    if x == 2 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i in 3..<Int.sqrt(x) {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number is perfect square or not.\n *\n * >>> isPerfectSquare(16)\n * true\n * >>> isPerfectSquare(15)\n * false\n * >>> isPerfectSquare(25)\n * false\n */\nfunc isPerfectSquare(x : Int) -> Bool {\n    if x == 1 {\n        return true\n    }\n    if x % 2 == 0 {\n        return false\n    }\n    for i in 3..<Int.sqrt(x) {\n        if x % i == 0 {\n            return false\n        }\n    }\n   "}
{"task_id": "MBSWP/152", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the given array by using merge sort.\n *\n * >>> mergeSort([3, 4, 2, 6, 5, 7, 1, 9])\n * [1, 2, 3, 4, 5, 6, 7, 9]\n * >>> mergeSort([7, 25, 45, 78, 11, 33, 19])\n * [7, 11, 19, 25, 33, 45, 78]\n * >>> mergeSort([3, 1, 4, 9, 8])\n * [1, 3, 4, 8, 9]\n */\nfunc mergeSort(x : [Int]) -> [Int] {\n    if x.count <= 1 {\n        return x\n    }\n    let mid = x.count / 2\n    let left = mergeSort(x[0..<mid])\n    let right = mergeSort(x[mid..<x.count])\n    return merge(left, right)\n}\n\nfunc merge(left : [Int], right : [Int]) -> [Int] {\n    var result = [Int]()\n    var leftIndex = 0\n    var rightIndex = 0\n    while leftIndex < left.count && rightIndex < right.count {\n        if left[leftIndex] < right[rightIndex] {\n            result.append(left[leftIndex])\n            leftIndex += 1\n        } else {\n            result.append(right[rightIndex])\n            rightIndex += 1\n        }\n    }\n    while leftIndex < left.count {\n        result.append(left[leftIndex])\n        leftIndex += 1\n    }\n    while rightIndex < right.count {\n        result.append(right[rightIndex])\n        rightIndex += 1\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the given array by using quick sort.\n *\n * >>> quickSort([3, 4, 2, 6, 5, 7, 1, 9])\n * [1, 2, 3, 4, 5, 6, 7, 9]\n * >>> quickSort([7, 25, 45, 78, 11, 33, 19])\n *"}
{"task_id": "MBSWP/153", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the vertex of a parabola.\n *\n * >>> parabolaVertex(5, 3, 2)\n * [-0.3, 1.55]\n * >>> parabolaVertex(9, 8, 4)\n * [-0.4444444444444444, 2.2222222222222223]\n * >>> parabolaVertex(2, 4, 6)\n * [-1.0, 4.0]\n */\nfunc parabolaVertex(a : Int, b : Int, c : Int) -> [Double] {\n    let x = -b / (2 * a)\n    let y = math.sqrt(b * b - 4 * a * c) / (2 * a)\n    return [x, y]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a triangle.\n *\n * >>> triangleArea(5, 3, 2)\n * 6.0\n * >>> triangleArea(9, 8, 4)\n * 12.0\n * >>> triangleArea(2, 4, 6)\n * 6.0\n */\nfunc triangleArea(a : Int, b : Int, c : Int) -> Double {\n    return .5 * (a + b + c) * math.sqrt(s: (a - b) * (a - b) + (b - c) * (b - c) + (c - a) * (c - a))\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a rectangle.\n *\n * >>> rectangleArea(5, 3, 2)\n * 15.0\n * >>> rectangleArea(9, 8, 4)\n * 32.0\n * >>> rectangleArea(2, 4, 6)\n * 12.0\n */\nfunc rectangleArea(a : Int, b : Int, c : Int) -> Double {\n    return a * b\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a"}
{"task_id": "MBSWP/154", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract every specified element from a given two dimensional list.\n *\n * >>> specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)\n * [1, 4, 7]\n * >>> specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)\n * [3, 6, 9]\n * >>> specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3)\n * [2, 2, 5]\n */\nfunc specifiedElement(nums : [[Int]], n : Int) -> [Int] {\n    var result = [Int]()\n    for i in nums {\n        result.append(i[n])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract every specified element from a given two dimensional list.\n *\n * >>> specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)\n * [1, 4, 7]\n * >>> specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)\n * [3, 6, 9]\n * >>> specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3)\n * [2, 2, 5]\n */\nfunc specifiedElement(nums : [[Int]], n : Int) -> [Int] {\n    var result = [Int]()\n    for i in nums {\n        result.append(i[n])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract every specified element from a given two dimensional list.\n *\n * >>> specifiedElement([[1, 2, 3"}
{"task_id": "MBSWP/155", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to toggle all even bits of a given number.\n *\n * >>> evenBitToggleNumber(10)\n * 0\n * >>> evenBitToggleNumber(20)\n * 30\n * >>> evenBitToggleNumber(30)\n * 20\n */\nfunc evenBitToggleNumber(n : Int) -> Int {\n    var result = n\n    for i in stride(from: 0, through: 31, by: 2) {\n        if (n & (1 << i)) != 0 {\n            result &= ~(1 << i)\n        } else {\n            result |= (1 << i)\n        }\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/156", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a tuple of string values to a tuple of integer values.\n *\n * >>> tupleIntStr([[\"333\", \"33\"], [\"1416\", \"55\"]])\n * [[333, 33], [1416, 55]]\n * >>> tupleIntStr([[\"999\", \"99\"], [\"1000\", \"500\"]])\n * [[999, 99], [1000, 500]]\n * >>> tupleIntStr([[\"666\", \"66\"], [\"1500\", \"555\"]])\n * [[666, 66], [1500, 555]]\n */\nfunc tupleIntStr(tupleStr : [[String]]) -> [[Int]] {\n    var tupleInt : [[Int]] = []\n    for i in 0..<tupleStr.count {\n        var tupleInt1 : [Int] = []\n        for j in 0..<tupleStr[i].count {\n            tupleInt1.append(Int(tupleStr[i][j]))\n        }\n        tupleInt.append(tupleInt1)\n    }\n    return tupleInt\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a tuple of integer values to a tuple of string values.\n *\n * >>> tupleStrInt([[333, 33], [1416, 55]])\n * [[\"333\", \"33\"], [\"1416\", \"55\"]]\n * >>> tupleStrInt([[999, 99], [1000, 500]])\n * [[\"999\", \"99\"], [\"1000\", \"500\"]]\n * >>> tupleStrInt([[666, 66], [1500, 555]])\n * [[\"666\", \"66\"], [\"1500\", \"555\"]]\n */\nfunc tupleStrInt(tupleInt : [[Int]]) -> [[String]] {\n    var tupleStr : [[String]] = []\n    for i in 0..<tupleInt.count {\n        var tupleStr1 : [String] = []\n        for j in 0..<tupleInt[i].count {\n            tupleStr1.append(String(tupleInt[i][j]))\n        }\n        tupleStr.append(tupleStr1)\n    }\n    return"}
{"task_id": "MBSWP/157", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reflect the run-length encoding from a list.\n *\n * >>> encodeList([1, 1, 2, 3, 4, 4.3, 5, 1])\n * [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n * >>> encodeList(\"automatically\")\n * [[1, \"a\"], [1, \"u\"], [1, \"t\"], [1, \"o\"], [1, \"m\"], [1, \"a\"], [1, \"t\"], [1, \"i\"], [1, \"c\"], [1, \"a\"], [2, \"l\"], [1, \"y\"]]\n * >>> encodeList(\"python\")\n * [[1, \"p\"], [1, \"y\"], [1, \"t\"], [1, \"h\"], [1, \"o\"], [1, \"n\"]]\n */\nfunc encodeList(list1 : AnyHashable) -> [[AnyHashable]] {\n    var list2 : [[AnyHashable]] = []\n    var count : Int = 1\n    var item : AnyHashable = list1[0]\n    for i in 1..<list1.count {\n        if list1[i] == item {\n            count += 1\n        } else {\n            list2.append([count, item])\n            count = 1\n            item = list1[i]\n        }\n    }\n    list2.append([count, item])\n    return list2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reflect the run-length encoding from a list.\n *\n * >>> encodeList([1, 1, 2, 3, 4, 4.3, 5, 1])\n * [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n * >>> encodeList(\"automatically\")\n * [[1, \"a\"], [1, \"u\"], [1, \"t\"], [1, \"o\"], [1, \"m\"], ["}
{"task_id": "MBSWP/158", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find k number of operations required to make all elements equal.\n *\n * >>> minOps([2, 2, 2, 2], 4, 3)\n * 0\n * >>> minOps([4, 2, 6, 8], 4, 3)\n * -1\n * >>> minOps([21, 33, 9, 45, 63], 5, 6)\n * 24\n */\nfunc minOps(arr : [Int], n : Int, k : Int) -> Int {\n    var arr = arr\n    var k = k\n    var n = n\n    var count = 0\n    var min = 0\n    var max = 0\n    var mid = 0\n    var flag = false\n    var flag2 = false\n    var flag3 = false\n    var flag4 = false\n    var flag5 = false\n    var flag6 = false\n    var flag7 = false\n    var flag8 = false\n    var flag9 = false\n    var flag10 = false\n    var flag11 = false\n    var flag12 = false\n    var flag13 = false\n    var flag14 = false\n    var flag15 = false\n    var flag16 = false\n    var flag17 = false\n    var flag18 = false\n    var flag19 = false\n    var flag20 = false\n    var flag21 = false\n    var flag22 = false\n    var flag23 = false\n    var flag24 = false\n    var flag25 = false\n    var flag26 = false\n    var flag27 = false\n    var flag28 = false\n    var flag29 = false\n    var flag30 = false\n    var flag31 = false\n    var flag32 = false\n    var flag33 = false\n    var flag34 = false\n    var flag35 = false\n    var flag36 = false\n    var flag37 = false\n    var flag38 = false\n    var flag39 = false\n    var flag40 = false\n    var flag41 = false\n    var flag42 = false\n    var flag43 = false\n    var flag44 = false\n    var flag45 = false\n    var flag46 = false\n    var flag47 = false\n    var flag48 = false\n    var flag49 = false\n"}
{"task_id": "MBSWP/159", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print the season for the given month and day.\n *\n * >>> monthSeason(\"January\", 4)\n * \"winter\"\n * >>> monthSeason(\"October\", 28)\n * \"autumn\"\n * >>> monthSeason(\"June\", 6)\n * \"spring\"\n */\nfunc monthSeason(month : String, days : Int) -> String {\n    let season = \"\"\n    if month == \"January\" || month == \"March\" || month == \"May\" || month == \"July\" || month == \"August\" || month == \"October\" || month == \"December\" {\n        season = \"winter\"\n    } else if month == \"April\" || month == \"June\" || month == \"September\" || month == \"November\" {\n        season = \"spring\"\n    } else if month == \"February\" || month == \"April\" || month == \"June\" || month == \"August\" || month == \"October\" || month == \"December\" {\n        season = \"summer\"\n    } else if month == \"January\" || month == \"March\" || month == \"May\" || month == \"July\" || month == \"September\" || month == \"November\" {\n        season = \"autumn\"\n    }\n    return season\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print the season for the given month and day.\n *\n * >>> monthSeason(\"January\", 4)\n * \"winter\"\n * >>> monthSeason(\"October\", 28)\n * \"autumn\"\n * >>> monthSeason(\"June\", 6)\n * \"spring\"\n */\nfunc monthSeason(month : String, days : Int) -> String {\n    let season = \"\"\n    if month == \"January\" || month == \"March\" || month == \"May\" || month == \"July\" || month == \"August\" || month == \"October\" || month == \"December\" {\n        season = \"winter\"\n    } else if month == \"April\" || month == \"June\" || month == \"September\" || month == \"November\" {\n        season = \"spring\"\n    } else if month == \"February\" || month == \"April\" ||"}
{"task_id": "MBSWP/160", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find x and y that satisfies ax + by = n.\n *\n * >>> solution(2, 3, 7)\n * [\"x = \", 2, \", y = \", 1]\n * >>> solution(4, 2, 7)\n * \"No solution\"\n * >>> solution(1, 13, 17)\n * [\"x = \", 4, \", y = \", 1]\n */\nfunc solution(a : Int, b : Int, n : Int) -> AnyHashable {\n    if a == 0 || b == 0 {\n        return \"No solution\"\n    }\n    let x = n / a\n    let y = n % a\n    return [\"x = \", x, \", y = \", y]\n}\n"}
{"task_id": "MBSWP/161", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all elements from a given list present in another list.\n *\n * >>> removeElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])\n * [1, 3, 5, 7, 9, 10]\n * >>> removeElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7])\n * [2, 4, 6, 8, 9, 10]\n * >>> removeElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7])\n * [1, 2, 3, 4, 6, 8, 9, 10]\n */\nfunc removeElements(list1 : [Int], list2 : [Int]) -> [Int] {\n    var result = list1\n    for element in list2 {\n        result = removeElement(result, element)\n    }\n    return result\n}\n\nfunc removeElement(list : [Int], element : Int) -> [Int] {\n    var result = list\n    for index in 0..<result.count {\n        if result[index] == element {\n            result.remove(at: index)\n        }\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/162", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n *\n * >>> sumSeries(6)\n * 12\n * >>> sumSeries(10)\n * 30\n * >>> sumSeries(9)\n * 25\n */\nfunc sumSeries(n : Int) -> Int {\n    var sum = 0\n    var n = n\n    while n > 0 {\n        sum += n\n        n -= 2\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/163", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the area of a regular polygon.\n *\n * >>> areaPolygon(4, 20)\n * 400.00000000000006\n * >>> areaPolygon(10, 15)\n * 1731.1969896610804\n * >>> areaPolygon(9, 7)\n * 302.90938549487214\n */\nfunc areaPolygon(s : Int, l : Int) -> Double {\n    return (s * l) / 2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the area of a regular polygon.\n *\n * >>> areaPolygon(4, 20)\n * 400.00000000000006\n * >>> areaPolygon(10, 15)\n * 1731.1969896610804\n * >>> areaPolygon(9, 7)\n * 302.90938549487214\n */\nfunc areaPolygon(s : Int, l : Int) -> Double {\n    return (s * l) / 2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the area of a regular polygon.\n *\n * >>> areaPolygon(4, 20)\n * 400.00000000000006\n * >>> areaPolygon(10, 15)\n * 1731.1969896610804\n * >>> areaPolygon(9, 7)\n * 302.90938549487214\n */\nfunc areaPolygon(s : Int, l : Int) -> Double {\n    return (s * l) / 2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the area of a regular polygon.\n *\n * >>> areaPolygon(4, 20)\n * 400.00000000000006\n * >>> areaPolygon(10, 15)\n * 1731.1969896610804\n * >>> areaPolygon(9, 7)\n * 302.90938549487214\n */\nfunc areaPolygon(s : Int, l : Int) -> Double {\n    return (s * l) / 2\n}\n\n/**\n * You"}
{"task_id": "MBSWP/164", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the sum of divisors are same or not.\n *\n * >>> areequivalent(36, 57)\n * false\n * >>> areequivalent(2, 4)\n * false\n * >>> areequivalent(23, 47)\n * true\n */\nfunc areequivalent(num1 : Int, num2 : Int) -> Bool {\n    var sum1 = 0\n    var sum2 = 0\n    for i in 1...num1 {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i in 1...num2 {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n"}
{"task_id": "MBSWP/165", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n *\n * >>> countCharPosition(\"xbcefg\")\n * 2\n * >>> countCharPosition(\"ABcED\")\n * 3\n * >>> countCharPosition(\"AbgdeF\")\n * 5\n */\nfunc countCharPosition(str1 : String) -> Int {\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] == str1[i].lowercased() {\n            count += 1\n        }\n    }\n    return count\n}\n\n// Test\nprint(countCharPosition(\"xbcefg\"))\nprint(countCharPosition(\"ABcED\"))\nprint(countCharPosition(\"AbgdeF\"))\n"}
{"task_id": "MBSWP/166", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the pairs with xor as an even number.\n *\n * >>> findEvenPair([5, 4, 7, 2, 1], 5)\n * 4\n * >>> findEvenPair([7, 2, 8, 1, 0, 5, 11], 7)\n * 9\n * >>> findEvenPair([1, 2, 3], 3)\n * 1\n */\nfunc findEvenPair(a : [Int], n : Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if a[i] ^ a[j] == n {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/167", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find smallest power of 2 greater than or equal to n.\n *\n * >>> nextPowerOf2(0)\n * 1\n * >>> nextPowerOf2(5)\n * 8\n * >>> nextPowerOf2(17)\n * 32\n */\nfunc nextPowerOf2(n : Int) -> Int {\n    var n = n\n    if n == 0 {\n        return 1\n    }\n    n = n - 1\n    n = n | (n >> 1)\n    n = n | (n >> 2)\n    n = n | (n >> 4)\n    n = n | (n >> 8)\n    n = n | (n >> 16)\n    return n + 1\n}\n"}
{"task_id": "MBSWP/168", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the frequency of a number in a given array.\n *\n * >>> frequency([1, 2, 3], 4)\n * 0\n * >>> frequency([1, 2, 2, 3, 3, 3, 4], 3)\n * 3\n * >>> frequency([0, 1, 2, 3, 1, 2], 1)\n * 2\n */\nfunc frequency(a : [Int], x : Int) -> Int {\n    var count = 0\n    for i in a {\n        if i == x {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/169", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the nth pell number.\n *\n * >>> getPell(4)\n * 12\n * >>> getPell(7)\n * 169\n * >>> getPell(8)\n * 408\n */\nfunc getPell(n : Int) -> Int {\n    var n = n\n    var result = 1\n    while n > 0 {\n        result *= n\n        n -= 2\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the nth pell number.\n *\n * >>> getPell(4)\n * 12\n * >>> getPell(7)\n * 169\n * >>> getPell(8)\n * 408\n */\nfunc getPell(n : Int) -> Int {\n    var n = n\n    var result = 1\n    while n > 0 {\n        result *= n\n        n -= 2\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the nth pell number.\n *\n * >>> getPell(4)\n * 12\n * >>> getPell(7)\n * 169\n * >>> getPell(8)\n * 408\n */\nfunc getPell(n : Int) -> Int {\n    var n = n\n    var result = 1\n    while n > 0 {\n        result *= n\n        n -= 2\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the nth pell number.\n *\n * >>> getPell(4)\n * 12\n * >>> getPell(7)\n * 169\n * >>> getPell(8)\n * 408\n */\nfunc getPell(n : Int) -> Int {\n    var n = n\n    var result = 1\n    while n > 0 {\n        result *= n\n        n -= 2\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here"}
{"task_id": "MBSWP/170", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find sum of the numbers in a list between the indices of a specified range.\n *\n * >>> sumRangeList([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n * 29\n * >>> sumRangeList([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7)\n * 16\n * >>> sumRangeList([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10)\n * 38\n */\nfunc sumRangeList(list1 : [Int], m : Int, n : Int) -> Int {\n    var sum = 0\n    for i in m..<n {\n        sum += list1[i]\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find sum of the numbers in a list between the indices of a specified range.\n *\n * >>> sumRangeList([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n * 29\n * >>> sumRangeList([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7)\n * 16\n * >>> sumRangeList([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10)\n * 38\n */\nfunc sumRangeList(list1 : [Int], m : Int, n : Int) -> Int {\n    var sum = 0\n    for i in m..<n {\n        sum += list1[i]\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find sum of the numbers in a list between the indices of a specified range.\n *\n * >>> sumRangeList([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n * 29\n"}
{"task_id": "MBSWP/171", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a pentagon.\n *\n * >>> perimeterPentagon(5)\n * 25\n * >>> perimeterPentagon(10)\n * 50\n * >>> perimeterPentagon(15)\n * 75\n */\nfunc perimeterPentagon(a : Int) -> Int {\n    return a * (3 * a - 1)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a hexagon.\n *\n * >>> perimeterHexagon(5)\n * 30\n * >>> perimeterHexagon(10)\n * 60\n * >>> perimeterHexagon(15)\n * 90\n */\nfunc perimeterHexagon(a : Int) -> Int {\n    return a * (4 * a - 1)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a heptagon.\n *\n * >>> perimeterHeptagon(5)\n * 35\n * >>> perimeterHeptagon(10)\n * 70\n * >>> perimeterHeptagon(15)\n * 105\n */\nfunc perimeterHeptagon(a : Int) -> Int {\n    return a * (5 * a - 1)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a octagon.\n *\n * >>> perimeterOctagon(5)\n * 40\n * >>> perimeterOctagon(10)\n * 80\n * >>> perimeterOctagon(15)\n * 120\n */\nfunc perimeterOctagon(a : Int) -> Int {\n    return a * (6 * a - 1)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a nonagon.\n *\n * >>> perimeterNonagon(5)\n * 45\n * >>> perimeterNonagon(10)\n * 90\n * >>> perimeterNonagon(15)\n * 135\n */\nfunc perimeterNonagon(a : Int) -> Int {\n    return a * (7 * a - 1)\n}\n"}
{"task_id": "MBSWP/172", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n *\n * >>> countOccurance(\"letstdlenstdporstd\")\n * 3\n * >>> countOccurance(\"truststdsolensporsd\")\n * 1\n * >>> countOccurance(\"makestdsostdworthit\")\n * 2\n */\nfunc countOccurance(s : String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == \"s\" && s[i+1] == \"t\" && s[i+2] == \"d\" {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/173", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove everything except alphanumeric characters from a string.\n *\n * >>> removeSplchar(\"python  @#&^%\\$*program123\")\n * \"pythonprogram123\"\n * >>> removeSplchar(\"python %^\\$@!^&*()  programming24%\\$^^()    language\")\n * \"pythonprogramming24language\"\n * >>> removeSplchar(\"python   ^%&^()(+_)(_^&67)                  program\")\n * \"python67program\"\n */\nfunc removeSplchar(text : String) -> String {\n    var result = \"\"\n    for char in text {\n        if char.isLetterOrNumber {\n            result += char\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove everything except alphanumeric characters from a string.\n *\n * >>> removeSplchar(\"python  @#&^%\\$*program123\")\n * \"pythonprogram123\"\n * >>> removeSplchar(\"python %^\\$@!^&*()  programming24%\\$^^()    language\")\n * \"pythonprogramming24language\"\n * >>> removeSplchar(\"python   ^%&^()(+_)(_^&67)                  program\")\n * \"python67program\"\n */\nfunc removeSplchar(text : String) -> String {\n    var result = \"\"\n    for char in text {\n        if char.isLetterOrNumber {\n            result += char\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove everything except alphanumeric characters from a string.\n *\n * >>> removeSplchar(\"python  @#&^%\\$*program123\")\n * \"pythonprogram123\"\n * >>> removeSplchar(\"python %^\\$@!^&*()  programming24%\\$^^()    language\")\n * \"pythonprogramming24language\"\n * >>> removeSplchar(\"python   ^%&^()(+_)(_^&67)                  program\")\n * \""}
{"task_id": "MBSWP/174", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to group a sequence of key-value pairs into a dictionary of lists.\n *\n * >>> groupKeyvalue([[\"yellow\", 1], [\"blue\", 2], [\"yellow\", 3], [\"blue\", 4], [\"red\", 1]])\n * [\"yellow\" : [1, 3], \"blue\" : [2, 4], \"red\" : [1]]\n * >>> groupKeyvalue([[\"python\", 1], [\"python\", 2], [\"python\", 3], [\"python\", 4], [\"python\", 5]])\n * [\"python\" : [1, 2, 3, 4, 5]]\n * >>> groupKeyvalue([[\"yellow\", 100], [\"blue\", 200], [\"yellow\", 300], [\"blue\", 400], [\"red\", 100]])\n * [\"yellow\" : [100, 300], \"blue\" : [200, 400], \"red\" : [100]]\n */\nfunc groupKeyvalue(l : [[AnyHashable]]) -> [String: [Int]] {\n    var dict : [String: [Int]] = [:]\n    for i in l {\n        let key = i[0] as! String\n        let value = i[1] as! Int\n        if let v = dict[key] {\n            dict[key] = v + [value]\n        } else {\n            dict[key] = [value]\n        }\n    }\n    return dict\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to group a sequence of key-value pairs into a dictionary of lists.\n *\n * >>> groupKeyvalue([[\"yellow\", 1], [\"blue\", 2], [\"yellow\", 3], [\"blue\", 4], [\"red\", 1]])\n * [\"yellow\" : [1, 3], \"blue\" : [2, 4], \"red\" : [1]]\n * >>> groupKeyvalue([[\"python\", 1], [\"python\", 2], [\"python\", 3], [\"python\", 4], [\"python\", 5]])\n * [\"python\" : [1, 2, 3, 4, 5]]\n * >>> groupKeyvalue([[\"yellow\", 100], [\"blue\", 200], [\"yellow\", 300], [\"blue\", 400], [\"red\", 100]])"}
{"task_id": "MBSWP/175", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to verify validity of a string of parentheses.\n *\n * >>> isValidParenthese(\"(){}[]\")\n * true\n * >>> isValidParenthese(\"()[{)}\")\n * false\n * >>> isValidParenthese(\"()\")\n * true\n */\nfunc isValidParenthese(str1 : String) -> Bool {\n    var str2 = str1\n    var stack = [Character]()\n    var isValid = true\n    for char in str2 {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.append(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty {\n                isValid = false\n                break\n            }\n            let top = stack.popLast()\n            if top == \"(\" && char == \")\" {\n                continue\n            } else if top == \"{\" && char == \"}\" {\n                continue\n            } else if top == \"[\" && char == \"]\" {\n                continue\n            } else {\n                isValid = false\n                break\n            }\n        }\n    }\n    if !stack.isEmpty {\n        isValid = false\n    }\n    return isValid\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to verify validity of a string of parentheses.\n *\n * >>> isValidParenthese(\"(){}[]\")\n * true\n * >>> isValidParenthese(\"()[{)}\")\n * false\n * >>> isValidParenthese(\"()\")\n * true\n */\nfunc isValidParenthese(str1 : String) -> Bool {\n    var str2 = str1\n    var stack = [Character]()\n    var isValid = true\n    for char in str2 {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.append(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty {\n                isValid = false\n                break\n            }\n            let top = stack"}
{"task_id": "MBSWP/176", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a triangle.\n *\n * >>> perimeterTriangle(10, 20, 30)\n * 60\n * >>> perimeterTriangle(3, 4, 5)\n * 12\n * >>> perimeterTriangle(25, 35, 45)\n * 105\n */\nfunc perimeterTriangle(a : Int, b : Int, c : Int) -> Int {\n    return a + b + c\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a rectangle.\n *\n * >>> perimeterRectangle(10, 20)\n * 40\n * >>> perimeterRectangle(3, 4)\n * 12\n * >>> perimeterRectangle(25, 35)\n * 60\n */\nfunc perimeterRectangle(a : Int, b : Int) -> Int {\n    return 2 * (a + b)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a square.\n *\n * >>> perimeterSquare(10)\n * 40\n * >>> perimeterSquare(3)\n * 12\n * >>> perimeterSquare(25)\n * 60\n */\nfunc perimeterSquare(a : Int) -> Int {\n    return 4 * a\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a parallelogram.\n *\n * >>> perimeterParallelogram(10, 20)\n * 40\n * >>> perimeterParallelogram(3, 4)\n * 12\n * >>> perimeterParallelogram(25, 35)\n * 60\n */\nfunc perimeterParallelogram(a : Int, b : Int) -> Int {\n    return 2 * (a + b)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a trapezoid.\n *\n * >>> perimeterTrapezoid(10, 20, 30)\n * 60\n * >>> perimeterTrapezoid(3, 4, 5)\n * 12\n * >>> perimeterTrapezoid(25, 35, 45"}
{"task_id": "MBSWP/177", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find two distinct numbers such that their lcm lies within the given range.\n *\n * >>> answer(3, 8)\n * [3, 6]\n * >>> answer(2, 6)\n * [2, 4]\n * >>> answer(1, 3)\n * [1, 2]\n */\nfunc answer(l : Int, r : Int) -> [Int] {\n    var lcm = 1\n    var a = 1\n    var b = 1\n    while lcm < l || lcm > r {\n        a += 1\n        b += 1\n        lcm = lcm * a / b\n    }\n    return [a, b]\n}\n"}
{"task_id": "MBSWP/178", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search some literals strings in a string.\n *\n * >>> stringLiterals([\"language\"], \"python language\")\n * \"Matched!\"\n * >>> stringLiterals([\"program\"], \"python language\")\n * \"Not Matched!\"\n * >>> stringLiterals([\"python\"], \"programming language\")\n * \"Not Matched!\"\n */\nfunc stringLiterals(patterns : [String], text : String) -> String {\n    var matched = false\n    for pattern in patterns {\n        if text.contains(pattern) {\n            matched = true\n            break\n        }\n    }\n    return matched ? \"Matched!\" : \"Not Matched!\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search some regex strings in a string.\n *\n * >>> regexLiterals([\"language\"], \"python language\")\n * \"Matched!\"\n * >>> regexLiterals([\"program\"], \"python language\")\n * \"Not Matched!\"\n * >>> regexLiterals([\"python\"], \"programming language\")\n * \"Matched!\"\n */\nfunc regexLiterals(patterns : [String], text : String) -> String {\n    var matched = false\n    for pattern in patterns {\n        if text.match(pattern) {\n            matched = true\n            break\n        }\n    }\n    return matched ? \"Matched!\" : \"Not Matched!\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search some literals strings in a string.\n *\n * >>> stringLiterals([\"language\"], \"python language\")\n * \"Matched!\"\n * >>> stringLiterals([\"program\"], \"python language\")\n * \"Not Matched!\"\n * >>> stringLiterals([\"python\"], \"programming language\")\n * \"Matched!\"\n */\nfunc stringLiterals(patterns : [String], text : String) -> String {\n    var matched = false\n    for pattern in patterns {\n        if text.contains(pattern) {\n            matched = true\n            break\n        }\n    }\n    return matched ? \"Matched!\" :"}
{"task_id": "MBSWP/179", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find if the given number is a keith number or not.\n *\n * >>> isNumKeith(14)\n * true\n * >>> isNumKeith(12)\n * false\n * >>> isNumKeith(197)\n * true\n */\nfunc isNumKeith(x : Int) -> Bool {\n    var x = x\n    var count = 0\n    while x > 0 {\n        if x % 10 == 0 {\n            count += 1\n        }\n        x /= 10\n    }\n    return count == 3\n}\n"}
{"task_id": "MBSWP/180", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate distance between two points using latitude and longitude.\n *\n * >>> distanceLatLong(23.5, 67.5, 25.5, 69.5)\n * 12179.372041317429\n * >>> distanceLatLong(10.5, 20.5, 30.5, 40.5)\n * 6069.397933300514\n * >>> distanceLatLong(10, 20, 30, 40)\n * 6783.751974994595\n */\nfunc distanceLatLong(slat : Double, slon : Double, elat : Double, elon : Double) -> Double {\n    let lat1 = slat * Math.PI / 180\n    let lat2 = elat * Math.PI / 180\n    let lon1 = slon * Math.PI / 180\n    let lon2 = elon * Math.PI / 180\n    let R = 6371\n    let dLat = lat2 - lat1\n    let dLon = lon2 - lon1\n    let a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(dLon / 2) * Math.sin(dLon / 2)\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n    return R * c\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate distance between two points using latitude and longitude.\n *\n * >>> distanceLatLong(23.5, 67.5, 25.5, 69.5)\n * 12179.372041317429\n * >>> distanceLatLong(10.5, 20.5, 30.5, 40.5)\n * 6069.397933300514\n * >>> distanceLatLong(10, 20, 30, 40)\n * 6783.751974994595\n */\nfunc distanceLatLong(slat : Double, slon : Double, elat : Double, elon : Double) -> Double {\n    let lat1 = slat"}
{"task_id": "MBSWP/181", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the longest common prefix in the given set of strings.\n *\n * >>> commonPrefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4)\n * \"ta\"\n * >>> commonPrefix([\"apples\", \"ape\", \"april\"], 3)\n * \"ap\"\n * >>> commonPrefix([\"teens\", \"teenager\", \"teenmar\"], 3)\n * \"teen\"\n */\nfunc commonPrefix(arr : [String], n : Int) -> String {\n    var prefix = \"\"\n    var i = 0\n    while i < n {\n        var j = 0\n        while j < n {\n            if i == j {\n                prefix += arr[i]\n            }\n            j += 1\n        }\n        i += 1\n    }\n    return prefix\n}\n"}
{"task_id": "MBSWP/182", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n *\n * >>> findCharacter(\"ThisIsGeeksforGeeks\")\n * [[\"T\", \"I\", \"G\", \"G\"], [\"h\", \"i\", \"s\", \"s\", \"e\", \"e\", \"k\", \"s\", \"f\", \"o\", \"r\", \"e\", \"e\", \"k\", \"s\"], [], []]\n * >>> findCharacter(\"Hithere2\")\n * [[\"H\"], [\"i\", \"t\", \"h\", \"e\", \"r\", \"e\"], [\"2\"], []]\n * >>> findCharacter(\"HeyFolks32\")\n * [[\"H\", \"F\"], [\"e\", \"y\", \"o\", \"l\", \"k\", \"s\"], [\"3\", \"2\"], []]\n */\nfunc findCharacter(string : String) -> [[AnyHashable]] {\n    var uppercase : [[AnyHashable]] = []\n    var lowercase : [[AnyHashable]] = []\n    var special : [[AnyHashable]] = []\n    var numeric : [[AnyHashable]] = []\n    \n    for char in string {\n        if char.isUppercase {\n            uppercase.append([char])\n        } else if char.isLowercase {\n            lowercase.append([char])\n        } else if char.isNumeric {\n            numeric.append([char])\n        } else {\n            special.append([char])\n        }\n    }\n    \n    return [uppercase, lowercase, special, numeric]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find uppercase, lowercase, special character and numeric values using regex.\n *\n * >>> findCharacter(\"ThisIsGeeksforGeeks\")\n * [[\"T\", \"I\", \"G\", \"G\"], [\"h\", \"i\", \"s\", \"s\", \"e\", \"e\", \"k\", \"s\", \"f\", \"o\", \"r\", \"e\", \"e\", \"k\", \"s\"], [], []]\n * >>> findCharacter(\"Hithere2\")\n"}
{"task_id": "MBSWP/183", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count all the distinct pairs having a difference of k in any array.\n *\n * >>> countPairs([1, 5, 3, 4, 2], 5, 3)\n * 2\n * >>> countPairs([8, 12, 16, 4, 0, 20], 6, 4)\n * 5\n * >>> countPairs([2, 4, 1, 3, 4], 5, 2)\n * 3\n */\nfunc countPairs(arr : [Int], n : Int, k : Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[j] - arr[i] == k {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/184", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all the values in a list that are greater than a specified number.\n *\n * >>> greaterSpecificnum([220, 330, 500], 200)\n * true\n * >>> greaterSpecificnum([12, 17, 21], 20)\n * false\n * >>> greaterSpecificnum([1, 2, 3, 4], 10)\n * false\n */\nfunc greaterSpecificnum(list : [Int], num : Int) -> Bool {\n    var result = false\n    for i in list {\n        if i > num {\n            result = true\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all the values in a list that are greater than a specified number.\n *\n * >>> greaterSpecificnum([220, 330, 500], 200)\n * true\n * >>> greaterSpecificnum([12, 17, 21], 20)\n * false\n * >>> greaterSpecificnum([1, 2, 3, 4], 10)\n * false\n */\nfunc greaterSpecificnum(list : [Int], num : Int) -> Bool {\n    var result = false\n    for i in list {\n        if i > num {\n            result = true\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all the values in a list that are greater than a specified number.\n *\n * >>> greaterSpecificnum([220, 330, 500], 200)\n * true\n * >>> greaterSpecificnum([12, 17, 21], 20)\n * false\n * >>> greaterSpecificnum([1, 2, 3, 4], 10)\n * false\n */\nfunc greaterSpecificnum(list : [Int], num : Int) -> Bool {\n    var result = false\n    for i in list {\n        if i > num {\n            result = true\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all the values in a list that are greater than a specified number.\n *\n * >>> greater"}
{"task_id": "MBSWP/185", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the focus of a parabola.\n *\n * >>> parabolaFocus(5, 3, 2)\n * [-0.3, 1.6]\n * >>> parabolaFocus(9, 8, 4)\n * [-0.4444444444444444, 2.25]\n * >>> parabolaFocus(2, 4, 6)\n * [-1.0, 4.125]\n */\nfunc parabolaFocus(a : Int, b : Int, c : Int) -> [Double] {\n    let x = -b / (2 * a)\n    let y = math.sqrt(b * b - 4 * a * c) / (2 * a)\n    return [x, y]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the roots of a quadratic equation.\n *\n * >>> quadraticRoots(1, 2, 3)\n * [-1.0, 1.0]\n * >>> quadraticRoots(2, 4, 6)\n * [-1.0, 1.0]\n * >>> quadraticRoots(1, 2, 5)\n * [-1.0, -1.0]\n */\nfunc quadraticRoots(a : Int, b : Int, c : Int) -> [Double] {\n    let d = math.sqrt(b * b - 4 * a * c)\n    let x1 = (-b + d) / (2 * a)\n    let x2 = (-b - d) / (2 * a)\n    return [x1, x2]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the roots of a cubic equation.\n *\n * >>> cubicRoots(1, 2, 3, 4)\n * [-1.0, 1.0, -1.0]\n * >>> cubicRoots(2, 4, 6, 8)\n * [-1.0, 1.0, -1.0]\n * >>> cubicRoots(1, 2, 5, 6)"}
{"task_id": "MBSWP/186", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search some literals strings in a string by using regex.\n *\n * >>> checkLiterals(\"The quick brown fox jumps over the lazy dog.\", [\"fox\"])\n * \"Matched!\"\n * >>> checkLiterals(\"The quick brown fox jumps over the lazy dog.\", [\"horse\"])\n * \"Not Matched!\"\n * >>> checkLiterals(\"The quick brown fox jumps over the lazy dog.\", [\"lazy\"])\n * \"Matched!\"\n */\nfunc checkLiterals(text : String, patterns : [String]) -> String {\n    var result = \"Not Matched!\"\n    for pattern in patterns {\n        if let regex = try? NSRegularExpression(pattern: pattern, options: []) {\n            if regex.numberOfMatches(in: text, options: []) > 0 {\n                result = \"Matched!\"\n                break\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search some regex strings in a string by using regex.\n *\n * >>> checkRegex(\"The quick brown fox jumps over the lazy dog.\", [\"fox\"])\n * \"Matched!\"\n * >>> checkRegex(\"The quick brown fox jumps over the lazy dog.\", [\"horse\"])\n * \"Not Matched!\"\n * >>> checkRegex(\"The quick brown fox jumps over the lazy dog.\", [\"lazy\"])\n * \"Matched!\"\n */\nfunc checkRegex(text : String, patterns : [String]) -> String {\n    var result = \"Not Matched!\"\n    for pattern in patterns {\n        if let regex = try? NSRegularExpression(pattern: pattern, options: []) {\n            if regex.numberOfMatches(in: text, options: []) > 0 {\n                result = \"Matched!\"\n                break\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search some regex strings in a string by using regex.\n *\n * >>> checkRegex(\"The quick brown fox jumps over the lazy dog.\", [\"fox\"])"}
{"task_id": "MBSWP/187", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the longest common subsequence for the given two sequences.\n *\n * >>> longestCommonSubsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7)\n * 4\n * >>> longestCommonSubsequence(\"ABCDGH\", \"AEDFHR\", 6, 6)\n * 3\n * >>> longestCommonSubsequence(\"AXYT\", \"AYZX\", 4, 4)\n * 2\n */\nfunc longestCommonSubsequence(x : String, y : String, m : Int, n : Int) -> Int {\n    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: m + 1)\n    for i in 0..<m {\n        for j in 0..<n {\n            if x[i] == y[j] {\n                dp[i + 1][j + 1] = dp[i][j] + 1\n            } else {\n                dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j])\n            }\n        }\n    }\n    return dp[m][n]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the longest common subsequence for the given two sequences.\n *\n * >>> longestCommonSubsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7)\n * 4\n * >>> longestCommonSubsequence(\"ABCDGH\", \"AEDFHR\", 6, 6)\n * 3\n * >>> longestCommonSubsequence(\"AXYT\", \"AYZX\", 4, 4)\n * 2\n */\nfunc longestCommonSubsequence(x : String, y : String, m : Int, n : Int) -> Int {\n    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: m + 1)\n    for i in 0..<m {\n        for j in 0..<n {\n            if x[i] == y[j] {\n                dp[i + 1][j + 1] = dp[i][j] +"}
{"task_id": "MBSWP/188", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number can be represented by product of two squares or not.\n *\n * >>> prodSquare(25)\n * false\n * >>> prodSquare(30)\n * false\n * >>> prodSquare(16)\n * true\n */\nfunc prodSquare(n : Int) -> Bool {\n    var n = n\n    var sqr = 0\n    while n > 0 {\n        sqr += n % 10\n        n /= 10\n    }\n    return sqr * sqr == n\n}\n"}
{"task_id": "MBSWP/189", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first missing positive number.\n *\n * >>> firstMissingPositive([1, 2, 3, -1, 5], 5)\n * 4\n * >>> firstMissingPositive([0, -1, -2, 1, 5, 8], 6)\n * 2\n * >>> firstMissingPositive([0, 1, 2, 5, -8], 5)\n * 3\n */\nfunc firstMissingPositive(arr : [Int], n : Int) -> Int {\n    var i = 0\n    while i < n {\n        if arr[i] > 0 && arr[i] <= n && arr[i] != arr[arr[i] - 1] {\n            swap(&arr[i], &arr[arr[i] - 1])\n        } else {\n            i += 1\n        }\n    }\n    for i in 0..<n {\n        if arr[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return n + 1\n}\n\nfunc swap(&a : Int, &b : Int) {\n    let temp = a\n    a = b\n    b = temp\n}\n"}
{"task_id": "MBSWP/190", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of integral co-ordinates that lie inside a square.\n *\n * >>> countIntgralPoints(1, 1, 4, 4)\n * 4\n * >>> countIntgralPoints(1, 2, 1, 2)\n * 1\n * >>> countIntgralPoints(4, 2, 6, 4)\n * 1\n */\nfunc countIntgralPoints(x1 : Int, y1 : Int, x2 : Int, y2 : Int) -> Int {\n    var count = 0\n    for i in x1..<x2 {\n        for j in y1..<y2 {\n            if isIntegral(i, j) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of integral co-ordinates that lie inside a square.\n *\n * >>> countIntgralPoints(1, 1, 4, 4)\n * 4\n * >>> countIntgralPoints(1, 2, 1, 2)\n * 1\n * >>> countIntgralPoints(4, 2, 6, 4)\n * 1\n */\nfunc countIntgralPoints(x1 : Int, y1 : Int, x2 : Int, y2 : Int) -> Int {\n    var count = 0\n    for i in x1..<x2 {\n        for j in y1..<y2 {\n            if isIntegral(i, j) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of integral co-ordinates that lie inside a square.\n *\n * >>> countIntgralPoints(1, 1, 4, 4)\n * 4\n * >>> countIntgralPoints(1, 2, 1, 2)\n * 1\n * >>> countIntgralPoints(4, 2, 6, 4)\n * 1\n */\nfunc countIntgralPoints(x1 : Int,"}
{"task_id": "MBSWP/191", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month name contains 30 days or not.\n *\n * >>> checkMonthnumber(\"February\")\n * false\n * >>> checkMonthnumber(\"June\")\n * true\n * >>> checkMonthnumber(\"April\")\n * true\n */\nfunc checkMonthnumber(monthname3 : String) -> Bool {\n    let monthname = monthname3.lowercased()\n    let monthnumber = monthname.count\n    if monthnumber == 3 {\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month name contains 31 days or not.\n *\n * >>> checkMonthnumber(\"February\")\n * false\n * >>> checkMonthnumber(\"June\")\n * true\n * >>> checkMonthnumber(\"April\")\n * true\n */\nfunc checkMonthnumber(monthname4 : String) -> Bool {\n    let monthname = monthname4.lowercased()\n    let monthnumber = monthname.count\n    if monthnumber == 4 {\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month name contains 32 days or not.\n *\n * >>> checkMonthnumber(\"February\")\n * false\n * >>> checkMonthnumber(\"June\")\n * true\n * >>> checkMonthnumber(\"April\")\n * true\n */\nfunc checkMonthnumber(monthname5 : String) -> Bool {\n    let monthname = monthname5.lowercased()\n    let monthnumber = monthname.count\n    if monthnumber == 5 {\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month name contains 33 days or not.\n *\n * >>> checkMonthnumber(\"February\")\n * false\n * >>> checkMonthnumber(\"June\")\n * true\n * >>> checkMonthnumber(\"April\")\n * true\n */\nfunc checkMonthnumber(monthname"}
{"task_id": "MBSWP/192", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether a string has atleast one letter and one number.\n *\n * >>> checkString(\"thishasboth29\")\n * true\n * >>> checkString(\"python\")\n * false\n */\nfunc checkString(str : String) -> Bool {\n    var hasLetter = false\n    var hasNumber = false\n    for char in str {\n        if char.isLetter {\n            hasLetter = true\n        }\n        if char.isNumber {\n            hasNumber = true\n        }\n    }\n    return hasLetter && hasNumber\n}\n"}
{"task_id": "MBSWP/193", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove the duplicates from the given tuple.\n *\n * >>> removeTuple([1, 3, 5, 2, 3, 5, 1, 1, 3])\n * [1, 2, 3, 5]\n * >>> removeTuple([2, 3, 4, 4, 5, 6, 6, 7, 8, 8])\n * [2, 3, 4, 5, 6, 7, 8]\n * >>> removeTuple([11, 12, 13, 11, 11, 12, 14, 13])\n * [11, 12, 13, 14]\n */\nfunc removeTuple(testTup : [Int]) -> [Int] {\n    var tup = testTup\n    var tup2 = [Int]()\n    for i in 0..<tup.count {\n        if tup[i] != tup[i+1] {\n            tup2.append(tup[i])\n        }\n    }\n    return tup2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove the duplicates from the given array.\n *\n * >>> removeArray([1, 3, 5, 2, 3, 5, 1, 1, 3])\n * [1, 2, 3, 5]\n * >>> removeArray([2, 3, 4, 4, 5, 6, 6, 7, 8, 8])\n * [2, 3, 4, 5, 6, 7, 8]\n * >>> removeArray([11, 12, 13, 11, 11, 12, 14, 13])\n * [11, 12, 13, 14]\n */\nfunc removeArray(testArr : [Int]) -> [Int] {\n    var arr = testArr\n    var arr2 = [Int]()\n    for i in 0..<arr.count {\n        if arr[i] != arr[i+1] {\n            arr2.append(arr[i])\n        }\n    }\n    return arr2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove the duplicates from the given"}
{"task_id": "MBSWP/194", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert octal number to decimal number.\n *\n * >>> octalToDecimal(25)\n * 21\n * >>> octalToDecimal(30)\n * 24\n * >>> octalToDecimal(40)\n * 32\n */\nfunc octalToDecimal(n : Int) -> Int {\n    var result = 0\n    var n = n\n    while n > 0 {\n        result = result * 8 + n % 10\n        n = n / 10\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert decimal number to octal number.\n *\n * >>> decimalToOctal(21)\n * 25\n * >>> decimalToOctal(24)\n * 30\n * >>> decimalToOctal(32)\n * 40\n */\nfunc decimalToOctal(n : Int) -> Int {\n    var result = 0\n    var n = n\n    while n > 0 {\n        result = result * 8 + n % 8\n        n = n / 8\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert hexadecimal number to decimal number.\n *\n * >>> hexadecimalToDecimal(0x1F)\n * 31\n * >>> hexadecimalToDecimal(0x2A)\n * 42\n * >>> hexadecimalToDecimal(0x40)\n * 64\n */\nfunc hexadecimalToDecimal(n : Int) -> Int {\n    var result = 0\n    var n = n\n    while n > 0 {\n        result = result * 16 + n % 16\n        n = n / 16\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert decimal number to hexadecimal number.\n *\n * >>> decimalToHexadecimal(31)\n * 0x1F\n * >>> decimalToHexadecimal(42)\n * 0x2A\n"}
{"task_id": "MBSWP/195", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first position of an element in a sorted array.\n *\n * >>> first([1, 2, 3, 4, 5, 6, 6], 6, 6)\n * 5\n * >>> first([1, 2, 2, 2, 3, 2, 2, 4, 2], 2, 9)\n * 1\n * >>> first([1, 2, 3], 1, 3)\n * 0\n */\nfunc first(arr : [Int], x : Int, n : Int) -> Int {\n    var i = 0\n    while i < n {\n        if arr[i] == x {\n            return i\n        }\n        i += 1\n    }\n    return -1\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the last position of an element in a sorted array.\n *\n * >>> last([1, 2, 3, 4, 5, 6, 6], 6, 6)\n * 6\n * >>> last([1, 2, 2, 2, 3, 2, 2, 4, 2], 2, 9)\n * 7\n * >>> last([1, 2, 3], 1, 3)\n * 2\n */\nfunc last(arr : [Int], x : Int, n : Int) -> Int {\n    var i = n - 1\n    while i >= 0 {\n        if arr[i] == x {\n            return i\n        }\n        i -= 1\n    }\n    return -1\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first position of an element in a sorted array.\n *\n * >>> first([1, 2, 3, 4, 5, 6, 6], 6, 6)\n * 5\n * >>> first([1, 2, 2, 2, 3, 2, 2, 4, 2], 2, 9)\n * 1\n * >>> first([1, 2, 3], 1, 3)\n * 0\n */\nfunc first(arr : [Int], x : Int, n : Int) -> Int {\n    var i = 0\n    while i < n {\n"}
{"task_id": "MBSWP/196", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all the tuples with length k.\n *\n * >>> removeTuples([[4, 5], [4], [8, 6, 7], [1], [3, 4, 6, 7]], 1)\n * [[4, 5], [8, 6, 7], [3, 4, 6, 7]]\n * >>> removeTuples([[4, 5], [4, 5], [6, 7], [1, 2, 3], [3, 4, 6, 7]], 2)\n * [[1, 2, 3], [3, 4, 6, 7]]\n * >>> removeTuples([[1, 4, 4], [4, 3], [8, 6, 7], [1], [3, 6, 7]], 3)\n * [[4, 3], [1]]\n */\nfunc removeTuples(testList : [[Int]], k : Int) -> [[Int]] {\n    var result = testList\n    for i in 0..<result.count {\n        if result[i].count == k {\n            result.remove(at: i)\n        }\n    }\n    return result\n}\n\n// Test\nremoveTuples([[4, 5], [4], [8, 6, 7], [1], [3, 4, 6, 7]], 1)\nremoveTuples([[4, 5], [4, 5], [6, 7], [1, 2, 3], [3, 4, 6, 7]], 2)\nremoveTuples([[1, 4, 4], [4, 3], [8, 6, 7], [1], [3, 6, 7]], 3)\n"}
{"task_id": "MBSWP/197", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform the exponentiation of the given two tuples.\n *\n * >>> findExponentio([10, 4, 5, 6], [5, 6, 7, 5])\n * [100000, 4096, 78125, 7776]\n * >>> findExponentio([11, 5, 6, 7], [6, 7, 8, 6])\n * [1771561, 78125, 1679616, 117649]\n * >>> findExponentio([12, 6, 7, 8], [7, 8, 9, 7])\n * [35831808, 1679616, 40353607, 2097152]\n */\nfunc findExponentio(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<testTup1.count {\n        result.append(testTup1[i]^testTup2[i])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform the exponentiation of the given two tuples.\n *\n * >>> findExponentio([10, 4, 5, 6], [5, 6, 7, 5])\n * [100000, 4096, 78125, 7776]\n * >>> findExponentio([11, 5, 6, 7], [6, 7, 8, 6])\n * [1771561, 78125, 1679616, 117649]\n * >>> findExponentio([12, 6, 7, 8], [7, 8, 9, 7])\n * [35831808, 1679616, 40353607, 2097152]\n */\nfunc findExponentio(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<testTup1.count {\n        result.append(testTup1[i]^testTup2[i])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here"}
{"task_id": "MBSWP/198", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the largest triangle that can be inscribed in an ellipse.\n *\n * >>> largestTriangle(4, 2)\n * 10.392304845413264\n * >>> largestTriangle(5, 7)\n * 4.639421805988064\n * >>> largestTriangle(9, 1)\n * 105.2220865598093\n */\nfunc largestTriangle(a : Int, b : Int) -> Double {\n    let a2 = a * a\n    let b2 = b * b\n    let a3 = a2 * a\n    let b3 = b2 * b\n    let a4 = a3 * a\n    let b4 = b3 * b\n    let a5 = a4 * a\n    let b5 = b4 * b\n    let a6 = a5 * a\n    let b6 = b5 * b\n    let a7 = a6 * a\n    let b7 = b6 * b\n    let a8 = a7 * a\n    let b8 = b7 * b\n    let a9 = a8 * a\n    let b9 = b8 * b\n    let a10 = a9 * a\n    let b10 = b9 * b\n    let a11 = a10 * a\n    let b11 = b10 * b\n    let a12 = a11 * a\n    let b12 = b11 * b\n    let a13 = a12 * a\n    let b13 = b12 * b\n    let a14 = a13 * a\n    let b14 = b13 * b\n    let a15 = a14 * a\n    let b15 = b14 * b\n    let a16 = a15 * a\n    let b16 = b15 * b\n    let a17 = a16 * a\n    let b17 = b16 * b\n    let a18 = a17 * a\n    let b18 = b17 * b\n    let a19 = a18 * a\n    let b19 = b18 * b\n    let a20 = a19 * a\n    let b20 = b19 * b\n    let a21 = a20 * a\n"}
{"task_id": "MBSWP/199", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find highest power of 2 less than or equal to given number.\n *\n * >>> highestPowerOf2(10)\n * 8\n * >>> highestPowerOf2(19)\n * 16\n * >>> highestPowerOf2(32)\n * 32\n */\nfunc highestPowerOf2(n : Int) -> Int {\n    var n = n\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result / 2\n}\n"}
{"task_id": "MBSWP/200", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all index positions of the maximum values in a given list.\n *\n * >>> positionMax([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54])\n * [7]\n * >>> positionMax([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])\n * [7, 8, 9, 10]\n * >>> positionMax([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])\n * [11]\n */\nfunc positionMax(list1 : [Int]) -> [Int] {\n    var max = list1[0]\n    var maxIndex = 0\n    for i in 1..<list1.count {\n        if list1[i] > max {\n            max = list1[i]\n            maxIndex = i\n        }\n    }\n    var maxIndexes = [maxIndex]\n    for i in 1..<list1.count {\n        if list1[i] == max {\n            maxIndexes.append(i)\n        }\n    }\n    return maxIndexes\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all index positions of the minimum values in a given list.\n *\n * >>> positionMin([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54])\n * [0]\n * >>> positionMin([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])\n * [0, 1, 2, 3]\n * >>> positionMin([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])\n * [10]\n */\nfunc positionMin(list1 : [Int]) -> [Int] {\n    var min = list1[0]\n    var minIndex = 0\n    for i in 1..<list1.count {\n        if list1[i] < min {\n            min = list1[i]\n            min"}
{"task_id": "MBSWP/201", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the elements in a list are same or not.\n *\n * >>> chklist([\"one\", \"one\", \"one\"])\n * true\n * >>> chklist([\"one\", \"Two\", \"Three\"])\n * false\n * >>> chklist([\"bigdata\", \"python\", \"Django\"])\n * false\n */\nfunc chklist(lst : [String]) -> Bool {\n    if lst.count == 0 {\n        return false\n    }\n    var flag = true\n    for i in 0..<lst.count {\n        if lst[i] != lst[0] {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the elements in a list are same or not.\n *\n * >>> chklist([\"one\", \"one\", \"one\"])\n * true\n * >>> chklist([\"one\", \"Two\", \"Three\"])\n * false\n * >>> chklist([\"bigdata\", \"python\", \"Django\"])\n * false\n */\nfunc chklist(lst : [String]) -> Bool {\n    if lst.count == 0 {\n        return false\n    }\n    var flag = true\n    for i in 0..<lst.count {\n        if lst[i] != lst[0] {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the elements in a list are same or not.\n *\n * >>> chklist([\"one\", \"one\", \"one\"])\n * true\n * >>> chklist([\"one\", \"Two\", \"Three\"])\n * false\n * >>> chklist([\"bigdata\", \"python\", \"Django\"])\n * false\n */\nfunc chklist(lst : [String]) -> Bool {\n    if lst.count == 0"}
{"task_id": "MBSWP/202", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove even characters in a string.\n *\n * >>> removeEven(\"python\")\n * \"pto\"\n * >>> removeEven(\"program\")\n * \"porm\"\n * >>> removeEven(\"language\")\n * \"lnug\"\n */\nfunc removeEven(str1 : String) -> String {\n    var str2 = \"\"\n    for i in 0..<str1.count {\n        if str1[i] % 2 == 0 {\n            str2 += str1[i]\n        }\n    }\n    return str2\n}\n\n// Test\nremoveEven(\"python\")\nremoveEven(\"program\")\nremoveEven(\"language\")\n"}
{"task_id": "MBSWP/203", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the hamming distance between given two integers.\n *\n * >>> hammingDistance(4, 8)\n * 2\n * >>> hammingDistance(2, 4)\n * 2\n * >>> hammingDistance(1, 2)\n * 2\n */\nfunc hammingDistance(n1 : Int, n2 : Int) -> Int {\n    var distance = 0\n    var n1Binary = String(n1)\n    var n2Binary = String(n2)\n    var n1BinaryLength = n1Binary.characters.count\n    var n2BinaryLength = n2Binary.characters.count\n    var n1BinaryArray = Array(n1Binary)\n    var n2BinaryArray = Array(n2Binary)\n    var n1BinaryArrayLength = n1BinaryArray.count\n    var n2BinaryArrayLength = n2BinaryArray.count\n    var n1BinaryArrayIndex = 0\n    var n2BinaryArrayIndex = 0\n    var n1BinaryArrayValue : Character\n    var n2BinaryArrayValue : Character\n    var n1BinaryArrayValueInt : Int\n    var n2BinaryArrayValueInt : Int\n    var n1BinaryArrayValueIntLength : Int\n    var n2BinaryArrayValueIntLength : Int\n    var n1BinaryArrayValueIntLengthIndex : Int\n    var n2BinaryArrayValueIntLengthIndex : Int\n    var n1BinaryArrayValueIntLengthIndexValue : Int\n    var n2BinaryArrayValueIntLengthIndexValue : Int\n    var n1BinaryArrayValueIntLengthIndexValueLength : Int\n    var n2BinaryArrayValueIntLengthIndexValueLength : Int\n    var n1BinaryArrayValueIntLengthIndexValueLengthIndex : Int\n    var n2BinaryArrayValueIntLengthIndexValueLengthIndex : Int\n    var n1BinaryArrayValueIntLengthIndexValueLengthIndexValue : Int\n    var n2BinaryArrayValueIntLengthIndexValueLengthIndexValue : Int\n    var n1BinaryArrayValueIntLengthIndexValueLengthIndexValueLength : Int\n    var n2B"}
{"task_id": "MBSWP/204", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the occurrence of a given character in a string.\n *\n * >>> count(\"abcc\", \"c\")\n * 2\n * >>> count(\"ababca\", \"a\")\n * 3\n * >>> count(\"mnmm0pm\", \"m\")\n * 4\n */\nfunc count(s : String, c : String) -> Int {\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == c {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/205", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the inversions of tuple elements in the given tuple list.\n *\n * >>> inversionElements([7, 8, 9, 1, 10, 7])\n * [-8, -9, -10, -2, -11, -8]\n * >>> inversionElements([2, 4, 5, 6, 1, 7])\n * [-3, -5, -6, -7, -2, -8]\n * >>> inversionElements([8, 9, 11, 14, 12, 13])\n * [-9, -10, -12, -15, -13, -14]\n */\nfunc inversionElements(testTup : [Int]) -> [Int] {\n    var inversions : [Int] = []\n    var sortedTup : [Int] = []\n    sortedTup = testTup.sorted()\n    for i in 0..<testTup.count {\n        inversions.append(testTup[i] - sortedTup[i])\n    }\n    return inversions\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the inversions of tuple elements in the given tuple list.\n *\n * >>> inversionElements([7, 8, 9, 1, 10, 7])\n * [-8, -9, -10, -2, -11, -8]\n * >>> inversionElements([2, 4, 5, 6, 1, 7])\n * [-3, -5, -6, -7, -2, -8]\n * >>> inversionElements([8, 9, 11, 14, 12, 13])\n * [-9, -10, -12, -15, -13, -14]\n */\nfunc inversionElements(testTup : [Int]) -> [Int] {\n    var inversions : [Int] = []\n    var sortedTup : [Int] = []\n    sortedTup = testTup.sorted()\n    for i in 0..<testTup.count {\n        inversions.append(testTup[i] - sortedTup[i])\n   "}
{"task_id": "MBSWP/206", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform the adjacent element concatenation in the given tuples.\n *\n * >>> concatenateElements([\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"])\n * [\"DSP IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL UTS\"]\n * >>> concatenateElements([\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"])\n * [\"RES IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL QESR\"]\n * >>> concatenateElements([\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"])\n * [\"MSAMIS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL SKD\"]\n */\nfunc concatenateElements(testTup : [String]) -> [String] {\n    var result : [String] = []\n    for i in 0..<testTup.count {\n        if i == 0 {\n            result.append(testTup[i])\n        } else {\n            result.append(testTup[i] + result[i-1])\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform the adjacent element concatenation in the given tuples.\n *\n * >>> concatenateElements([\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"])\n * [\"DSP IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL UTS\"]\n * >>> concatenateElements([\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"])\n * [\"RES IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL QESR\"]\n * >>> concatenateElements([\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"])\n * [\"MSAMIS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL"}
{"task_id": "MBSWP/207", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n *\n * >>> findLongestRepeatingSubseq(\"AABEBCDD\")\n * 3\n * >>> findLongestRepeatingSubseq(\"aabb\")\n * 2\n * >>> findLongestRepeatingSubseq(\"aab\")\n * 1\n */\nfunc findLongestRepeatingSubseq(str : String) -> Int {\n    var dp = Array(repeating: Array(repeating: 0, count: str.count), count: str.count)\n    var max = 0\n    for i in 0..<str.count {\n        for j in 0..<str.count {\n            if str[i] == str[j] {\n                if i == j {\n                    dp[i][j] = 1\n                } else {\n                    dp[i][j] = dp[i][j-1] + 1\n                }\n            }\n            max = max(max, dp[i][j])\n        }\n    }\n    return max\n}\n"}
{"task_id": "MBSWP/208", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check the given decimal with a precision of 2 by using regex.\n *\n * >>> isDecimal(\"123.11\")\n * true\n * >>> isDecimal(\"0.21\")\n * true\n * >>> isDecimal(\"123.1214\")\n * false\n */\nfunc isDecimal(num : String) -> Bool {\n    let regex = \"^[0-9]+(.[0-9]{2})?$\"\n    let regex = NSRegularExpression(pattern: regex, options: [])\n    let match = regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count))\n    return match != nil\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check the given decimal with a precision of 3 by using regex.\n *\n * >>> isDecimal(\"123.111\")\n * true\n * >>> isDecimal(\"0.211\")\n * true\n * >>> isDecimal(\"123.1214\")\n * false\n */\nfunc isDecimal(num : String) -> Bool {\n    let regex = \"^[0-9]+(.[0-9]{3})?$\"\n    let regex = NSRegularExpression(pattern: regex, options: [])\n    let match = regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count))\n    return match != nil\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check the given decimal with a precision of 4 by using regex.\n *\n * >>> isDecimal(\"123.1111\")\n * true\n * >>> isDecimal(\"0.2111\")\n * true\n * >>> isDecimal(\"123.1214\")\n * false\n */\nfunc isDecimal(num : String) -> Bool {\n    let regex = \"^[0-9]+(.[0-9]{4})?$\"\n    let regex = NSRegularExpression(pattern: regex, options: [])\n    let match = regex.firstMatch(in: num,"}
{"task_id": "MBSWP/209", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to delete the smallest element from the given heap and then insert a new item.\n *\n * >>> heapReplace([25, 44, 68, 21, 39, 23, 89], 21)\n * [21, 25, 23, 44, 39, 68, 89]\n * >>> heapReplace([25, 44, 68, 21, 39, 23, 89], 110)\n * [23, 25, 68, 44, 39, 110, 89]\n * >>> heapReplace([25, 44, 68, 21, 39, 23, 89], 500)\n * [23, 25, 68, 44, 39, 500, 89]\n */\nfunc heapReplace(heap : [Int], a : Int) -> [Int] {\n    var heap = heap\n    var a = a\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var aa = 0\n    var bb = 0\n    var cc = 0\n    var dd = 0\n    var ee = 0\n    var ff = 0\n    var gg = 0\n    var hh = 0\n    var ii = 0\n    var jj = 0\n    var kk = 0\n    var ll = 0\n    var mm = 0\n    var nn = 0\n    var oo = 0\n    var pp = 0\n    var qq = 0\n    var rr = 0\n    var ss = 0\n    var tt = 0\n    var uu = 0\n    var vv = 0\n    var ww = 0\n    var xx = 0\n    var yy = 0\n    var zz = 0\n    var aa = 0\n    var bb = 0\n    var cc = 0\n    var dd = 0\n    var ee = 0\n    var"}
{"task_id": "MBSWP/210", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n *\n * >>> isAllowedSpecificChar(\"ABCDEFabcdef123450\")\n * true\n * >>> isAllowedSpecificChar(\"*&%@#!}{\")\n * false\n * >>> isAllowedSpecificChar(\"HELLOhowareyou98765\")\n * true\n */\nfunc isAllowedSpecificChar(string : String) -> Bool {\n    let allowedChars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    let regex = NSRegularExpression(pattern: allowedChars, options: [])\n    let matches = regex.matchesInString(string, options: [], range: NSMakeRange(0, string.length))\n    return matches.count == string.length\n}\n"}
{"task_id": "MBSWP/211", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count numbers whose oth and nth bits are set.\n *\n * >>> countNum(2)\n * 1\n * >>> countNum(3)\n * 2\n * >>> countNum(1)\n * 1\n */\nfunc countNum(n : Int) -> Int {\n    var count = 0\n    var n = n\n    while n > 0 {\n        count += n & 1\n        n >>= 1\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/212", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of fourth power of n natural numbers.\n *\n * >>> fourthPowerSum(2)\n * 17\n * >>> fourthPowerSum(4)\n * 354\n * >>> fourthPowerSum(6)\n * 2275\n */\nfunc fourthPowerSum(n : Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i * i\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/213", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform the concatenation of two string tuples.\n *\n * >>> concatenateStrings([\"Manjeet\", \"Nikhil\", \"Akshat\"], [\" Singh\", \" Meherwal\", \" Garg\"])\n * [\"Manjeet Singh\", \"Nikhil Meherwal\", \"Akshat Garg\"]\n * >>> concatenateStrings([\"Shaik\", \"Ayesha\", \"Sanya\"], [\" Dawood\", \" Begum\", \" Singh\"])\n * [\"Shaik Dawood\", \"Ayesha Begum\", \"Sanya Singh\"]\n * >>> concatenateStrings([\"Harpreet\", \"Priyanka\", \"Muskan\"], [\"Kour\", \" Agarwal\", \"Sethi\"])\n * [\"HarpreetKour\", \"Priyanka Agarwal\", \"MuskanSethi\"]\n */\nfunc concatenateStrings(testTup1 : [String], testTup2 : [String]) -> [String] {\n    var result : [String] = []\n    for i in 0..<testTup1.count {\n        result.append(testTup1[i] + testTup2[i])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform the concatenation of two integer tuples.\n *\n * >>> concatenateInts([1, 2, 3], [4, 5, 6])\n * [1, 2, 3, 4, 5, 6]\n * >>> concatenateInts([7, 8, 9], [10, 11, 12])\n * [7, 8, 9, 10, 11, 12]\n * >>> concatenateInts([13, 14, 15], [16, 17, 18])\n * [13, 14, 15, 16, 17, 18]\n */\nfunc concatenateInts(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<testTup1.count {\n        result.append(testTup"}
{"task_id": "MBSWP/214", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert radians to degrees.\n *\n * >>> degreeRadian(90)\n * 5156.620156177409\n * >>> degreeRadian(60)\n * 3437.746770784939\n * >>> degreeRadian(120)\n * 6875.493541569878\n */\nfunc degreeRadian(radian : Int) -> Double {\n    return radian * 180 / Math.PI\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert degrees to radians.\n *\n * >>> radianDegree(90)\n * 1.5707963267948966\n * >>> radianDegree(60)\n * 1.0471975511965976\n * >>> radianDegree(120)\n * 2.0943951023931953\n */\nfunc radianDegree(degree : Int) -> Double {\n    return degree * Math.PI / 180\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a temperature in Fahrenheit to Celsius.\n *\n * >>> fahrenheitToCelsius(32)\n * 0.0\n * >>> fahrenheitToCelsius(212)\n * 100.0\n * >>> fahrenheitToCelsius(100)\n * 37.77777777777778\n */\nfunc fahrenheitToCelsius(fahrenheit : Int) -> Double {\n    return (fahrenheit - 32) * 5 / 9\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a temperature in Celsius to Fahrenheit.\n *\n * >>> celsiusToFahrenheit(0)\n * 32.0\n * >>> celsiusToFahrenheit(100)\n * 212.0\n * >>> celsiusToFahrenheit(37.77777777777778)\n * 100.0\n */\nfunc celsiusToFahrenheit(celsius : Int) -> Double {\n    return (celsius * 9 / 5) + 32\n}\n\n/**\n * You are an"}
{"task_id": "MBSWP/215", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to decode a run-length encoded given list.\n *\n * >>> decodeList([[2, 1], 2, 3, [2, 4], 5, 1])\n * [1, 1, 2, 3, 4, 4, 5, 1]\n * >>> decodeList([\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", [2, \"l\"], \"y\"])\n * [\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", \"l\", \"l\", \"y\"]\n * >>> decodeList([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"])\n * [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]\n */\nfunc decodeList(alist : [AnyHashable]) -> [AnyHashable] {\n    var result = [AnyHashable]()\n    var index = 0\n    while index < alist.count {\n        if let item = alist[index] as? [AnyHashable] {\n            for _ in 0..<item[0] as! Int {\n                result.append(item[1])\n            }\n        } else {\n            result.append(item)\n        }\n        index += 1\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to encode a given list.\n *\n * >>> encodeList([1, 1, 2, 3, 4, 4, 5, 1])\n * [[2, 1], 2, 3, [2, 4], 5, 1]\n * >>> encodeList([\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", \"l\", \"l\", \"y\"])\n * [\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", [2, \"l\"], \"y\"]\n * >>> encodeList([\"p\", \"y\", \"t\", \""}
{"task_id": "MBSWP/216", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a nested list is a subset of another nested list.\n *\n * >>> checkSubsetList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])\n * false\n * >>> checkSubsetList([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])\n * true\n * >>> checkSubsetList([[\"a\", \"b\"], [\"e\"], [\"c\", \"d\"]], [[\"g\"]])\n * false\n */\nfunc checkSubsetList(list1 : [AnyHashable], list2 : [[AnyHashable]]) -> Bool {\n    var list1Copy = list1\n    var list2Copy = list2\n    var list1CopyIndex = 0\n    var list2CopyIndex = 0\n    var list1CopyLength = list1Copy.count\n    var list2CopyLength = list2Copy.count\n    var list1CopyElement : AnyHashable\n    var list2CopyElement : [AnyHashable]\n    var list1CopyElementLength : Int\n    var list2CopyElementLength : Int\n    var list1CopyElementIndex : Int\n    var list2CopyElementIndex : Int\n    var list1CopyElementElement : AnyHashable\n    var list2CopyElementElement : AnyHashable\n    var list1CopyElementElementIndex : Int\n    var list2CopyElementElementIndex : Int\n    var list1CopyElementElementLength : Int\n    var list2CopyElementElementLength : Int\n    var list1CopyElementElementElement : AnyHashable\n    var list2CopyElementElementElement : AnyHashable\n    var list1CopyElementElementElementIndex : Int\n    var list2CopyElementElementElementIndex : Int\n    var list1CopyElementElementElementLength : Int\n    var list2CopyElementElementElementLength : Int\n    var list1CopyElementElementElementElement : AnyHashable\n    var list2CopyElementElementElementElement : AnyHashable\n"}
{"task_id": "MBSWP/217", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first repeated character in a given string.\n *\n * >>> firstRepeatedChar(\"Google\")\n * \"o\"\n * >>> firstRepeatedChar(\"data\")\n * \"a\"\n * >>> firstRepeatedChar(\"python\")\n * \"\\x00\"\n */\nfunc firstRepeatedChar(str : String) -> String {\n    var result : String = \"\"\n    var dict : [String : Int] = [:]\n    for char in str {\n        if let count = dict[char] {\n            if count == 1 {\n                result = char\n            }\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/218", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum operations required to make two numbers equal.\n *\n * >>> minOperations(2, 4)\n * 1\n * >>> minOperations(4, 10)\n * 4\n * >>> minOperations(1, 4)\n * 3\n */\nfunc minOperations(a : Int, b : Int) -> Int {\n    var result = 0\n    var a = a\n    var b = b\n    while a != b {\n        if a > b {\n            a -= b\n            result += 1\n        } else {\n            b -= a\n            result += 1\n        }\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/219", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract maximum and minimum k elements in the given tuple.\n *\n * >>> extractMinMax([5, 20, 3, 7, 6, 8], 2)\n * [3, 5, 8, 20]\n * >>> extractMinMax([4, 5, 6, 1, 2, 7], 3)\n * [1, 2, 4, 5, 6, 7]\n * >>> extractMinMax([2, 3, 4, 8, 9, 11, 7], 4)\n * [2, 3, 4, 7, 8, 9, 11]\n */\nfunc extractMinMax(testTup : [Int], k : Int) -> [Int] {\n    var minMax : [Int] = []\n    var minMaxTup : [Int] = []\n    var minMaxTup2 : [Int] = []\n    var minMaxTup3 : [Int] = []\n    var minMaxTup4 : [Int] = []\n    var minMaxTup5 : [Int] = []\n    var minMaxTup6 : [Int] = []\n    var minMaxTup7 : [Int] = []\n    var minMaxTup8 : [Int] = []\n    var minMaxTup9 : [Int] = []\n    var minMaxTup10 : [Int] = []\n    var minMaxTup11 : [Int] = []\n    var minMaxTup12 : [Int] = []\n    var minMaxTup13 : [Int] = []\n    var minMaxTup14 : [Int] = []\n    var minMaxTup15 : [Int] = []\n    var minMaxTup16 : [Int] = []\n    var minMaxTup17 : [Int] = []\n    var minMaxTup18 : [Int] = []\n    var minMaxTup19 : [Int] = []\n    var minMaxTup20 : [Int] = []\n    var minMaxTup21 : [Int] = []\n    var minMaxTup22 : [Int] = []\n    var minMaxTup23 : [Int] = []\n    var minMaxTup24 : [Int]"}
{"task_id": "MBSWP/220", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n *\n * >>> replaceMaxSpecialchar(\"Python language, Programming language.\", 2)\n * \"Python:language: Programming language.\"\n * >>> replaceMaxSpecialchar(\"a b c,d e f\", 3)\n * \"a:b:c:d e f\"\n * >>> replaceMaxSpecialchar(\"ram reshma,ram rahim\", 1)\n * \"ram:reshma,ram rahim\"\n */\nfunc replaceMaxSpecialchar(text : String, n : Int) -> String {\n    var result = \"\"\n    var count = 0\n    for char in text {\n        if char == \" \" || char == \",\" || char == \".\" {\n            count += 1\n            if count <= n {\n                result += char\n            } else {\n                result += \":\"\n            }\n        } else {\n            result += char\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n *\n * >>> replaceAllSpecialchar(\"Python language, Programming language.\", 2)\n * \"Python:language: Programming language.\"\n * >>> replaceAllSpecialchar(\"a b c,d e f\", 3)\n * \"a:b:c:d e f\"\n * >>> replaceAllSpecialchar(\"ram reshma,ram rahim\", 1)\n * \"ram:reshma,ram rahim\"\n */\nfunc replaceAllSpecialchar(text : String, n : Int) -> String {\n    var result = \"\"\n    for char in text {\n        if char == \" \" || char == \",\" || char == \".\" {\n            result += \":\"\n        } else {\n            result += char\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n *\n * >>> replaceAllSpecialchar(\"Python language, Programming language.\", 2)\n * \"Python"}
{"task_id": "MBSWP/221", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first even number in a given list of numbers.\n *\n * >>> firstEven([2, 3, 4])\n * 2\n * >>> firstEven([5, 6, 7])\n * 6\n */\nfunc firstEven(nums : [Int]) -> Int {\n    for num in nums {\n        if num % 2 == 0 {\n            return num\n        }\n    }\n    return 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first odd number in a given list of numbers.\n *\n * >>> firstOdd([2, 3, 4])\n * 3\n * >>> firstOdd([5, 6, 7])\n * 5\n */\nfunc firstOdd(nums : [Int]) -> Int {\n    for num in nums {\n        if num % 2 != 0 {\n            return num\n        }\n    }\n    return 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first number in a given list of numbers that is divisible by 3.\n *\n * >>> firstDivisibleBy3([2, 3, 4])\n * 3\n * >>> firstDivisibleBy3([5, 6, 7])\n * 6\n */\nfunc firstDivisibleBy3(nums : [Int]) -> Int {\n    for num in nums {\n        if num % 3 == 0 {\n            return num\n        }\n    }\n    return 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first number in a given list of numbers that is divisible by 5.\n *\n * >>> firstDivisibleBy5([2, 3, 4])\n * 5\n * >>> firstDivisibleBy5([5, 6, 7])\n * 10\n */\nfunc firstDivisibleBy5(nums : [Int]) -> Int {\n    for num in nums {\n        if num % 5 == 0 {\n            return num\n        }\n    }\n    return 0\n}\n\n/**\n * You are"}
{"task_id": "MBSWP/222", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if all the elements in tuple have same data type or not.\n *\n * >>> checkType([5, 6, 7, 3, 5, 6])\n * true\n * >>> checkType([1, 2, \"4\"])\n * false\n * >>> checkType([3, 2, 1, 4, 5])\n * true\n */\nfunc checkType(testTuple : [AnyHashable]) -> Bool {\n    var isSameType = true\n    var firstType = testTuple[0].dynamicType\n    for i in 1...testTuple.count {\n        if testTuple[i].dynamicType != firstType {\n            isSameType = false\n            break\n        }\n    }\n    return isSameType\n}\n"}
{"task_id": "MBSWP/223", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check for majority element in the given sorted array.\n *\n * >>> isMajority([1, 2, 3, 3, 3, 3, 10], 7, 3)\n * true\n * >>> isMajority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)\n * false\n * >>> isMajority([1, 1, 1, 2, 2], 5, 1)\n * true\n */\nfunc isMajority(arr : [Int], n : Int, x : Int) -> Bool {\n    var i = 0\n    var j = 0\n    var count = 0\n    while i < n {\n        if arr[i] == x {\n            count += 1\n        }\n        i += 1\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n"}
{"task_id": "MBSWP/224", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count set bits of a given number.\n *\n * >>> countSetBits(2)\n * 1\n * >>> countSetBits(4)\n * 1\n * >>> countSetBits(6)\n * 2\n */\nfunc countSetBits(n : Int) -> Int {\n    var count = 0\n    var num = n\n    while num > 0 {\n        if num % 2 == 1 {\n            count += 1\n        }\n        num = num / 2\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/225", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum element in a sorted and rotated array.\n *\n * >>> findMin([1, 2, 3, 4, 5], 0, 4)\n * 1\n * >>> findMin([4, 6, 8], 0, 2)\n * 4\n * >>> findMin([2, 3, 5, 7, 9], 0, 4)\n * 2\n */\nfunc findMin(arr : [Int], low : Int, high : Int) -> Int {\n    if low == high {\n        return arr[low]\n    }\n    let mid = (low + high) / 2\n    if arr[mid] > arr[mid + 1] {\n        return findMin(arr, low, mid)\n    } else {\n        return findMin(arr, mid + 1, high)\n    }\n}\n"}
{"task_id": "MBSWP/226", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove the characters which have odd index values of a given string.\n *\n * >>> oddValuesString(\"abcdef\")\n * \"ace\"\n * >>> oddValuesString(\"python\")\n * \"pto\"\n * >>> oddValuesString(\"data\")\n * \"dt\"\n */\nfunc oddValuesString(str : String) -> String {\n    var result = \"\"\n    for (index, char) in str.enumerated() {\n        if index % 2 == 1 {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove the characters which have even index values of a given string.\n *\n * >>> evenValuesString(\"abcdef\")\n * \"bdf\"\n * >>> evenValuesString(\"python\")\n * \"ytho\"\n * >>> evenValuesString(\"data\")\n * \"da\"\n */\nfunc evenValuesString(str : String) -> String {\n    var result = \"\"\n    for (index, char) in str.enumerated() {\n        if index % 2 == 0 {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove the characters which have odd index values of a given string.\n *\n * >>> oddValuesString(\"abcdef\")\n * \"ace\"\n * >>> oddValuesString(\"python\")\n * \"pto\"\n * >>> oddValuesString(\"data\")\n * \"dt\"\n */\nfunc oddValuesString(str : String) -> String {\n    var result = \"\"\n    for (index, char) in str.enumerated() {\n        if index % 2 == 1 {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove the characters which have even index values of a given string.\n *\n * >>> evenValuesString(\"abcdef\")\n * \"bdf\"\n *"}
{"task_id": "MBSWP/227", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find minimum of three numbers.\n *\n * >>> minOfThree(10, 20, 0)\n * 0\n * >>> minOfThree(19, 15, 18)\n * 15\n * >>> minOfThree(-10, -20, -30)\n * -30\n */\nfunc minOfThree(a : Int, b : Int, c : Int) -> Int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else {\n        return c\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find maximum of three numbers.\n *\n * >>> maxOfThree(10, 20, 0)\n * 20\n * >>> maxOfThree(19, 15, 18)\n * 19\n * >>> maxOfThree(-10, -20, -30)\n * -10\n */\nfunc maxOfThree(a : Int, b : Int, c : Int) -> Int {\n    if a > b && a > c {\n        return a\n    } else if b > a && b > c {\n        return b\n    } else {\n        return c\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find minimum of four numbers.\n *\n * >>> minOfFour(10, 20, 0, -10)\n * -10\n * >>> minOfFour(19, 15, 18, -10)\n * -10\n * >>> minOfFour(-10, -20, -30, -40)\n * -40\n */\nfunc minOfFour(a : Int, b : Int, c : Int, d : Int) -> Int {\n    if a < b && a < c && a < d {\n        return a\n    } else if b < a && b < c && b < d {\n        return b\n    } else if c < a && c < b && c < d {\n        return c\n    } else {\n        return d\n    }\n}\n\n/**\n * You are an expert Swift programmer"}
{"task_id": "MBSWP/228", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether all the bits are unset in the given range or not.\n *\n * >>> allBitsSetInTheGivenRange(4, 1, 2)\n * true\n * >>> allBitsSetInTheGivenRange(17, 2, 4)\n * true\n * >>> allBitsSetInTheGivenRange(39, 4, 6)\n * false\n */\nfunc allBitsSetInTheGivenRange(n : Int, l : Int, r : Int) -> Bool {\n    var n = n\n    var l = l\n    var r = r\n    var count = 0\n    while l <= r {\n        if n & (1 << l) != 0 {\n            count += 1\n        }\n        l += 1\n    }\n    return count == r - l + 1\n}\n"}
{"task_id": "MBSWP/229", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n *\n * >>> reArrangeArray([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)\n * [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n * >>> reArrangeArray([12, -14, -26, 13, 15], 5)\n * [-14, -26, 12, 13, 15]\n * >>> reArrangeArray([10, 24, 36, -42, -39, -78, 85], 7)\n * [-42, -39, -78, 10, 24, 36, 85]\n */\nfunc reArrangeArray(arr : [Int], n : Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = 0\n    while i < n {\n        if arr[i] < 0 {\n            if i != j {\n                arr[i] = arr[i]\n                arr[j] = arr[i]\n            }\n            j += 1\n        }\n        i += 1\n    }\n    return arr\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n *\n * >>> reArrangeArray([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)\n * [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n * >>> reArrangeArray([12, -14, -26, 13, 15], 5)\n * [-14, -26, 12, 13, 15]\n * >>> reArrangeArray([10, 24, 36, -42, -39, -78, 85], 7)\n * [-42, -39, -78, 10, 24, 36, 85]\n */\nfunc reArrangeArray(arr : [Int], n : Int) -> [Int] {\n    var arr = arr\n    var i = 0\n"}
{"task_id": "MBSWP/230", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace blank spaces with any character in a string.\n *\n * >>> replaceBlank(\"hello people\", \"@\")\n * \"hello@people\"\n * >>> replaceBlank(\"python program language\", \"\\$\")\n * \"python\\$program\\$language\"\n * >>> replaceBlank(\"blank space\", \"-\")\n * \"blank-space\"\n */\nfunc replaceBlank(str1 : String, ch : String) -> String {\n    var str2 = \"\"\n    for i in 0..<str1.count {\n        if str1[i] == \" \" {\n            str2 += ch\n        } else {\n            str2 += str1[i]\n        }\n    }\n    return str2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reverse a string.\n *\n * >>> reverse(\"hello\")\n * \"olleh\"\n * >>> reverse(\"python\")\n * \"nyhtop\"\n * >>> reverse(\"blank space\")\n * \"esac ekcnaP\"\n */\nfunc reverse(str1 : String) -> String {\n    var str2 = \"\"\n    for i in 0..<str1.count {\n        str2 += str1[str1.count - i - 1]\n    }\n    return str2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a string is a palindrome.\n *\n * >>> isPalindrome(\"hello\")\n * false\n * >>> isPalindrome(\"racecar\")\n * true\n * >>> isPalindrome(\"race car\")\n * false\n */\nfunc isPalindrome(str1 : String) -> Bool {\n    var str2 = \"\"\n    for i in 0..<str1.count {\n        str2 += str1[str1.count - i - 1]\n    }\n    return str1 == str2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a string is a palindrome.\n *\n * >>> isPalind"}
{"task_id": "MBSWP/231", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum sum in the given right triangle of numbers.\n *\n * >>> maxSum([[1], [2, 1], [3, 3, 2]], 3)\n * 6\n * >>> maxSum([[1], [1, 2], [4, 1, 12]], 3)\n * 15\n * >>> maxSum([[2], [3, 2], [13, 23, 12]], 3)\n * 28\n */\nfunc maxSum(tri : [[Int]], n : Int) -> Int {\n    var maxSum = 0\n    var maxRow = 0\n    var maxCol = 0\n    var maxSumRow = 0\n    var maxSumCol = 0\n    var maxSumRowCol = 0\n    var maxSumRowColSum = 0\n    var maxSumRowColSumRow = 0\n    var maxSumRowColSumCol = 0\n    var maxSumRowColSumRowCol = 0\n    var maxSumRowColSumRowColSum = 0\n    var maxSumRowColSumRowColSumRow = 0\n    var maxSumRowColSumRowColSumCol = 0\n    var maxSumRowColSumRowColSumRowCol = 0\n    var maxSumRowColSumRowColSumColSum = 0\n    var maxSumRowColSumRowColSumRowColSumRow = 0\n    var maxSumRowColSumRowColSumColSumRowCol = 0\n    var maxSumRowColSumRowColSumColSumRowColSum = 0\n    var maxSumRowColSumRowColSumColSumRowColSumRow = 0\n    var maxSumRowColSumRowColSumColSumRowColSumCol = 0\n    var maxSumRowColSumRowColSumColSumRowColSumRowCol = 0\n    var maxSumRowColSumRowColSumColSumRowColSumColSum = 0\n    var maxSumRowColSumRowColSumColSumRowColSumColSumRow = 0\n    var maxSumRowColSumRowColSumColSumRowColSumColSumRowCol = 0\n    var maxSumRowColSumRowColSumColSumRowColSumColSumRowColSum = 0\n    var maxSumRowColSumRowColSumColSumRowColSumCol"}
{"task_id": "MBSWP/232", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get the n largest items from a dataset.\n *\n * >>> largNnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n * [100, 90]\n * >>> largNnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)\n * [100, 90, 80, 70, 60]\n * >>> largNnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)\n * [100, 90, 80]\n */\nfunc largNnum(list1 : [Int], n : Int) -> [Int] {\n    var list2 = [Int]()\n    var list3 = [Int]()\n    var list4 = [Int]()\n    var list5 = [Int]()\n    var list6 = [Int]()\n    var list7 = [Int]()\n    var list8 = [Int]()\n    var list9 = [Int]()\n    var list10 = [Int]()\n    var list11 = [Int]()\n    var list12 = [Int]()\n    var list13 = [Int]()\n    var list14 = [Int]()\n    var list15 = [Int]()\n    var list16 = [Int]()\n    var list17 = [Int]()\n    var list18 = [Int]()\n    var list19 = [Int]()\n    var list20 = [Int]()\n    var list21 = [Int]()\n    var list22 = [Int]()\n    var list23 = [Int]()\n    var list24 = [Int]()\n    var list25 = [Int]()\n    var list26 = [Int]()\n    var list27 = [Int]()\n    var list28 = [Int]()\n    var list29 = [Int]()\n    var list30 = [Int]()\n    var list31 = [Int]()\n    var list32 = [Int]()\n    var list33 = [Int]()\n    var list34 = [Int]()\n    var"}
{"task_id": "MBSWP/233", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area of a cylinder.\n *\n * >>> lateralsufaceCylinder(10, 5)\n * 314.15000000000003\n * >>> lateralsufaceCylinder(4, 5)\n * 125.66000000000001\n * >>> lateralsufaceCylinder(4, 10)\n * 251.32000000000002\n */\nfunc lateralsufaceCylinder(r : Int, h : Int) -> Double {\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area of a cone.\n *\n * >>> lateralsufaceCone(10, 5)\n * 314.15000000000003\n * >>> lateralsufaceCone(4, 5)\n * 125.66000000000001\n * >>> lateralsufaceCone(4, 10)\n * 251.32000000000002\n */\nfunc lateralsufaceCone(r : Int, h : Int) -> Double {\n    return 3.14 * r * r + 3.14 * r * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area of a sphere.\n *\n * >>> lateralsufaceSphere(10)\n * 314.15000000000003\n * >>> lateralsufaceSphere(4)\n * 125.66000000000001\n * >>> lateralsufaceSphere(4)\n * 251.32000000000002\n */\nfunc lateralsufaceSphere(r : Int) -> Double {\n    return 4 * 3.14 * r * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area of a cuboid.\n *\n * >>> lateralsufaceCuboid(10, 5, 3)\n * 314.15000000000003\n * >>> lateralsufaceCuboid(4, 5, 3)\n * 125.66000000000001\n * >>> lateralsufaceCuboid(4, 10"}
{"task_id": "MBSWP/234", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cube.\n *\n * >>> volumeCube(3)\n * 27\n * >>> volumeCube(2)\n * 8\n * >>> volumeCube(5)\n * 125\n */\nfunc volumeCube(l : Int) -> Int {\n    return l * l * l\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a sphere.\n *\n * >>> volumeSphere(3)\n * 113\n * >>> volumeSphere(2)\n * 13\n * >>> volumeSphere(5)\n * 463\n */\nfunc volumeSphere(r : Int) -> Int {\n    return 4/3 * pi * r * r * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cylinder.\n *\n * >>> volumeCylinder(3, 2)\n * 54\n * >>> volumeCylinder(2, 5)\n * 62\n * >>> volumeCylinder(5, 3)\n * 125\n */\nfunc volumeCylinder(r : Int, h : Int) -> Int {\n    return pi * r * r * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cone.\n *\n * >>> volumeCone(3, 2)\n * 9\n * >>> volumeCone(2, 5)\n * 30\n * >>> volumeCone(5, 3)\n * 75\n */\nfunc volumeCone(r : Int, h : Int) -> Int {\n    return pi * r * r * h / 3\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a pyramid.\n *\n * >>> volumePyramid(3, 2)\n * 9\n * >>> volumePyramid(2, 5)\n * 30\n * >>> volumePyramid(5, 3)\n * 75\n */\nfunc volumePyramid(r : Int, h : Int) -> Int {\n    return (2 * pi * r *"}
{"task_id": "MBSWP/235", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to set all even bits of a given number.\n *\n * >>> evenBitSetNumber(10)\n * 10\n * >>> evenBitSetNumber(20)\n * 30\n * >>> evenBitSetNumber(30)\n * 30\n */\nfunc evenBitSetNumber(n : Int) -> Int {\n    var result = n\n    for i in 0..<32 {\n        if (n & (1 << i)) == 0 {\n            result |= (1 << i)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to set all odd bits of a given number.\n *\n * >>> oddBitSetNumber(10)\n * 11\n * >>> oddBitSetNumber(20)\n * 31\n * >>> oddBitSetNumber(30)\n * 31\n */\nfunc oddBitSetNumber(n : Int) -> Int {\n    var result = n\n    for i in 0..<32 {\n        if (n & (1 << i)) != 0 {\n            result |= (1 << i)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to set all even bits of a given number.\n *\n * >>> evenBitSetNumber(10)\n * 10\n * >>> evenBitSetNumber(20)\n * 30\n * >>> evenBitSetNumber(30)\n * 30\n */\nfunc evenBitSetNumber(n : Int) -> Int {\n    var result = n\n    for i in 0..<32 {\n        if (n & (1 << i)) == 0 {\n            result |= (1 << i)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to set all odd bits of a given number.\n *\n * >>> oddBitSetNumber(10)\n * 11\n * >>> oddBitSetNumber(20)\n * 31\n * >>> oddBitSetNumber(30)\n * 31\n */\nfunc oddBit"}
{"task_id": "MBSWP/236", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n *\n * >>> noOfTriangle(4, 2)\n * 7\n * >>> noOfTriangle(4, 3)\n * 3\n * >>> noOfTriangle(1, 3)\n * -1\n */\nfunc noOfTriangle(n : Int, k : Int) -> Int {\n    if n <= 0 || k <= 0 {\n        return -1\n    }\n    let max = n * k\n    let min = n * (k - 1)\n    return max - min\n}\n"}
{"task_id": "MBSWP/237", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check the occurrences of records which occur similar times in the given tuples.\n *\n * >>> checkOccurences([[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]])\n * [[1, 3] : 2, [2, 5] : 2, [3, 6] : 1]\n * >>> checkOccurences([[4, 2], [2, 4], [3, 6], [6, 3], [7, 4]])\n * [[2, 4] : 2, [3, 6] : 2, [4, 7] : 1]\n * >>> checkOccurences([[13, 2], [11, 23], [12, 25], [25, 12], [16, 23]])\n * [[2, 13] : 1, [11, 23] : 1, [12, 25] : 2, [16, 23] : 1]\n */\nfunc checkOccurences(testList : [[Int]]) -> [[Int]: Int] {\n    var result : [[Int]: Int] = [:]\n    for i in 0..<testList.count {\n        for j in i+1..<testList.count {\n            if testList[i][0] == testList[j][0] {\n                if result[testList[i]] == nil {\n                    result[testList[i]] = 1\n                } else {\n                    result[testList[i]]! += 1\n                }\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check the occurrences of records which occur similar times in the given tuples.\n *\n * >>> checkOccurences([[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]])\n * [[1, 3] : 2, [2, 5] : 2, [3, 6] : 1]\n * >>> checkOccurences([[4, 2], [2, 4], [3, 6], [6, 3], [7, 4]])\n * [[2, 4"}
{"task_id": "MBSWP/238", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count number of non-empty substrings of a given string.\n *\n * >>> numberOfSubstrings(\"abc\")\n * 6\n * >>> numberOfSubstrings(\"abcd\")\n * 10\n * >>> numberOfSubstrings(\"abcde\")\n * 15\n */\nfunc numberOfSubstrings(str : String) -> Int {\n    var count = 0\n    for i in 0..<str.count {\n        for j in i..<str.count {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/239", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n *\n * >>> getTotalNumberOfSequences(10, 4)\n * 4\n * >>> getTotalNumberOfSequences(5, 2)\n * 6\n * >>> getTotalNumberOfSequences(16, 3)\n * 84\n */\nfunc getTotalNumberOfSequences(m : Int, n : Int) -> Int {\n    var total = 0\n    for i in 1...n {\n        total += getNumberOfSequences(m, i)\n    }\n    return total\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n *\n * >>> getNumberOfSequences(10, 4)\n * 4\n * >>> getNumberOfSequences(5, 2)\n * 6\n * >>> getNumberOfSequences(16, 3)\n * 84\n */\nfunc getNumberOfSequences(m : Int, n : Int) -> Int {\n    var total = 0\n    for i in 1...n {\n        total += getNumberOfSequences(m, i)\n    }\n    return total\n}\n"}
{"task_id": "MBSWP/240", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace the last element of the list with another list.\n *\n * >>> replaceList([1, 3, 5, 7, 9, 10], [2, 4, 6, 8])\n * [1, 3, 5, 7, 9, 2, 4, 6, 8]\n * >>> replaceList([1, 2, 3, 4, 5], [5, 6, 7, 8])\n * [1, 2, 3, 4, 5, 6, 7, 8]\n * >>> replaceList([\"red\", \"blue\", \"green\"], [\"yellow\"])\n * [\"red\", \"blue\", \"yellow\"]\n */\nfunc replaceList(list1 : [AnyHashable], list2 : [AnyHashable]) -> [AnyHashable] {\n    var list1 = list1\n    list1.removeLast()\n    list1.append(list2)\n    return list1\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace the last element of the list with another list.\n *\n * >>> replaceList([1, 3, 5, 7, 9, 10], [2, 4, 6, 8])\n * [1, 3, 5, 7, 9, 2, 4, 6, 8]\n * >>> replaceList([1, 2, 3, 4, 5], [5, 6, 7, 8])\n * [1, 2, 3, 4, 5, 6, 7, 8]\n * >>> replaceList([\"red\", \"blue\", \"green\"], [\"yellow\"])\n * [\"red\", \"blue\", \"yellow\"]\n */\nfunc replaceList(list1 : [AnyHashable], list2 : [AnyHashable]) -> [AnyHashable] {\n    var list1 = list1\n    list1.removeLast()\n    list1.append(list2)\n    return list1\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace the last element of the list with another list.\n *\n * >>> replaceList([1, 3, 5, 7, 9, 10], [2, 4, 6, 8])\n * ["}
{"task_id": "MBSWP/241", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to generate a 3d array having each element as '*'.\n *\n * >>> array3d(6, 4, 3)\nn * >>> array3d(5, 3, 4)\n * [[[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]], [[\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"], [\"*\", \"*\", \"*\", \"*\", \"*\"]]]\n * >>> array3d(1, 2, 3)\n * [[[\"*\"], [\"*\"]], [[\"*\"], [\"*\"]], [[\"*\"], [\"*\"]]]\n */\nfunc array3d(m : Int, n : Int, o : Int) -> [[[String]]] {\n   "}
{"task_id": "MBSWP/242", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count total characters in a string.\n *\n * >>> countCharac(\"python programming\")\n * 18\n * >>> countCharac(\"language\")\n * 8\n * >>> countCharac(\"words\")\n * 5\n */\nfunc countCharac(str1 : String) -> Int {\n    var count = 0\n    for char in str1 {\n        count += 1\n    }\n    return count\n}\n\nprint(countCharac(\"python programming\"))\nprint(countCharac(\"language\"))\nprint(countCharac(\"words\"))\n"}
{"task_id": "MBSWP/243", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the given list based on the occurrence of first element of tuples.\n *\n * >>> sortOnOccurence([[1, \"Jake\"], [2, \"Bob\"], [1, \"Cara\"]])\n * [[1, \"Jake\", \"Cara\", 2], [2, \"Bob\", 1]]\n * >>> sortOnOccurence([[\"b\", \"ball\"], [\"a\", \"arm\"], [\"b\", \"b\"], [\"a\", \"ant\"]])\n * [[\"b\", \"ball\", \"b\", 2], [\"a\", \"arm\", \"ant\", 2]]\n * >>> sortOnOccurence([[2, \"Mark\"], [3, \"Maze\"], [2, \"Sara\"]])\n * [[2, \"Mark\", \"Sara\", 2], [3, \"Maze\", 1]]\n */\nfunc sortOnOccurence(lst : [[AnyHashable]]) -> [[AnyHashable]] {\n    var sortedLst : [[AnyHashable]] = []\n    var sortedLst2 : [[AnyHashable]] = []\n    var sortedLst3 : [[AnyHashable]] = []\n    var sortedLst4 : [[AnyHashable]] = []\n    var sortedLst5 : [[AnyHashable]] = []\n    var sortedLst6 : [[AnyHashable]] = []\n    var sortedLst7 : [[AnyHashable]] = []\n    var sortedLst8 : [[AnyHashable]] = []\n    var sortedLst9 : [[AnyHashable]] = []\n    var sortedLst10 : [[AnyHashable]] = []\n    var sortedLst11 : [[AnyHashable]] = []\n    var sortedLst12 : [[AnyHashable]] = []\n    var sortedLst13 : [[AnyHashable]] = []\n    var sortedLst14 : [[AnyHashable]] = []\n    var sortedLst15 : [[AnyHashable]] = []\n    var sortedLst16 : [[AnyHashable]] = []\n    var sortedLst17 : [[AnyHashable]] = []\n    var sortedLst18 : [[AnyHashable]] = []\n    var sortedLst19 : [[AnyHashable]] ="}
{"task_id": "MBSWP/244", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the next perfect square greater than a given number.\n *\n * >>> nextPerfectSquare(35)\n * 36\n * >>> nextPerfectSquare(6)\n * 9\n * >>> nextPerfectSquare(9)\n * 16\n */\nfunc nextPerfectSquare(n : Int) -> Int {\n    var n = n\n    var sq = Int(sqrt(Double(n)))\n    if sq * sq == n {\n        return sq * sq\n    }\n    sq += 1\n    while sq * sq <= n {\n        sq += 2\n    }\n    return sq * sq\n}\n"}
{"task_id": "MBSWP/245", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n *\n * >>> maxSum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9)\n * 194\n * >>> maxSum([80, 60, 30, 40, 20, 10], 6)\n * 210\n * >>> maxSum([2, 3, 14, 16, 21, 23, 29, 30], 8)\n * 138\n */\nfunc maxSum(arr : [Int], n : Int) -> Int {\n    var maxSum = 0\n    var maxStart = 0\n    var maxEnd = 0\n    var sum = 0\n    var start = 0\n    var end = 0\n    for i in 0..<n {\n        if arr[i] == 0 {\n            if sum > maxSum {\n                maxSum = sum\n                maxStart = start\n                maxEnd = end\n            }\n            sum = 0\n            start = i + 1\n            end = i + 1\n        } else {\n            sum += arr[i]\n            end = i + 1\n        }\n    }\n    if sum > maxSum {\n        maxSum = sum\n        maxStart = start\n        maxEnd = end\n    }\n    return maxSum\n}\n"}
{"task_id": "MBSWP/246", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function for computing square roots using the babylonian method.\n *\n * >>> babylonianSquareroot(10)\n * 3.162277660168379\n * >>> babylonianSquareroot(2)\n * 1.414213562373095\n * >>> babylonianSquareroot(9)\n * 3.0\n */\nfunc babylonianSquareroot(number : Int) -> Double {\n    var guess = number / 2\n    var previousGuess = guess\n    while guess != previousGuess {\n        previousGuess = guess\n        guess = (guess + number / guess) / 2\n    }\n    return guess\n}\n"}
{"task_id": "MBSWP/247", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the longest palindromic subsequence in the given string.\n *\n * >>> lps(\"TENS FOR TENS\")\n * 5\n * >>> lps(\"CARDIO FOR CARDS\")\n * 7\n * >>> lps(\"PART OF THE JOURNEY IS PART\")\n * 9\n */\nfunc lps(str : String) -> Int {\n    var max = 0\n    var dp = Array(repeating: Array(repeating: 0, count: str.count), count: str.count)\n    for i in 0..<str.count {\n        for j in i..<str.count {\n            if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n            max = max(max, dp[i][j])\n        }\n    }\n    return max\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the longest palindromic subsequence in the given string.\n *\n * >>> lps(\"TENS FOR TENS\")\n * 5\n * >>> lps(\"CARDIO FOR CARDS\")\n * 7\n * >>> lps(\"PART OF THE JOURNEY IS PART\")\n * 9\n */\nfunc lps(str : String) -> Int {\n    var max = 0\n    var dp = Array(repeating: Array(repeating: 0, count: str.count), count: str.count)\n    for i in 0..<str.count {\n        for j in i..<str.count {\n            if str[i] == str[j] {\n                dp[i][j] = dp[i+1][j-1] + 2\n            } else {\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            }\n            max = max(max, dp[i]["}
{"task_id": "MBSWP/248", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the harmonic sum of n-1.\n *\n * >>> harmonicSum(7)\n * 2.5928571428571425\n * >>> harmonicSum(4)\n * 2.083333333333333\n * >>> harmonicSum(19)\n * 3.547739657143682\n */\nfunc harmonicSum(n : Int) -> Double {\n    var sum = 0.0\n    for i in 1..<n {\n        sum += 1.0 / Double(i)\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/249", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the intersection of two arrays using lambda function.\n *\n * >>> intersectionArray([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9])\n * [1, 2, 8, 9]\n * >>> intersectionArray([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9])\n * [3, 5, 7, 9]\n * >>> intersectionArray([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40])\n * [10]\n */\nfunc intersectionArray(arrayNums1 : [Int], arrayNums2 : [Int]) -> [Int] {\n    var result = [Int]()\n    for num1 in arrayNums1 {\n        for num2 in arrayNums2 {\n            if num1 == num2 {\n                result.append(num1)\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the intersection of two arrays using a for loop.\n *\n * >>> intersectionArrayFor([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9])\n * [1, 2, 8, 9]\n * >>> intersectionArrayFor([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9])\n * [3, 5, 7, 9]\n * >>> intersectionArrayFor([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40])\n * [10]\n */\nfunc intersectionArrayFor(arrayNums1 : [Int], arrayNums2 : [Int]) -> [Int] {\n    var result = [Int]()\n    for num1 in arrayNums1 {\n        for num2 in arrayNums2 {\n            if num1 == num2 {\n                result.append(num1)\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are"}
{"task_id": "MBSWP/250", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the occcurences of an element in a tuple.\n *\n * >>> countX([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4)\n * 0\n * >>> countX([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10)\n * 3\n * >>> countX([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8)\n * 4\n */\nfunc countX(tup : [Int], x : Int) -> Int {\n    var count = 0\n    for i in tup {\n        if i == x {\n            count += 1\n        }\n    }\n    return count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the occcurences of an element in a tuple.\n *\n * >>> countX([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4)\n * 0\n * >>> countX([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10)\n * 3\n * >>> countX([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8)\n * 4\n */\nfunc countX(tup : [Int], x : Int) -> Int {\n    var count = 0\n    for i in tup {\n        if i == x {\n            count += 1\n        }\n    }\n    return count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the occcurences of an element in a tuple.\n *\n * >>> countX([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4)\n * 0\n * >>> countX([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2],"}
{"task_id": "MBSWP/251", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to insert an element before each element of a list.\n *\n * >>> insertElement([\"Red\", \"Green\", \"Black\"], \"c\")\n * [\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"]\n * >>> insertElement([\"python\", \"java\"], \"program\")\n * [\"program\", \"python\", \"program\", \"java\"]\n * >>> insertElement([\"happy\", \"sad\"], \"laugh\")\n * [\"laugh\", \"happy\", \"laugh\", \"sad\"]\n */\nfunc insertElement(list : [String], element : String) -> [String] {\n    var result = [String]()\n    for i in 0..<list.count {\n        result.append(element)\n        result.append(list[i])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to insert an element after each element of a list.\n *\n * >>> insertElementAfter([\"Red\", \"Green\", \"Black\"], \"c\")\n * [\"Red\", \"c\", \"Green\", \"c\", \"Black\"]\n * >>> insertElementAfter([\"python\", \"java\"], \"program\")\n * [\"python\", \"program\", \"java\", \"program\"]\n * >>> insertElementAfter([\"happy\", \"sad\"], \"laugh\")\n * [\"happy\", \"laugh\", \"sad\", \"laugh\"]\n */\nfunc insertElementAfter(list : [String], element : String) -> [String] {\n    var result = [String]()\n    for i in 0..<list.count {\n        result.append(list[i])\n        result.append(element)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to insert an element before the first element of a list.\n *\n * >>> insertElementBeforeFirst([\"Red\", \"Green\", \"Black\"], \"c\")\n * [\"c\", \"Red\", \"Green\", \"Black\"]\n * >>> insertElementBeforeFirst([\"python\", \"java\"], \"program\")\n * [\"program\", \"python\", \"java\"]\n * >>> insertElement"}
{"task_id": "MBSWP/252", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert complex numbers to polar coordinates.\n *\n * >>> convert(1)\n * [1.0, 0.0]\n * >>> convert(4)\n * [4.0, 0.0]\n * >>> convert(5)\n * [5.0, 0.0]\n */\nfunc convert(numbers : Int) -> [Double] {\n    var result = [Double]()\n    result.append(Double(numbers))\n    result.append(0.0)\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert complex numbers to polar coordinates.\n *\n * >>> convert(1)\n * [1.0, 0.0]\n * >>> convert(4)\n * [4.0, 0.0]\n * >>> convert(5)\n * [5.0, 0.0]\n */\nfunc convert(numbers : Double) -> [Double] {\n    var result = [Double]()\n    result.append(numbers)\n    result.append(0.0)\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert complex numbers to polar coordinates.\n *\n * >>> convert(1)\n * [1.0, 0.0]\n * >>> convert(4)\n * [4.0, 0.0]\n * >>> convert(5)\n * [5.0, 0.0]\n */\nfunc convert(numbers : [Double]) -> [Double] {\n    var result = [Double]()\n    result.append(numbers[0])\n    result.append(numbers[1])\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert complex numbers to polar coordinates.\n *\n * >>> convert(1)\n * [1.0, 0.0]\n * >>> convert(4)\n * [4.0, 0.0]\n * >>> convert(5)\n * [5.0, 0.0]\n */"}
{"task_id": "MBSWP/253", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count integers from a given list.\n *\n * >>> countInteger([1, 2, \"abc\", 1.2])\n * 2\n * >>> countInteger([1, 2, 3])\n * 3\n * >>> countInteger([1, 1.2, 4, 5.1])\n * 2\n */\nfunc countInteger(list1 : [AnyHashable]) -> Int {\n    var count = 0\n    for i in list1 {\n        if i is Int {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/254", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all words starting with 'a' or 'e' in a given string.\n *\n * >>> wordsAe(\"python programe\")\n * [\"ame\"]\n * >>> wordsAe(\"python programe language\")\n * [\"ame\", \"anguage\"]\n * >>> wordsAe(\"assert statement\")\n * [\"assert\", \"atement\"]\n */\nfunc wordsAe(text : String) -> [String] {\n    var words = [String]()\n    var word = \"\"\n    for c in text {\n        if c == \"a\" || c == \"e\" {\n            word += c\n        } else if c == \" \" {\n            if word.count > 0 {\n                words.append(word)\n                word = \"\"\n            }\n        }\n    }\n    if word.count > 0 {\n        words.append(word)\n    }\n    return words\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all words starting with 'a' or 'e' in a given string.\n *\n * >>> wordsAe(\"python programe\")\n * [\"ame\"]\n * >>> wordsAe(\"python programe language\")\n * [\"ame\", \"anguage\"]\n * >>> wordsAe(\"assert statement\")\n * [\"assert\", \"atement\"]\n */\nfunc wordsAe(text : String) -> [String] {\n    var words = [String]()\n    var word = \"\"\n    for c in text {\n        if c == \"a\" || c == \"e\" {\n            word += c\n        } else if c == \" \" {\n            if word.count > 0 {\n                words.append(word)\n                word = \"\"\n            }\n        }\n    }\n    if word.count > 0 {\n        words.append(word)\n    }\n    return words\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all words starting with 'a' or 'e' in a given string.\n *\n * >>> wordsAe(\"python programe\")\n * [\"ame\"]\n * >>> words"}
{"task_id": "MBSWP/255", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n *\n * >>> combinationsColors([\"Red\", \"Green\", \"Blue\"], 1)\n * [[\"Red\"], [\"Green\"], [\"Blue\"]]\n * >>> combinationsColors([\"Red\", \"Green\", \"Blue\"], 2)\n * [[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]]\n * >>> combinationsColors([\"Red\", \"Green\", \"Blue\"], 3)\n * [[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]]\n */\nfunc combinationsColors(l : [String], n : Int) -> [[String]] {\n    var result : [[String]] = []\n    if n == 0 {\n        return result\n    }\n    if n == 1 {\n        for i in 0..<l.count {\n            result.append([l[i]])\n        }\n        return result\n    }\n    if n == l.count {\n        return [l]\n    }\n    var result2 : [[String]] = []\n    for i in 0..<l.count {\n        let l2 = l.remove(at: i)\n        let result3 = combinationsColors(l2, n - 1)\n        for j in 0..<result3.count {\n            result2.append([l[i]] + result3[j])\n        }\n    }\n    return result2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to choose specified number of colours from three different colours and generate all the combinations without repetitions.\n *\n * >>> combinationsColors2([\"Red\", \"Green\", \"Blue\"], 1)\n * ["}
{"task_id": "MBSWP/256", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of prime numbers less than a given non-negative number.\n *\n * >>> countPrimesNums(5)\n * 2\n * >>> countPrimesNums(10)\n * 4\n * >>> countPrimesNums(100)\n * 25\n */\nfunc countPrimesNums(n : Int) -> Int {\n    var count = 0\n    for i in 2...n {\n        if isPrime(i) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if a given number is prime.\n *\n * >>> isPrime(2)\n * true\n * >>> isPrime(3)\n * true\n * >>> isPrime(4)\n * false\n * >>> isPrime(5)\n * true\n * >>> isPrime(6)\n * false\n * >>> isPrime(7)\n * true\n * >>> isPrime(8)\n * false\n * >>> isPrime(9)\n * false\n * >>> isPrime(10)\n * false\n */\nfunc isPrime(n : Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "MBSWP/257", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to swap two numbers.\n *\n * >>> swapNumbers(10, 20)\n * [20, 10]\n * >>> swapNumbers(15, 17)\n * [17, 15]\n * >>> swapNumbers(100, 200)\n * [200, 100]\n */\nfunc swapNumbers(a : Int, b : Int) -> [Int] {\n    return [b, a]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to swap two strings.\n *\n * >>> swapStrings(\"hello\", \"world\")\n * [\"world\", \"hello\"]\n * >>> swapStrings(\"apple\", \"banana\")\n * [\"banana\", \"apple\"]\n * >>> swapStrings(\"swift\", \"is\")\n * [\"is\", \"swift\"]\n */\nfunc swapStrings(a : String, b : String) -> [String] {\n    return [b, a]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to swap two booleans.\n *\n * >>> swapBooleans(true, false)\n * [false, true]\n * >>> swapBooleans(false, true)\n * [true, false]\n * >>> swapBooleans(true, true)\n * [true, true]\n */\nfunc swapBooleans(a : Bool, b : Bool) -> [Bool] {\n    return [b, a]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to swap two characters.\n *\n * >>> swapCharacters('a', 'b')\n * ['b', 'a']\n * >>> swapCharacters('c', 'd')\n * ['d', 'c']\n * >>> swapCharacters('e', 'f')\n * ['f', 'e']\n */\nfunc swapCharacters(a : Character, b : Character) -> [Character] {\n    return [b, a]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to swap two arrays.\n *\n * >>> swapArrays"}
{"task_id": "MBSWP/258", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find number of odd elements in the given list using lambda function.\n *\n * >>> countOdd([1, 2, 3, 5, 7, 8, 10])\n * 4\n * >>> countOdd([10, 15, 14, 13, -18, 12, -20])\n * 2\n * >>> countOdd([1, 2, 4, 8, 9])\n * 2\n */\nfunc countOdd(arrayNums : [Int]) -> Int {\n    var count = 0\n    for num in arrayNums {\n        if num % 2 != 0 {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/259", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to maximize the given two tuples.\n *\n * >>> maximizeElements([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n * [[6, 7], [4, 9], [2, 9], [7, 10]]\n * >>> maximizeElements([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])\n * [[7, 8], [5, 10], [3, 10], [8, 11]]\n * >>> maximizeElements([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])\n * [[8, 9], [6, 11], [4, 11], [9, 12]]\n */\nfunc maximizeElements(testTup1 : [[Int]], testTup2 : [[Int]]) -> [[Int]] {\n    var tup1 = testTup1\n    var tup2 = testTup2\n    var maxTup1 = [Int]()\n    var maxTup2 = [Int]()\n    var maxTup = [Int]()\n    var maxTup1Index = 0\n    var maxTup2Index = 0\n    var maxTupIndex = 0\n    var maxTup1Value = 0\n    var maxTup2Value = 0\n    var maxTupValue = 0\n    var maxTup1ValueIndex = 0\n    var maxTup2ValueIndex = 0\n    var maxTupValueIndex = 0\n    var maxTup1ValueIndex2 = 0\n    var maxTup2ValueIndex2 = 0\n    var maxTupValueIndex2 = 0\n    var maxTup1ValueIndex3 = 0\n    var maxTup2ValueIndex3 = 0\n    var maxTupValueIndex3 = 0\n    var maxTup1ValueIndex4 = 0\n    var maxTup2"}
{"task_id": "MBSWP/260", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n *\n * >>> newmanPrime(3)\n * 7\n * >>> newmanPrime(4)\n * 17\n * >>> newmanPrime(5)\n * 41\n */\nfunc newmanPrime(n : Int) -> Int {\n    var nthPrime = 1\n    var nthNewman = 1\n    var nthShanks = 1\n    var nthWilliams = 1\n    var nthPrimeFound = false\n    var nthNewmanFound = false\n    var nthShanksFound = false\n    var nthWilliamsFound = false\n    var nthPrimeFoundCount = 0\n    var nthNewmanFoundCount = 0\n    var nthShanksFoundCount = 0\n    var nthWilliamsFoundCount = 0\n    var nthPrimeFoundCountMax = 0\n    var nthNewmanFoundCountMax = 0\n    var nthShanksFoundCountMax = 0\n    var nthWilliamsFoundCountMax = 0\n    var nthPrimeFoundCountMin = 0\n    var nthNewmanFoundCountMin = 0\n    var nthShanksFoundCountMin = 0\n    var nthWilliamsFoundCountMin = 0\n    var nthPrimeFoundCountSum = 0\n    var nthNewmanFoundCountSum = 0\n    var nthShanksFoundCountSum = 0\n    var nthWilliamsFoundCountSum = 0\n    var nthPrimeFoundCountMaxSum = 0\n    var nthNewmanFoundCountMaxSum = 0\n    var nthShanksFoundCountMaxSum = 0\n    var nthWilliamsFoundCountMaxSum = 0\n    var nthPrimeFoundCountMinSum = 0\n    var nthNewmanFoundCountMinSum = 0\n    var nthShanksFoundCountMinSum = 0\n    var nthWilliamsFoundCountMinSum = 0\n    var nthPrimeFoundCountMaxMin = 0\n    var nthNewmanFoundCountMaxMin = 0\n    var nthShanksFoundCountMaxMin = 0\n    var nthWilliamsFoundCountMaxMin = 0"}
{"task_id": "MBSWP/261", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform mathematical division operation across the given tuples.\n *\n * >>> divisionElements([10, 4, 6, 9], [5, 2, 3, 3])\n * [2, 2, 2, 3]\n * >>> divisionElements([12, 6, 8, 16], [6, 3, 4, 4])\n * [2, 2, 2, 4]\n * >>> divisionElements([20, 14, 36, 18], [5, 7, 6, 9])\n * [4, 2, 6, 2]\n */\nfunc divisionElements(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<testTup1.count {\n        result.append(testTup1[i] / testTup2[i])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform mathematical multiplication operation across the given tuples.\n *\n * >>> multiplicationElements([10, 4, 6, 9], [5, 2, 3, 3])\n * [50, 8, 18, 27]\n * >>> multiplicationElements([12, 6, 8, 16], [6, 3, 4, 4])\n * [72, 18, 24, 48]\n * >>> multiplicationElements([20, 14, 36, 18], [5, 7, 6, 9])\n * [100, 42, 54, 54]\n */\nfunc multiplicationElements(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<testTup1.count {\n        result.append(testTup1[i] * testTup2[i])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform mathematical subtraction operation across the given tuples.\n *\n * >>> subtractionElements([10, 4, 6, 9], [5, 2, 3, 3"}
{"task_id": "MBSWP/262", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to split a given list into two parts where the length of the first part of the list is given.\n *\n * >>> splitTwoParts([1, 1, 2, 3, 4, 4, 5, 1], 3)\n * [[1, 1, 2], [3, 4, 4, 5, 1]]\n * >>> splitTwoParts([\"a\", \"b\", \"c\", \"d\"], 2)\n * [[\"a\", \"b\"], [\"c\", \"d\"]]\n * >>> splitTwoParts([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"], 4)\n * [[\"p\", \"y\", \"t\", \"h\"], [\"o\", \"n\"]]\n */\nfunc splitTwoParts(list1 : [AnyHashable], l : Int) -> [[AnyHashable]] {\n    var list2 = [AnyHashable]()\n    var list3 = [AnyHashable]()\n    var list4 = [AnyHashable]()\n    var list5 = [AnyHashable]()\n    var list6 = [AnyHashable]()\n    var list7 = [AnyHashable]()\n    var list8 = [AnyHashable]()\n    var list9 = [AnyHashable]()\n    var list10 = [AnyHashable]()\n    var list11 = [AnyHashable]()\n    var list12 = [AnyHashable]()\n    var list13 = [AnyHashable]()\n    var list14 = [AnyHashable]()\n    var list15 = [AnyHashable]()\n    var list16 = [AnyHashable]()\n    var list17 = [AnyHashable]()\n    var list18 = [AnyHashable]()\n    var list19 = [AnyHashable]()\n    var list20 = [AnyHashable]()\n    var list21 = [AnyHashable]()\n    var list22 = [AnyHashable]()\n    var list23 = [AnyHashable]()\n    var list24 = [AnyHashable]()\n    var list25 = [AnyHashable]()\n    var list26 = [AnyHashable]()\n    var list27 = [AnyHash"}
{"task_id": "MBSWP/263", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to merge two dictionaries.\n *\n * >>> mergeDict([\"a\" : 100, \"b\" : 200], [\"x\" : 300, \"y\" : 200])\n * [\"x\" : 300, \"y\" : 200, \"a\" : 100, \"b\" : 200]\n * >>> mergeDict([\"a\" : 900, \"b\" : 900, \"d\" : 900], [\"a\" : 900, \"b\" : 900, \"d\" : 900])\n * [\"a\" : 900, \"b\" : 900, \"d\" : 900]\n * >>> mergeDict([\"a\" : 10, \"b\" : 20], [\"x\" : 30, \"y\" : 40])\n * [\"x\" : 30, \"y\" : 40, \"a\" : 10, \"b\" : 20]\n */\nfunc mergeDict(d1 : [String: Int], d2 : [String: Int]) -> [String: Int] {\n    var result = d1\n    for (key, value) in d2 {\n        if let oldValue = result[key] {\n            result[key] = oldValue + value\n        } else {\n            result[key] = value\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to merge two dictionaries.\n *\n * >>> mergeDict([\"a\" : 100, \"b\" : 200], [\"x\" : 300, \"y\" : 200])\n * [\"x\" : 300, \"y\" : 200, \"a\" : 100, \"b\" : 200]\n * >>> mergeDict([\"a\" : 900, \"b\" : 900, \"d\" : 900], [\"a\" : 900, \"b\" : 900, \"d\" : 900])\n * [\"a\" : 900, \"b\" : 900, \"d\" : 900]\n * >>> mergeDict([\"a\" : 10, \"b\" : 20], [\"x\" : 30, \"y\" : 40])\n * [\"x\" : 30, \"y\" : 40, \"a\" : 10, \"b\" :"}
{"task_id": "MBSWP/264", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate a dog's age in dog's years.\n *\n * >>> dogAge(12)\n * 61\n * >>> dogAge(15)\n * 73\n * >>> dogAge(24)\n * 109\n */\nfunc dogAge(hAge : Int) -> Int {\n    return hAge * 7\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate a dog's age in human years.\n *\n * >>> dogAge(61)\n * 12\n * >>> dogAge(73)\n * 15\n * >>> dogAge(109)\n * 24\n */\nfunc dogAge(dAge : Int) -> Int {\n    return dAge / 7\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate a human's age in dog years.\n *\n * >>> dogAge(12)\n * 61\n * >>> dogAge(15)\n * 73\n * >>> dogAge(24)\n * 109\n */\nfunc dogAge(hAge : Int) -> Int {\n    return hAge / 7\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate a human's age in human years.\n *\n * >>> dogAge(61)\n * 12\n * >>> dogAge(73)\n * 15\n * >>> dogAge(109)\n * 24\n */\nfunc dogAge(dAge : Int) -> Int {\n    return dAge\n}\n"}
{"task_id": "MBSWP/265", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to split a list for every nth element.\n *\n * >>> listSplit([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], 3)\n * [[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]]\n * >>> listSplit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3)\n * [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]\n * >>> listSplit([\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"], 2)\n * [[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]]\n */\nfunc listSplit(s : [AnyHashable], step : Int) -> [[AnyHashable]] {\n    var result : [[AnyHashable]] = []\n    var i = 0\n    var j = 0\n    while i < s.count {\n        if j == step {\n            j = 0\n            result.append([])\n        }\n        result[result.count - 1].append(s[i])\n        j += 1\n        i += 1\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to split a list for every nth element.\n *\n * >>> listSplit([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], 3)\n * [[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]]\n * >>> listSplit([1, 2, 3, 4,"}
{"task_id": "MBSWP/266", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area of a cube.\n *\n * >>> lateralsurfaceCube(5)\n * 100\n * >>> lateralsurfaceCube(9)\n * 324\n * >>> lateralsurfaceCube(10)\n * 400\n */\nfunc lateralsurfaceCube(l : Int) -> Int {\n    return l * l * l * 6\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area of a sphere.\n *\n * >>> lateralsurfaceSphere(5)\n * 314\n * >>> lateralsurfaceSphere(9)\n * 1256\n * >>> lateralsurfaceSphere(10)\n * 1380\n */\nfunc lateralsurfaceSphere(r : Int) -> Int {\n    return 4 * r * r * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area of a cylinder.\n *\n * >>> lateralsurfaceCylinder(5, 10)\n * 500\n * >>> lateralsurfaceCylinder(9, 10)\n * 324\n * >>> lateralsurfaceCylinder(10, 10)\n * 400\n */\nfunc lateralsurfaceCylinder(r : Int, h : Int) -> Int {\n    return 2 * r * r * h + 2 * r * r * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area of a cone.\n *\n * >>> lateralsurfaceCone(5, 10)\n * 314\n * >>> lateralsurfaceCone(9, 10)\n * 1256\n * >>> lateralsurfaceCone(10, 10)\n * 1380\n */\nfunc lateralsurfaceCone(r : Int, h : Int) -> Int {\n    return 3.14 * r * r * h + 3.14 * r * r * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area"}
{"task_id": "MBSWP/267", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of squares of first n odd natural numbers.\n *\n * >>> squareSum(2)\n * 10\n * >>> squareSum(3)\n * 35\n * >>> squareSum(4)\n * 84\n */\nfunc squareSum(n : Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 1 {\n            sum += i * i\n        }\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/268", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n'th star number.\n *\n * >>> findStarNum(3)\n * 37\n * >>> findStarNum(4)\n * 73\n * >>> findStarNum(5)\n * 121\n */\nfunc findStarNum(n : Int) -> Int {\n    var num = 1\n    for i in 1...n {\n        num *= i\n    }\n    return num\n}\n"}
{"task_id": "MBSWP/269", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the ascii value of a character.\n *\n * >>> asciiValue(\"A\")\n * 65\n * >>> asciiValue(\"R\")\n * 82\n * >>> asciiValue(\"S\")\n * 83\n */\nfunc asciiValue(k : String) -> Int {\n    return k.characters.first!.unicodeScalar!.value\n}\n"}
{"task_id": "MBSWP/270", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of even numbers at even positions.\n *\n * >>> sumEvenAndEvenIndex([5, 6, 12, 1, 18, 8], 6)\n * 30\n * >>> sumEvenAndEvenIndex([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10)\n * 26\n * >>> sumEvenAndEvenIndex([5, 6, 12, 1], 4)\n * 12\n */\nfunc sumEvenAndEvenIndex(arr : [Int], n : Int) -> Int {\n    var sum = 0\n    for i in 0..<n {\n        if i % 2 == 0 {\n            if arr[i] % 2 == 0 {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of even numbers at even positions.\n *\n * >>> sumEvenAndEvenIndex([5, 6, 12, 1, 18, 8], 6)\n * 30\n * >>> sumEvenAndEvenIndex([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10)\n * 26\n * >>> sumEvenAndEvenIndex([5, 6, 12, 1], 4)\n * 12\n */\nfunc sumEvenAndEvenIndex(arr : [Int], n : Int) -> Int {\n    var sum = 0\n    for i in 0..<n {\n        if i % 2 == 0 {\n            if arr[i] % 2 == 0 {\n                sum += arr[i]\n            }\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of even numbers at even positions.\n *\n * >>> sumEvenAndEvenIndex([5, 6, 12, 1, 18, 8], 6)\n * 30\n * >>> sumEvenAndEvenIndex([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10)\n * 26\n * >>> sumEvenAndEvenIndex([5, 6"}
{"task_id": "MBSWP/271", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of fifth power of first n even natural numbers.\n *\n * >>> evenPowerSum(2)\n * 1056\n * >>> evenPowerSum(3)\n * 8832\n * >>> evenPowerSum(1)\n * 32\n */\nfunc evenPowerSum(n : Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n            sum += Int(pow(Double(i), 5))\n        }\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/272", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perfom the rear element extraction from list of tuples records.\n *\n * >>> rearExtract([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]])\n * [21, 20, 19]\n * >>> rearExtract([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]])\n * [36, 25, 45]\n * >>> rearExtract([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]])\n * [14, 36, 56]\n */\nfunc rearExtract(testList : [[AnyHashable]]) -> [Int] {\n    var result : [Int] = []\n    for i in testList {\n        result.append(i[2])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perfom the rear element extraction from list of tuples records.\n *\n * >>> rearExtract([[1, \"Rash\", 21], [2, \"Varsha\", 20], [3, \"Kil\", 19]])\n * [21, 20, 19]\n * >>> rearExtract([[1, \"Sai\", 36], [2, \"Ayesha\", 25], [3, \"Salman\", 45]])\n * [36, 25, 45]\n * >>> rearExtract([[1, \"Sudeep\", 14], [2, \"Vandana\", 36], [3, \"Dawood\", 56]])\n * [14, 36, 56]\n */\nfunc rearExtract(testList : [[AnyHashable]]) -> [Int] {\n    var result : [Int] = []\n    for i in testList {\n        result.append(i[2])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perfom the rear element extraction from list of tuples records.\n *\n *"}
{"task_id": "MBSWP/273", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to substract the contents of one tuple with corresponding index of other tuple.\n *\n * >>> substractElements([10, 4, 5], [2, 5, 18])\n * [8, -1, -13]\n * >>> substractElements([11, 2, 3], [24, 45, 16])\n * [-13, -43, -13]\n * >>> substractElements([7, 18, 9], [10, 11, 12])\n * [-3, 7, -3]\n */\nfunc substractElements(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<testTup1.count {\n        result.append(testTup1[i] - testTup2[i])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to multiply the contents of two tuples.\n *\n * >>> multiplyElements([10, 4, 5], [2, 5, 18])\n * [20, 20, 150]\n * >>> multiplyElements([11, 2, 3], [24, 45, 16])\n * [288, 108, 144]\n * >>> multiplyElements([7, 18, 9], [10, 11, 12])\n * [70, 198, 90]\n */\nfunc multiplyElements(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<testTup1.count {\n        result.append(testTup1[i] * testTup2[i])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to divide the contents of two tuples.\n *\n * >>> divideElements([10, 4, 5], [2, 5, 18])\n * [5, 1, 0]\n * >>> divideElements([11, 2, 3], [24, 45, 16])\n * ["}
{"task_id": "MBSWP/274", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of even index binomial coefficients.\n *\n * >>> evenBinomialCoeffSum(4)\n * 8\n * >>> evenBinomialCoeffSum(6)\n * 32\n * >>> evenBinomialCoeffSum(2)\n * 2\n */\nfunc evenBinomialCoeffSum(n : Int) -> Int {\n    var sum = 0\n    for i in 0..<n {\n        if i % 2 == 0 {\n            sum += binomialCoeff(n, i)\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of odd index binomial coefficients.\n *\n * >>> oddBinomialCoeffSum(4)\n * 6\n * >>> oddBinomialCoeffSum(6)\n * 16\n * >>> oddBinomialCoeffSum(2)\n * 0\n */\nfunc oddBinomialCoeffSum(n : Int) -> Int {\n    var sum = 0\n    for i in 0..<n {\n        if i % 2 != 0 {\n            sum += binomialCoeff(n, i)\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of even index binomial coefficients.\n *\n * >>> evenBinomialCoeffSum(4)\n * 8\n * >>> evenBinomialCoeffSum(6)\n * 32\n * >>> evenBinomialCoeffSum(2)\n * 2\n */\nfunc evenBinomialCoeffSum(n : Int) -> Int {\n    var sum = 0\n    for i in 0..<n {\n        if i % 2 == 0 {\n            sum += binomialCoeff(n, i)\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of odd index binomial coefficients.\n *"}
{"task_id": "MBSWP/275", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the position of the last removed element from the given array.\n *\n * >>> getPosition([2, 5, 4], 3, 2)\n * 2\n * >>> getPosition([4, 3], 2, 2)\n * 2\n * >>> getPosition([1, 2, 3, 4], 4, 1)\n * 4\n */\nfunc getPosition(a : [Int], n : Int, m : Int) -> Int {\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var"}
{"task_id": "MBSWP/276", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cylinder.\n *\n * >>> volumeCylinder(10, 5)\n * 1570.7500000000002\n * >>> volumeCylinder(4, 5)\n * 251.32000000000002\n * >>> volumeCylinder(4, 10)\n * 502.64000000000004\n */\nfunc volumeCylinder(r : Int, h : Int) -> Double {\n    return Double(r) * Double(r) * Double(h)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a sphere.\n *\n * >>> volumeSphere(10)\n * 314.15900000000004\n * >>> volumeSphere(4)\n * 50.26548245743669\n * >>> volumeSphere(1)\n * 3.141592653589793\n */\nfunc volumeSphere(r : Int) -> Double {\n    return Double(4) / 3 * Double(3.141592653589793) * Double(r) * Double(r) * Double(r)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cone.\n *\n * >>> volumeCone(10, 5)\n * 1570.7500000000002\n * >>> volumeCone(4, 5)\n * 251.32000000000002\n * >>> volumeCone(4, 10)\n * 502.64000000000004\n */\nfunc volumeCone(r : Int, h : Int) -> Double {\n    return Double(r) * Double(r) * Double(h) * Double(3.141592653589793)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a pyramid.\n *\n * >>> volumePyramid(10, 5)\n * 1570.7500000000002\n * >>> volumePyramid(4, 5)\n * 251.32000000000002\n * >>> volumePyramid(4, 10)\n * 502.64000000000004\n */\nfunc volumePyramid(r : Int,"}
{"task_id": "MBSWP/277", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to filter a dictionary based on values.\n *\n * >>> dictFilter([\"Cierra Vega\" : 175, \"Alden Cantrell\" : 180, \"Kierra Gentry\" : 165, \"Pierre Cox\" : 190], 170)\n * [\"Cierra Vega\" : 175, \"Alden Cantrell\" : 180, \"Pierre Cox\" : 190]\n * >>> dictFilter([\"Cierra Vega\" : 175, \"Alden Cantrell\" : 180, \"Kierra Gentry\" : 165, \"Pierre Cox\" : 190], 180)\n * [\"Alden Cantrell\" : 180, \"Pierre Cox\" : 190]\n * >>> dictFilter([\"Cierra Vega\" : 175, \"Alden Cantrell\" : 180, \"Kierra Gentry\" : 165, \"Pierre Cox\" : 190], 190)\n * [\"Pierre Cox\" : 190]\n */\nfunc dictFilter(dict : [String: Int], n : Int) -> [String: Int] {\n    var result = [String: Int]()\n    for (key, value) in dict {\n        if value >= n {\n            result[key] = value\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to filter a dictionary based on keys.\n *\n * >>> dictFilterKeys([\"Cierra Vega\" : 175, \"Alden Cantrell\" : 180, \"Kierra Gentry\" : 165, \"Pierre Cox\" : 190], \"Cierra Vega\")\n * [\"Cierra Vega\" : 175]\n * >>> dictFilterKeys([\"Cierra Vega\" : 175, \"Alden Cantrell\" : 180, \"Kierra Gentry\" : 165, \"Pierre Cox\" : 190], \"Alden Cantrell\")\n * [\"Alden Cantrell\" : 180]\n * >>> dictFilterKeys([\"Cierra Vega\" : 175, \"Alden Cantrell\" : 180, \"Kierra Gentry\" : 165, \"Pierre Cox\" : 190], \"Kierra Gentry\")\n * [\"Kierra Gentry\" : 165]\n * >>> dictFilterKeys([\"Cierra Vega\" : 175, \"A"}
{"task_id": "MBSWP/278", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the element count that occurs before the record in the given tuple.\n *\n * >>> countFirstElements([1, 5, 7, [4, 6], 10])\n * 3\n * >>> countFirstElements([2, 9, [5, 7], 11])\n * 2\n * >>> countFirstElements([11, 15, 5, 8, [2, 3], 8])\n * 4\n */\nfunc countFirstElements(testTup : [AnyHashable]) -> Int {\n    var count = 0\n    var tup = testTup\n    while let first = tup.first {\n        if let firstTup = first as? [AnyHashable] {\n            tup = firstTup\n        } else {\n            count += 1\n            tup = tup.dropFirst()\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/279", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth decagonal number.\n *\n * >>> isNumDecagonal(3)\n * 27\n * >>> isNumDecagonal(7)\n * 175\n * >>> isNumDecagonal(10)\n * 370\n */\nfunc isNumDecagonal(n : Int) -> Int {\n    var nthDecagonal = 0\n    for i in 1...n {\n        nthDecagonal += i * (i * 9 + 1) / 2\n    }\n    return nthDecagonal\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth pentagonal number.\n *\n * >>> isNumPentagonal(3)\n * 5\n * >>> isNumPentagonal(7)\n * 105\n * >>> isNumPentagonal(10)\n * 405\n */\nfunc isNumPentagonal(n : Int) -> Int {\n    var nthPentagonal = 0\n    for i in 1...n {\n        nthPentagonal += i * (3 * i - 1) / 2\n    }\n    return nthPentagonal\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth hexagonal number.\n *\n * >>> isNumHexagonal(3)\n * 6\n * >>> isNumHexagonal(7)\n * 153\n * >>> isNumHexagonal(10)\n * 505\n */\nfunc isNumHexagonal(n : Int) -> Int {\n    var nthHexagonal = 0\n    for i in 1...n {\n        nthHexagonal += i * (2 * i - 1)\n    }\n    return nthHexagonal\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth triangular number.\n *\n * >>> isNumTriangular(3)\n * 6\n * >>> isNumTriangular(7)\n * 28\n * >>> isNumTriangular(10)\n * 84\n */\nfunc isNumTriangular(n : Int) -> Int"}
{"task_id": "MBSWP/280", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search an element in the given array by using sequential search.\n *\n * >>> sequentialSearch([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31)\n * [true, 3]\n * >>> sequentialSearch([12, 32, 45, 62, 35, 47, 44, 61], 61)\n * [true, 7]\n * >>> sequentialSearch([9, 10, 17, 19, 22, 39, 48, 56], 48)\n * [true, 6]\n */\nfunc sequentialSearch(dlist : [Int], item : Int) -> [AnyHashable] {\n    var index = 0\n    var found = false\n    var position = 0\n    for i in dlist {\n        if i == item {\n            found = true\n            position = index\n            break\n        }\n        index += 1\n    }\n    return [found, position]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search an element in the given array by using binary search.\n *\n * >>> binarySearch([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31)\n * [true, 3]\n * >>> binarySearch([12, 32, 45, 62, 35, 47, 44, 61], 61)\n * [true, 7]\n * >>> binarySearch([9, 10, 17, 19, 22, 39, 48, 56], 48)\n * [true, 6]\n */\nfunc binarySearch(dlist : [Int], item : Int) -> [AnyHashable] {\n    var index = 0\n    var found = false\n    var position = 0\n    var start = 0\n    var end = dlist.count - 1\n    while start <= end {\n        var mid = (start + end) / 2\n        if dlist[mid] == item {\n            found = true\n            position = mid\n            break\n        }\n        if dlist[mid] < item {\n            start = mid + 1\n        } else {\n            end = mid - 1\n        }\n    }\n    return [found, position]\n}"}
{"task_id": "MBSWP/281", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if the elements of a given list are unique or not.\n *\n * >>> allUnique([1, 2, 3])\n * true\n * >>> allUnique([1, 2, 1, 2])\n * false\n * >>> allUnique([1, 2, 3, 4, 5])\n * true\n */\nfunc allUnique(testList : [Int]) -> Bool {\n    var uniqueList : [Int] = []\n    for i in testList {\n        if uniqueList.contains(i) {\n            return false\n        } else {\n            uniqueList.append(i)\n        }\n    }\n    return true\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if the elements of a given list are unique or not.\n *\n * >>> allUnique([1, 2, 3])\n * true\n * >>> allUnique([1, 2, 1, 2])\n * false\n * >>> allUnique([1, 2, 3, 4, 5])\n * true\n */\nfunc allUnique(testList : [Int]) -> Bool {\n    var uniqueList : [Int] = []\n    for i in testList {\n        if uniqueList.contains(i) {\n            return false\n        } else {\n            uniqueList.append(i)\n        }\n    }\n    return true\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if the elements of a given list are unique or not.\n *\n * >>> allUnique([1, 2, 3])\n * true\n * >>> allUnique([1, 2, 1, 2])\n * false\n * >>> allUnique([1, 2, 3, 4, 5])\n * true\n */\nfunc allUnique(testList : [Int]) -> Bool {\n    var uniqueList : [Int] = []\n    for i in testList {\n        if uniqueList.contains(i) {\n            return false\n        } else {\n            uniqueList.append(i)\n        }\n    }\n    return true\n}\n\n/**\n"}
{"task_id": "MBSWP/282", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to substaract two lists using map and lambda function.\n *\n * >>> subList([1, 2, 3], [4, 5, 6])\n * [-3, -3, -3]\n * >>> subList([1, 2], [3, 4])\n * [-2, -2]\n * >>> subList([90, 120], [50, 70])\n * [40, 50]\n */\nfunc subList(nums1 : [Int], nums2 : [Int]) -> [Int] {\n    return nums1.map({ num1 in\n        return nums2.map({ num2 in\n            return num1 - num2\n        })\n    })\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add two lists using map and lambda function.\n *\n * >>> addList([1, 2, 3], [4, 5, 6])\n * [5, 7, 9]\n * >>> addList([1, 2], [3, 4])\n * [4, 6]\n * >>> addList([90, 120], [50, 70])\n * [150, 180]\n */\nfunc addList(nums1 : [Int], nums2 : [Int]) -> [Int] {\n    return nums1.map({ num1 in\n        return nums2.map({ num2 in\n            return num1 + num2\n        })\n    })\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to multiply two lists using map and lambda function.\n *\n * >>> mulList([1, 2, 3], [4, 5, 6])\n * [4, 10, 18]\n * >>> mulList([1, 2], [3, 4])\n * [3, 8]\n * >>> mulList([90, 120], [50, 70])\n * [4500, 6000]\n */\nfunc mulList(nums1 : [Int], nums2 : [Int]) -> [Int] {\n    return nums1.map({ num1 in\n        return nums2.map({ num2 in\n           "}
{"task_id": "MBSWP/283", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the frequency of each digit is less than or equal to the digit itself.\n *\n * >>> validate(1234)\n * true\n * >>> validate(51241)\n * false\n * >>> validate(321)\n * true\n */\nfunc validate(n : Int) -> Bool {\n    let digits = String(n).map { String($0) }\n    let digits = digits.map { Int($0) }\n    let digits = digits.map { $0 <= $0 }\n    let digits = digits.reduce(1, { $0 * $1 })\n    return digits == n\n}\n"}
{"task_id": "MBSWP/284", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether all items of a list are equal to a given string.\n *\n * >>> checkElement([\"green\", \"orange\", \"black\", \"white\"], \"blue\")\n * false\n * >>> checkElement([1, 2, 3, 4], 7)\n * false\n * >>> checkElement([\"green\", \"green\", \"green\", \"green\"], \"green\")\n * true\n */\nfunc checkElement(list : [AnyHashable], element : AnyHashable) -> Bool {\n    var result = true\n    for item in list {\n        if item != element {\n            result = false\n            break\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether all items of a list are equal to a given string.\n *\n * >>> checkElement([\"green\", \"orange\", \"black\", \"white\"], \"blue\")\n * false\n * >>> checkElement([1, 2, 3, 4], 7)\n * false\n * >>> checkElement([\"green\", \"green\", \"green\", \"green\"], \"green\")\n * true\n */\nfunc checkElement(list : [AnyHashable], element : AnyHashable) -> Bool {\n    var result = true\n    for item in list {\n        if item != element {\n            result = false\n            break\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether all items of a list are equal to a given string.\n *\n * >>> checkElement([\"green\", \"orange\", \"black\", \"white\"], \"blue\")\n * false\n * >>> checkElement([1, 2, 3, 4], 7)\n * false\n * >>> checkElement([\"green\", \"green\", \"green\", \"green\"], \"green\")\n * true\n */\nfunc checkElement(list : [AnyHashable], element : AnyHashable) -> Bool {\n    var result = true\n    for item in list {\n        if item != element {\n            result = false\n            break\n        }\n    }\n    return result"}
{"task_id": "MBSWP/285", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n *\n * >>> textMatchTwoThree(\"ac\")\n * \"Not matched!\"\n * >>> textMatchTwoThree(\"dc\")\n * \"Not matched!\"\n * >>> textMatchTwoThree(\"abbbba\")\n * \"Found a match!\"\n */\nfunc textMatchTwoThree(text : String) -> String {\n    if text.count < 3 {\n        return \"Not matched!\"\n    }\n    if text[0] == \"a\" && text[1] == \"b\" && text[2] == \"b\" {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n *\n * >>> textMatchTwoThree(\"ac\")\n * \"Not matched!\"\n * >>> textMatchTwoThree(\"dc\")\n * \"Not matched!\"\n * >>> textMatchTwoThree(\"abbbba\")\n * \"Found a match!\"\n */\nfunc textMatchTwoThree(text : String) -> String {\n    if text.count < 3 {\n        return \"Not matched!\"\n    }\n    if text[0] == \"a\" && text[1] == \"b\" && text[2] == \"b\" {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by two to three 'b'.\n *\n * >>> textMatchTwoThree(\"ac\")\n * \"Not matched!\"\n * >>> textMatchTwoThree(\"dc\")\n * \"Not matched!\"\n * >>> textMatchTwoThree(\"abbbba\")\n * \"Found a match!\"\n */\nfunc textMatchTwoThree(text : String) -> String {\n    if text.count < 3 {\n        return \"Not matched!\"\n    }\n    if text[0] == \"a\" && text[1] == \"b\" && text[2] == \"b\" {"}
{"task_id": "MBSWP/286", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n *\n * >>> maxSubArraySumRepeated([10, 20, -30, -1], 4, 3)\n * 30\n * >>> maxSubArraySumRepeated([-1, 10, 20], 3, 2)\n * 59\n * >>> maxSubArraySumRepeated([-1, -2, -3], 3, 3)\n * -1\n */\nfunc maxSubArraySumRepeated(a : [Int], n : Int, k : Int) -> Int {\n    var maxSum = Int.min\n    var sum = 0\n    var start = 0\n    var end = 0\n    var count = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var"}
{"task_id": "MBSWP/287", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of squares of first n even natural numbers.\n *\n * >>> squareSum(2)\n * 20\n * >>> squareSum(3)\n * 56\n * >>> squareSum(4)\n * 120\n */\nfunc squareSum(n : Int) -> Int {\n    var sum = 0\n    for i in 0..<n {\n        sum += i * i\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/288", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count array elements having modular inverse under given prime number p equal to itself.\n *\n * >>> modularInverse([1, 6, 4, 5], 4, 7)\n * 2\n * >>> modularInverse([1, 3, 8, 12, 12], 5, 13)\n * 3\n * >>> modularInverse([2, 3, 4, 5], 4, 6)\n * 1\n */\nfunc modularInverse(arr : [Int], n : Int, p : Int) -> Int {\n    var arr = arr\n    var n = n\n    var p = p\n    var result = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n   "}
{"task_id": "MBSWP/289", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to calculate the number of odd days in a given year.\n *\n * >>> oddDays(100)\n * 5\n * >>> oddDays(50)\n * 6\n * >>> oddDays(75)\n * 2\n */\nfunc oddDays(n : Int) -> Int {\n    var count = 0\n    for i in 1...n {\n        if i % 2 == 1 {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/290", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the list of lists with maximum length.\n *\n * >>> maxLength([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n * [3, [13, 15, 17]]\n * >>> maxLength([[1], [5, 7], [10, 12, 14, 15]])\n * [4, [10, 12, 14, 15]]\n * >>> maxLength([[5], [15, 20, 25]])\n * [3, [15, 20, 25]]\n */\nfunc maxLength(list1 : [[Int]]) -> [AnyHashable] {\n    var max = 0\n    var maxList = [Int]()\n    for list in list1 {\n        if list.count > max {\n            max = list.count\n            maxList = list\n        }\n    }\n    return [max, maxList]\n}\n"}
{"task_id": "MBSWP/291", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n *\n * >>> countNoOfWays(2, 4)\n * 16\n * >>> countNoOfWays(3, 2)\n * 6\n * >>> countNoOfWays(4, 4)\n * 228\n */\nfunc countNoOfWays(n : Int, k : Int) -> Int {\n    if n == 0 || k == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if k == 1 {\n        return n\n    }\n    var dp = Array(repeating: Array(repeating: 0, count: k), count: n)\n    dp[0][0] = 1\n    for i in 1...n {\n        for j in 0...k {\n            if j > 0 {\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n            } else {\n                dp[i][j] = dp[i-1][j]\n            }\n        }\n    }\n    return dp[n-1][k-1]\n}\n"}
{"task_id": "MBSWP/292", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find quotient of two numbers.\n *\n * >>> find(10, 3)\n * 3\n * >>> find(4, 2)\n * 2\n * >>> find(20, 5)\n * 4\n */\nfunc find(n : Int, m : Int) -> Int {\n    return n / m\n}\n"}
{"task_id": "MBSWP/293", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the third side of a right angled triangle.\n *\n * >>> othersideRightangle(7, 8)\n * 10.63014581273465\n * >>> othersideRightangle(3, 4)\n * 5\n * >>> othersideRightangle(7, 15)\n * 16.55294535724685\n */\nfunc othersideRightangle(w : Int, h : Int) -> Double {\n    return sqrt(w * w + h * h)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the third side of a right angled triangle.\n *\n * >>> othersideRightangle(7, 8)\n * 10.63014581273465\n * >>> othersideRightangle(3, 4)\n * 5\n * >>> othersideRightangle(7, 15)\n * 16.55294535724685\n */\nfunc othersideRightangle(w : Int, h : Int) -> Double {\n    return sqrt(w * w + h * h)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the third side of a right angled triangle.\n *\n * >>> othersideRightangle(7, 8)\n * 10.63014581273465\n * >>> othersideRightangle(3, 4)\n * 5\n * >>> othersideRightangle(7, 15)\n * 16.55294535724685\n */\nfunc othersideRightangle(w : Int, h : Int) -> Double {\n    return sqrt(w * w + h * h)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the third side of a right angled triangle.\n *\n * >>> othersideRightangle(7, 8)\n * 10.63014581273465\n * >>> othersideRightangle(3, 4)\n * 5\n * >>> othersideRightangle(7, 15)\n * 16.55294535724685\n */\nfunc othersideRightangle(w : Int, h : Int) -> Double {\n   "}
{"task_id": "MBSWP/294", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum value in a given heterogeneous list.\n *\n * >>> maxVal([\"Python\", 3, 2, 4, 5, \"version\"])\n * 5\n * >>> maxVal([\"Python\", 15, 20, 25])\n * 25\n * >>> maxVal([\"Python\", 30, 20, 40, 50, \"version\"])\n * 50\n */\nfunc maxVal(listval : [AnyHashable]) -> Int {\n    var max : Int = 0\n    for val in listval {\n        if val is Int {\n            if max < val as! Int {\n                max = val as! Int\n            }\n        } else if val is String {\n            if max < val as! String.characters.count {\n                max = val as! String.characters.count\n            }\n        }\n    }\n    return max\n}\n"}
{"task_id": "MBSWP/295", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to return the sum of all divisors of a number.\n *\n * >>> sumDiv(8)\n * 7\n * >>> sumDiv(12)\n * 16\n * >>> sumDiv(7)\n * 1\n */\nfunc sumDiv(number : Int) -> Int {\n    var sum = 0\n    for i in 1..<number {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to return the sum of all divisors of a number.\n *\n * >>> sumDiv(8)\n * 7\n * >>> sumDiv(12)\n * 16\n * >>> sumDiv(7)\n * 1\n */\nfunc sumDiv(number : Int) -> Int {\n    var sum = 0\n    for i in 1..<number {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to return the sum of all divisors of a number.\n *\n * >>> sumDiv(8)\n * 7\n * >>> sumDiv(12)\n * 16\n * >>> sumDiv(7)\n * 1\n */\nfunc sumDiv(number : Int) -> Int {\n    var sum = 0\n    for i in 1..<number {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to return the sum of all divisors of a number.\n *\n * >>> sumDiv(8)\n * 7\n * >>> sumDiv(12)\n * 16\n * >>> sumDiv(7)\n * 1\n */\nfunc sumDiv(number : Int) -> Int {\n    var sum = 0\n    for i in 1..<number {\n        if number % i == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n"}
{"task_id": "MBSWP/296", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count inversions in an array.\n *\n * >>> getInvCount([1, 20, 6, 4, 5], 5)\n * 5\n * >>> getInvCount([1, 2, 1], 3)\n * 1\n * >>> getInvCount([1, 2, 5, 6, 1], 5)\n * 3\n */\nfunc getInvCount(arr : [Int], n : Int) -> Int {\n    var invCount = 0\n    var temp = arr\n    for i in 0..<n {\n        temp[i] = arr[i]\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n            if temp[i] > temp[j] {\n                invCount += 1\n                temp[i] = temp[i] + temp[j]\n                temp[j] = temp[i] - temp[j]\n                temp[i] = temp[i] - temp[j]\n            }\n        }\n    }\n    return invCount\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum number of swaps required to sort an array.\n *\n * >>> getMinSwaps([1, 2, 5, 6, 1], 5)\n * 3\n * >>> getMinSwaps([1, 2, 1], 3)\n * 1\n * >>> getMinSwaps([1, 2, 5, 6, 1], 5)\n * 3\n */\nfunc getMinSwaps(arr : [Int], n : Int) -> Int {\n    var temp = arr\n    for i in 0..<n {\n        temp[i] = arr[i]\n    }\n    var swaps = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if temp[i] > temp[j] {\n                temp[i] = temp[i] + temp[j]\n                temp[j] = temp[i] - temp[j]\n                temp[i] = temp[i] - temp[j]\n                swaps += 1\n            }\n       "}
{"task_id": "MBSWP/297", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to flatten a given nested list structure.\n *\n * >>> flattenList([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n * [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n * >>> flattenList([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n * [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n * >>> flattenList([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n * [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n */\nfunc flattenList(list1 : [AnyHashable]) -> [Int] {\n    var list2 : [Int] = []\n    for i in list1 {\n        if let list3 = i as? [Int] {\n            list2.append(contentsOf: flattenList(list3))\n        } else {\n            list2.append(i as! Int)\n        }\n    }\n    return list2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to flatten a given nested list structure.\n *\n * >>> flattenList([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n * [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n * >>> flattenList([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n * [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n * >>> flattenList([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8,"}
{"task_id": "MBSWP/298", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nested list elements which are present in another list.\n *\n * >>> intersectionNestedLists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])\n * [[12], [7, 11], [1, 5, 8]]\n * >>> intersectionNestedLists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])\n * [[], []]\n * >>> intersectionNestedLists([\"john\", \"amal\", \"joel\", \"george\"], [[\"john\"], [\"jack\", \"john\", \"mary\"], [\"howard\", \"john\"], [\"jude\"]])\n * [[\"john\"], [\"john\"], [\"john\"], []]\n */\nfunc intersectionNestedLists(l1 : [AnyHashable], l2 : [[AnyHashable]]) -> [[AnyHashable]] {\n    var result = [[]]\n    for i in l1 {\n        for j in l2 {\n            if i in j {\n                result.append(i)\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nested list elements which are not present in another list.\n *\n * >>> differenceNestedLists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])\n * [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14], [12, 19, 24, 28], [6, 9, 10, 15, 16]]\n * >>> differenceNestedLists([[2, 3, 1], [4, 5], [6, 8]], [[4"}
{"task_id": "MBSWP/299", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the maximum aggregate from the list of tuples.\n *\n * >>> maxAggregate([[\"Juan Whelan\", 90], [\"Sabah Colley\", 88], [\"Peter Nichols\", 7], [\"Juan Whelan\", 122], [\"Sabah Colley\", 84]])\n * [\"Juan Whelan\", 212]\n * >>> maxAggregate([[\"Juan Whelan\", 50], [\"Sabah Colley\", 48], [\"Peter Nichols\", 37], [\"Juan Whelan\", 22], [\"Sabah Colley\", 14]])\n * [\"Juan Whelan\", 72]\n * >>> maxAggregate([[\"Juan Whelan\", 10], [\"Sabah Colley\", 20], [\"Peter Nichols\", 30], [\"Juan Whelan\", 40], [\"Sabah Colley\", 50]])\n * [\"Sabah Colley\", 70]\n */\nfunc maxAggregate(stdata : [[AnyHashable]]) -> [AnyHashable] {\n    var max : [AnyHashable] = []\n    var max_agg : Int = 0\n    var max_name : String = \"\"\n    for i in 0..<stdata.count {\n        var agg : Int = 0\n        for j in 0..<stdata[i].count {\n            if stdata[i][j] is String {\n                agg += stdata[i][j] as! Int\n            }\n        }\n        if agg > max_agg {\n            max_agg = agg\n            max = stdata[i]\n        }\n    }\n    return max\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the maximum aggregate from the list of tuples.\n *\n * >>> maxAggregate([[\"Juan Whelan\", 90], [\"Sabah Colley\", 88], [\"Peter Nichols\", 7], [\"Juan Whelan\", 122], [\"Sabah Colley\", 84]])\n * [\"Juan Whelan\", 212]\n * >>> maxAggregate([[\"Juan Whelan\", 50], [\"Sabah Colley\", 48], [\"Peter Nichols\", 37], [\"Juan Whelan\", 22], [\"Sab"}
{"task_id": "MBSWP/300", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n *\n * >>> countBinarySeq(1)\n * 2.0\n * >>> countBinarySeq(2)\n * 6.0\n * >>> countBinarySeq(3)\n * 20.0\n */\nfunc countBinarySeq(n : Int) -> Double {\n    var count = 0.0\n    var sum = 0.0\n    for i in 0..<1 << n {\n        let first = Int(i)\n        let last = Int(i >> n)\n        if first == last {\n            count += 1\n            sum += first\n        }\n    }\n    return count * (count - 1) / 2.0\n}\n"}
{"task_id": "MBSWP/301", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the depth of a dictionary.\n *\n * >>> dictDepth([\"a\" : 1, \"b\" : [\"c\" : [\"d\" : []]]])\n * 4\n * >>> dictDepth([\"a\" : 1, \"b\" : [\"c\" : \"python\"]])\n * 2\n * >>> dictDepth([1 : \"Sun\", 2 : [3 : [4 : \"Mon\"]]])\n * 3\n */\nfunc dictDepth(d : [AnyHashable: AnyHashable]) -> Int {\n    var depth = 0\n    for (key, value) in d {\n        if let value = value as? [AnyHashable: AnyHashable] {\n            depth = max(depth, dictDepth(value))\n        }\n    }\n    return depth + 1\n}\n"}
{"task_id": "MBSWP/302", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the most significant bit number which is also a set bit.\n *\n * >>> setBitNumber(6)\n * 4\n * >>> setBitNumber(10)\n * 8\n * >>> setBitNumber(18)\n * 16\n */\nfunc setBitNumber(n : Int) -> Int {\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n   "}
{"task_id": "MBSWP/303", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the count of inversion of two types are same or not.\n *\n * >>> solve([1, 0, 2], 3)\n * true\n * >>> solve([1, 2, 0], 3)\n * false\n * >>> solve([1, 2, 1], 3)\n * true\n */\nfunc solve(a : [Int], n : Int) -> Bool {\n    var a = a\n    var n = n\n    var inversions = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if a[i] > a[j] {\n                inversions += 1\n            }\n        }\n    }\n    return inversions % 2 == 0\n}\n"}
{"task_id": "MBSWP/304", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find element at a given index after number of rotations.\n *\n * >>> findElement([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1)\n * 3\n * >>> findElement([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2)\n * 3\n * >>> findElement([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1)\n * 1\n */\nfunc findElement(arr : [Int], ranges : [[Int]], rotations : Int, index : Int) -> Int {\n    var arr = arr\n    var ranges = ranges\n    var rotations = rotations\n    var index = index\n    \n    for i in 0..<ranges.count {\n        let range = ranges[i]\n        let start = range[0]\n        let end = range[1]\n        let count = end - start\n        let rotations = rotations\n        let index = index\n        \n        if rotations > count {\n            let rotations = rotations - count\n            let index = index - count\n        }\n        \n        let start = start\n        let end = end\n        let count = count\n        let rotations = rotations\n        let index = index\n        \n        let start = start\n        let end = end\n        let count = count\n        let rotations = rotations\n        let index = index\n        \n        let start = start\n        let end = end\n        let count = count\n        let rotations = rotations\n        let index = index\n        \n        let start = start\n        let end = end\n        let count = count\n        let rotations = rotations\n        let index = index\n        \n        let start = start\n        let end = end\n        let count = count\n        let rotations = rotations\n        let index = index\n        \n        let start = start\n        let end = end\n        let count = count\n        let rotations = rotations\n        let index = index\n        \n        let start = start\n        let end = end\n        let"}
{"task_id": "MBSWP/305", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to match two words from a list of words starting with letter 'p'.\n *\n * >>> startWithp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n * [\"Python\", \"PHP\"]\n * >>> startWithp([\"Python Programming\", \"Java Programming\"])\n * [\"Python\", \"Programming\"]\n * >>> startWithp([\"Pqrst Pqr\", \"qrstuv\"])\n * [\"Pqrst\", \"Pqr\"]\n */\nfunc startWithp(words : [String]) -> [String] {\n    var result = [String]()\n    for word in words {\n        if word.hasPrefix(\"p\") {\n            result.append(word)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to match two words from a list of words starting with letter 'p'.\n *\n * >>> startWithp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n * [\"Python\", \"PHP\"]\n * >>> startWithp([\"Python Programming\", \"Java Programming\"])\n * [\"Python\", \"Programming\"]\n * >>> startWithp([\"Pqrst Pqr\", \"qrstuv\"])\n * [\"Pqrst\", \"Pqr\"]\n */\nfunc startWithp(words : [String]) -> [String] {\n    var result = [String]()\n    for word in words {\n        if word.hasPrefix(\"p\") {\n            result.append(word)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to match two words from a list of words starting with letter 'p'.\n *\n * >>> startWithp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n * [\"Python\", \"PHP\"]\n * >>> startWithp([\"Python Programming\", \"Java Programming\"])\n * [\"Python\", \"Programming\"]\n * >>> startWithp([\"Pqrst Pqr\", \"qrstuv\"]"}
{"task_id": "MBSWP/306", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n *\n * >>> maxSumIncreasingSubseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6)\n * 11\n * >>> maxSumIncreasingSubseq([1, 101, 2, 3, 100, 4, 5], 7, 2, 5)\n * 7\n * >>> maxSumIncreasingSubseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)\n * 71\n */\nfunc maxSumIncreasingSubseq(a : [Int], n : Int, index : Int, k : Int) -> Int {\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = a[i]\n    }\n    for i in 1..<n {\n        for j in i..<n {\n            if a[j] > a[j-1] {\n                dp[j][j] = a[j]\n            } else {\n                dp[j][j] = a[j-1]\n            }\n            for k in i..<j {\n                if a[k] > a[k-1] {\n                    dp[k][j] = max(dp[k][j], dp[k][k-1] + a[k])\n                } else {\n                    dp[k][j] = max(dp[k][j], dp[k+1][k-1] + a[k])\n                }\n            }\n        }\n    }\n    return dp[index][k-1]\n}\n"}
{"task_id": "MBSWP/307", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get a colon of a tuple.\n *\n * >>> colonTuplex([\"HELLO\", 5, [], true], 2, 50)\n * [\"HELLO\", 5, [50], true]\n * >>> colonTuplex([\"HELLO\", 5, [], true], 2, 100)\n * [\"HELLO\", 5, [100], true]\n * >>> colonTuplex([\"HELLO\", 5, [], true], 2, 500)\n * [\"HELLO\", 5, [500], true]\n */\nfunc colonTuplex(tuplex : [AnyHashable], m : Int, n : Int) -> [AnyHashable] {\n    var tuplex = tuplex\n    tuplex[m] = n\n    return tuplex\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get a colon of a tuple.\n *\n * >>> colonTuplex([\"HELLO\", 5, [], true], 2, 50)\n * [\"HELLO\", 5, [50], true]\n * >>> colonTuplex([\"HELLO\", 5, [], true], 2, 100)\n * [\"HELLO\", 5, [100], true]\n * >>> colonTuplex([\"HELLO\", 5, [], true], 2, 500)\n * [\"HELLO\", 5, [500], true]\n */\nfunc colonTuplex(tuplex : [AnyHashable], m : Int, n : Int) -> [AnyHashable] {\n    var tuplex = tuplex\n    tuplex[m] = n\n    return tuplex\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get a colon of a tuple.\n *\n * >>> colonTuplex([\"HELLO\", 5, [], true], 2, 50)\n * [\"HELLO\", 5, [50], true]\n * >>> colonTuplex([\"HELLO\", 5, [], true], 2, 100)\n * [\"HELLO\", 5"}
{"task_id": "MBSWP/308", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the specified number of largest products from two given lists.\n *\n * >>> largeProduct([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3)\n * [60, 54, 50]\n * >>> largeProduct([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4)\n * [60, 54, 50, 48]\n * >>> largeProduct([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5)\n * [60, 54, 50, 48, 45]\n */\nfunc largeProduct(nums1 : [Int], nums2 : [Int], n : Int) -> [Int] {\n    var products = [Int]()\n    for i in 0..<n {\n        var product = 1\n        for j in 0..<nums1.count {\n            product *= nums1[j]\n        }\n        for k in 0..<nums2.count {\n            product *= nums2[k]\n        }\n        products.append(product)\n    }\n    return products\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the specified number of largest products from three given lists.\n *\n * >>> largeProduct([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], [1, 2, 3, 4, 5, 6], 3)\n * [60, 54, 50]\n * >>> largeProduct([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], [1, 2, 3, 4, 5, 6], 4)\n * [60, 54, 50, 48]\n * >>> largeProduct([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], [1, 2, 3, 4, 5, 6], 5)\n * [60, 54, 50, 48, 45]\n */\nfunc large"}
{"task_id": "MBSWP/309", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum of two numbers.\n *\n * >>> maximum(5, 10)\n * 10\n * >>> maximum(-1, -2)\n * -1\n * >>> maximum(9, 7)\n * 9\n */\nfunc maximum(a : Int, b : Int) -> Int {\n    if a > b {\n        return a\n    } else {\n        return b\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum of two numbers.\n *\n * >>> minimum(5, 10)\n * 5\n * >>> minimum(-1, -2)\n * -2\n * >>> minimum(9, 7)\n * 7\n */\nfunc minimum(a : Int, b : Int) -> Int {\n    if a < b {\n        return a\n    } else {\n        return b\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum of three numbers.\n *\n * >>> maximum(5, 10, 15)\n * 15\n * >>> maximum(-1, -2, -3)\n * -1\n * >>> maximum(9, 7, 5)\n * 9\n */\nfunc maximum(a : Int, b : Int, c : Int) -> Int {\n    if a > b && a > c {\n        return a\n    } else if b > a && b > c {\n        return b\n    } else {\n        return c\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum of three numbers.\n *\n * >>> minimum(5, 10, 15)\n * 5\n * >>> minimum(-1, -2, -3)\n * -3\n * >>> minimum(9, 7, 5)\n * 5\n */\nfunc minimum(a : Int, b : Int, c : Int) -> Int {\n    if a < b && a < c {\n        return a\n    } else if b < a && b < c {\n        return b\n    } else"}
{"task_id": "MBSWP/310", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a given string to a tuple.\n *\n * >>> stringToTuple(\"python 3.0\")\n * [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"]\n * >>> stringToTuple(\"item1\")\n * [\"i\", \"t\", \"e\", \"m\", \"1\"]\n * >>> stringToTuple(\"15.10\")\n * [\"1\", \"5\", \".\", \"1\", \"0\"]\n */\nfunc stringToTuple(str1 : String) -> [String] {\n    var str2 = str1\n    var str3 = \"\"\n    var str4 = \"\"\n    var str5 = \"\"\n    var str6 = \"\"\n    var str7 = \"\"\n    var str8 = \"\"\n    var str9 = \"\"\n    var str10 = \"\"\n    var str11 = \"\"\n    var str12 = \"\"\n    var str13 = \"\"\n    var str14 = \"\"\n    var str15 = \"\"\n    var str16 = \"\"\n    var str17 = \"\"\n    var str18 = \"\"\n    var str19 = \"\"\n    var str20 = \"\"\n    var str21 = \"\"\n    var str22 = \"\"\n    var str23 = \"\"\n    var str24 = \"\"\n    var str25 = \"\"\n    var str26 = \"\"\n    var str27 = \"\"\n    var str28 = \"\"\n    var str29 = \"\"\n    var str30 = \"\"\n    var str31 = \"\"\n    var str32 = \"\"\n    var str33 = \"\"\n    var str34 = \"\"\n    var str35 = \"\"\n    var str36 = \"\"\n    var str37 = \"\"\n    var str38 = \"\"\n    var str39 = \"\"\n    var str40 = \"\"\n    var str41 = \"\"\n    var str42 = \"\"\n    var str43 = \"\"\n    var str44 = \"\"\n    var str45 = \"\"\n    var str46 = \"\"\n    var str47 = \"\"\n    var str48 = \"\"\n    var str49 = \"\"\n    var str50 = \"\"\n    var str51 = \"\"\n    var str52 = \"\"\n    var str53"}
{"task_id": "MBSWP/311", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to set the left most unset bit.\n *\n * >>> setLeftMostUnsetBit(10)\n * 14\n * >>> setLeftMostUnsetBit(12)\n * 14\n * >>> setLeftMostUnsetBit(15)\n * 15\n */\nfunc setLeftMostUnsetBit(n : Int) -> Int {\n    var n = n\n    var i = 0\n    while n > 0 {\n        n = n & (n - 1)\n        i += 1\n    }\n    return i\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to set the right most unset bit.\n *\n * >>> setRightMostUnsetBit(10)\n * 11\n * >>> setRightMostUnsetBit(12)\n * 13\n * >>> setRightMostUnsetBit(15)\n * 15\n */\nfunc setRightMostUnsetBit(n : Int) -> Int {\n    var n = n\n    var i = 0\n    while n > 0 {\n        n = n & (n - 1)\n        i += 1\n    }\n    return i\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to set the left most set bit.\n *\n * >>> setLeftMostSetBit(10)\n * 10\n * >>> setLeftMostSetBit(12)\n * 12\n * >>> setLeftMostSetBit(15)\n * 15\n */\nfunc setLeftMostSetBit(n : Int) -> Int {\n    var n = n\n    var i = 0\n    while n > 0 {\n        n = n & (n - 1)\n        i += 1\n    }\n    return i\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to set the right most set bit.\n *\n * >>> setRightMostSetBit(10)\n * 10\n * >>> setRightMostSetBit(12)\n * 12\n * >>> setRightMostSetBit(15)\n * 15\n */\nfunc setRightMostSetBit(n : Int"}
{"task_id": "MBSWP/312", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cone.\n *\n * >>> volumeCone(5, 12)\n * 314.15926535897927\n * >>> volumeCone(10, 15)\n * 1570.7963267948965\n * >>> volumeCone(19, 17)\n * 6426.651371693521\n */\nfunc volumeCone(r : Int, h : Int) -> Double {\n    return (1.0 / 3.0) * (3.1415926535897927 * r * r * h)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cylinder.\n *\n * >>> volumeCylinder(5, 12)\n * 314.15926535897927\n * >>> volumeCylinder(10, 15)\n * 1570.7963267948965\n * >>> volumeCylinder(19, 17)\n * 6426.651371693521\n */\nfunc volumeCylinder(r : Int, h : Int) -> Double {\n    return (1.0 / 3.0) * (3.1415926535897927 * r * r * h)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a sphere.\n *\n * >>> volumeSphere(5)\n * 314.15926535897927\n * >>> volumeSphere(10)\n * 1570.7963267948965\n * >>> volumeSphere(19)\n * 6426.651371693521\n */\nfunc volumeSphere(r : Int) -> Double {\n    return (4.0 / 3.0) * (3.1415926535897927 * r * r * r)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cuboid.\n *\n * >>> volumeCuboid(5, 12, 15)\n * 314.15926535897927\n * >>> volumeCuboid(10, 15, 17)\n * 1570.79"}
{"task_id": "MBSWP/313", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to print positive numbers in a list.\n *\n * >>> posNos([-1, -2, 1, 2])\n * [1,2]\n * >>> posNos([3, 4, -5])\n * [3,4]\n * >>> posNos([-2, -3, 1])\n * 1\n */\nfunc posNos(list1 : [Int]) -> AnyHashable {\n    var list2 : [Int] = []\n    for i in list1 {\n        if i > 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to print negative numbers in a list.\n *\n * >>> negNos([-1, -2, 1, 2])\n * [-1,-2]\n * >>> negNos([3, 4, -5])\n * [-5]\n * >>> negNos([-2, -3, 1])\n * [-2,-3]\n */\nfunc negNos(list1 : [Int]) -> AnyHashable {\n    var list2 : [Int] = []\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to print the sum of all numbers in a list.\n *\n * >>> sumNos([-1, -2, 1, 2])\n * 0\n * >>> sumNos([3, 4, -5])\n * -2\n * >>> sumNos([-2, -3, 1])\n * 0\n */\nfunc sumNos(list1 : [Int]) -> AnyHashable {\n    var sum : Int = 0\n    for i in list1 {\n        sum += i\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to print the average of all numbers in a list.\n *\n"}
{"task_id": "MBSWP/314", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n *\n * >>> maxSumRectangularGrid([[1, 4, 5], [2, 0, 0]], 3)\n * 7\n * >>> maxSumRectangularGrid([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 5)\n * 24\n * >>> maxSumRectangularGrid([[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]], 5)\n * 81\n */\nfunc maxSumRectangularGrid(grid : [[Int]], n : Int) -> Int {\n    var maxSum = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            var sum = 0\n            for k in 0..<n {\n                sum += grid[i][j+k]\n            }\n            maxSum = max(maxSum, sum)\n        }\n    }\n    return maxSum\n}\n"}
{"task_id": "MBSWP/315", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first maximum length of even word.\n *\n * >>> findMaxLenEven(\"python language\")\n * \"language\"\n * >>> findMaxLenEven(\"maximum even length\")\n * \"length\"\n * >>> findMaxLenEven(\"eve\")\n * \"-1\"\n */\nfunc findMaxLenEven(str : String) -> String {\n    var maxLen : Int = -1\n    var maxStr : String = \"\"\n    var strArr = str.characters.map { $0 }\n    var strArrLen = strArr.count\n    var i = 0\n    while i < strArrLen {\n        var j = i\n        var len = 0\n        while j < strArrLen && strArr[j] == strArr[i] {\n            len += 1\n            j += 1\n        }\n        if len % 2 == 0 && len > maxLen {\n            maxLen = len\n            maxStr = String(strArr[i..<j])\n        }\n        i = j\n    }\n    return maxStr\n}\n"}
{"task_id": "MBSWP/316", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the index of the last occurrence of a given number in a sorted array.\n *\n * >>> findLastOccurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n * 3\n * >>> findLastOccurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9)\n * 9\n * >>> findLastOccurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6)\n * 6\n */\nfunc findLastOccurrence(a : [Int], x : Int) -> Int {\n    var i = 0\n    var j = a.count - 1\n    while i < j {\n        let mid = (i + j) / 2\n        if a[mid] < x {\n            i = mid + 1\n        } else {\n            j = mid\n        }\n    }\n    return i\n}\n"}
{"task_id": "MBSWP/317", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reflect the modified run-length encoding from a list.\n *\n * >>> modifiedEncode([1, 1, 2, 3, 4, 4, 5, 1])\n * [[2, 1], 2, 3, [2, 4], 5, 1]\n * >>> modifiedEncode(\"automatically\")\n * [\"a\", \"u\", \"t\", \"o\", \"m\", \"a\", \"t\", \"i\", \"c\", \"a\", [2, \"l\"], \"y\"]\n * >>> modifiedEncode(\"python\")\n * [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]\n */\nfunc modifiedEncode(alist : AnyHashable) -> [AnyHashable] {\n    var result = [AnyHashable]()\n    var current = alist[0]\n    var count = 1\n    for i in 1..<alist.count {\n        if alist[i] == current {\n            count += 1\n        } else {\n            result.append(current)\n            result.append(count)\n            current = alist[i]\n            count = 1\n        }\n    }\n    result.append(current)\n    result.append(count)\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reflect the modified run-length encoding from a list.\n *\n * >>> modifiedDecode([[\"a\", \"u\"], \"t\", \"o\", \"m\", \"a\", [2, \"l\"], \"y\"])\n * \"automatically\"\n * >>> modifiedDecode([\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"])\n * \"python\"\n */\nfunc modifiedDecode(alist : [AnyHashable]) -> String {\n    var result = \"\"\n    var current = alist[0]\n    var count = 1\n    for i in 1..<alist.count {\n        if let count = alist[i] as? Int {\n            if count == 1 {\n                result += current as String\n            } else {\n                for _ in 1...count {\n                    result += current as String"}
{"task_id": "MBSWP/318", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum volume of a cuboid with given sum of sides.\n *\n * >>> maxVolume(8)\n * 18\n * >>> maxVolume(4)\n * 2\n * >>> maxVolume(1)\n * 0\n */\nfunc maxVolume(s : Int) -> Int {\n    var max = 0\n    for i in 1...s {\n        for j in 1...s {\n            for k in 1...s {\n                if i + j + k > s {\n                    continue\n                }\n                let volume = i * j * k\n                if volume > max {\n                    max = volume\n                }\n            }\n        }\n    }\n    return max\n}\n"}
{"task_id": "MBSWP/319", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all five characters long word in the given string by using regex.\n *\n * >>> findLongWord(\"Please move back to strem\")\n * [\"strem\"]\n * >>> findLongWord(\"4K Ultra HD streaming player\")\n * [\"Ultra\"]\n * >>> findLongWord(\"Streaming Media Player\")\n * [\"Media\"]\n */\nfunc findLongWord(text : String) -> [String] {\n    let regex = \"\\\\w{5}\"\n    let result = text.match(regex)\n    return result?.map { $0.string } ?? []\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all five characters long word in the given string by using regex.\n *\n * >>> findLongWord(\"Please move back to strem\")\n * [\"strem\"]\n * >>> findLongWord(\"4K Ultra HD streaming player\")\n * [\"Ultra\"]\n * >>> findLongWord(\"Streaming Media Player\")\n * [\"Media\"]\n */\nfunc findLongWord(text : String) -> [String] {\n    let regex = \"\\\\w{5}\"\n    let result = text.match(regex)\n    return result?.map { $0.string } ?? []\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all five characters long word in the given string by using regex.\n *\n * >>> findLongWord(\"Please move back to strem\")\n * [\"strem\"]\n * >>> findLongWord(\"4K Ultra HD streaming player\")\n * [\"Ultra\"]\n * >>> findLongWord(\"Streaming Media Player\")\n * [\"Media\"]\n */\nfunc findLongWord(text : String) -> [String] {\n    let regex = \"\\\\w{5}\"\n    let result = text.match(regex)\n    return result?.map { $0.string } ?? []\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all five characters long word in the given string by using regex.\n *\n * >>> findLongWord(\"Please move back to"}
{"task_id": "MBSWP/320", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n *\n * >>> sumDifference(12)\n * 5434\n * >>> sumDifference(20)\n * 41230\n * >>> sumDifference(54)\n * 2151270\n */\nfunc sumDifference(n : Int) -> Int {\n    var sum = 0\n    var sum2 = 0\n    for i in 1..<n {\n        sum += i * i\n        sum2 += i\n    }\n    return sum - sum2 * sum2\n}\n"}
{"task_id": "MBSWP/321", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the demlo number for the given number.\n *\n * >>> findDemlo(\"111111\")\n * \"12345654321\"\n * >>> findDemlo(\"1111\")\n * \"1234321\"\n * >>> findDemlo(\"13333122222\")\n * \"123456789101110987654321\"\n */\nfunc findDemlo(s : String) -> String {\n    var result = \"\"\n    var i = 0\n    while i < s.count {\n        var j = i\n        while j < s.count && s[j] == s[i] {\n            j += 1\n        }\n        if j - i > 1 {\n            result += String(i)\n            result += String(j - i)\n        } else {\n            result += s[i]\n        }\n        i = j\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/322", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all index positions of the minimum values in a given list.\n *\n * >>> positionMin([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54])\n * [3, 11]\n * >>> positionMin([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])\n * [0]\n * >>> positionMin([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])\n * [1]\n */\nfunc positionMin(list1 : [Int]) -> [Int] {\n    var min = list1[0]\n    var minIndex = 0\n    for i in 1..<list1.count {\n        if list1[i] < min {\n            min = list1[i]\n            minIndex = i\n        }\n    }\n    var minPositions = [minIndex]\n    for i in 0..<list1.count {\n        if list1[i] == min {\n            minPositions.append(i)\n        }\n    }\n    return minPositions\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all index positions of the maximum values in a given list.\n *\n * >>> positionMax([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54])\n * [0, 8, 9]\n * >>> positionMax([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])\n * [0]\n * >>> positionMax([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])\n * [7]\n */\nfunc positionMax(list1 : [Int]) -> [Int] {\n    var max = list1[0]\n    var maxIndex = 0\n    for i in 1..<list1.count {\n        if list1[i] > max {\n            max = list1[i]\n            maxIndex = i\n        }"}
{"task_id": "MBSWP/323", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to re-arrange the given array in alternating positive and negative items.\n *\n * >>> reArrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10)\n * [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n * >>> reArrange([1, 2, 3, -4, -1, 4], 6)\n * [-4, 1, -1, 2, 3, 4]\n * >>> reArrange([4, 7, 9, 77, -4, 5, -3, -9], 8)\n * [-4, 4, -3, 7, -9, 9, 77, 5]\n */\nfunc reArrange(arr : [Int], n : Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var j = 0\n    while i < n {\n        if arr[i] < 0 {\n            j += 1\n            if j % 2 == 0 {\n                arr.swapAt(i, i+1)\n            }\n        }\n        i += 1\n    }\n    return arr\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to re-arrange the given array in alternating positive and negative items.\n *\n * >>> reArrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10)\n * [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n * >>> reArrange([1, 2, 3, -4, -1, 4], 6)\n * [-4, 1, -1, 2, 3, 4]\n * >>> reArrange([4, 7, 9, 77, -4, 5, -3, -9], 8)\n * [-4, 4, -3, 7, -9, 9, 77, 5]\n */\nfunc reArrange(arr : [Int], n : Int) -> [Int] {\n    var arr = arr\n    var i = 0\n    var"}
{"task_id": "MBSWP/324", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the sum of alternate chains of tuples.\n *\n * >>> sumOfAlternates([5, 6, 3, 6, 10, 34])\n * [46, 18]\n * >>> sumOfAlternates([1, 2, 3, 4, 5])\n * [6, 9]\n * >>> sumOfAlternates([6, 7, 8, 9, 4, 5])\n * [21, 18]\n */\nfunc sumOfAlternates(testTuple : [Int]) -> [Int] {\n    var sumOfAlternates = [Int]()\n    var sum = 0\n    var count = 0\n    for i in testTuple {\n        if count % 2 == 0 {\n            sum += i\n        } else {\n            sumOfAlternates.append(sum)\n            sum = 0\n        }\n        count += 1\n    }\n    sumOfAlternates.append(sum)\n    return sumOfAlternates\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the sum of alternate chains of tuples.\n *\n * >>> sumOfAlternates([5, 6, 3, 6, 10, 34])\n * [46, 18]\n * >>> sumOfAlternates([1, 2, 3, 4, 5])\n * [6, 9]\n * >>> sumOfAlternates([6, 7, 8, 9, 4, 5])\n * [21, 18]\n */\nfunc sumOfAlternates(testTuple : [Int]) -> [Int] {\n    var sumOfAlternates = [Int]()\n    var sum = 0\n    var count = 0\n    for i in testTuple {\n        if count % 2 == 0 {\n            sum += i\n        } else {\n            sumOfAlternates.append(sum)\n            sum = 0\n        }\n        count += 1\n    }\n    sumOfAlternates.append(sum)\n    return sumOfAlternates\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the sum of alternate chains of tuples.\n *\n * >>> sumOf"}
{"task_id": "MBSWP/325", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum number of squares whose sum is equal to a given number.\n *\n * >>> getMinSquares(6)\n * 3\n * >>> getMinSquares(2)\n * 2\n * >>> getMinSquares(4)\n * 1\n */\nfunc getMinSquares(n : Int) -> Int {\n    var min = Int.max\n    var sum = 0\n    var count = 0\n    for i in 1...n {\n        for j in 1...n {\n            sum += i * j\n            if sum == n {\n                count += 1\n                min = min(min, count)\n            } else if sum > n {\n                sum = 0\n                count = 0\n            }\n        }\n    }\n    return min\n}\n"}
{"task_id": "MBSWP/326", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get the word with most number of occurrences in the given strings list.\n *\n * >>> mostOccurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"])\n * \"UTS\"\n * >>> mostOccurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"])\n * \"year\"\n * >>> mostOccurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"])\n * \"can\"\n */\nfunc mostOccurrences(testList : [String]) -> String {\n    var mostOccurrences : String = \"\"\n    var mostOccurrencesCount : Int = 0\n    for testString in testList {\n        var occurrences : Int = 0\n        for char in testString {\n            if char == mostOccurrences {\n                occurrences += 1\n            }\n        }\n        if occurrences > mostOccurrencesCount {\n            mostOccurrences = testString\n            mostOccurrencesCount = occurrences\n        }\n    }\n    return mostOccurrences\n}\n\n// Test\nassert(mostOccurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"]) == \"UTS\")\nassert(mostOccurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"]) == \"year\")\nassert(mostOccurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"]) == \"can\")\n"}
{"task_id": "MBSWP/327", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print check if the triangle is isosceles or not.\n *\n * >>> checkIsosceles(6, 8, 12)\n * false\n * >>> checkIsosceles(6, 6, 12)\n * true\n * >>> checkIsosceles(6, 16, 20)\n * false\n */\nfunc checkIsosceles(x : Int, y : Int, z : Int) -> Bool {\n    if x == y || y == z || x == z {\n        return true\n    }\n    return false\n}\n"}
{"task_id": "MBSWP/328", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to rotate a given list by specified number of items to the left direction.\n *\n * >>> rotateLeft([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)\n * [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n * >>> rotateLeft([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)\n * [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n * >>> rotateLeft([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)\n * [6, 7, 8, 9, 10, 1, 2]\n */\nfunc rotateLeft(list1 : [Int], m : Int, n : Int) -> [Int] {\n    var list2 = list1\n    var list3 = []\n    for i in 0..<m {\n        list3.append(list2.popLast())\n    }\n    for i in 0..<n {\n        list2.append(list3.popLast())\n    }\n    return list2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to rotate a given list by specified number of items to the right direction.\n *\n * >>> rotateRight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)\n * [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n * >>> rotateRight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)\n * [5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n * >>> rotateRight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)\n * [8, 9, 10, 1, 2]\n */\nfunc rotateRight(list1 : [Int], m : Int, n : Int) -> [Int] {\n   "}
{"task_id": "MBSWP/329", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count negative numbers in a list.\n *\n * >>> negCount([-1, -2, 3, -4, -5])\n * 4\n * >>> negCount([1, 2, 3])\n * 0\n * >>> negCount([1, 2, -3, -10, 20])\n * 2\n */\nfunc negCount(list : [Int]) -> Int {\n    var count = 0\n    for i in list {\n        if i < 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count positive numbers in a list.\n *\n * >>> posCount([-1, -2, 3, -4, -5])\n * 0\n * >>> posCount([1, 2, 3])\n * 3\n * >>> posCount([1, 2, -3, -10, 20])\n * 3\n */\nfunc posCount(list : [Int]) -> Int {\n    var count = 0\n    for i in list {\n        if i > 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count positive and negative numbers in a list.\n *\n * >>> posNegCount([-1, -2, 3, -4, -5])\n * 4\n * >>> posNegCount([1, 2, 3])\n * 3\n * >>> posNegCount([1, 2, -3, -10, 20])\n * 5\n */\nfunc posNegCount(list : [Int]) -> Int {\n    var count = 0\n    for i in list {\n        if i > 0 && i < 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of times a number appears in a list.\n *\n * >>> countOccurrences([-1, -2, 3, -4, -5], -1)\n"}
{"task_id": "MBSWP/330", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all three, four, five characters long words in the given string by using regex.\n *\n * >>> findChar(\"For the four consumer complaints contact manager AKR reddy\")\n * [\"For\", \"the\", \"four\", \"AKR\", \"reddy\"]\n * >>> findChar(\"Certain service are subject to change MSR\")\n * [\"are\", \"MSR\"]\n * >>> findChar(\"Third party legal desclaimers\")\n * [\"Third\", \"party\", \"legal\"]\n */\nfunc findChar(text : String) -> [String] {\n    var result = [String]()\n    let regex = \"\\\\w{3,}\".range(in: text, options: .regularExpression)\n    for match in regex {\n        result.append(text[match])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all three, four, five characters long words in the given string by using regex.\n *\n * >>> findChar(\"For the four consumer complaints contact manager AKR reddy\")\n * [\"For\", \"the\", \"four\", \"AKR\", \"reddy\"]\n * >>> findChar(\"Certain service are subject to change MSR\")\n * [\"are\", \"MSR\"]\n * >>> findChar(\"Third party legal desclaimers\")\n * [\"Third\", \"party\", \"legal\"]\n */\nfunc findChar(text : String) -> [String] {\n    var result = [String]()\n    let regex = \"\\\\w{3,}\".range(in: text, options: .regularExpression)\n    for match in regex {\n        result.append(text[match])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all three, four, five characters long words in the given string by using regex.\n *\n * >>> findChar(\"For the four consumer complaints contact manager AKR reddy\")\n * [\"For\", \"the\", \"four\", \"AKR\", \"reddy\"]\n * >>> findChar(\"Certain service are subject to change MSR\")\n * [\""}
{"task_id": "MBSWP/331", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count unset bits of a given number.\n *\n * >>> countUnsetBits(2)\n * 1\n * >>> countUnsetBits(4)\n * 2\n * >>> countUnsetBits(6)\n * 1\n */\nfunc countUnsetBits(n : Int) -> Int {\n    var count = 0\n    var i = 1\n    while i <= n {\n        if n & i == 0 {\n            count += 1\n        }\n        i = i << 1\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/332", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count character frequency of a given string.\n *\n * >>> charFrequency(\"python\")\n * [\"p\" : 1, \"y\" : 1, \"t\" : 1, \"h\" : 1, \"o\" : 1, \"n\" : 1]\n * >>> charFrequency(\"program\")\n * [\"p\" : 1, \"r\" : 2, \"o\" : 1, \"g\" : 1, \"a\" : 1, \"m\" : 1]\n * >>> charFrequency(\"language\")\n * [\"l\" : 1, \"a\" : 2, \"n\" : 1, \"g\" : 2, \"u\" : 1, \"e\" : 1]\n */\nfunc charFrequency(str1 : String) -> [String: Int] {\n    var charFreq = [String: Int]()\n    for char in str1 {\n        if let count = charFreq[String(char)] {\n            charFreq[String(char)] = count + 1\n        } else {\n            charFreq[String(char)] = 1\n        }\n    }\n    return charFreq\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count character frequency of a given string.\n *\n * >>> charFrequency(\"python\")\n * [\"p\" : 1, \"y\" : 1, \"t\" : 1, \"h\" : 1, \"o\" : 1, \"n\" : 1]\n * >>> charFrequency(\"program\")\n * [\"p\" : 1, \"r\" : 2, \"o\" : 1, \"g\" : 1, \"a\" : 1, \"m\" : 1]\n * >>> charFrequency(\"language\")\n * [\"l\" : 1, \"a\" : 2, \"n\" : 1, \"g\" : 2, \"u\" : 1, \"e\" : 1]\n */\nfunc charFrequency(str1 : String) -> [String: Int] {\n    var charFreq = [String: Int]()\n    for char in str1 {\n        if let count = charFreq[String(char)] {\n            charFreq"}
{"task_id": "MBSWP/333", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to sort a list according to the second element in sublist.\n *\n * >>> sort([[\"a\", 10], [\"b\", 5], [\"c\", 20], [\"d\", 15]])\n * [[\"b\", 5], [\"a\", 10], [\"d\", 15], [\"c\", 20]]\n * >>> sort([[\"452\", 10], [\"256\", 5], [\"100\", 20], [\"135\", 15]])\n * [[\"256\", 5], [\"452\", 10], [\"135\", 15], [\"100\", 20]]\n * >>> sort([[\"rishi\", 10], [\"akhil\", 5], [\"ramya\", 20], [\"gaur\", 15]])\n * [[\"akhil\", 5], [\"rishi\", 10], [\"gaur\", 15], [\"ramya\", 20]]\n */\nfunc sort(subLi : [[AnyHashable]]) -> [[AnyHashable]] {\n    var sortedSubLi = subLi\n    sortedSubLi.sort { $0[1] < $1[1] }\n    return sortedSubLi\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to sort a list according to the third element in sublist.\n *\n * >>> sort([[\"a\", 10, \"apple\"], [\"b\", 5, \"banana\"], [\"c\", 20, \"cherry\"], [\"d\", 15, \"durian\"]])\n * [[\"b\", 5, \"banana\"], [\"a\", 10, \"apple\"], [\"d\", 15, \"durian\"], [\"c\", 20, \"cherry\"]]\n * >>> sort([[\"452\", 10, \"apple\"], [\"256\", 5, \"banana\"], [\"100\", 20, \"cherry\"], [\"135\", 15, \"durian\"]])\n * [[\"256\", 5, \"banana\"], [\"452\", 10, \"apple\"], [\"135\", 15, \"durian\"], [\"100\", 20, \"cherry\"]]\n * >>> sort([[\"rishi\", 10, \"apple\"], [\"akhil\", 5, \"banana\"], [\"ramya\", 20, \"cherry\"], [\"gaur\", 15, \"durian\"]])\n * [[\"akhil\", 5, \""}
{"task_id": "MBSWP/334", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the triangle is valid or not if sides are given.\n *\n * >>> checkValidity(1, 2, 3)\n * false\n * >>> checkValidity(2, 3, 5)\n * false\n * >>> checkValidity(7, 10, 5)\n * true\n */\nfunc checkValidity(a : Int, b : Int, c : Int) -> Bool {\n    if a + b <= c || a + c <= b || b + c <= a {\n        return false\n    }\n    return true\n}\n"}
{"task_id": "MBSWP/335", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of arithmetic progression.\n *\n * >>> apSum(1, 5, 2)\n * 25\n * >>> apSum(2, 6, 4)\n * 72\n * >>> apSum(1, 4, 5)\n * 34\n */\nfunc apSum(a : Int, n : Int, d : Int) -> Int {\n    var sum = 0\n    for i in a..<a+n {\n        sum += i\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of geometric progression.\n *\n * >>> gpSum(1, 5, 2)\n * 25\n * >>> gpSum(2, 6, 4)\n * 72\n * >>> gpSum(1, 4, 5)\n * 34\n */\nfunc gpSum(a : Int, n : Int, r : Int) -> Int {\n    var sum = 0\n    for i in a..<a+n {\n        sum += a * (r ** (i-1))\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of the first n natural numbers.\n *\n * >>> nSum(1)\n * 1\n * >>> nSum(2)\n * 3\n * >>> nSum(3)\n * 6\n */\nfunc nSum(n : Int) -> Int {\n    var sum = 0\n    for i in 1..<n+1 {\n        sum += i\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of the first n even natural numbers.\n *\n * >>> eSum(1)\n * 0\n * >>> eSum(2)\n * 2\n * >>> eSum(3)\n * 6\n */\nfunc eSum(n : Int) -> Int {\n    var sum = 0\n    for i in 1..<n+1 {\n        if i % 2 == 0 {\n            sum += i\n        }\n    }"}
{"task_id": "MBSWP/336", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month name contains 28 days or not.\n *\n * >>> checkMonthnum(\"February\")\n * true\n * >>> checkMonthnum(\"January\")\n * false\n * >>> checkMonthnum(\"March\")\n * false\n */\nfunc checkMonthnum(monthname1 : String) -> Bool {\n    let monthname = monthname1.lowercased()\n    let monthnum = monthname.count\n    if monthnum == 3 {\n        if monthname == \"january\" || monthname == \"february\" || monthname == \"march\" {\n            return false\n        } else {\n            return true\n        }\n    } else {\n        return false\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month name contains 29 days or not.\n *\n * >>> checkMonthnum(\"February\")\n * true\n * >>> checkMonthnum(\"January\")\n * false\n * >>> checkMonthnum(\"March\")\n * false\n */\nfunc checkMonthnum(monthname1 : String) -> Bool {\n    let monthname = monthname1.lowercased()\n    let monthnum = monthname.count\n    if monthnum == 3 {\n        if monthname == \"january\" || monthname == \"february\" || monthname == \"march\" {\n            return false\n        } else {\n            return true\n        }\n    } else {\n        return false\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month name contains 30 days or not.\n *\n * >>> checkMonthnum(\"February\")\n * true\n * >>> checkMonthnum(\"January\")\n * false\n * >>> checkMonthnum(\"March\")\n * false\n */\nfunc checkMonthnum(monthname1 : String) -> Bool {\n    let monthname = monthname1.lowercased()\n    let monthnum = monthname.count\n    if monthnum == 3 {\n        if monthname == \"january\" || monthname == \"february\" || monthname =="}
{"task_id": "MBSWP/337", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a word at the end of a string, with optional punctuation.\n *\n * >>> textMatchWord(\"python.\")\n * \"Found a match!\"\n * >>> textMatchWord(\"python.\")\n * \"Found a match!\"\n * >>> textMatchWord(\"  lang  .\")\n * \"Not matched!\"\n */\nfunc textMatchWord(text : String) -> String {\n    let word = \"python\"\n    let punctuation = \".\"\n    let wordRegex = word + punctuation\n    let wordRegex = wordRegex.runes.reduce(\"\") { $0 + String(rune: $1) }\n    let wordRegex = wordRegex.runes.reduce(\"\") { $0 + String(rune: $1) }\n    let wordRegex = wordRegex.runes.reduce(\"\") { $0 + String(rune: $1) }\n    let wordRegex = wordRegex.runes.reduce(\"\") { $0 + String(rune: $1) }\n    let wordRegex = wordRegex.runes.reduce(\"\") { $0 + String(rune: $1) }\n    let wordRegex = wordRegex.runes.reduce(\"\") { $0 + String(rune: $1) }\n    let wordRegex = wordRegex.runes.reduce(\"\") { $0 + String(rune: $1) }\n    let wordRegex = wordRegex.runes.reduce(\"\") { $0 + String(rune: $1) }\n    let wordRegex = wordRegex.runes.reduce(\"\") { $0 + String(rune: $1) }\n    let wordRegex = wordRegex.runes.reduce(\"\") { $0 + String(rune: $1) }\n    let wordRegex = wordRegex.runes.reduce(\"\") { $0 + String(rune: $1) }\n    let wordRegex = wordRegex.runes.reduce(\"\") { $0 + String(rune: $1) }\n    let wordRegex = word"}
{"task_id": "MBSWP/338", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of substrings with same first and last characters.\n *\n * >>> countSubstringWithEqualEnds(\"aba\")\n * 4\n * >>> countSubstringWithEqualEnds(\"abcab\")\n * 7\n * >>> countSubstringWithEqualEnds(\"abc\")\n * 3\n */\nfunc countSubstringWithEqualEnds(s : String) -> Int {\n    var count = 0\n    var start = 0\n    var end = 0\n    while end < s.count {\n        start = end\n        end = start + 1\n        while end < s.count && s[start] == s[end] {\n            end += 1\n        }\n        count += end - start\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/339", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum occuring divisor in an interval.\n *\n * >>> findDivisor(2, 2)\n * 2\n * >>> findDivisor(2, 5)\n * 2\n * >>> findDivisor(5, 10)\n * 2\n */\nfunc findDivisor(x : Int, y : Int) -> Int {\n    var maxDivisor = 1\n    var maxDivisorCount = 0\n    for i in x..<y {\n        let divisor = i / x\n        if divisor > maxDivisor {\n            maxDivisor = divisor\n            maxDivisorCount = 1\n        } else if divisor == maxDivisor {\n            maxDivisorCount += 1\n        }\n    }\n    return maxDivisor\n}\n"}
{"task_id": "MBSWP/340", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of the three lowest positive numbers from a given list of numbers.\n *\n * >>> sumThreeSmallestNums([10, 20, 30, 40, 50, 60, 7])\n * 37\n * >>> sumThreeSmallestNums([1, 2, 3, 4, 5])\n * 6\n * >>> sumThreeSmallestNums([0, 1, 2, 3, 4, 5])\n * 6\n */\nfunc sumThreeSmallestNums(lst : [Int]) -> Int {\n    var lst = lst\n    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    var thirdSmallest = lst[2]\n    for i in 1...lst.count {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n            thirdSmallest = secondSmallest\n            smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        } else if lst[i] < thirdSmallest {\n            thirdSmallest = lst[i]\n        }\n    }\n    return smallest + secondSmallest + thirdSmallest\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of the three highest positive numbers from a given list of numbers.\n *\n * >>> sumThreeHighestNums([10, 20, 30, 40, 50, 60, 7])\n * 67\n * >>> sumThreeHighestNums([1, 2, 3, 4, 5])\n * 6\n * >>> sumThreeHighestNums([0, 1, 2, 3, 4, 5])\n * 6\n */\nfunc sumThreeHighestNums(lst : [Int]) -> Int {\n    var lst = lst\n    var highest = lst[0]\n    var secondHighest = lst[1]\n    var thirdHighest = lst[2]\n    for i in 1...lst.count {\n        if lst[i] > highest {\n            secondHighest = highest\n           "}
{"task_id": "MBSWP/341", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given set into tuples.\n *\n * >>> setToTuple({1, 2, 3, 4, 5})\n * [1, 2, 3, 4, 5]\n * >>> setToTuple({6, 7, 8, 9, 10, 11})\n * [6, 7, 8, 9, 10, 11]\n * >>> setToTuple({12, 13, 14, 15, 16})\n * [12, 13, 14, 15, 16]\n */\nfunc setToTuple(s : Set<Int>) -> [Int] {\n    var result = []\n    for i in s {\n        result.append(i)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given set into a dictionary.\n *\n * >>> setToDict({1, 2, 3, 4, 5})\n * {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\n * >>> setToDict({6, 7, 8, 9, 10, 11})\n * {6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11}\n * >>> setToDict({12, 13, 14, 15, 16})\n * {12: 12, 13: 13, 14: 14, 15: 15, 16: 16}\n */\nfunc setToDict(s : Set<Int>) -> [Int : Int] {\n    var result = [Int : Int]()\n    for i in s {\n        result[i] = i\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given set into a dictionary.\n *\n * >>> setToDict({1, 2, 3, 4, 5})\n * {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\n * >>> setToDict({6, 7, 8, 9, 10, 11})\n * {6: 6, 7: 7, 8: 8,"}
{"task_id": "MBSWP/342", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n *\n * >>> findMinimumRange([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]])\n * [4, 6]\n * >>> findMinimumRange([[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]])\n * [4, 7]\n * >>> findMinimumRange([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]])\n * [5, 7]\n */\nfunc findMinimumRange(list : [[Int]]) -> [Int] {\n    var min = list[0]\n    var max = list[0]\n    for i in 1..<list.count {\n        if list[i].count == 0 {\n            continue\n        }\n        if list[i].count == 1 {\n            min = list[i]\n            max = list[i]\n            break\n        }\n        if list[i].count == 2 {\n            min = list[i]\n            max = list[i]\n            break\n        }\n        if list[i].count == 3 {\n            min = list[i]\n            max = list[i]\n            break\n        }\n        if list[i].count == 4 {\n            min = list[i]\n            max = list[i]\n            break\n        }\n        if list[i].count == 5 {\n            min = list[i]\n            max = list[i]\n            break\n        }\n        if list[i].count == 6 {\n            min = list[i]\n            max = list[i]\n            break\n        }\n        if list[i].count == 7 {\n            min = list[i]\n            max = list[i]\n            break\n        }\n        if list[i].count == 8 {\n            min = list[i]\n            max = list[i]\n"}
{"task_id": "MBSWP/343", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the number of digits and letters in a string.\n *\n * >>> digLet(\"python\")\n * [6, 0]\n * >>> digLet(\"program\")\n * [7, 0]\n * >>> digLet(\"python3.0\")\n * [6, 2]\n */\nfunc digLet(s : String) -> [Int] {\n    var digits = 0\n    var letters = 0\n    for c in s {\n        if c.isNumber {\n            digits += 1\n        } else if c.isLetter {\n            letters += 1\n        }\n    }\n    return [digits, letters]\n}\n\n// Test\ndigLet(\"python\")\ndigLet(\"program\")\ndigLet(\"python3.0\")\n"}
{"task_id": "MBSWP/344", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find number of elements with odd factors in a given range.\n *\n * >>> countOddSquares(5, 100)\n * 8\n * >>> countOddSquares(8, 65)\n * 6\n * >>> countOddSquares(2, 5)\n * 1\n */\nfunc countOddSquares(n : Int, m : Int) -> Int {\n    var count = 0\n    for i in n..<m {\n        if i % 2 == 0 {\n            continue\n        }\n        for j in i..<m {\n            if j % 2 == 0 {\n                continue\n            }\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/345", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the difference between two consecutive numbers in a given list.\n *\n * >>> diffConsecutivenums([1, 1, 3, 4, 4, 5, 6, 7])\n * [0, 2, 1, 0, 1, 1, 1]\n * >>> diffConsecutivenums([4, 5, 8, 9, 6, 10])\n * [1, 3, 1, -3, 4]\n * >>> diffConsecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])\n * [1, 1, 1, 1, 0, 0, 0, 1, 2]\n */\nfunc diffConsecutivenums(nums : [Int]) -> [Int] {\n    var result = [Int]()\n    var prev = nums[0]\n    for i in 1..<nums.count {\n        let curr = nums[i]\n        result.append(curr - prev)\n        prev = curr\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/346", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find entringer number e(n, k).\n *\n * >>> zigzag(4, 3)\n * 5\n * >>> zigzag(4, 2)\n * 4\n * >>> zigzag(3, 1)\n * 1\n */\nfunc zigzag(n : Int, k : Int) -> Int {\n    var result = 0\n    var i = 0\n    var j = 0\n    while i < n {\n        while j < k {\n            result += i\n            j += 1\n        }\n        i += 1\n        j = 0\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/347", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of squares in a rectangle.\n *\n * >>> countSquares(4, 3)\n * 20\n * >>> countSquares(1, 2)\n * 2\n * >>> countSquares(2, 2)\n * 5\n */\nfunc countSquares(m : Int, n : Int) -> Int {\n    var count = 0\n    for i in 0..<m {\n        for j in 0..<n {\n            if i == 0 || j == 0 {\n                count += 1\n            } else {\n                count += (i * j)\n            }\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/348", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n *\n * >>> findWays(4)\n * 2\n * >>> findWays(6)\n * 5\n * >>> findWays(8)\n * 14\n */\nfunc findWays(m : Int) -> Int {\n    var result = 0\n    var sum = 0\n    var count = 0\n    for i in 0..<m {\n        sum += i\n        if sum == 0 {\n            count += 1\n        }\n        if sum == m {\n            count += 1\n        }\n        if sum > m {\n            sum = 0\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/349", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given string is a binary string or not.\n *\n * >>> check(\"01010101010\")\n * \"Yes\"\n * >>> check(\"name0\")\n * \"No\"\n * >>> check(\"101\")\n * \"Yes\"\n */\nfunc check(string : String) -> String {\n    var result = \"No\"\n    if string.count == string.characters.filter({ $0 == \"0\" || $0 == \"1\" }).count {\n        result = \"Yes\"\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/350", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to minimize the length of the string by removing occurrence of only one character.\n *\n * >>> minimumLength(\"mnm\")\n * 1\n * >>> minimumLength(\"abcda\")\n * 3\n * >>> minimumLength(\"abcb\")\n * 2\n */\nfunc minimumLength(s : String) -> Int {\n    var s = s\n    var min = Int.max\n    var count = 0\n    for i in 0..<s.count {\n        if s[i] == s[i+1] {\n            count += 1\n            s = s.remove(at: i)\n            s = s.remove(at: i)\n        }\n    }\n    return min\n}\n"}
{"task_id": "MBSWP/351", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first element occurring k times in a given array.\n *\n * >>> firstElement([0, 1, 2, 3, 4, 5], 6, 1)\n * 0\n * >>> firstElement([1, 2, 1, 3, 4], 5, 2)\n * 1\n * >>> firstElement([2, 3, 4, 3, 5, 7, 1, 2, 3, 5], 10, 2)\n * 2\n */\nfunc firstElement(arr : [Int], n : Int, k : Int) -> Int {\n    var count = 0\n    var first = 0\n    for i in arr {\n        if count == k {\n            return i\n        }\n        if i == arr[first] {\n            count += 1\n        }\n        first += 1\n    }\n    return -1\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the last element occurring k times in a given array.\n *\n * >>> lastElement([0, 1, 2, 3, 4, 5], 6, 1)\n * 5\n * >>> lastElement([1, 2, 1, 3, 4], 5, 2)\n * 3\n * >>> lastElement([2, 3, 4, 3, 5, 7, 1, 2, 3, 5], 10, 2)\n * 5\n */\nfunc lastElement(arr : [Int], n : Int, k : Int) -> Int {\n    var count = 0\n    var last = 0\n    for i in arr {\n        if count == k {\n            return i\n        }\n        if i == arr[last] {\n            count += 1\n        }\n        last += 1\n    }\n    return -1\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first element occurring k times in a given array.\n *\n * >>> firstElement([0, 1, 2, 3, 4, 5], 6, 1)\n * 0\n * >>> firstElement([1, 2, 1, 3, 4], 5, 2)\n * 1\n * >>> firstElement(["}
{"task_id": "MBSWP/352", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether all the characters in a given string are unique.\n *\n * >>> uniqueCharacters(\"aba\")\n * false\n * >>> uniqueCharacters(\"abc\")\n * true\n * >>> uniqueCharacters(\"abab\")\n * false\n */\nfunc uniqueCharacters(str : String) -> Bool {\n    var unique = true\n    for i in 0..<str.count {\n        for j in i+1..<str.count {\n            if str[i] == str[j] {\n                unique = false\n            }\n        }\n    }\n    return unique\n}\n"}
{"task_id": "MBSWP/353", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove a specified column from a given nested list.\n *\n * >>> removeColumn([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)\n * [[2, 3], [4, 5], [1, 1]]\n * >>> removeColumn([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2)\n * [[1, 2], [-2, 4], [1, -1]]\n * >>> removeColumn([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)\n * [[3], [7], [3], [15, 17], [7], [11]]\n */\nfunc removeColumn(list1 : [[Int]], n : Int) -> [[Int]] {\n    var list2 = list1\n    for i in 0..<list1.count {\n        list2[i].remove(at: n)\n    }\n    return list2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove a specified row from a given nested list.\n *\n * >>> removeRow([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)\n * [[2, 4, 5], [1, 1, 1]]\n * >>> removeRow([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2)\n * [[1, 2, 3], [-2, 4, -5]]\n * >>> removeRow([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)\n * [[3, 5, 1, 13, 5, 9], [7, 7, 3, 15, 11, 17]]\n */\nfunc removeRow(list1 : [[Int]], n : Int) -> [[Int]] {\n    var list2 = list1\n    list2.remove(at: n)\n    return list2\n}"}
{"task_id": "MBSWP/354", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find t-nth term of arithemetic progression.\n *\n * >>> tnAp(1, 5, 2)\n * 9\n * >>> tnAp(2, 6, 4)\n * 22\n * >>> tnAp(1, 4, 5)\n * 16\n */\nfunc tnAp(a : Int, n : Int, d : Int) -> Int {\n    return a + (n - 1) * d\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find t-nth term of geometric progression.\n *\n * >>> tnGp(1, 5, 2)\n * 9\n * >>> tnGp(2, 6, 4)\n * 22\n * >>> tnGp(1, 4, 5)\n * 16\n */\nfunc tnGp(a : Int, n : Int, r : Int) -> Int {\n    return a * (r ** (n - 1))\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find t-nth term of harmonic progression.\n *\n * >>> tnHp(1, 5, 2)\n * 9\n * >>> tnHp(2, 6, 4)\n * 22\n * >>> tnHp(1, 4, 5)\n * 16\n */\nfunc tnHp(a : Int, n : Int, d : Int) -> Int {\n    return a / (d ** (n - 1))\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find t-nth term of fibonacci progression.\n *\n * >>> tnFp(1, 5, 2)\n * 9\n * >>> tnFp(2, 6, 4)\n * 22\n * >>> tnFp(1, 4, 5)\n * 16\n */\nfunc tnFp(a : Int, n : Int, d : Int) -> Int {\n    return a + (n - 1) * d\n}\n\n/**\n * You are an"}
{"task_id": "MBSWP/355", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of rectangles in a circle of radius r.\n *\n * >>> countRectangles(2)\n * 8\n * >>> countRectangles(1)\n * 1\n * >>> countRectangles(0)\n * 0\n */\nfunc countRectangles(radius : Int) -> Int {\n    var count = 0\n    for i in 1...radius {\n        for j in 1...radius {\n            if i + j <= radius {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/356", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the third angle of a triangle using two angles.\n *\n * >>> findAngle(47, 89)\n * 44\n * >>> findAngle(45, 95)\n * 40\n * >>> findAngle(50, 40)\n * 90\n */\nfunc findAngle(a : Int, b : Int) -> Int {\n    return (180 - (a + b)) / 2\n}\n"}
{"task_id": "MBSWP/357", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum element of all the given tuple records.\n *\n * >>> findMax([[2, 4], [6, 7], [5, 1], [6, 10], [8, 7]])\n * 10\n * >>> findMax([[3, 5], [7, 8], [6, 2], [7, 11], [9, 8]])\n * 11\n * >>> findMax([[4, 6], [8, 9], [7, 3], [8, 12], [10, 9]])\n * 12\n */\nfunc findMax(testList : [[Int]]) -> Int {\n    var max = testList[0][1]\n    for i in 1..<testList.count {\n        if testList[i][1] > max {\n            max = testList[i][1]\n        }\n    }\n    return max\n}\n"}
{"task_id": "MBSWP/358", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find modulo division of two lists using map and lambda function.\n *\n * >>> moddivList([4, 5, 6], [1, 2, 3])\n * [0, 1, 0]\n * >>> moddivList([3, 2], [1, 4])\n * [0, 2]\n * >>> moddivList([90, 120], [50, 70])\n * [40, 50]\n */\nfunc moddivList(nums1 : [Int], nums2 : [Int]) -> [Int] {\n    return nums1.map({ nums2.map({ $0 % $1 }) })\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find modulo division of two lists using map and lambda function.\n *\n * >>> moddivList([4, 5, 6], [1, 2, 3])\n * [0, 1, 0]\n * >>> moddivList([3, 2], [1, 4])\n * [0, 2]\n * >>> moddivList([90, 120], [50, 70])\n * [40, 50]\n */\nfunc moddivList(nums1 : [Int], nums2 : [Int]) -> [Int] {\n    return nums1.map({ nums2.map({ $0 % $1 }) })\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find modulo division of two lists using map and lambda function.\n *\n * >>> moddivList([4, 5, 6], [1, 2, 3])\n * [0, 1, 0]\n * >>> moddivList([3, 2], [1, 4])\n * [0, 2]\n * >>> moddivList([90, 120], [50, 70])\n * [40, 50]\n */\nfunc moddivList(nums1 : [Int], nums2 : [Int]) -> [Int] {\n    return nums1.map({ nums2.map({ $0 % $1 }) })\n}\n\n/**\n * You are an expert Swift programmer, and here is your"}
{"task_id": "MBSWP/359", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether one root of the quadratic equation is twice of the other or not.\n *\n * >>> checkSolution(1, 3, 2)\n * \"Yes\"\n * >>> checkSolution(1, 2, 3)\n * \"No\"\n * >>> checkSolution(1, -5, 6)\n * \"No\"\n */\nfunc checkSolution(a : Int, b : Int, c : Int) -> String {\n    let d = b * b - 4 * a * c\n    if d > 0 {\n        return \"Yes\"\n    } else if d == 0 {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }\n}\n"}
{"task_id": "MBSWP/360", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n\u2019th carol number.\n *\n * >>> getCarol(2)\n * 7\n * >>> getCarol(4)\n * 223\n * >>> getCarol(5)\n * 959\n */\nfunc getCarol(n : Int) -> Int {\n    var n = n\n    var result = 0\n    while n > 0 {\n        result += n % 10\n        n /= 10\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/361", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove empty lists from a given list of lists.\n *\n * >>> removeEmpty([[], [], [], \"Red\", \"Green\", [1, 2], \"Blue\", [], []])\n * [\"Red\", \"Green\", [1, 2], \"Blue\"]\n * >>> removeEmpty([[], [], [], [], [], \"Green\", [1, 2], \"Blue\", [], []])\n * [\"Green\", [1, 2], \"Blue\"]\n * >>> removeEmpty([[], [], [], \"Python\", [], [], \"programming\", \"language\", [], [], [], [], []])\n * [\"Python\", \"programming\", \"language\"]\n */\nfunc removeEmpty(list1 : [AnyHashable]) -> [AnyHashable] {\n    var list2 = []\n    for item in list1 {\n        if item is [AnyHashable] {\n            if item.count > 0 {\n                list2.append(item)\n            }\n        } else {\n            list2.append(item)\n        }\n    }\n    return list2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove empty strings from a given list of strings.\n *\n * >>> removeEmptyStrings([\"\", \"\", \"\", \"Red\", \"Green\", \"\", \"Blue\", \"\", \"\"])\n * [\"Red\", \"Green\", \"\", \"Blue\"]\n * >>> removeEmptyStrings([\"\", \"\", \"\", \"\", \"\", \"Green\", \"\", \"Blue\", \"\", \"\"])\n * [\"Green\", \"\", \"Blue\"]\n * >>> removeEmptyStrings([\"\", \"\", \"\", \"Python\", \"\", \"\", \"programming\", \"language\", \"\", \"\", \"\", \"\", \"\"])\n * [\"Python\", \"programming\", \"language\"]\n */\nfunc removeEmptyStrings(list1 : [String]) -> [String] {\n    var list2 = []\n    for item in list1 {\n        if item.count > 0 {\n            list2.append(item)\n        }\n    }\n    return list2\n}\n\n"}
{"task_id": "MBSWP/362", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the item with maximum occurrences in a given list.\n *\n * >>> maxOccurrences([1, 2, 3, 1, 2, 3, 12, 4, 2])\n * 2\n * >>> maxOccurrences([1, 2, 6, 7, 0, 1, 0, 1, 0])\n * [1,0]\n * >>> maxOccurrences([1, 2, 3, 1, 2, 4, 1])\n * 1\n */\nfunc maxOccurrences(nums : [Int]) -> AnyHashable {\n    var maxOccurrences = 0\n    var maxOccurrencesIndex = 0\n    var maxOccurrencesCount = 0\n    for i in 0..<nums.count {\n        if nums[i] == nums[maxOccurrencesIndex] {\n            maxOccurrencesCount += 1\n        } else {\n            if maxOccurrencesCount > maxOccurrences {\n                maxOccurrences = maxOccurrencesCount\n                maxOccurrencesIndex = i - maxOccurrencesCount\n            }\n            maxOccurrencesCount = 1\n        }\n    }\n    return nums[maxOccurrencesIndex]\n}\n"}
{"task_id": "MBSWP/363", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add the k elements to each element in the tuple.\n *\n * >>> addKElement([[1, 3, 4], [2, 4, 6], [3, 8, 1]], 4)\n * [[5, 7, 8], [6, 8, 10], [7, 12, 5]]\n * >>> addKElement([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8)\n * [[9, 10, 11], [12, 13, 14], [15, 16, 17]]\n * >>> addKElement([[11, 12, 13], [14, 15, 16], [17, 18, 19]], 9)\n * [[20, 21, 22], [23, 24, 25], [26, 27, 28]]\n */\nfunc addKElement(testList : [[Int]], k : Int) -> [[Int]] {\n    var result : [[Int]] = []\n    for i in 0..<testList.count {\n        var temp : [Int] = []\n        for j in 0..<testList[i].count {\n            temp.append(testList[i][j] + k)\n        }\n        result.append(temp)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add the k elements to each element in the tuple.\n *\n * >>> addKElement([[1, 3, 4], [2, 4, 6], [3, 8, 1]], 4)\n * [[5, 7, 8], [6, 8, 10], [7, 12, 5]]\n * >>> addKElement([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8)\n * [[9, 10, 11], [12, 13, 14], [15, 16, 17]]\n * >>> addKElement([[11, 12, 13], [14, 15, 16], [17, 18, 19]], 9)\n * [[20, 21, 22], [23, 24, 25], [26, 27, 28]]\n */\nfunc addKE"}
{"task_id": "MBSWP/364", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n *\n * >>> minFlipToMakeStringAlternate(\"0001010111\")\n * 2\n * >>> minFlipToMakeStringAlternate(\"001\")\n * 1\n * >>> minFlipToMakeStringAlternate(\"010111011\")\n * 2\n */\nfunc minFlipToMakeStringAlternate(str : String) -> Int {\n    var flipCount = 0\n    var flip = false\n    for char in str {\n        if flip == false {\n            if char == \"0\" {\n                flip = true\n            }\n        } else {\n            if char == \"1\" {\n                flip = false\n            }\n        }\n        flipCount += 1\n    }\n    return flipCount\n}\n"}
{"task_id": "MBSWP/365", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of digits of a given number.\n *\n * >>> countDigit(12345)\n * 5\n * >>> countDigit(11223305)\n * 8\n * >>> countDigit(4123459)\n * 7\n */\nfunc countDigit(n : Int) -> Int {\n    var count = 0\n    var temp = n\n    while temp != 0 {\n        count += 1\n        temp /= 10\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/366", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the largest product of the pair of adjacent elements from a given list of integers.\n *\n * >>> adjacentNumProduct([1, 2, 3, 4, 5, 6])\n * 30\n * >>> adjacentNumProduct([1, 2, 3, 4, 5])\n * 20\n * >>> adjacentNumProduct([2, 3])\n * 6\n */\nfunc adjacentNumProduct(listNums : [Int]) -> Int {\n    var maxProduct = 0\n    for i in 0..<listNums.count-1 {\n        for j in i+1..<listNums.count {\n            let product = listNums[i] * listNums[j]\n            if product > maxProduct {\n                maxProduct = product\n            }\n        }\n    }\n    return maxProduct\n}\n"}
{"task_id": "MBSWP/368", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to repeat the given tuple n times.\n *\n * >>> repeatTuples([1, 3], 4)\n * [[1, 3], [1, 3], [1, 3], [1, 3]]\n * >>> repeatTuples([1, 2], 3)\n * [[1, 2], [1, 2], [1, 2]]\n * >>> repeatTuples([3, 4], 5)\n * [[3, 4], [3, 4], [3, 4], [3, 4], [3, 4]]\n */\nfunc repeatTuples(testTup : [Int], n : Int) -> [[Int]] {\n    var result : [[Int]] = []\n    for i in 0..<n {\n        result.append(testTup)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to repeat the given string n times.\n *\n * >>> repeatStrings(\"Hello\", 3)\n * \"HelloHelloHello\"\n * >>> repeatStrings(\"World\", 2)\n * \"WorldWorld\"\n * >>> repeatStrings(\"!\", 5)\n * \"!!!!!\"\n */\nfunc repeatStrings(testStr : String, n : Int) -> String {\n    var result : String = \"\"\n    for i in 0..<n {\n        result += testStr\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to repeat the given array n times.\n *\n * >>> repeatArrays([1, 2, 3], 3)\n * [[1, 2, 3], [1, 2, 3], [1, 2, 3]]\n * >>> repeatArrays([4, 5, 6], 2)\n * [[4, 5, 6], [4, 5, 6]]\n * >>> repeatArrays([7, 8, 9], 1)\n * [[7, 8, 9]]\n */\nfunc repeatArrays(testArr : [Int], n : Int) -> [[Int]] {\n    var result : [[Int]] = []\n    for i in 0..<n {\n"}
{"task_id": "MBSWP/369", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area of cuboid\n *\n * >>> lateralsurfaceCuboid(8, 5, 6)\n * 156\n * >>> lateralsurfaceCuboid(7, 9, 10)\n * 320\n * >>> lateralsurfaceCuboid(10, 20, 30)\n * 1800\n */\nfunc lateralsurfaceCuboid(l : Int, w : Int, h : Int) -> Int {\n    return 2 * (l * w + w * h + h * l)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area of cuboid\n *\n * >>> lateralsurfaceCuboid(8, 5, 6)\n * 156\n * >>> lateralsurfaceCuboid(7, 9, 10)\n * 320\n * >>> lateralsurfaceCuboid(10, 20, 30)\n * 1800\n */\nfunc lateralsurfaceCuboid(l : Int, w : Int, h : Int) -> Int {\n    return 2 * (l * w + w * h + h * l)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area of cuboid\n *\n * >>> lateralsurfaceCuboid(8, 5, 6)\n * 156\n * >>> lateralsurfaceCuboid(7, 9, 10)\n * 320\n * >>> lateralsurfaceCuboid(10, 20, 30)\n * 1800\n */\nfunc lateralsurfaceCuboid(l : Int, w : Int, h : Int) -> Int {\n    return 2 * (l * w + w * h + h * l)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area of cuboid\n *\n * >>> lateralsurfaceCuboid(8, 5, 6)\n * 156\n * >>> lateralsurfaceCuboid(7, 9, 10)\n * 320\n * >>> lateralsurfaceCuboid(10, 20, 30)\n * 1800\n */\nfunc lateralsurface"}
{"task_id": "MBSWP/370", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a tuple by its float element.\n *\n * >>> floatSort([[\"item1\", \"12.20\"], [\"item2\", \"15.10\"], [\"item3\", \"24.5\"]])\n * [[\"item3\", \"24.5\"], [\"item2\", \"15.10\"], [\"item1\", \"12.20\"]]\n * >>> floatSort([[\"item1\", \"15\"], [\"item2\", \"10\"], [\"item3\", \"20\"]])\n * [[\"item3\", \"20\"], [\"item1\", \"15\"], [\"item2\", \"10\"]]\n * >>> floatSort([[\"item1\", \"5\"], [\"item2\", \"10\"], [\"item3\", \"14\"]])\n * [[\"item3\", \"14\"], [\"item2\", \"10\"], [\"item1\", \"5\"]]\n */\nfunc floatSort(price : [[String]]) -> [[String]] {\n    var sorted = price\n    sorted.sort { $0[1] < $1[1] }\n    return sorted\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a tuple by its string element.\n *\n * >>> stringSort([[\"item1\", \"12.20\"], [\"item2\", \"15.10\"], [\"item3\", \"24.5\"]])\n * [[\"item1\", \"12.20\"], [\"item2\", \"15.10\"], [\"item3\", \"24.5\"]]\n * >>> stringSort([[\"item1\", \"15\"], [\"item2\", \"10\"], [\"item3\", \"20\"]])\n * [[\"item1\", \"15\"], [\"item2\", \"10\"], [\"item3\", \"20\"]]\n * >>> stringSort([[\"item1\", \"5\"], [\"item2\", \"10\"], [\"item3\", \"14\"]])\n * [[\"item1\", \"5\"], [\"item2\", \"10\"], [\"item3\", \"14\"]]\n */\nfunc stringSort(price : [[String]]) -> [[String]] {\n    var sorted = price\n    sorted.sort { $0[0] < $1[0] }\n    return sorted\n}\n\n/**\n * You"}
{"task_id": "MBSWP/371", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the smallest missing element in a sorted array.\n *\n * >>> smallestMissing([0, 1, 2, 3, 4, 5, 6], 0, 6)\n * 7\n * >>> smallestMissing([0, 1, 2, 6, 9, 11, 15], 0, 6)\n * 3\n * >>> smallestMissing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7)\n * 0\n */\nfunc smallestMissing(a : [Int], leftElement : Int, rightElement : Int) -> Int {\n    var left = leftElement\n    var right = rightElement\n    var smallestMissing = 0\n    var smallestMissingFound = false\n    var smallestMissingFoundIndex = 0\n    var smallestMissingFoundValue = 0\n    var smallestMissingFoundValueIndex = 0\n    var smallestMissingFoundValueFound = false\n    var smallestMissingFoundValueFoundIndex = 0\n    var smallestMissingFoundValueFoundValue = 0\n    var smallestMissingFoundValueFoundValueIndex = 0\n    var smallestMissingFoundValueFoundValueFound = false\n    var smallestMissingFoundValueFoundValueFoundIndex = 0\n    var smallestMissingFoundValueFoundValueFoundValue = 0\n    var smallestMissingFoundValueFoundValueFoundValueIndex = 0\n    var smallestMissingFoundValueFoundValueFoundValueFound = false\n    var smallestMissingFoundValueFoundValueFoundValueFoundIndex = 0\n    var smallestMissingFoundValueFoundValueFoundValueFoundValue = 0\n    var smallestMissingFoundValueFoundValueFoundValueFoundValueIndex = 0\n    var smallestMissingFoundValueFoundValueFoundValueFoundValueFound = false\n    var smallestMissingFoundValueFoundValueFoundValueFoundValueFoundIndex = 0\n    var smallestMissingFoundValueFoundValueFoundValueFoundValueFoundValue = 0\n    var smallestMissingFoundValueFoundValueFoundValueFoundValueFoundValueIndex = 0\n    var smallestMissingFoundValueFoundValueFoundValueFoundValueFoundValueFound = false\n    var smallestMissingFoundValueFoundValueFoundValueFoundValueFoundValueFoundIndex = 0\n    var smallestMissingFoundValueFoundValueFoundValueFoundValueFoundValueFoundValue = 0\n    var smallestMissingFoundValueFoundValueFoundValueFoundValueFoundValueFoundValueIndex = 0\n    var smallestMissingFoundValueFoundValueFoundValueFound"}
{"task_id": "MBSWP/372", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n *\n * >>> heapAssending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])\n * [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n * >>> heapAssending([25, 35, 22, 85, 14, 65, 75, 25, 58])\n * [14, 22, 25, 25, 35, 58, 65, 75, 85]\n * >>> heapAssending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n * [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n */\nfunc heapAssending(nums : [Int]) -> [Int] {\n    var heap = nums\n    for i in 0..<heap.count {\n        heapify(heap, i)\n    }\n    return heap\n}\n\nfunc heapify(heap : [Int], i : Int) {\n    var largest = i\n    let left = 2 * i + 1\n    let right = 2 * i + 2\n    if left < heap.count && heap[left] > heap[largest] {\n        largest = left\n    }\n    if right < heap.count && heap[right] > heap[largest] {\n        largest = right\n    }\n    if largest != i {\n        swap(&heap[i], &heap[largest])\n        heapify(heap, largest)\n    }\n}\n\nfunc swap(&a : Int, &b : Int) {\n    let temp = a\n    a = b\n    b = temp\n}\n"}
{"task_id": "MBSWP/373", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cuboid.\n *\n * >>> volumeCuboid(1, 2, 3)\n * 6\n * >>> volumeCuboid(5, 7, 9)\n * 315\n * >>> volumeCuboid(10, 15, 21)\n * 3150\n */\nfunc volumeCuboid(l : Int, w : Int, h : Int) -> Int {\n    return l * w * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cylinder.\n *\n * >>> volumeCylinder(1, 2)\n * 2\n * >>> volumeCylinder(5, 7)\n * 210\n * >>> volumeCylinder(10, 15)\n * 1550\n */\nfunc volumeCylinder(r : Int, h : Int) -> Int {\n    return r * r * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a sphere.\n *\n * >>> volumeSphere(1)\n * 4\n * >>> volumeSphere(5)\n * 314\n * >>> volumeSphere(10)\n * 1548\n */\nfunc volumeSphere(r : Int) -> Int {\n    return 4 * r * r * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cone.\n *\n * >>> volumeCone(1, 2)\n * 1\n * >>> volumeCone(5, 7)\n * 105\n * >>> volumeCone(10, 15)\n * 1545\n */\nfunc volumeCone(r : Int, h : Int) -> Int {\n    return 1 / 3 * r * r * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a pyramid.\n *\n * >>> volumePyramid(1, 2, 3)\n * 6\n * >>> volumePyramid(5, 7, 9)\n * 210\n * >>> volumePyramid(10, 15, 21)\n * 1550"}
{"task_id": "MBSWP/374", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print all permutations of a given string including duplicates.\n *\n * >>> permuteString(\"ab\")\n * [\"ab\", \"ba\"]\n * >>> permuteString(\"abc\")\n * [\"abc\", \"bac\", \"bca\", \"acb\", \"cab\", \"cba\"]\n * >>> permuteString(\"abcd\")\n * [\"abcd\", \"bacd\", \"bcad\", \"bcda\", \"acbd\", \"cabd\", \"cbad\", \"cbda\", \"acdb\", \"cadb\", \"cdab\", \"cdba\", \"abdc\", \"badc\", \"bdac\", \"bdca\", \"adbc\", \"dabc\", \"dbac\", \"dbca\", \"adcb\", \"dacb\", \"dcab\", \"dcba\"]\n */\nfunc permuteString(str : String) -> [String] {\n    var result = [String]()\n    if str.isEmpty {\n        return result\n    }\n    var permutation = str\n    var permutations = [String]()\n    permutations.append(permutation)\n    while permutation.count > 0 {\n        permutation = permutation.dropFirst()\n        permutations = permutations.flatMap { permutation in\n            permutation.map { String(repeating: $0, count: permutation.count) }\n        }\n    }\n    return permutations\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print all permutations of a given string including duplicates.\n *\n * >>> permuteString(\"ab\")\n * [\"ab\", \"ba\"]\n * >>> permuteString(\"abc\")\n * [\"abc\", \"bac\", \"bca\", \"acb\", \"cab\", \"cba\"]\n * >>> permuteString(\"abcd\")\n * [\"abcd\", \"bacd\", \"bcad\", \"bcda\", \"acbd\", \"cabd\", \"cbad\", \"cbda\", \"acdb\", \"cadb\", \"cdab\", \"cdba\", \"abdc\", \"badc\", \"bdac\", \"bdca\", \"adbc\","}
{"task_id": "MBSWP/375", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to round the given number to the nearest multiple of a specific number.\n *\n * >>> roundNum(4722, 10)\n * 4720\n * >>> roundNum(1111, 5)\n * 1110\n * >>> roundNum(219, 2)\n * 218\n */\nfunc roundNum(n : Int, m : Int) -> Int {\n    let n = n / m\n    let n = Int(n)\n    let n = n * m\n    return n\n}\n"}
{"task_id": "MBSWP/376", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n *\n * >>> removeReplica([1, 1, 4, 4, 4, 5, 5, 6, 7, 7])\n * [1, \"MSP\", 4, \"MSP\", \"MSP\", 5, \"MSP\", 6, 7, \"MSP\"]\n * >>> removeReplica([2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9])\n * [2, 3, 4, \"MSP\", 5, 6, \"MSP\", 7, 8, 9, \"MSP\"]\n * >>> removeReplica([2, 2, 5, 4, 5, 7, 5, 6, 7, 7])\n * [2, \"MSP\", 5, 4, \"MSP\", 7, \"MSP\", 6, \"MSP\", \"MSP\"]\n */\nfunc removeReplica(testTup : [Int]) -> [AnyHashable] {\n    var tup = testTup\n    var tup2 = [AnyHashable]()\n    var tup3 = [AnyHashable]()\n    var tup4 = [AnyHashable]()\n    var tup5 = [AnyHashable]()\n    var tup6 = [AnyHashable]()\n    var tup7 = [AnyHashable]()\n    var tup8 = [AnyHashable]()\n    var tup9 = [AnyHashable]()\n    var tup10 = [AnyHashable]()\n    var tup11 = [AnyHashable]()\n    var tup12 = [AnyHashable]()\n    var tup13 = [AnyHashable]()\n    var tup14 = [AnyHashable]()\n    var tup15 = [AnyHashable]()\n    var tup16 = [AnyHashable]()\n    var tup17 = [AnyHashable]()\n    var tup18 = [AnyHashable]()\n    var tup19 = [AnyHashable]()\n    var tup20 = [AnyHashable]()\n    var tup21 = [AnyHashable"}
{"task_id": "MBSWP/377", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove all occurrences of a character in a given string.\n *\n * >>> removeChar(\"aba\", \"a\")\n * \"b\"\n * >>> removeChar(\"toggle\", \"g\")\n * \"tole\"\n * >>> removeChar(\"aabbc\", \"b\")\n * \"aac\"\n */\nfunc removeChar(s : String, c : String) -> String {\n    var result = \"\"\n    for i in 0..<s.count {\n        if s[i] != c {\n            result += s[i]\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove all occurrences of a character in a given string.\n *\n * >>> removeChar(\"aba\", \"a\")\n * \"b\"\n * >>> removeChar(\"toggle\", \"g\")\n * \"tole\"\n * >>> removeChar(\"aabbc\", \"b\")\n * \"aac\"\n */\nfunc removeChar(s : String, c : String) -> String {\n    var result = \"\"\n    for i in 0..<s.count {\n        if s[i] != c {\n            result += s[i]\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove all occurrences of a character in a given string.\n *\n * >>> removeChar(\"aba\", \"a\")\n * \"b\"\n * >>> removeChar(\"toggle\", \"g\")\n * \"tole\"\n * >>> removeChar(\"aabbc\", \"b\")\n * \"aac\"\n */\nfunc removeChar(s : String, c : String) -> String {\n    var result = \"\"\n    for i in 0..<s.count {\n        if s[i] != c {\n            result += s[i]\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove all occurrences of a character in a given string.\n *\n * >>> remove"}
{"task_id": "MBSWP/378", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to shift last element to first position in the given list.\n *\n * >>> moveFirst([1, 2, 3, 4])\n * [4, 1, 2, 3]\n * >>> moveFirst([0, 1, 2, 3])\n * [3, 0, 1, 2]\n * >>> moveFirst([9, 8, 7, 1])\n * [1, 9, 8, 7]\n */\nfunc moveFirst(testList : [Int]) -> [Int] {\n    var testList = testList\n    var firstElement = testList.popLast()\n    testList.insert(firstElement, at: 0)\n    return testList\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to shift first element to last position in the given list.\n *\n * >>> moveLast([1, 2, 3, 4])\n * [2, 3, 4, 1]\n * >>> moveLast([0, 1, 2, 3])\n * [1, 2, 3, 0]\n * >>> moveLast([9, 8, 7, 1])\n * [8, 9, 1, 7]\n */\nfunc moveLast(testList : [Int]) -> [Int] {\n    var testList = testList\n    var lastElement = testList.popFirst()\n    testList.append(lastElement)\n    return testList\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to swap first two elements in the given list.\n *\n * >>> swapFirstTwo([1, 2, 3, 4])\n * [2, 1, 3, 4]\n * >>> swapFirstTwo([0, 1, 2, 3])\n * [1, 0, 2, 3]\n * >>> swapFirstTwo([9, 8, 7, 1])\n * [8, 9, 7, 1]\n */\nfunc swapFirstTwo(testList : [Int]) -> [Int] {\n    var testList = testList\n    var firstElement = testList.popFirst()\n    var secondElement = testList.popFirst()\n    testList.insert"}
{"task_id": "MBSWP/379", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the surface area of a cuboid.\n *\n * >>> surfaceareaCuboid(1, 2, 3)\n * 22\n * >>> surfaceareaCuboid(5, 7, 9)\n * 286\n * >>> surfaceareaCuboid(10, 15, 21)\n * 1350\n */\nfunc surfaceareaCuboid(l : Int, w : Int, h : Int) -> Int {\n    return 2 * (l * w + w * h + h * l)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cuboid.\n *\n * >>> volumeCuboid(1, 2, 3)\n * 6\n * >>> volumeCuboid(5, 7, 9)\n * 126\n * >>> volumeCuboid(10, 15, 21)\n * 1890\n */\nfunc volumeCuboid(l : Int, w : Int, h : Int) -> Int {\n    return l * w * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the surface area of a cylinder.\n *\n * >>> surfaceareaCylinder(1, 2)\n * 12\n * >>> surfaceareaCylinder(5, 7)\n * 154\n * >>> surfaceareaCylinder(10, 15)\n * 1260\n */\nfunc surfaceareaCylinder(r : Int, h : Int) -> Int {\n    return 2 * (PI * r * r + PI * r * h + PI * r * r * h)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cylinder.\n *\n * >>> volumeCylinder(1, 2)\n * 2\n * >>> volumeCylinder(5, 7)\n * 78\n * >>> volumeCylinder(10, 15)\n * 1570\n */\nfunc volumeCylinder(r : Int, h : Int) -> Int {\n    return PI * r * r * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * *"}
{"task_id": "MBSWP/380", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to generate a two-dimensional array.\n *\n * >>> multiList(3, 4)\n * [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n * >>> multiList(5, 7)\n * [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n * >>> multiList(10, 15)\n * [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]\n */\nfunc multiList(rownum : Int, colnum : Int) -> [[Int]] {\n    var result = [[Int]]()\n"}
{"task_id": "MBSWP/381", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of lists by a given index of the inner list.\n *\n * >>> indexOnInnerList([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 0)\n * [[\"Beau Turnbull\", 94, 98], [\"Brady Kent\", 97, 96], [\"Greyson Fulton\", 98, 99], [\"Wyatt Knott\", 91, 94]]\n * >>> indexOnInnerList([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 1)\n * [[\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98], [\"Brady Kent\", 97, 96], [\"Greyson Fulton\", 98, 99]]\n * >>> indexOnInnerList([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 2)\n * [[\"Wyatt Knott\", 91, 94], [\"Brady Kent\", 97, 96], [\"Beau Turnbull\", 94, 98], [\"Greyson Fulton\", 98, 99]]\n */\nfunc indexOnInnerList(listData : [[AnyHashable]], indexNo : Int) -> [[AnyHashable]] {\n    var sortedList : [[AnyHashable]] = []\n    for i in 0..<listData.count {\n        sortedList.append(listData[i][indexNo])\n    }\n    return sortedList\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of lists by a given index of the inner list.\n *\n * >>> indexOnInnerList([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 0)\n * [[\"Beau Turnbull\", 94, 98], [\"Brady Kent\", 97, 96], [\"Greyson Fulton\", 98"}
{"task_id": "MBSWP/382", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the number of rotations in a circularly sorted array.\n *\n * >>> findRotationCount([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\n * 3\n * >>> findRotationCount([8, 9, 10, 2, 5, 6])\n * 3\n * >>> findRotationCount([2, 5, 6, 8, 9, 10])\n * 0\n */\nfunc findRotationCount(a : [Int]) -> Int {\n    var count = 0\n    var i = 0\n    var j = 0\n    while i < a.count {\n        if a[i] == a[j] {\n            i += 1\n            j += 1\n        } else {\n            count += 1\n            i += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/383", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to toggle all odd bits of a given number.\n *\n * >>> evenBitToggleNumber(10)\n * 15\n * >>> evenBitToggleNumber(20)\n * 1\n * >>> evenBitToggleNumber(30)\n * 11\n */\nfunc evenBitToggleNumber(n : Int) -> Int {\n    var result = n\n    for i in stride(from: 0, through: n, by: 2) {\n        result ^= 1 << i\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/384", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the frequency of the smallest value in a given array.\n *\n * >>> frequencyOfSmallest(5, [1, 2, 3, 4, 3])\n * 1\n * >>> frequencyOfSmallest(7, [3, 1, 2, 5, 6, 2, 3])\n * 1\n * >>> frequencyOfSmallest(7, [3, 3, 6, 3, 7, 4, 9])\n * 3\n */\nfunc frequencyOfSmallest(n : Int, arr : [Int]) -> Int {\n    var smallest = arr[0]\n    var frequency = 1\n    for i in 1..<arr.count {\n        if arr[i] < smallest {\n            smallest = arr[i]\n            frequency = 1\n        } else if arr[i] == smallest {\n            frequency += 1\n        }\n    }\n    return frequency\n}\n"}
{"task_id": "MBSWP/385", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n'th perrin number using recursion.\n *\n * >>> getPerrin(9)\n * 12\n * >>> getPerrin(4)\n * 2\n * >>> getPerrin(6)\n * 5\n */\nfunc getPerrin(n : Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    return getPerrin(n - 1) + getPerrin(n - 2)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n'th perrin number using iteration.\n *\n * >>> getPerrinIteration(9)\n * 12\n * >>> getPerrinIteration(4)\n * 2\n * >>> getPerrinIteration(6)\n * 5\n */\nfunc getPerrinIteration(n : Int) -> Int {\n    var a = 1\n    var b = 1\n    var c = 0\n    for i in 1...n {\n        c = a + b\n        a = b\n        b = c\n    }\n    return c\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n'th perrin number using a loop.\n *\n * >>> getPerrinLoop(9)\n * 12\n * >>> getPerrinLoop(4)\n * 2\n * >>> getPerrinLoop(6)\n * 5\n */\nfunc getPerrinLoop(n : Int) -> Int {\n    var a = 1\n    var b = 1\n    var c = 0\n    for i in 1...n {\n        c = a + b\n        a = b\n        b = c\n    }\n    return c\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n'th perrin number using a loop.\n *\n * >>> getPerrinLoop(9)\n * 12\n * >>> getPerrinLoop(4)\n * 2\n * >>> getPerrinLoop(6)\n * 5\n */\nfunc getPerrinLoop(n : Int)"}
{"task_id": "MBSWP/386", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n *\n * >>> swapCount(\"[]][][\")\n * 2\n * >>> swapCount(\"[[][]]\")\n * 0\n * >>> swapCount(\"[[][]]][\")\n * 1\n */\nfunc swapCount(s : String) -> Int {\n    var count = 0\n    var stack = [Character]()\n    for c in s {\n        if stack.isEmpty {\n            stack.append(c)\n        } else {\n            if stack.last == '[' && c == ']' {\n                stack.popLast()\n            } else if stack.last == ']' && c == '[' {\n                stack.popLast()\n            } else {\n                stack.append(c)\n            }\n        }\n    }\n    return stack.count\n}\n"}
{"task_id": "MBSWP/387", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the hexadecimal number is even or odd.\n *\n * >>> evenOrOdd(\"AB3454D\")\n * \"Odd\"\n * >>> evenOrOdd(\"ABC\")\n * \"Even\"\n * >>> evenOrOdd(\"AAD\")\n * \"Odd\"\n */\nfunc evenOrOdd(n : String) -> String {\n    var even = true\n    for i in 0..<n.count {\n        if n[i] == \"A\" || n[i] == \"B\" || n[i] == \"C\" {\n            even = false\n        }\n    }\n    if even {\n        return \"Even\"\n    } else {\n        return \"Odd\"\n    }\n}\n\n// Test\nevenOrOdd(\"AB3454D\")\nevenOrOdd(\"ABC\")\nevenOrOdd(\"AAD\")\n"}
{"task_id": "MBSWP/388", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the highest power of 2 that is less than or equal to n.\n *\n * >>> highestPowerOf2(10)\n * 8\n * >>> highestPowerOf2(19)\n * 16\n * >>> highestPowerOf2(32)\n * 32\n */\nfunc highestPowerOf2(n : Int) -> Int {\n    var n = n\n    var result = 1\n    while result < n {\n        result *= 2\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/389", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n'th lucas number.\n *\n * >>> findLucas(9)\n * 76\n * >>> findLucas(4)\n * 7\n * >>> findLucas(3)\n * 4\n */\nfunc findLucas(n : Int) -> Int {\n    if n == 0 {\n        return 2\n    }\n    if n == 1 {\n        return 1\n    }\n    return findLucas(n - 1) + findLucas(n - 2)\n}\n"}
{"task_id": "MBSWP/390", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to insert a given string at the beginning of all items in a list.\n *\n * >>> addString([1, 2, 3, 4], \"temp{0}\")\n * [\"temp1\", \"temp2\", \"temp3\", \"temp4\"]\n * >>> addString([\"a\", \"b\", \"c\", \"d\"], \"python{0}\")\n * [\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"]\n * >>> addString([5, 6, 7, 8], \"string{0}\")\n * [\"string5\", \"string6\", \"string7\", \"string8\"]\n */\nfunc addString(list : [AnyHashable], string : String) -> [String] {\n    var result = [String]()\n    for item in list {\n        result.append(string.replacingOccurrences(of: \"{0}\", with: item))\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to insert a given string at the end of all items in a list.\n *\n * >>> addString([1, 2, 3, 4], \"temp{0}\")\n * [\"temp1\", \"temp2\", \"temp3\", \"temp4\"]\n * >>> addString([\"a\", \"b\", \"c\", \"d\"], \"python{0}\")\n * [\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"]\n * >>> addString([5, 6, 7, 8], \"string{0}\")\n * [\"string5\", \"string6\", \"string7\", \"string8\"]\n */\nfunc addString(list : [AnyHashable], string : String) -> [String] {\n    var result = [String]()\n    for item in list {\n        result.append(string.replacingOccurrences(of: \"{0}\", with: item))\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to insert a given string at the beginning of all items in a list.\n *\n * >>> addString([1"}
{"task_id": "MBSWP/391", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert more than one list to nested dictionary.\n *\n * >>> convertListDictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92])\n * [[\"S001\" : [\"Adina Park\" : 85]], [\"S002\" : [\"Leyton Marsh\" : 98]], [\"S003\" : [\"Duncan Boyle\" : 89]], [\"S004\" : [\"Saim Richards\" : 92]]]\n * >>> convertListDictionary([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400])\n * [[\"abc\" : [\"python\" : 100]], [\"def\" : [\"program\" : 200]], [\"ghi\" : [\"language\" : 300]], [\"jkl\" : [\"programs\" : 400]]]\n * >>> convertListDictionary([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40])\n * [[\"A1\" : [\"java\" : 10]], [\"A2\" : [\"C\" : 20]], [\"A3\" : [\"C++\" : 30]], [\"A4\" : [\"DBMS\" : 40]]]\n */\nfunc convertListDictionary(l1 : [String], l2 : [String], l3 : [Int]) -> [[String: [String: Int]]] {\n    var result : [[String: [String: Int]]] = []\n    for i in 0..<l1.count {\n        var temp : [String: [String: Int]] = []\n        temp[l1[i]] = [l2[i] : l3[i]]\n        result.append(temp)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert more than one list to nested dictionary.\n *\n * >>> convertListDictionary([\"S001\", \""}
{"task_id": "MBSWP/392", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n *\n * >>> getMaxSum(60)\n * 106\n * >>> getMaxSum(10)\n * 12\n * >>> getMaxSum(2)\n * 2\n */\nfunc getMaxSum(n : Int) -> Int {\n    if n <= 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 7\n    }\n    if n == 5 {\n        return 11\n    }\n    if n == 6 {\n        return 16\n    }\n    if n == 7 {\n        return 22\n    }\n    if n == 8 {\n        return 28\n    }\n    if n == 9 {\n        return 35\n    }\n    if n == 10 {\n        return 43\n    }\n    if n == 11 {\n        return 52\n    }\n    if n == 12 {\n        return 62\n    }\n    if n == 13 {\n        return 73\n    }\n    if n == 14 {\n        return 85\n    }\n    if n == 15 {\n        return 98\n    }\n    if n == 16 {\n        return 112\n    }\n    if n == 17 {\n        return 127\n    }\n    if n == 18 {\n        return 143\n    }\n    if n == 19 {\n        return 160\n    }\n    if n == 20 {\n        return 178\n    }\n    if n == 21 {\n        return 197\n    }\n    if n == 22 {\n        return 217\n    }\n    if n == 23 {\n        return 238\n    }\n    if n == 24 {\n        return 260\n    }\n    if n == 25 {\n        return 283\n    }\n    if n == 26 {\n        return 307\n    }\n    if n == 27 {\n        return 332"}
{"task_id": "MBSWP/393", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the list with maximum length using lambda function.\n *\n * >>> maxLengthList([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n * [3, [13, 15, 17]]\n * >>> maxLengthList([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])\n * [5, [1, 2, 3, 4, 5]]\n * >>> maxLengthList([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]])\n * [4, [6, 7, 8, 9]]\n */\nfunc maxLengthList(inputList : [[Int]]) -> [AnyHashable] {\n    var maxLength = 0\n    var maxList = [Int]()\n    for list in inputList {\n        if list.count > maxLength {\n            maxLength = list.count\n            maxList = list\n        }\n    }\n    return [maxLength, maxList]\n}\n\nprint(maxLengthList([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]))\nprint(maxLengthList([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]))\nprint(maxLengthList([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]]))\n"}
{"task_id": "MBSWP/394", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if given tuple is distinct or not.\n *\n * >>> checkDistinct([1, 4, 5, 6, 1, 4])\n * false\n * >>> checkDistinct([1, 4, 5, 6])\n * true\n * >>> checkDistinct([2, 3, 4, 5, 6])\n * true\n */\nfunc checkDistinct(testTup : [Int]) -> Bool {\n    var distinct = true\n    for i in 0..<testTup.count {\n        for j in i+1..<testTup.count {\n            if testTup[i] == testTup[j] {\n                distinct = false\n            }\n        }\n    }\n    return distinct\n}\n"}
{"task_id": "MBSWP/395", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first non-repeated character in a given string.\n *\n * >>> firstNonRepeatingCharacter(\"abcabc\")\n * \"none\"\n * >>> firstNonRepeatingCharacter(\"abc\")\n * \"a\"\n * >>> firstNonRepeatingCharacter(\"ababc\")\n * \"c\"\n */\nfunc firstNonRepeatingCharacter(str1 : String) -> String {\n    var str = str1\n    var result = \"none\"\n    var count = 0\n    var index = 0\n    var char = \"\"\n    var char1 = \"\"\n    var char2 = \"\"\n    var char3 = \"\"\n    var char4 = \"\"\n    var char5 = \"\"\n    var char6 = \"\"\n    var char7 = \"\"\n    var char8 = \"\"\n    var char9 = \"\"\n    var char10 = \"\"\n    var char11 = \"\"\n    var char12 = \"\"\n    var char13 = \"\"\n    var char14 = \"\"\n    var char15 = \"\"\n    var char16 = \"\"\n    var char17 = \"\"\n    var char18 = \"\"\n    var char19 = \"\"\n    var char20 = \"\"\n    var char21 = \"\"\n    var char22 = \"\"\n    var char23 = \"\"\n    var char24 = \"\"\n    var char25 = \"\"\n    var char26 = \"\"\n    var char27 = \"\"\n    var char28 = \"\"\n    var char29 = \"\"\n    var char30 = \"\"\n    var char31 = \"\"\n    var char32 = \"\"\n    var char33 = \"\"\n    var char34 = \"\"\n    var char35 = \"\"\n    var char36 = \"\"\n    var char37 = \"\"\n    var char38 = \"\"\n    var char39 = \"\"\n    var char40 = \"\"\n    var char41 = \"\"\n    var char42 = \"\"\n    var char43 = \"\"\n    var char44 = \"\"\n    var char45 = \"\"\n    var char46 = \"\"\n    var char47 = \"\"\n    var char48 = \"\"\n    var char49 = \"\"\n    var char50 = \"\"\n    var char51 = \"\"\n    var char52 = \"\"\n    var char53 = \"\"\n"}
{"task_id": "MBSWP/396", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given string starts and ends with the same character or not using regex.\n *\n * >>> checkChar(\"abba\")\n * \"Valid\"\n * >>> checkChar(\"a\")\n * \"Valid\"\n * >>> checkChar(\"abcd\")\n * \"Invalid\"\n */\nfunc checkChar(string : String) -> String {\n    let regex = \"^\\(string)\\(string)$\"\n    let regex = NSRegularExpression(pattern: regex, options: [])\n    let matches = regex.matchesInString(string, options: [])\n    if matches.count > 0 {\n        return \"Valid\"\n    }\n    return \"Invalid\"\n}\n"}
{"task_id": "MBSWP/397", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the median of three specific numbers.\n *\n * >>> medianNumbers(25, 55, 65)\n * 55.0\n * >>> medianNumbers(20, 10, 30)\n * 20.0\n * >>> medianNumbers(15, 45, 75)\n * 45.0\n */\nfunc medianNumbers(a : Int, b : Int, c : Int) -> Double {\n    var arr = [a, b, c]\n    arr.sort()\n    return Double(arr[1])\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the median of five specific numbers.\n *\n * >>> medianNumbers(25, 55, 65, 75, 85)\n * 60.0\n * >>> medianNumbers(20, 10, 30, 40, 50)\n * 25.0\n * >>> medianNumbers(15, 45, 75, 85, 95)\n * 70.0\n */\nfunc medianNumbers(a : Int, b : Int, c : Int, d : Int, e : Int) -> Double {\n    var arr = [a, b, c, d, e]\n    arr.sort()\n    return Double(arr[2])\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the median of seven specific numbers.\n *\n * >>> medianNumbers(25, 55, 65, 75, 85, 95, 105)\n * 60.0\n * >>> medianNumbers(20, 10, 30, 40, 50, 60, 70)\n * 30.0\n * >>> medianNumbers(15, 45, 75, 85, 95, 105, 115)\n * 70.0\n */\nfunc medianNumbers(a : Int, b : Int, c : Int, d : Int, e : Int, f : Int, g : Int) -> Double {\n    var arr = [a, b, c, d, e, f, g]\n    arr.sort()\n    return Double(arr[3])\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the median of ten specific"}
{"task_id": "MBSWP/398", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to compute the sum of digits of each number of a given list.\n *\n * >>> sumOfDigits([10, 2, 56])\n * 14\n * >>> sumOfDigits([[10, 20, 4, 5, \"b\", 70, \"a\"]])\n * 19\n * >>> sumOfDigits([10, 20, -4, 5, -70])\n * 19\n */\nfunc sumOfDigits(nums : [AnyHashable]) -> Int {\n    var sum = 0\n    for num in nums {\n        if let num = num as? Int {\n            sum += num\n        } else if let num = num as? String {\n            sum += num.map { Int($0)! }.reduce(0, +)\n        }\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/399", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform the mathematical bitwise xor operation across the given tuples.\n *\n * >>> bitwiseXor([10, 4, 6, 9], [5, 2, 3, 3])\n * [15, 6, 5, 10]\n * >>> bitwiseXor([11, 5, 7, 10], [6, 3, 4, 4])\n * [13, 6, 3, 14]\n * >>> bitwiseXor([12, 6, 8, 11], [7, 4, 5, 6])\n * [11, 2, 13, 13]\n */\nfunc bitwiseXor(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<testTup1.count {\n        result.append(testTup1[i] ^ testTup2[i])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform the mathematical bitwise xor operation across the given tuples.\n *\n * >>> bitwiseXor([10, 4, 6, 9], [5, 2, 3, 3])\n * [15, 6, 5, 10]\n * >>> bitwiseXor([11, 5, 7, 10], [6, 3, 4, 4])\n * [13, 6, 3, 14]\n * >>> bitwiseXor([12, 6, 8, 11], [7, 4, 5, 6])\n * [11, 2, 13, 13]\n */\nfunc bitwiseXor(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<testTup1.count {\n        result.append(testTup1[i] ^ testTup2[i])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform the mathematical bitwise xor operation across the given tuples.\n *\n * >>> bitwise"}
{"task_id": "MBSWP/400", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the frequency of unique tuples in the given list order irrespective.\n *\n * >>> extractFreq([[3, 4], [1, 2], [4, 3], [5, 6]])\n * 3\n * >>> extractFreq([[4, 15], [2, 3], [5, 4], [6, 7]])\n * 4\n * >>> extractFreq([[5, 16], [2, 3], [6, 5], [6, 9]])\n * 4\n */\nfunc extractFreq(testList : [[Int]]) -> Int {\n    var testList = testList\n    var testList2 = testList\n    var testList3 = testList\n    var testList4 = testList\n    var testList5 = testList\n    var testList6 = testList\n    var testList7 = testList\n    var testList8 = testList\n    var testList9 = testList\n    var testList10 = testList\n    var testList11 = testList\n    var testList12 = testList\n    var testList13 = testList\n    var testList14 = testList\n    var testList15 = testList\n    var testList16 = testList\n    var testList17 = testList\n    var testList18 = testList\n    var testList19 = testList\n    var testList20 = testList\n    var testList21 = testList\n    var testList22 = testList\n    var testList23 = testList\n    var testList24 = testList\n    var testList25 = testList\n    var testList26 = testList\n    var testList27 = testList\n    var testList28 = testList\n    var testList29 = testList\n    var testList30 = testList\n    var testList31 = testList\n    var testList32 = testList\n    var testList33 = testList\n    var testList34 = testList\n    var testList35 = testList\n    var testList36 = testList\n    var testList37 = testList\n    var testList38 = testList\n    var testList39 = testList\n    var testList40 = testList\n    var"}
{"task_id": "MBSWP/401", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n *\n * >>> addNestedTuples([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n * [[7, 10], [7, 14], [3, 10], [8, 13]]\n * >>> addNestedTuples([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])\n * [[9, 12], [9, 16], [5, 12], [10, 15]]\n * >>> addNestedTuples([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])\n * [[11, 14], [11, 18], [7, 14], [12, 17]]\n */\nfunc addNestedTuples(testTup1 : [[Int]], testTup2 : [[Int]]) -> [[Int]] {\n    var result : [[Int]] = []\n    for i in 0..<testTup1.count {\n        var temp : [Int] = []\n        for j in 0..<testTup1[i].count {\n            temp.append(testTup1[i][j] + testTup2[i][j])\n        }\n        result.append(temp)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform index wise subtraction of tuple elements in the given two nested tuples.\n *\n * >>> subtractNestedTuples([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n * [[-5, 2], [1, 2], [0, 8], [6, 5]]\n * >>> subtractNested"}
{"task_id": "MBSWP/402", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to compute the value of ncr%p.\n *\n * >>> ncrModp(10, 2, 13)\n * 6\n * >>> ncrModp(15, 12, 43)\n * 25\n * >>> ncrModp(17, 9, 18)\n * 10\n */\nfunc ncrModp(n : Int, r : Int, p : Int) -> Int {\n    var ncr = 1\n    var rcr = 1\n    var i = 1\n    while i <= r {\n        ncr *= n\n        ncr %= p\n        rcr *= i\n        rcr %= p\n        i += 1\n    }\n    return ncr\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to compute the value of ncr%p.\n *\n * >>> ncrModp(10, 2, 13)\n * 6\n * >>> ncrModp(15, 12, 43)\n * 25\n * >>> ncrModp(17, 9, 18)\n * 10\n */\nfunc ncrModp(n : Int, r : Int, p : Int) -> Int {\n    var ncr = 1\n    var rcr = 1\n    var i = 1\n    while i <= r {\n        ncr *= n\n        ncr %= p\n        rcr *= i\n        rcr %= p\n        i += 1\n    }\n    return ncr\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to compute the value of ncr%p.\n *\n * >>> ncrModp(10, 2, 13)\n * 6\n * >>> ncrModp(15, 12, 43)\n * 25\n * >>> ncrModp(17, 9, 18)\n * 10\n */\nfunc ncrModp(n : Int, r : Int, p : Int) -> Int {\n    var ncr = 1\n    var rcr = 1\n    var i = 1\n    while i <= r {\n        ncr *= n\n        ncr %= p"}
{"task_id": "MBSWP/403", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a url is valid or not using regex.\n *\n * >>> isValidUrl(\"https:\\/\\/www.google.com\")\n * true\n * >>> isValidUrl(\"https:/www.gmail.com\")\n * false\n * >>> isValidUrl(\"https:\\/\\/ www.redit.com\")\n * false\n */\nfunc isValidUrl(str : String) -> Bool {\n    let regex = \"^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$\"\n    let url = str.addingEscapingCharacters(to: .urlHostAllowed)\n    let regex = try? NSRegularExpression(pattern: regex, options: [])\n    let match = regex?.firstMatch(in: url, options: [], range: NSRange(location: 0, length: url.count))\n    return match != nil\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a string is a palindrome or not.\n *\n * >>> isPalindrome(\"madam\")\n * false\n * >>> isPalindrome(\"madam\")\n * true\n */\nfunc isPalindrome(str : String) -> Bool {\n    let reversed = str.addingEscapingCharacters(to: .urlHostAllowed).reversed()\n    return str == reversed\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a string is a palindrome or not.\n *\n * >>> isPalindrome(\"madam\")\n * false\n * >>> isPalindrome(\"madam\")\n * true\n */\nfunc isPalindrome(str : String) -> Bool {\n    let reversed = str.addingEscapingCharacters(to: .urlHostAllowed).reversed()\n    return str == reversed\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a string is a palindrome or not.\n *"}
{"task_id": "MBSWP/404", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum of two numbers.\n *\n * >>> minimum(1, 2)\n * 1\n * >>> minimum(-5, -4)\n * -5\n * >>> minimum(0, 0)\n * 0\n */\nfunc minimum(a : Int, b : Int) -> Int {\n    if a < b {\n        return a\n    }\n    return b\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum of two numbers.\n *\n * >>> maximum(1, 2)\n * 2\n * >>> maximum(-5, -4)\n * -4\n * >>> maximum(0, 0)\n * 0\n */\nfunc maximum(a : Int, b : Int) -> Int {\n    if a > b {\n        return a\n    }\n    return b\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum of three numbers.\n *\n * >>> minimum(1, 2, 3)\n * 1\n * >>> minimum(-5, -4, -3)\n * -5\n * >>> minimum(0, 0, 0)\n * 0\n */\nfunc minimum(a : Int, b : Int, c : Int) -> Int {\n    return minimum(minimum(a, b), c)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum of three numbers.\n *\n * >>> maximum(1, 2, 3)\n * 3\n * >>> maximum(-5, -4, -3)\n * -3\n * >>> maximum(0, 0, 0)\n * 0\n */\nfunc maximum(a : Int, b : Int, c : Int) -> Int {\n    return maximum(maximum(a, b), c)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum of four numbers.\n *\n * >>> minimum(1, 2, 3, 4)\n * 1\n * >>> minimum(-5, -4, -"}
{"task_id": "MBSWP/405", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether an element exists within a tuple.\n *\n * >>> checkTuplex([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"r\")\n * true\n * >>> checkTuplex([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"5\")\n * false\n * >>> checkTuplex([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], 3)\n * true\n */\nfunc checkTuplex(tuplex : [AnyHashable], tuple1 : AnyHashable) -> Bool {\n    for element in tuplex {\n        if element == tuple1 {\n            return true\n        }\n    }\n    return false\n}\n"}
{"task_id": "MBSWP/406", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the parity of a given number.\n *\n * >>> findParity(12)\n * \"Even Parity\"\n * >>> findParity(7)\n * \"Odd Parity\"\n * >>> findParity(10)\n * \"Even Parity\"\n */\nfunc findParity(x : Int) -> String {\n    if x % 2 == 0 {\n        return \"Even Parity\"\n    } else {\n        return \"Odd Parity\"\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all the digits of a given number.\n *\n * >>> findSumOfDigits(12)\n * 3\n * >>> findSumOfDigits(7)\n * 4\n * >>> findSumOfDigits(10)\n * 2\n */\nfunc findSumOfDigits(x : Int) -> Int {\n    var sum = 0\n    while x > 0 {\n        sum += x % 10\n        x /= 10\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all the digits of a given number.\n *\n * >>> findSumOfDigits(12)\n * 3\n * >>> findSumOfDigits(7)\n * 4\n * >>> findSumOfDigits(10)\n * 2\n */\nfunc findSumOfDigits(x : Int) -> Int {\n    var sum = 0\n    while x > 0 {\n        sum += x % 10\n        x /= 10\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all the digits of a given number.\n *\n * >>> findSumOfDigits(12)\n * 3\n * >>> findSumOfDigits(7)\n * 4\n * >>> findSumOfDigits(10)\n * 2\n */\nfunc findSumOfDigits(x : Int) -> Int {\n    var sum = 0\n    while x >"}
{"task_id": "MBSWP/407", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to create the next bigger number by rearranging the digits of a given number.\n *\n * >>> rearrangeBigger(12)\n * 21\n * >>> rearrangeBigger(10)\n * false\n * >>> rearrangeBigger(102)\n * 120\n */\nfunc rearrangeBigger(n : Int) -> AnyHashable {\n    var n = n\n    var result = 0\n    var digits = Array(n.digits)\n    var i = digits.count - 1\n    while i >= 0 {\n        if digits[i] < 9 {\n            digits[i] += 1\n            break\n        }\n        digits[i] = 0\n        i -= 1\n    }\n    if i < 0 {\n        return false\n    }\n    for digit in digits {\n        result *= 10\n        result += digit\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to create the next smaller number by rearranging the digits of a given number.\n *\n * >>> rearrangeSmaller(12)\n * 21\n * >>> rearrangeSmaller(10)\n * false\n * >>> rearrangeSmaller(102)\n * 120\n */\nfunc rearrangeSmaller(n : Int) -> AnyHashable {\n    var n = n\n    var result = 0\n    var digits = Array(n.digits)\n    var i = digits.count - 1\n    while i >= 0 {\n        if digits[i] > 0 {\n            digits[i] -= 1\n            break\n        }\n        digits[i] = 9\n        i -= 1\n    }\n    if i < 0 {\n        return false\n    }\n    for digit in digits {\n        result *= 10\n        result += digit\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to create the next bigger number by rearranging the digits of a given number.\n *\n * >>> rearrangeBigger(12)\n * 21\n * >>> rearrangeBigger(10)\n * false\n * >>> rearr"}
{"task_id": "MBSWP/408", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n *\n * >>> kSmallestPairs([1, 3, 7], [2, 4, 6], 2)\n * [[1, 2], [1, 4]]\n * >>> kSmallestPairs([1, 3, 7], [2, 4, 6], 1)\n * [[1, 2]]\n * >>> kSmallestPairs([1, 3, 7], [2, 4, 6], 7)\n * [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n */\nfunc kSmallestPairs(nums1 : [Int], nums2 : [Int], k : Int) -> [[Int]] {\n    var result = [[Int]]()\n    if nums1.count == 0 || nums2.count == 0 || k == 0 {\n        return result\n    }\n    var nums1Copy = nums1\n    var nums2Copy = nums2\n    nums1Copy.sort()\n    nums2Copy.sort()\n    var i = 0\n    var j = 0\n    while i < nums1Copy.count && j < nums2Copy.count && k > 0 {\n        if nums1Copy[i] + nums2Copy[j] < nums1Copy[i + 1] + nums2Copy[j + 1] {\n            result.append([nums1Copy[i], nums2Copy[j]])\n            i += 1\n            j += 1\n            k -= 1\n        } else if nums1Copy[i] + nums2Copy[j] < nums1Copy[i + 1] + nums2Copy[j] {\n            i += 1\n        } else {\n            j += 1\n        }\n    }\n    return result\n}\n\n/**\n * You are given a list of numbers, and you need to find the sum of the smallest and the largest number in the list.\n *\n * >>> smallestAndLargest([1, 2, 3"}
{"task_id": "MBSWP/409", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum product from the pairs of tuples within a given list.\n *\n * >>> minProductTuple([[2, 7], [2, 6], [1, 8], [4, 9]])\n * 8\n * >>> minProductTuple([[10, 20], [15, 2], [5, 10]])\n * 30\n * >>> minProductTuple([[11, 44], [10, 15], [20, 5], [12, 9]])\n * 100\n */\nfunc minProductTuple(list1 : [[Int]]) -> Int {\n    var min = Int.max\n    for i in 0..<list1.count {\n        for j in i+1..<list1.count {\n            min = min(min, list1[i][0] * list1[j][1], list1[i][1] * list1[j][0])\n        }\n    }\n    return min\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum product from the pairs of tuples within a given list.\n *\n * >>> minProductTuple([[2, 7], [2, 6], [1, 8], [4, 9]])\n * 8\n * >>> minProductTuple([[10, 20], [15, 2], [5, 10]])\n * 30\n * >>> minProductTuple([[11, 44], [10, 15], [20, 5], [12, 9]])\n * 100\n */\nfunc minProductTuple(list1 : [[Int]]) -> Int {\n    var min = Int.max\n    for i in 0..<list1.count {\n        for j in i+1..<list1.count {\n            min = min(min, list1[i][0] * list1[j][1], list1[i][1] * list1[j][0])\n        }\n    }\n    return min\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum product from the pairs of tuples within a given"}
{"task_id": "MBSWP/410", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum value in a given heterogeneous list.\n *\n * >>> minVal([\"Python\", 3, 2, 4, 5, \"version\"])\n * 2\n * >>> minVal([\"Python\", 15, 20, 25])\n * 15\n * >>> minVal([\"Python\", 30, 20, 40, 50, \"version\"])\n * 20\n */\nfunc minVal(listval : [AnyHashable]) -> Int {\n    var minval = listval[0]\n    for i in 1..<listval.count {\n        if listval[i] < minval {\n            minval = listval[i]\n        }\n    }\n    return minval\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum value in a given heterogeneous list.\n *\n * >>> maxVal([\"Python\", 3, 2, 4, 5, \"version\"])\n * 5\n * >>> maxVal([\"Python\", 15, 20, 25])\n * 25\n * >>> maxVal([\"Python\", 30, 20, 40, 50, \"version\"])\n * 50\n */\nfunc maxVal(listval : [AnyHashable]) -> Int {\n    var maxval = listval[0]\n    for i in 1..<listval.count {\n        if listval[i] > maxval {\n            maxval = listval[i]\n        }\n    }\n    return maxval\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum and maximum value in a given heterogeneous list.\n *\n * >>> minMaxVal([\"Python\", 3, 2, 4, 5, \"version\"])\n * (2, 5)\n * >>> minMaxVal([\"Python\", 15, 20, 25])\n * (15, 25)\n * >>> minMaxVal([\"Python\", 30, 20, 40, 50, \"version\"])\n * (20, 50)\n */\nfunc minMaxVal(listval : [AnyHashable]) -> (Int, Int) {\n    var minval = listval"}
{"task_id": "MBSWP/411", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given snake case string to camel case string by using regex.\n *\n * >>> snakeToCamel(\"android_tv\")\n * \"AndroidTv\"\n * >>> snakeToCamel(\"google_pixel\")\n * \"GooglePixel\"\n * >>> snakeToCamel(\"apple_watch\")\n * \"AppleWatch\"\n */\nfunc snakeToCamel(word : String) -> String {\n    let regex = try! NSRegularExpression(pattern: \"([_][a-z])\", options: [])\n    let matches = regex.matches(in: word, options: [], range: NSMakeRange(0, word.count))\n    var result = word\n    for match in matches {\n        let range = match.range\n        let replacement = String(match.replacementString!)\n        result = result.replacingCharacters(in: range, with: replacement)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given camel case string to snake case string by using regex.\n *\n * >>> camelToSnake(\"AndroidTv\")\n * \"android_tv\"\n * >>> camelToSnake(\"GooglePixel\")\n * \"google_pixel\"\n * >>> camelToSnake(\"AppleWatch\")\n * \"apple_watch\"\n */\nfunc camelToSnake(word : String) -> String {\n    let regex = try! NSRegularExpression(pattern: \"([A-Z])\", options: [])\n    let matches = regex.matches(in: word, options: [], range: NSMakeRange(0, word.count))\n    var result = word\n    for match in matches {\n        let range = match.range\n        let replacement = String(match.replacementString!)\n        result = result.replacingCharacters(in: range, with: replacement)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given snake case string to kebab case string by using regex.\n *\n * >>> snakeToKebab(\"android_tv\")\n * \"android"}
{"task_id": "MBSWP/412", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove odd numbers from a given list.\n *\n * >>> removeOdd([1, 2, 3])\n * [2]\n * >>> removeOdd([2, 4, 6])\n * [2, 4, 6]\n * >>> removeOdd([10, 20, 3])\n * [10, 20]\n */\nfunc removeOdd(l : [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove even numbers from a given list.\n *\n * >>> removeEven([1, 2, 3])\n * [1, 3]\n * >>> removeEven([2, 4, 6])\n * [4, 6]\n * >>> removeEven([10, 20, 30])\n * [10, 20, 30]\n */\nfunc removeEven(l : [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l {\n        if i % 2 != 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove all numbers from a given list that are divisible by 3.\n *\n * >>> removeDivisibleBy3([1, 2, 3])\n * [1, 2]\n * >>> removeDivisibleBy3([2, 4, 6])\n * [2, 4]\n * >>> removeDivisibleBy3([10, 20, 30])\n * [10, 20]\n */\nfunc removeDivisibleBy3(l : [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l {\n        if i % 3 != 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function"}
{"task_id": "MBSWP/413", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the nth element from a given list of tuples.\n *\n * >>> extractNthElement([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 0)\n * [\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"]\n * >>> extractNthElement([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 2)\n * [99, 96, 94, 98]\n * >>> extractNthElement([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 1)\n * [98, 97, 91, 94]\n */\nfunc extractNthElement(list1 : [[AnyHashable]], n : Int) -> [AnyHashable] {\n    var list2 : [AnyHashable] = []\n    for i in 0..<list1.count {\n        list2.append(list1[i][n])\n    }\n    return list2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the nth element from a given list of tuples.\n *\n * >>> extractNthElement([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 0)\n * [\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"]\n * >>> extractNthElement([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wyatt Knott\", 91, 94], [\"Beau Turnbull\", 94, 98]], 2)\n * [99, 96, 94, 98]\n * >>> extractNthElement([[\"Greyson Fulton\", 98, 99], [\"Brady Kent\", 97, 96], [\"Wy"}
{"task_id": "MBSWP/414", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the value exists in a sequence or not.\n *\n * >>> overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9])\n * false\n * >>> overlapping([1, 2, 3], [4, 5, 6])\n * false\n * >>> overlapping([1, 4, 5], [1, 4, 5])\n * true\n */\nfunc overlapping(list1 : [Int], list2 : [Int]) -> Bool {\n    for i in list1 {\n        for j in list2 {\n            if i == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n"}
{"task_id": "MBSWP/415", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find a pair with highest product from a given array of integers.\n *\n * >>> maxProduct([1, 2, 3, 4, 7, 0, 8, 4])\n * [7, 8]\n * >>> maxProduct([0, -1, -2, -4, 5, 0, -6])\n * [-4, -6]\n * >>> maxProduct([1, 2, 3])\n * [2, 3]\n */\nfunc maxProduct(arr : [Int]) -> [Int] {\n    var maxProduct = [arr[0], arr[1]]\n    var maxProductProduct = arr[0] * arr[1]\n    var maxProductIndex = 0\n    var maxProductProductIndex = 0\n    for i in arr.indices.dropFirst() {\n        if arr[i] > maxProduct[0] {\n            maxProduct = [arr[i], maxProduct[1]]\n            maxProductIndex = i\n        } else if arr[i] < maxProduct[0] {\n            maxProduct = [maxProduct[0], arr[i]]\n            maxProductIndex = i\n        }\n        if arr[i] * maxProduct[0] > maxProductProduct {\n            maxProductProduct = arr[i] * maxProduct[0]\n            maxProductProductIndex = i\n        }\n    }\n    return [arr[maxProductIndex], arr[maxProductProductIndex]]\n}\n"}
{"task_id": "MBSWP/416", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n *\n * >>> breaksum(12)\n * 13\n * >>> breaksum(24)\n * 27\n * >>> breaksum(23)\n * 23\n */\nfunc breaksum(n : Int) -> Int {\n    if n < 3 {\n        return n\n    }\n    return n - breaksum(n / 3)\n}\n"}
{"task_id": "MBSWP/417", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find common first element in given list of tuple.\n *\n * >>> groupTuples([[\"x\", \"y\"], [\"x\", \"z\"], [\"w\", \"t\"]])\n * [[\"x\", \"y\", \"z\"], [\"w\", \"t\"]]\n * >>> groupTuples([[\"a\", \"b\"], [\"a\", \"c\"], [\"d\", \"e\"]])\n * [[\"a\", \"b\", \"c\"], [\"d\", \"e\"]]\n * >>> groupTuples([[\"f\", \"g\"], [\"f\", \"g\"], [\"h\", \"i\"]])\n * [[\"f\", \"g\", \"g\"], [\"h\", \"i\"]]\n */\nfunc groupTuples(input : [[String]]) -> [[String]] {\n    var result : [[String]] = []\n    var current : [String] = []\n    for tuple in input {\n        if tuple.count == 0 {\n            result.append(current)\n            current = []\n        } else {\n            current.append(tuple[0])\n        }\n    }\n    result.append(current)\n    return result\n}\n"}
{"task_id": "MBSWP/418", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sublist having maximum length.\n *\n * >>> findMax([[\"A\"], [\"A\", \"B\"], [\"A\", \"B\", \"C\"]])\n * [\"A\", \"B\", \"C\"]\n * >>> findMax([[1], [1, 2], [1, 2, 3]])\n * [1, 2, 3]\n * >>> findMax([[1, 1], [1, 2, 3], [1, 5, 6, 1]])\n * [1, 5, 6, 1]\n */\nfunc findMax(lst : [[AnyHashable]]) -> [AnyHashable] {\n    var max = lst[0]\n    var maxLen = lst[0].count\n    for i in 1..<lst.count {\n        if lst[i].count > maxLen {\n            max = lst[i]\n            maxLen = lst[i].count\n        }\n    }\n    return max\n}\n"}
{"task_id": "MBSWP/419", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n *\n * >>> roundAndSum([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5])\n * 243\n * >>> roundAndSum([5, 2, 9, 24.3, 29])\n * 345\n * >>> roundAndSum([25.0, 56.7, 89.2])\n * 513\n */\nfunc roundAndSum(list1 : [Double]) -> Int {\n    var sum = 0\n    for i in list1 {\n        sum += Int(round(i))\n    }\n    return sum * list1.count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n *\n * >>> roundAndSum([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5])\n * 243\n * >>> roundAndSum([5, 2, 9, 24.3, 29])\n * 345\n * >>> roundAndSum([25.0, 56.7, 89.2])\n * 513\n */\nfunc roundAndSum(list1 : [Double]) -> Int {\n    var sum = 0\n    for i in list1 {\n        sum += Int(round(i))\n    }\n    return sum * list1.count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n *\n * >>> roundAndSum([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5])\n * 243\n * >>> roundAndSum([5, 2, 9, 24.3,"}
{"task_id": "MBSWP/420", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the cube sum of first n even natural numbers.\n *\n * >>> cubeSum(2)\n * 72\n * >>> cubeSum(3)\n * 288\n * >>> cubeSum(4)\n * 800\n */\nfunc cubeSum(n : Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i * i\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/421", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to concatenate each element of tuple by the delimiter.\n *\n * >>> concatenateTuple([\"ID\", \"is\", 4, \"UTS\"])\n * \"ID-is-4-UTS\"\n * >>> concatenateTuple([\"QWE\", \"is\", 4, \"RTY\"])\n * \"QWE-is-4-RTY\"\n * >>> concatenateTuple([\"ZEN\", \"is\", 4, \"OP\"])\n * \"ZEN-is-4-OP\"\n */\nfunc concatenateTuple(testTup : [AnyHashable]) -> String {\n    var result = \"\"\n    for i in 0..<testTup.count {\n        result += \"\\(testTup[i])\"\n        if i != testTup.count - 1 {\n            result += \"-\"\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to concatenate each element of dictionary by the delimiter.\n *\n * >>> concatenateDict([\"ID\": \"is\", \"UTS\": 4])\n * \"ID-is-UTS-4\"\n * >>> concatenateDict([\"QWE\": \"is\", \"RTY\": 4])\n * \"QWE-is-RTY-4\"\n * >>> concatenateDict([\"ZEN\": \"is\", \"OP\": 4])\n * \"ZEN-is-OP-4\"\n */\nfunc concatenateDict(testDict : [String : Any]) -> String {\n    var result = \"\"\n    for i in testDict.keys {\n        result += \"\\(i)\"\n        if i != testDict.keys.last {\n            result += \"-\"\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to concatenate each element of array by the delimiter.\n *\n * >>> concatenateArray([\"ID\", \"UTS\"])\n * \"ID-UTS\"\n * >>> conc"}
{"task_id": "MBSWP/422", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the average of cubes of first n natural numbers.\n *\n * >>> findAverageOfCube(2)\n * 4.5\n * >>> findAverageOfCube(3)\n * 12\n * >>> findAverageOfCube(1)\n * 1\n */\nfunc findAverageOfCube(n : Int) -> Double {\n    var sum = 0\n    for i in 1..<n {\n        sum += i * i * i\n    }\n    return Double(sum) / Double(n)\n}\n"}
{"task_id": "MBSWP/423", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to solve gold mine problem.\n *\n * >>> getMaxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 4, 4)\n * 16\n * >>> getMaxgold([[10, 20], [30, 40]], 2, 2)\n * 70\n * >>> getMaxgold([[4, 9], [3, 7]], 2, 2)\n * 13\n */\nfunc getMaxgold(gold : [[Int]], m : Int, n : Int) -> Int {\n    var max : Int = 0\n    for i in 0..<m {\n        for j in 0..<n {\n            max = max(max, gold[i][j] + getMaxgold(gold, i, j))\n        }\n    }\n    return max\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to solve gold mine problem.\n *\n * >>> getMaxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 4, 4)\n * 16\n * >>> getMaxgold([[10, 20], [30, 40]], 2, 2)\n * 70\n * >>> getMaxgold([[4, 9], [3, 7]], 2, 2)\n * 13\n */\nfunc getMaxgold(gold : [[Int]], m : Int, n : Int) -> Int {\n    var max : Int = 0\n    for i in 0..<m {\n        for j in 0..<n {\n            max = max(max, gold[i][j] + getMaxgold(gold, i, j))\n        }\n    }\n    return max\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to solve gold mine problem.\n *\n * >>> getMaxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0"}
{"task_id": "MBSWP/424", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract only the rear index element of each string in the given tuple.\n *\n * >>> extractRear([\"Mers\", \"for\", \"Vers\"])\n * [\"s\", \"r\", \"s\"]\n * >>> extractRear([\"Avenge\", \"for\", \"People\"])\n * [\"e\", \"r\", \"e\"]\n * >>> extractRear([\"Gotta\", \"get\", \"go\"])\n * [\"a\", \"t\", \"o\"]\n */\nfunc extractRear(testTuple : [String]) -> [String] {\n    var result : [String] = []\n    for element in testTuple {\n        result.append(element[element.endIndex - 1])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract only the front index element of each string in the given tuple.\n *\n * >>> extractFront([\"Mers\", \"for\", \"Vers\"])\n * [\"M\", \"f\", \"V\"]\n * >>> extractFront([\"Avenge\", \"for\", \"People\"])\n * [\"A\", \"f\", \"P\"]\n * >>> extractFront([\"Gotta\", \"get\", \"go\"])\n * [\"G\", \"t\", \"g\"]\n */\nfunc extractFront(testTuple : [String]) -> [String] {\n    var result : [String] = []\n    for element in testTuple {\n        result.append(element[0])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract only the middle index element of each string in the given tuple.\n *\n * >>> extractMiddle([\"Mers\", \"for\", \"Vers\"])\n * [\"e\", \"r\", \"s\"]\n * >>> extractMiddle([\"Avenge\", \"for\", \"People\"])\n * [\"e\", \"v\", \"e\"]\n * >>> extractMiddle([\"Gotta\", \"get\", \"go\"])\n * [\"o\", \"t\", \"a\"]\n */\nfunc extractMiddle(testTuple : [String]) -> ["}
{"task_id": "MBSWP/425", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the number of sublists containing a particular element.\n *\n * >>> countElementInList([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n * 3\n * >>> countElementInList([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\")\n * 3\n * >>> countElementInList([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\")\n * 1\n */\nfunc countElementInList(list1 : [[AnyHashable]], x : AnyHashable) -> Int {\n    var count = 0\n    for list in list1 {\n        if list.contains(x) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the number of sublists containing a particular element.\n *\n * >>> countElementInList([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n * 3\n * >>> countElementInList([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"A\")\n * 3\n * >>> countElementInList([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\", \"E\"], [\"B\", \"C\", \"D\"]], \"E\")\n * 1\n */\nfunc countElementInList(list1 : [[AnyHashable]], x : AnyHashable) -> Int {\n    var count = 0\n    for list in list1 {\n        if list.contains(x) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the number of sublists containing a particular element.\n *\n * >>> countElementInList([[1"}
{"task_id": "MBSWP/426", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to filter odd numbers using lambda function.\n *\n * >>> filterOddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [1, 3, 5, 7, 9]\n * >>> filterOddnumbers([10, 20, 45, 67, 84, 93])\n * [45, 67, 93]\n * >>> filterOddnumbers([5, 7, 9, 8, 6, 4, 3])\n * [5, 7, 9, 3]\n */\nfunc filterOddnumbers(nums : [Int]) -> [Int] {\n    var result = [Int]()\n    for num in nums {\n        if num % 2 != 0 {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to filter even numbers using lambda function.\n *\n * >>> filterEvenNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [2, 4, 6, 8, 10]\n * >>> filterEvenNumbers([10, 20, 45, 67, 84, 93])\n * [20, 45, 84]\n * >>> filterEvenNumbers([5, 7, 9, 8, 6, 4, 3])\n * [8, 6, 4]\n */\nfunc filterEvenNumbers(nums : [Int]) -> [Int] {\n    var result = [Int]()\n    for num in nums {\n        if num % 2 == 0 {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to filter numbers greater than 10 using lambda function.\n *\n * >>> filterNumbersGreaterThanTen([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n * >>> filterNumbersGreaterThanTen([10, 20, 45, 67, 84"}
{"task_id": "MBSWP/427", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n *\n * >>> changeDateFormat(\"2026-01-02\")\n * \"02-01-2026\"\n * >>> changeDateFormat(\"2020-11-13\")\n * \"13-11-2020\"\n * >>> changeDateFormat(\"2021-04-26\")\n * \"26-04-2021\"\n */\nfunc changeDateFormat(dt : String) -> String {\n    let regex = \"\\\\d{4}-\\\\d{2}-\\\\d{2}\"\n    let regex = \"\\\\d{2}-\\\\d{2}-\\\\d{4}\"\n    let regex = \"\\\\d{2}-\\\\d{2}-\\\\d{4}\"\n    let regex = \"\\\\d{4}-\\\\d{2}-\\\\d{2}\"\n    let regex = \"\\\\d{2}-\\\\d{2}-\\\\d{4}\"\n    let regex = \"\\\\d{2}-\\\\d{2}-\\\\d{4}\"\n    let regex = \"\\\\d{4}-\\\\d{2}-\\\\d{2}\"\n    let regex = \"\\\\d{2}-\\\\d{2}-\\\\d{4}\"\n    let regex = \"\\\\d{2}-\\\\d{2}-\\\\d{4}\"\n    let regex = \"\\\\d{4}-\\\\d{2}-\\\\d{2}\"\n    let regex = \"\\\\d{2}-\\\\d{2}-\\\\d{4}\"\n    let regex = \"\\\\d{2}-\\\\d{2}-\\\\d{4}\"\n    let regex = \"\\\\d{4}-\\\\d{2}-\\\\d{2}\"\n    let regex = \"\\\\d{2}-\\\\d{2}-\\\\d{4}\"\n    let regex = \"\\\\d{2}-\\\\d{2}-\\\\d{4}\"\n    let regex = \"\\\\d{4}-\\\\d{2}-\\\\d{2}\"\n    let regex = \"\\\\d{2"}
{"task_id": "MBSWP/428", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the given array by using shell sort.\n *\n * >>> shellSort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])\n * [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n * >>> shellSort([24, 22, 39, 34, 87, 73, 68])\n * [22, 24, 34, 39, 68, 73, 87]\n * >>> shellSort([32, 30, 16, 96, 82, 83, 74])\n * [16, 30, 32, 74, 82, 83, 96]\n */\nfunc shellSort(myList : [Int]) -> [Int] {\n    var myList = myList\n    var gap = myList.count / 2\n    while gap > 0 {\n        for i in 0..<myList.count {\n            var j = i\n            while j >= gap && myList[j] < myList[j - gap] {\n                swap(&myList[j], &myList[j - gap])\n                j -= gap\n            }\n        }\n        gap = gap / 2\n    }\n    return myList\n}\n\nfunc swap<T>(a : inout T, b : inout T) {\n    let temp = a\n    a = b\n    b = temp\n}\n\n// test\nshellSort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])\nshellSort([24, 22, 39, 34, 87, 73, 68])\nshellSort([32, 30, 16, 96, 82, 83, 74])\n"}
{"task_id": "MBSWP/429", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the elementwise and tuples from the given two tuples.\n *\n * >>> andTuples([10, 4, 6, 9], [5, 2, 3, 3])\n * [0, 0, 2, 1]\n * >>> andTuples([1, 2, 3, 4], [5, 6, 7, 8])\n * [1, 2, 3, 0]\n * >>> andTuples([8, 9, 11, 12], [7, 13, 14, 17])\n * [0, 9, 10, 0]\n */\nfunc andTuples(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<testTup1.count {\n        if testTup1[i] == testTup2[i] {\n            result.append(1)\n        } else {\n            result.append(0)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the elementwise and tuples from the given two tuples.\n *\n * >>> orTuples([10, 4, 6, 9], [5, 2, 3, 3])\n * [1, 1, 3, 1]\n * >>> orTuples([1, 2, 3, 4], [5, 6, 7, 8])\n * [1, 3, 7, 1]\n * >>> orTuples([8, 9, 11, 12], [7, 13, 14, 17])\n * [1, 10, 11, 1]\n */\nfunc orTuples(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<testTup1.count {\n        if testTup1[i] == testTup2[i] {\n            result.append(1)\n        } else {\n            result.append(0)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift"}
{"task_id": "MBSWP/430", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the directrix of a parabola.\n *\n * >>> parabolaDirectrix(5, 3, 2)\n * -198\n * >>> parabolaDirectrix(9, 8, 4)\n * -2336\n * >>> parabolaDirectrix(2, 4, 6)\n * -130\n */\nfunc parabolaDirectrix(a : Int, b : Int, c : Int) -> Int {\n    return -(a * c - b * b)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the intersection point of a parabola and a line.\n *\n * >>> parabolaLineIntersection(5, 3, 2, -10, -10)\n * -10\n * >>> parabolaLineIntersection(9, 8, 4, -10, -10)\n * -10\n * >>> parabolaLineIntersection(2, 4, 6, -10, -10)\n * -10\n */\nfunc parabolaLineIntersection(a : Int, b : Int, c : Int, x0 : Int, y0 : Int) -> Int {\n    let directrix = parabolaDirectrix(a, b, c)\n    let x = (directrix - y0 * b) / a\n    return x\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the intersection point of a parabola and a circle.\n *\n * >>> parabolaCircleIntersection(5, 3, 2, -10, -10, -10)\n * -10\n * >>> parabolaCircleIntersection(9, 8, 4, -10, -10, -10)\n * -10\n * >>> parabolaCircleIntersection(2, 4, 6, -10, -10, -10)\n * -10\n */\nfunc parabolaCircleIntersection(a : Int, b : Int, c : Int, x0 : Int, y0 : Int, r : Int) -> Int {\n    let directrix = parabolaDirectrix(a,"}
{"task_id": "MBSWP/431", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that takes two lists and returns true if they have at least one common element.\n *\n * >>> commonElement([1, 2, 3, 4, 5], [5, 6, 7, 8, 9])\n * true\n * >>> commonElement([1, 2, 3, 4, 5], [6, 7, 8, 9])\n * \"none\"\n * >>> commonElement([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"])\n * true\n */\nfunc commonElement(list1 : [AnyHashable], list2 : [AnyHashable]) -> AnyHashable {\n    for element in list1 {\n        if list2.contains(element) {\n            return element\n        }\n    }\n    return \"none\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that takes two lists and returns true if they have at least one common element.\n *\n * >>> commonElement([1, 2, 3, 4, 5], [5, 6, 7, 8, 9])\n * true\n * >>> commonElement([1, 2, 3, 4, 5], [6, 7, 8, 9])\n * \"none\"\n * >>> commonElement([\"a\", \"b\", \"c\"], [\"d\", \"b\", \"e\"])\n * true\n */\nfunc commonElement(list1 : [AnyHashable], list2 : [AnyHashable]) -> AnyHashable {\n    for element in list1 {\n        if list2.contains(element) {\n            return element\n        }\n    }\n    return \"none\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that takes two lists and returns true if they have at least one common element.\n *\n * >>> commonElement([1, 2, 3, 4, 5], [5, 6, 7, 8, 9])\n * true\n * >>> commonElement([1, 2, 3, 4, 5], [6, 7, 8, 9])\n * \"none\"\n * >>> commonElement([\"a\", \"b\", \"c\"], [\"d\", \"b"}
{"task_id": "MBSWP/432", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the median of a trapezium.\n *\n * >>> medianTrapezium(15, 25, 35)\n * 20\n * >>> medianTrapezium(10, 20, 30)\n * 15\n * >>> medianTrapezium(6, 9, 4)\n * 7.5\n */\nfunc medianTrapezium(base1 : Int, base2 : Int, height : Int) -> Double {\n    let base1Double = Double(base1)\n    let base2Double = Double(base2)\n    let heightDouble = Double(height)\n    let base1Height = base1Double * heightDouble\n    let base2Height = base2Double * heightDouble\n    let sum = base1Height + base2Height\n    return sum / 2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the median of a trapezium.\n *\n * >>> medianTrapezium(15, 25, 35)\n * 20\n * >>> medianTrapezium(10, 20, 30)\n * 15\n * >>> medianTrapezium(6, 9, 4)\n * 7.5\n */\nfunc medianTrapezium(base1 : Int, base2 : Int, height : Int) -> Double {\n    let base1Double = Double(base1)\n    let base2Double = Double(base2)\n    let heightDouble = Double(height)\n    let base1Height = base1Double * heightDouble\n    let base2Height = base2Double * heightDouble\n    let sum = base1Height + base2Height\n    return sum / 2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the median of a trapezium.\n *\n * >>> medianTrapezium(15, 25, 35)\n * 20\n * >>> medianTrapezium(10, 20, 30)\n * 15\n * >>> medianTrapezium(6, 9, 4)\n * 7.5\n */\nfunc medianTrapezium(base1 : Int, base2 : Int, height : Int)"}
{"task_id": "MBSWP/433", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the entered number is greater than the elements of the given array.\n *\n * >>> checkGreater([1, 2, 3, 4, 5], 4)\n * \"No, entered number is less than those in the array\"\n * >>> checkGreater([2, 3, 4, 5, 6], 8)\n * \"Yes, the entered number is greater than those in the array\"\n * >>> checkGreater([9, 7, 4, 8, 6, 1], 11)\n * \"Yes, the entered number is greater than those in the array\"\n */\nfunc checkGreater(arr : [Int], number : Int) -> String {\n    for i in arr {\n        if i > number {\n            return \"Yes, the entered number is greater than those in the array\"\n        }\n    }\n    return \"No, entered number is less than those in the array\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the entered number is greater than the elements of the given array.\n *\n * >>> checkGreater([1, 2, 3, 4, 5], 4)\n * \"No, entered number is less than those in the array\"\n * >>> checkGreater([2, 3, 4, 5, 6], 8)\n * \"Yes, the entered number is greater than those in the array\"\n * >>> checkGreater([9, 7, 4, 8, 6, 1], 11)\n * \"Yes, the entered number is greater than those in the array\"\n */\nfunc checkGreater(arr : [Int], number : Int) -> String {\n    for i in arr {\n        if i > number {\n            return \"Yes, the entered number is greater than those in the array\"\n        }\n    }\n    return \"No, entered number is less than those in the array\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the entered number is greater than the elements of the given array.\n *\n * >>> checkGreater([1, 2, 3, 4, 5], 4)\n * \"No, entered number"}
{"task_id": "MBSWP/434", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by one or more b's.\n *\n * >>> textMatchOne(\"ac\")\n * \"Not matched!\"\n * >>> textMatchOne(\"dc\")\n * \"Not matched!\"\n * >>> textMatchOne(\"abba\")\n * \"Found a match!\"\n */\nfunc textMatchOne(text : String) -> String {\n    if text.count < 2 {\n        return \"Not matched!\"\n    }\n    if text[0] == \"a\" && text[1] == \"b\" {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by one or more b's.\n *\n * >>> textMatchTwo(\"ac\")\n * \"Not matched!\"\n * >>> textMatchTwo(\"dc\")\n * \"Not matched!\"\n * >>> textMatchTwo(\"abba\")\n * \"Found a match!\"\n */\nfunc textMatchTwo(text : String) -> String {\n    if text.count < 2 {\n        return \"Not matched!\"\n    }\n    if text[0] == \"a\" && text[1] == \"b\" {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by one or more b's.\n *\n * >>> textMatchThree(\"ac\")\n * \"Not matched!\"\n * >>> textMatchThree(\"dc\")\n * \"Not matched!\"\n * >>> textMatchThree(\"abba\")\n * \"Found a match!\"\n */\nfunc textMatchThree(text : String) -> String {\n    if text.count < 2 {\n        return \"Not matched!\"\n    }\n    if text[0] == \"a\" && text[1] == \"b\" {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that"}
{"task_id": "MBSWP/435", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the last digit of a given number.\n *\n * >>> lastDigit(123)\n * 3\n * >>> lastDigit(25)\n * 5\n * >>> lastDigit(30)\n * 0\n */\nfunc lastDigit(n : Int) -> Int {\n    var n = n\n    var lastDigit = 0\n    while n > 0 {\n        lastDigit = n % 10\n        n = n / 10\n    }\n    return lastDigit\n}\n"}
{"task_id": "MBSWP/436", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to print negative numbers in a list.\n *\n * >>> negNos([-1, 4, 5, -6])\n * [-1,-6]\n * >>> negNos([-1, -2, 3, 4])\n * [-1,-2]\n * >>> negNos([-7, -6, 8, 9])\n * [-7,-6]\n */\nfunc negNos(list1 : [Int]) -> [Int] {\n    var list2 : [Int] = []\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to print the sum of all the numbers in a list.\n *\n * >>> sumNos([1, 2, 3, 4])\n * 10\n * >>> sumNos([-1, -2, 3, 4])\n * 2\n * >>> sumNos([-7, -6, 8, 9])\n * -5\n */\nfunc sumNos(list1 : [Int]) -> Int {\n    var sum : Int = 0\n    for i in list1 {\n        sum += i\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to print the sum of all the numbers in a list.\n *\n * >>> sumNos([1, 2, 3, 4])\n * 10\n * >>> sumNos([-1, -2, 3, 4])\n * 2\n * >>> sumNos([-7, -6, 8, 9])\n * -5\n */\nfunc sumNos(list1 : [Int]) -> Int {\n    var sum : Int = 0\n    for i in list1 {\n        sum += i\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to print the sum of all the numbers in a list.\n *\n * >>> sumNos([1, 2,"}
{"task_id": "MBSWP/437", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove odd characters in a string.\n *\n * >>> removeOdd(\"python\")\n * \"yhn\"\n * >>> removeOdd(\"program\")\n * \"rga\"\n * >>> removeOdd(\"language\")\n * \"agae\"\n */\nfunc removeOdd(str1 : String) -> String {\n    var str2 = \"\"\n    for i in 0..<str1.count {\n        if str1[i] % 2 == 0 {\n            str2 += str1[i]\n        }\n    }\n    return str2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove even characters in a string.\n *\n * >>> removeEven(\"python\")\n * \"yh\"\n * >>> removeEven(\"program\")\n * \"r\"\n * >>> removeEven(\"language\")\n * \"a\"\n */\nfunc removeEven(str1 : String) -> String {\n    var str2 = \"\"\n    for i in 0..<str1.count {\n        if str1[i] % 2 != 0 {\n            str2 += str1[i]\n        }\n    }\n    return str2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all vowels in a string.\n *\n * >>> removeVowels(\"python\")\n * \"yhng\"\n * >>> removeVowels(\"program\")\n * \"rpgm\"\n * >>> removeVowels(\"language\")\n * \"aglng\"\n */\nfunc removeVowels(str1 : String) -> String {\n    var str2 = \"\"\n    for i in 0..<str1.count {\n        if str1[i] == \"a\" || str1[i] == \"e\" || str1[i] == \"i\" || str1[i] == \"o\" || str1[i] == \"u\" || str1[i] == \"A\" || str1[i] == \"E\" || str1[i] == \"I\" || str1[i] == \"O\" || str1"}
{"task_id": "MBSWP/438", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count bidirectional tuple pairs.\n *\n * >>> countBidirectional([[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]])\n * \"3\"\n * >>> countBidirectional([[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]])\n * \"2\"\n * >>> countBidirectional([[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]])\n * \"4\"\n */\nfunc countBidirectional(testList : [[Int]]) -> String {\n    var count = 0\n    for i in 0..<testList.count {\n        for j in 0..<testList.count {\n            if i != j {\n                if testList[i][0] == testList[j][1] && testList[i][1] == testList[j][0] {\n                    count += 1\n                }\n            }\n        }\n    }\n    return String(count)\n}\n"}
{"task_id": "MBSWP/439", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a list of multiple integers into a single integer.\n *\n * >>> multipleToSingle([11, 33, 50])\n * 113350\n * >>> multipleToSingle([-1, 2, 3, 4, 5, 6])\n * -123456\n * >>> multipleToSingle([10, 15, 20, 25])\n * 10152025\n */\nfunc multipleToSingle(l : [Int]) -> Int {\n    var result = 0\n    for i in l {\n        result = result * 10 + i\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a single integer into a list of multiple integers.\n *\n * >>> singleToMultiple(113350)\n * [11, 33, 50]\n * >>> singleToMultiple(-123456)\n * [-1, 2, 3, 4, 5, 6]\n * >>> singleToMultiple(10152025)\n * [10, 15, 20, 25]\n */\nfunc singleToMultiple(n : Int) -> [Int] {\n    var result = [Int]()\n    while n > 0 {\n        result.append(n % 10)\n        n = n / 10\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a list of multiple integers into a single integer.\n *\n * >>> multipleToSingle([11, 33, 50])\n * 113350\n * >>> multipleToSingle([-1, 2, 3, 4, 5, 6])\n * -123456\n * >>> multipleToSingle([10, 15, 20, 25])\n * 10152025\n */\nfunc multipleToSingle(l : [Int]) -> Int {\n    var result = 0\n    for i in l {\n        result = result * 10 + i\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a single integer into a list of multiple integers.\n *\n * >>> singleToMultiple(113350)\n * [11,"}
{"task_id": "MBSWP/440", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all adverbs and their positions in a given sentence.\n *\n * >>> findAdverbPosition(\"clearly!! we can see the sky\")\n * [0, 7, \"clearly\"]\n * >>> findAdverbPosition(\"seriously!! there are many roses\")\n * [0, 9, \"seriously\"]\n * >>> findAdverbPosition(\"unfortunately!! sita is going to home\")\n * [0, 13, \"unfortunately\"]\n */\nfunc findAdverbPosition(text : String) -> [AnyHashable] {\n    var result = [AnyHashable]()\n    var adverb = \"\"\n    var position = 0\n    for char in text {\n        if char == \"!\" {\n            if adverb.count > 0 {\n                result.append([position, position + adverb.count, adverb])\n            }\n            adverb = \"\"\n            position += 1\n        } else {\n            adverb += char\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all adverbs and their positions in a given sentence.\n *\n * >>> findAdverbPosition(\"clearly!! we can see the sky\")\n * [0, 7, \"clearly\"]\n * >>> findAdverbPosition(\"seriously!! there are many roses\")\n * [0, 9, \"seriously\"]\n * >>> findAdverbPosition(\"unfortunately!! sita is going to home\")\n * [0, 13, \"unfortunately\"]\n */\nfunc findAdverbPosition(text : String) -> [AnyHashable] {\n    var result = [AnyHashable]()\n    var adverb = \"\"\n    var position = 0\n    for char in text {\n        if char == \"!\" {\n            if adverb.count > 0 {\n                result.append([position, position + adverb.count, adverb])\n            }\n            adverb = \"\"\n            position += 1\n        } else {\n            adverb += char\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n *"}
{"task_id": "MBSWP/441", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the surface area of a cube.\n *\n * >>> surfaceareaCube(5)\n * 150\n * >>> surfaceareaCube(3)\n * 54\n * >>> surfaceareaCube(10)\n * 600\n */\nfunc surfaceareaCube(l : Int) -> Int {\n    return 6 * l * l\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the surface area of a cylinder.\n *\n * >>> surfaceareaCylinder(5, 10)\n * 250\n * >>> surfaceareaCylinder(3, 10)\n * 162\n * >>> surfaceareaCylinder(10, 10)\n * 600\n */\nfunc surfaceareaCylinder(r : Int, h : Int) -> Int {\n    return 2 * Pi * r * r + 2 * Pi * r * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the surface area of a sphere.\n *\n * >>> surfaceareaSphere(5)\n * 507\n * >>> surfaceareaSphere(3)\n * 113\n * >>> surfaceareaSphere(10)\n * 523\n */\nfunc surfaceareaSphere(r : Int) -> Int {\n    return 4 * Pi * r * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cube.\n *\n * >>> volumeCube(5)\n * 125\n * >>> volumeCube(3)\n * 27\n * >>> volumeCube(10)\n * 1000\n */\nfunc volumeCube(l : Int) -> Int {\n    return l * l * l\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cylinder.\n *\n * >>> volumeCylinder(5, 10)\n * 250\n * >>> volumeCylinder(3, 10)\n * 162\n * >>> volumeCylinder(10, 10)\n * 600\n */\nfunc volumeCylinder(r : Int, h : Int) -> Int {\n    return Pi"}
{"task_id": "MBSWP/442", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the ration of positive numbers in an array of integers.\n *\n * >>> positiveCount([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n * 0.54\n * >>> positiveCount([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n * 0.69\n * >>> positiveCount([2, 4, -6, -9, 11, -12, 14, -5, 17])\n * 0.56\n */\nfunc positiveCount(nums : [Int]) -> Double {\n    var count = 0\n    var sum = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n            sum += num\n        }\n    }\n    return Double(count) / Double(sum)\n}\n"}
{"task_id": "MBSWP/443", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the largest negative number from the given list.\n *\n * >>> largestNeg([1, 2, 3, -4, -6])\n * -6\n * >>> largestNeg([1, 2, 3, -8, -9])\n * -9\n * >>> largestNeg([1, 2, 3, 4, -1])\n * -1\n */\nfunc largestNeg(list1 : [Int]) -> Int {\n    var largestNegative = 0\n    for i in list1 {\n        if i < 0 {\n            if i > largestNegative {\n                largestNegative = i\n            }\n        }\n    }\n    return largestNegative\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the smallest positive number from the given list.\n *\n * >>> smallestPos([1, 2, 3, -4, -6])\n * 1\n * >>> smallestPos([1, 2, 3, -8, -9])\n * 1\n * >>> smallestPos([1, 2, 3, 4, -1])\n * 1\n */\nfunc smallestPos(list1 : [Int]) -> Int {\n    var smallestPositive = 0\n    for i in list1 {\n        if i > 0 {\n            if i < smallestPositive {\n                smallestPositive = i\n            }\n        }\n    }\n    return smallestPositive\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the largest positive number from the given list.\n *\n * >>> largestPos([1, 2, 3, -4, -6])\n * 3\n * >>> largestPos([1, 2, 3, -8, -9])\n * 9\n * >>> largestPos([1, 2, 3, 4, -1])\n * 4\n */\nfunc largestPos(list1 : [Int]) -> Int {\n    var largestPositive = 0\n    for i in list1 {\n        if i > 0 {\n            if i > largestPositive {\n                largestPositive = i\n            }\n        }\n    }\n    return"}
{"task_id": "MBSWP/444", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to trim each tuple by k in the given tuple list.\n *\n * >>> trimTuple([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2)\n * \"[(2,), (9,), (2,), (2,)]\"\n * >>> trimTuple([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1)\n * \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\"\n * >>> trimTuple([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1)\n * \"[(8, 4), (8, 12), (1, 7), (6, 9)]\"\n */\nfunc trimTuple(testList : [[Int]], k : Int) -> String {\n    var result : [[Int]] = []\n    for tuple in testList {\n        var newTuple : [Int] = []\n        for i in 0..<tuple.count {\n            if i % k == 0 {\n                newTuple.append(tuple[i])\n            }\n        }\n        result.append(newTuple)\n    }\n    return result.description\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to trim each tuple by k in the given tuple list.\n *\n * >>> trimTuple([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2)\n * \"[(2,), (9,), (2,), (2,)]\"\n * >>> trimTuple([[5, 3, 2, 1, 4], [3"}
{"task_id": "MBSWP/445", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n *\n * >>> indexMultiplication([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n * [[6, 21], [12, 45], [2, 9], [7, 30]]\n * >>> indexMultiplication([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])\n * [[14, 32], [20, 60], [6, 20], [16, 44]]\n * >>> indexMultiplication([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])\n * [[24, 45], [30, 77], [12, 33], [27, 60]]\n */\nfunc indexMultiplication(testTup1 : [[Int]], testTup2 : [[Int]]) -> [[Int]] {\n    var result : [[Int]] = []\n    for i in 0..<testTup1.count {\n        var temp : [Int] = []\n        for j in 0..<testTup1[i].count {\n            temp.append(testTup1[i][j] * testTup2[i][j])\n        }\n        result.append(temp)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform index wise addition of tuple elements in the given two tuples.\n *\n * >>> indexAddition([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n * [[7, 10], [7, 14], [3, 18], [8, 13]]\n * >>> indexAddition([[2, 4], [5, 6"}
{"task_id": "MBSWP/446", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the occurence of all elements of list in a tuple.\n *\n * >>> countOccurrence([\"a\", \"a\", \"c\", \"b\", \"d\"], [\"a\", \"b\"])\n * 3\n * >>> countOccurrence([1, 2, 3, 1, 4, 6, 7, 1, 4], [1, 4, 7])\n * 6\n * >>> countOccurrence([1, 2, 3, 4, 5, 6], [1, 2])\n * 2\n */\nfunc countOccurrence(tup : [AnyHashable], lst : [AnyHashable]) -> Int {\n    var count = 0\n    for i in tup {\n        for j in lst {\n            if i == j {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/447", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find cubes of individual elements in a list using lambda function.\n *\n * >>> cubeNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n * >>> cubeNums([10, 20, 30])\n * [1000, 8000, 27000]\n * >>> cubeNums([12, 15])\n * [1728, 3375]\n */\nfunc cubeNums(nums : [Int]) -> [Int] {\n    return nums.map { $0 * $0 * $0 }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find cubes of individual elements in a list using map.\n *\n * >>> cubeNumsMap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n * >>> cubeNumsMap([10, 20, 30])\n * [1000, 8000, 27000]\n * >>> cubeNumsMap([12, 15])\n * [1728, 3375]\n */\nfunc cubeNumsMap(nums : [Int]) -> [Int] {\n    return nums.map { $0 * $0 * $0 }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find cubes of individual elements in a list using reduce.\n *\n * >>> cubeNumsReduce([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n * >>> cubeNumsReduce([10, 20, 30])\n * [1000, 8000, 27000]\n * >>> cubeNumsReduce([12, 15])\n * [1728, 3375]\n */\nfunc cubeNumsReduce(nums : [Int]) -> [Int] {\n    return nums.reduce([])"}
{"task_id": "MBSWP/448", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of perrin numbers.\n *\n * >>> calSum(9)\n * 49\n * >>> calSum(10)\n * 66\n * >>> calSum(11)\n * 88\n */\nfunc calSum(n : Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/449", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the triangle is valid or not if 3 points are given.\n *\n * >>> checkTriangle(1, 5, 2, 5, 4, 6)\n * \"Yes\"\n * >>> checkTriangle(1, 1, 1, 4, 1, 5)\n * \"No\"\n * >>> checkTriangle(1, 1, 1, 1, 1, 1)\n * \"No\"\n */\nfunc checkTriangle(x1 : Int, y1 : Int, x2 : Int, y2 : Int, x3 : Int, y3 : Int) -> String {\n    let a = (y2 - y1) * (x3 - x1) - (x2 - x1) * (y3 - y1)\n    if a == 0 {\n        return \"No\"\n    }\n    return \"Yes\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the triangle is valid or not if 4 points are given.\n *\n * >>> checkTriangle(1, 5, 2, 5, 4, 6)\n * \"Yes\"\n * >>> checkTriangle(1, 1, 1, 4, 1, 5)\n * \"No\"\n * >>> checkTriangle(1, 1, 1, 1, 1, 1)\n * \"No\"\n */\nfunc checkTriangle(x1 : Int, y1 : Int, x2 : Int, y2 : Int, x3 : Int, y3 : Int, x4 : Int, y4 : Int) -> String {\n    let a = (y2 - y1) * (x3 - x1) - (x2 - x1) * (y3 - y1)\n    let b = (y3 - y2) * (x4 - x2) - (x3 - x2) * (y4 - y2)\n    let c = (y4 - y3) * (x1 - x3) - (x4 - x3) * (y1 - y3)\n    if a == 0 || b == 0 || c == 0 {\n        return \"No\"\n    }\n   "}
{"task_id": "MBSWP/450", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract specified size of strings from a give list of string values.\n *\n * >>> extractString([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8)\n * [\"practice\", \"solution\"]\n * >>> extractString([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6)\n * [\"Python\"]\n * >>> extractString([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9)\n * [\"exercises\"]\n */\nfunc extractString(str : [String], l : Int) -> [String] {\n    var result : [String] = []\n    for i in 0..<str.count {\n        if str[i].count <= l {\n            result.append(str[i])\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract specified size of strings from a give list of string values.\n *\n * >>> extractString([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8)\n * [\"practice\", \"solution\"]\n * >>> extractString([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 6)\n * [\"Python\"]\n * >>> extractString([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 9)\n * [\"exercises\"]\n */\nfunc extractString(str : [String], l : Int) -> [String] {\n    var result : [String] = []\n    for i in 0..<str.count {\n        if str[i].count <= l {\n            result.append(str[i])\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract specified size of strings from a give list of string values.\n *\n * >>> extractString([\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"], 8)\n * [\"practice\", \"solution\"]\n * >>> extractString([\"Python\","}
{"task_id": "MBSWP/451", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all whitespaces from the given string using regex.\n *\n * >>> removeWhitespaces(\" Google    Flutter \")\n * \"GoogleFlutter\"\n * >>> removeWhitespaces(\" Google    Dart \")\n * \"GoogleDart\"\n * >>> removeWhitespaces(\" iOS    Swift \")\n * \"iOSSwift\"\n */\nfunc removeWhitespaces(text1 : String) -> String {\n    let text2 = text1.replacingOccurrences(of: \" \", with: \"\")\n    return text2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all vowels from the given string using regex.\n *\n * >>> removeVowels(\" Google    Flutter \")\n * \"Ggglllltt Flttr\"\n * >>> removeVowels(\" Google    Dart \")\n * \"Ggglllltt Dttr\"\n * >>> removeVowels(\" iOS    Swift \")\n * \"IoSwft Swift\"\n */\nfunc removeVowels(text1 : String) -> String {\n    let text2 = text1.replacingOccurrences(of: \"a|e|i|o|u|A|E|I|O|U\", with: \"\")\n    return text2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all vowels from the given string using regex.\n *\n * >>> removeVowels(\" Google    Flutter \")\n * \"Ggglllltt Flttr\"\n * >>> removeVowels(\" Google    Dart \")\n * \"Ggglllltt Dttr\"\n * >>> removeVowels(\" iOS    Swift \")\n * \"IoSwft Swift\"\n */\nfunc removeVowels(text1 : String) -> String {\n    let text2 = text1.replacingOccurrences(of: \"a|e|i|o|u|A|E|I|O|U\", with: \"\")\n    return text2\n}\n\n/**\n * You are an expert Swift programmer, and here"}
{"task_id": "MBSWP/452", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that gives loss amount if the given amount has loss else return none.\n *\n * >>> lossAmount(1500, 1200)\n * \"none\"\n * >>> lossAmount(100, 200)\n * 100\n * >>> lossAmount(2000, 5000)\n * 3000\n */\nfunc lossAmount(actualCost : Int, saleAmount : Int) -> AnyHashable {\n    if actualCost > saleAmount {\n        return actualCost - saleAmount\n    }\n    return \"none\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that gives loss amount if the given amount has loss else return none.\n *\n * >>> lossAmount(1500, 1200)\n * \"none\"\n * >>> lossAmount(100, 200)\n * 100\n * >>> lossAmount(2000, 5000)\n * 3000\n */\nfunc lossAmount(actualCost : Int, saleAmount : Int) -> AnyHashable {\n    if actualCost > saleAmount {\n        return actualCost - saleAmount\n    }\n    return \"none\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that gives loss amount if the given amount has loss else return none.\n *\n * >>> lossAmount(1500, 1200)\n * \"none\"\n * >>> lossAmount(100, 200)\n * 100\n * >>> lossAmount(2000, 5000)\n * 3000\n */\nfunc lossAmount(actualCost : Int, saleAmount : Int) -> AnyHashable {\n    if actualCost > saleAmount {\n        return actualCost - saleAmount\n    }\n    return \"none\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that gives loss amount if the given amount has loss else return none.\n *\n * >>> lossAmount(1500, 1200)\n * \"none\"\n * >>> lossAmount(100, 200)\n * 100\n * >>> lossAmount(2000, 5000)\n * 3000\n */\nfunc lossAmount(actualCost : Int, saleAmount : Int) -> AnyHashable {\n    if actualCost > saleAmount {\n        return actualCost - saleAmount\n"}
{"task_id": "MBSWP/453", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of even factors of a number.\n *\n * >>> sumoffactors(18)\n * 26\n * >>> sumoffactors(30)\n * 48\n * >>> sumoffactors(6)\n * 8\n */\nfunc sumoffactors(n : Int) -> Int {\n    var sum : Int = 0\n    for i in 1...n {\n        if n % i == 0 {\n            if i % 2 == 0 {\n                sum += i\n            }\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of odd factors of a number.\n *\n * >>> sumofoddfactors(18)\n * 10\n * >>> sumofoddfactors(30)\n * 16\n * >>> sumofoddfactors(6)\n * 4\n */\nfunc sumofoddfactors(n : Int) -> Int {\n    var sum : Int = 0\n    for i in 1...n {\n        if n % i == 0 {\n            if i % 2 != 0 {\n                sum += i\n            }\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all the digits of a number.\n *\n * >>> sumofdigits(18)\n * 18\n * >>> sumofdigits(30)\n * 6\n * >>> sumofdigits(6)\n * 6\n */\nfunc sumofdigits(n : Int) -> Int {\n    var sum : Int = 0\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all the digits of a number.\n *\n * >>> sumofdigits(18)\n * 18\n * >>> sumofdigits(30)\n * 6\n * >>> sumofdigits(6)\n * 6\n */\nfunc sum"}
{"task_id": "MBSWP/454", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a word containing 'z'.\n *\n * >>> textMatchWordz(\"pythonz.\")\n * \"Found a match!\"\n * >>> textMatchWordz(\"xyz.\")\n * \"Found a match!\"\n * >>> textMatchWordz(\"  lang  .\")\n * \"Not matched!\"\n */\nfunc textMatchWordz(text : String) -> String {\n    let wordz = \"z\"\n    let wordzIndex = text.index(text.startIndex, offsetBy: wordz.count)\n    if text.hasPrefix(wordz) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a word containing 'a'.\n *\n * >>> textMatchWorda(\"pythona.\")\n * \"Found a match!\"\n * >>> textMatchWorda(\"xyza.\")\n * \"Found a match!\"\n * >>> textMatchWorda(\"  lang  .\")\n * \"Not matched!\"\n */\nfunc textMatchWorda(text : String) -> String {\n    let worda = \"a\"\n    let wordaIndex = text.index(text.startIndex, offsetBy: worda.count)\n    if text.hasPrefix(worda) {\n        return \"Found a match!\"\n    } else {\n        return \"Not matched!\"\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a word containing 'e'.\n *\n * >>> textMatchWorde(\"pythone.\")\n * \"Found a match!\"\n * >>> textMatchWorde(\"xyze.\")\n * \"Found a match!\"\n * >>> textMatchWorde(\"  lang  \")\n * \"Not matched!\"\n */\nfunc textMatchWorde(text : String) -> String {\n    let worde = \"e\"\n    let wordeIndex = text.index(text.startIndex, offsetBy: worde.count)\n    if text.hasPrefix(worde) {\n        return \"Found a match!\"\n   "}
{"task_id": "MBSWP/455", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month number contains 31 days or not.\n *\n * >>> checkMonthnumbNumber(5)\n * true\n * >>> checkMonthnumbNumber(2)\n * false\n * >>> checkMonthnumbNumber(6)\n * false\n */\nfunc checkMonthnumbNumber(monthnum2 : Int) -> Bool {\n    if monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12 {\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month number contains 30 days or not.\n *\n * >>> checkMonthnumbNumber(5)\n * true\n * >>> checkMonthnumbNumber(2)\n * false\n * >>> checkMonthnumbNumber(6)\n * false\n */\nfunc checkMonthnumbNumber(monthnum3 : Int) -> Bool {\n    if monthnum3 == 1 || monthnum3 == 3 || monthnum3 == 5 || monthnum3 == 7 || monthnum3 == 8 || monthnum3 == 10 || monthnum3 == 12 {\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month number contains 29 days or not.\n *\n * >>> checkMonthnumbNumber(5)\n * true\n * >>> checkMonthnumbNumber(2)\n * false\n * >>> checkMonthnumbNumber(6)\n * false\n */\nfunc checkMonthnumbNumber(monthnum4 : Int) -> Bool {\n    if monthnum4 == 2 || monthnum4 == 4 || monthnum4 == 6 || monthnum4 == 9 || monthnum4 == 11 {\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month number contains 28 days or not.\n *\n * >>> checkMonthnumb"}
{"task_id": "MBSWP/456", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reverse strings in a given list of string values.\n *\n * >>> reverseStringList([\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"])\n * [\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"]\n * >>> reverseStringList([\"john\", \"amal\", \"joel\", \"george\"])\n * [\"nhoj\", \"lama\", \"leoj\", \"egroeg\"]\n * >>> reverseStringList([\"jack\", \"john\", \"mary\"])\n * [\"kcaj\", \"nhoj\", \"yram\"]\n */\nfunc reverseStringList(stringlist : [String]) -> [String] {\n    var reversedStringList : [String] = []\n    for string in stringlist {\n        reversedStringList.append(reverseString(string))\n    }\n    return reversedStringList\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reverse a given string.\n *\n * >>> reverseString(\"Red\")\n * \"der\"\n * >>> reverseString(\"Green\")\n * \"neerG\"\n * >>> reverseString(\"Blue\")\n * \"eulB\"\n * >>> reverseString(\"White\")\n * \"etihW\"\n * >>> reverseString(\"Black\")\n * \"kcalB\"\n * >>> reverseString(\"john\")\n * \"nhoj\"\n * >>> reverseString(\"amal\")\n * \"lama\"\n * >>> reverseString(\"joel\")\n * \"leoj\"\n * >>> reverseString(\"george\")\n * \"egroeg\"\n * >>> reverseString(\"jack\")\n * \"kcaj\"\n * >>> reverseString(\"mary\")\n * \"yram\"\n */\nfunc reverseString(string : String) -> String {\n    var reversedString : String = \"\"\n    for char in string {\n        reversedString.insert(char, at: 0)\n    }\n    return reversedString\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reverse a given integer.\n *\n * >>> reverseInt(123)\n"}
{"task_id": "MBSWP/457", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sublist having minimum length.\n *\n * >>> findMin([[1], [1, 2], [1, 2, 3]])\n * [1]\n * >>> findMin([[1, 1], [1, 1, 1], [1, 2, 7, 8]])\n * [1, 1]\n * >>> findMin([[\"x\"], [\"x\", \"y\"], [\"x\", \"y\", \"z\"]])\n * [\"x\"]\n */\nfunc findMin(lst : [[AnyHashable]]) -> [AnyHashable] {\n    var min = lst[0]\n    var minLen = min.count\n    for i in 1..<lst.count {\n        let curr = lst[i]\n        if curr.count < minLen {\n            min = curr\n            minLen = curr.count\n        }\n    }\n    return min\n}\n"}
{"task_id": "MBSWP/458", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a rectangle.\n *\n * >>> rectangleArea(10, 20)\n * 200\n * >>> rectangleArea(10, 5)\n * 50\n * >>> rectangleArea(4, 2)\n * 8\n */\nfunc rectangleArea(l : Int, b : Int) -> Int {\n    return l * b\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a circle.\n *\n * >>> circleArea(10)\n * 314.159\n * >>> circleArea(5)\n * 78.539\n * >>> circleArea(1)\n * 3.14159\n */\nfunc circleArea(r : Int) -> Double {\n    return 3.14159 * r * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a triangle.\n *\n * >>> triangleArea(10, 20)\n * 100\n * >>> triangleArea(10, 5)\n * 25\n * >>> triangleArea(4, 2)\n * 6\n */\nfunc triangleArea(l : Int, b : Int) -> Int {\n    return l * b / 2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a parallelogram.\n *\n * >>> parallelogramArea(10, 20)\n * 200\n * >>> parallelogramArea(10, 5)\n * 50\n * >>> parallelogramArea(4, 2)\n * 8\n */\nfunc parallelogramArea(l : Int, b : Int) -> Int {\n    return l * b\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a square.\n *\n * >>> squareArea(10)\n * 100\n * >>> squareArea(5)\n * 25\n * >>> squareArea(1)\n * 1\n */\nfunc squareArea(s : Int) -> Int {\n    return s * s\n}\n\n/**\n * You are an expert Swift programmer, and here"}
{"task_id": "MBSWP/459", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove uppercase substrings from a given string by using regex.\n *\n * >>> removeUppercase(\"cAstyoUrFavoRitETVshoWs\")\n * \"cstyoravoitshos\"\n * >>> removeUppercase(\"wAtchTheinTernEtrAdIo\")\n * \"wtchheinerntrdo\"\n * >>> removeUppercase(\"VoicESeaRchAndreComMendaTionS\")\n * \"oiceachndreomendaion\"\n */\nfunc removeUppercase(str1 : String) -> String {\n    let str2 = str1.lowercased()\n    let str3 = str2.filter { $0.isLowercase }\n    return str3\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all vowels from a given string by using regex.\n *\n * >>> removeVowels(\"cAstyoUrFavoRitETVshoWs\")\n * \"cstyrfrtsths\"\n * >>> removeVowels(\"wAtchTheinTernEtrAdIo\")\n * \"wtchtthtrndo\"\n * >>> removeVowels(\"VoicESeaRchAndreComMendaTionS\")\n * \"vicesearchandremendations\"\n */\nfunc removeVowels(str1 : String) -> String {\n    let str2 = str1.lowercased()\n    let str3 = str2.filter { $0.isLowercase || $0.isUppercase }\n    return str3\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all vowels from a given string by using regex.\n *\n * >>> removeVowels(\"cAstyoUrFavoRitETVshoWs\")\n * \"cstyrfrtsths\"\n * >>> removeVowels(\"wAtchTheinTernEtrAdIo\")\n * \"wtchtthtrndo\"\n * >>> removeVowels(\"VoicESeaR"}
{"task_id": "MBSWP/460", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to get the first element of each sublist.\n *\n * >>> extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n * [1, 3, 6]\n * >>> extract([[1, 2, 3], [4, 5]])\n * [1, 4]\n * >>> extract([[9, 8, 1], [1, 2]])\n * [9, 1]\n */\nfunc extract(lst : [[Int]]) -> [Int] {\n    var result = [Int]()\n    for sublist in lst {\n        result.append(sublist[0])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to get the last element of each sublist.\n *\n * >>> extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n * [2, 5, 9]\n * >>> extract([[1, 2, 3], [4, 5]])\n * [3, 5]\n * >>> extract([[9, 8, 1], [1, 2]])\n * [8, 2]\n */\nfunc extract(lst : [[Int]]) -> [Int] {\n    var result = [Int]()\n    for sublist in lst {\n        result.append(sublist[sublist.count - 1])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to get the first element of each sublist.\n *\n * >>> extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n * [1, 3, 6]\n * >>> extract([[1, 2, 3], [4, 5]])\n * [1, 4]\n * >>> extract([[9, 8, 1], [1, 2]])\n * [9, 1]\n */\nfunc extract(lst : [[Int]]) -> [Int] {\n    var result = [Int]()\n"}
{"task_id": "MBSWP/461", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the upper case characters in a given string.\n *\n * >>> upperCtr(\"PYthon\")\n * 1\n * >>> upperCtr(\"BigData\")\n * 1\n * >>> upperCtr(\"program\")\n * 0\n */\nfunc upperCtr(str : String) -> Int {\n    var count = 0\n    for char in str {\n        if char.isUpper {\n            count += 1\n        }\n    }\n    return count\n}\n\n// Test\nupperCtr(\"PYthon\")\nupperCtr(\"BigData\")\nupperCtr(\"program\")\n"}
{"task_id": "MBSWP/462", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all possible combinations of the elements of a given list.\n *\n * >>> combinationsList([\"orange\", \"red\", \"green\", \"blue\"])\n * [[], [\"orange\"], [\"red\"], [\"red\", \"orange\"], [\"green\"], [\"green\", \"orange\"], [\"green\", \"red\"], [\"green\", \"red\", \"orange\"], [\"blue\"], [\"blue\", \"orange\"], [\"blue\", \"red\"], [\"blue\", \"red\", \"orange\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"orange\"], [\"blue\", \"green\", \"red\"], [\"blue\", \"green\", \"red\", \"orange\"]]\n * >>> combinationsList([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"])\n * [[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"blue\"], [\"blue\", \"red\"], [\"blue\", \"green\"], [\"blue\", \"green\", \"red\"], [\"white\"], [\"white\", \"red\"], [\"white\", \"green\"], [\"white\", \"green\", \"red\"], [\"white\", \"blue\"], [\"white\", \"blue\", \"red\"], [\"white\", \"blue\", \"green\"], [\"white\", \"blue\", \"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"black\", \"blue\"], [\"black\", \"blue\", \"red\"], [\"black\", \"blue\", \"green\"], [\"black\", \"blue\", \"green\", \"red\"], [\"black\", \"white\"], [\"black\", \"white\", \"red\"], [\"black\", \"white\", \"green\"], [\"black\", \"white\", \"green\", \"red\"], [\"black\", \"white\", \"blue\"], [\"black\", \"white\", \"blue\", \"red\"], [\"black\", \"white\", \"blue\", \"green\"], [\"black\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"blue\"], [\"orange\", \"blue\", \"red\"], [\"orange\", \"blue\", \"green\"], [\"orange\", \"blue\", \"green\", \"red\"], [\"orange\", \"white\"], [\"orange\", \"white\", \"red\"], [\"orange\", \"white\", \"green\"], [\"orange\", \"white\", \"green\", \"red\"], [\"orange\", \"white\", \"blue\"], [\"orange\", \"white\", \"blue\", \"red\"], [\"orange\", \"white\", \"blue\", \"green\"], [\"orange\", \"white\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"], [\"orange\", \"black\", \"blue\"], [\"orange\", \"black\", \"blue\", \"red\"], [\"orange\", \"black\", \"blue\", \"green\"], [\"orange\", \"black\", \"blue\", \"green\", \"red\"], [\"orange\", \"black\", \"white\"], [\"orange\", \"black\", \"white\", \"red\"], [\"orange\", \"black\", \"white\", \"green\"], [\"orange\", \"black\", \"white\", \"green\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\"], [\"orange\", \"black\", \"white\", \"blue\", \"red\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\"], [\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"]]\n * >>> combinationsList([\"red\", \"green\", \"black\", \"orange\"])\n * [[], [\"red\"], [\"green\"], [\"green\", \"red\"], [\"black\"], [\"black\", \"red\"], [\"black\", \"green\"], [\"black\", \"green\", \"red\"], [\"orange\"], [\"orange\", \"red\"], [\"orange\", \"green\"], [\"orange\", \"green\", \"red\"], [\"orange\", \"black\"], [\"orange\", \"black\", \"red\"], [\"orange\", \"black\", \"green\"], [\"orange\", \"black\", \"green\", \"red\"]]\n */\nfunc combinationsList(list1 : [String]) -> [[AnyHashable]] {\n   "}
{"task_id": "MBSWP/463", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum product subarray of the given array.\n *\n * >>> maxSubarrayProduct([1, -2, -3, 0, 7, -8, -2])\n * 112\n * >>> maxSubarrayProduct([6, -3, -10, 0, 2])\n * 180\n * >>> maxSubarrayProduct([-2, -40, 0, -2, -3])\n * 80\n */\nfunc maxSubarrayProduct(arr : [Int]) -> Int {\n    var max = arr[0]\n    var product = arr[0]\n    for i in 1..<arr.count {\n        product *= arr[i]\n        if product > max {\n            max = product\n        }\n        if product < 0 {\n            product = arr[i]\n        }\n    }\n    return max\n}\n"}
{"task_id": "MBSWP/464", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if all values are same in a dictionary.\n *\n * >>> checkValue([\"Cierra Vega\" : 12, \"Alden Cantrell\" : 12, \"Kierra Gentry\" : 12, \"Pierre Cox\" : 12], 10)\n * false\n * >>> checkValue([\"Cierra Vega\" : 12, \"Alden Cantrell\" : 12, \"Kierra Gentry\" : 12, \"Pierre Cox\" : 12], 12)\n * true\n * >>> checkValue([\"Cierra Vega\" : 12, \"Alden Cantrell\" : 12, \"Kierra Gentry\" : 12, \"Pierre Cox\" : 12], 5)\n * false\n */\nfunc checkValue(dict : [String: Int], n : Int) -> Bool {\n    var flag = true\n    for (key, value) in dict {\n        if value != n {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n"}
{"task_id": "MBSWP/465", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to drop empty items from a given dictionary.\n *\n * >>> dropEmpty([\"c1\" : \"Red\", \"c2\" : \"Green\", \"c3\" : \"none\"])\n * [\"c1\" : \"Red\", \"c2\" : \"Green\"]\n * >>> dropEmpty([\"c1\" : \"Red\", \"c2\" : \"none\", \"c3\" : \"none\"])\n * [\"c1\" : \"Red\"]\n * >>> dropEmpty([\"c1\" : \"none\", \"c2\" : \"Green\", \"c3\" : \"none\"])\n * [\"c2\" : \"Green\"]\n */\nfunc dropEmpty(dict1 : [String: String]) -> [String: String] {\n    var dict2 = [String: String]()\n    for (key, value) in dict1 {\n        if value != \"\" {\n            dict2[key] = value\n        }\n    }\n    return dict2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to drop empty items from a given array.\n *\n * >>> dropEmpty([\"Red\", \"Green\", \"\"])\n * [\"Red\", \"Green\"]\n * >>> dropEmpty([\"Red\", \"\", \"Green\"])\n * [\"Red\", \"Green\"]\n * >>> dropEmpty([\"\", \"Green\", \"\"])\n * [\"Green\"]\n */\nfunc dropEmpty(arr1 : [String]) -> [String] {\n    var arr2 = [String]()\n    for value in arr1 {\n        if value != \"\" {\n            arr2.append(value)\n        }\n    }\n    return arr2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to drop empty items from a given array.\n *\n * >>> dropEmpty([\"Red\", \"Green\", \"\"])\n * [\"Red\", \"Green\"]\n * >>> dropEmpty([\"Red\", \"\", \"Green\"])\n * [\"Red\", \"Green\"]\n * >>> dropEmpty([\"\", \"Green\", \"\"])\n * [\"Green\"]\n */\nfunc dropEmpty(arr"}
{"task_id": "MBSWP/466", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the peak element in the given array.\n *\n * >>> findPeak([1, 3, 20, 4, 1, 0], 6)\n * 2\n * >>> findPeak([2, 3, 4, 5, 6], 5)\n * 4\n * >>> findPeak([8, 9, 11, 12, 14, 15], 6)\n * 5\n */\nfunc findPeak(arr : [Int], n : Int) -> Int {\n    var left = 0\n    var right = n - 1\n    var mid = 0\n    while left <= right {\n        mid = (left + right) / 2\n        if arr[mid] > arr[mid + 1] {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return left\n}\n"}
{"task_id": "MBSWP/467", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert decimal number to octal number.\n *\n * >>> decimalToOctal(10)\n * 12\n * >>> decimalToOctal(2)\n * 2\n * >>> decimalToOctal(33)\n * 41\n */\nfunc decimalToOctal(decinum : Int) -> Int {\n    var octalnum = 0\n    var remainder = decinum\n    var power = 1\n    while remainder > 0 {\n        remainder = remainder / 8\n        octalnum = octalnum + remainder * power\n        power = power * 10\n    }\n    return octalnum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert octal number to decimal number.\n *\n * >>> octalToDecimal(12)\n * 10\n * >>> octalToDecimal(41)\n * 33\n * >>> octalToDecimal(2)\n * 2\n */\nfunc octalToDecimal(octalnum : Int) -> Int {\n    var decinum = 0\n    var remainder = octalnum\n    var power = 1\n    while remainder > 0 {\n        remainder = remainder % 8\n        decinum = decinum + remainder * power\n        power = power * 10\n    }\n    return decinum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert decimal number to hexadecimal number.\n *\n * >>> decimalToHexadecimal(10)\n * A\n * >>> decimalToHexadecimal(33)\n * 21\n * >>> decimalToHexadecimal(2)\n * 2\n */\nfunc decimalToHexadecimal(decinum : Int) -> String {\n    var hexadecimalnum = \"\"\n    var remainder = decinum\n    var power = 1\n    while remainder > 0 {\n        remainder = remainder / 16\n        hexadecimalnum = hexadecimalnum + String(remainder % 16)\n        power = power * 16\n    }\n    return hexadecimalnum\n}\n\n/**"}
{"task_id": "MBSWP/468", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n *\n * >>> maxProduct([3, 100, 4, 5, 150, 6], 6)\n * 45000\n * >>> maxProduct([4, 42, 55, 68, 80], 5)\n * 50265600\n * >>> maxProduct([10, 22, 9, 33, 21, 50, 41, 60], 8)\n * 21780000\n */\nfunc maxProduct(arr : [Int], n : Int) -> Int {\n    var maxProduct = 1\n    var product = 1\n    var max = arr[0]\n    var min = arr[0]\n    for i in 1..<n {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] < min {\n            min = arr[i]\n        }\n        product *= arr[i]\n        if product > maxProduct {\n            maxProduct = product\n        }\n        if product < min {\n            product = 1\n        }\n    }\n    return maxProduct\n}\n"}
{"task_id": "MBSWP/469", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum profit earned from a maximum of k stock transactions\n *\n * >>> maxProfit([1, 5, 2, 3, 7, 6, 4, 5], 3)\n * 10\n * >>> maxProfit([2, 4, 7, 5, 4, 3, 5], 2)\n * 7\n * >>> maxProfit([10, 6, 8, 4, 2], 2)\n * 2\n */\nfunc maxProfit(price : [Int], k : Int) -> Int {\n    var maxProfit = 0\n    var minPrice = price[0]\n    var maxPrice = price[0]\n    var maxK = k\n    for i in 1..<price.count {\n        if price[i] > maxPrice {\n            maxPrice = price[i]\n        }\n        if price[i] < minPrice {\n            minPrice = price[i]\n        }\n        if maxPrice - minPrice > maxProfit {\n            maxProfit = maxPrice - minPrice\n        }\n        if maxK == 0 {\n            break\n        }\n        maxK -= 1\n    }\n    return maxProfit\n}\n"}
{"task_id": "MBSWP/470", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the pairwise addition of the elements of the given tuples.\n *\n * >>> addPairwise([1, 5, 7, 8, 10])\n * [6, 12, 15, 18]\n * >>> addPairwise([2, 6, 8, 9, 11])\n * [8, 14, 17, 20]\n * >>> addPairwise([3, 7, 9, 10, 12])\n * [10, 16, 19, 22]\n */\nfunc addPairwise(testTup : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<testTup.count {\n        for j in i+1..<testTup.count {\n            result.append(testTup[i] + testTup[j])\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the pairwise multiplication of the elements of the given tuples.\n *\n * >>> multiplyPairwise([1, 5, 7, 8, 10])\n * [5, 35, 56, 70, 80]\n * >>> multiplyPairwise([2, 6, 8, 9, 11])\n * [12, 48, 72, 84, 96]\n * >>> multiplyPairwise([3, 7, 9, 10, 12])\n * [18, 54, 72, 90, 108]\n */\nfunc multiplyPairwise(testTup : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<testTup.count {\n        for j in i+1..<testTup.count {\n            result.append(testTup[i] * testTup[j])\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the pairwise addition of the elements of the given tuples.\n *\n * >>> addPairwise([1, 5, 7, 8, 10])\n * [6, 12, 15,"}
{"task_id": "MBSWP/471", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find remainder of array multiplication divided by n.\n *\n * >>> findRemainder([100, 10, 5, 25, 35, 14], 6, 11)\n * 9\n * >>> findRemainder([1, 1, 1], 3, 1)\n * 0\n * >>> findRemainder([1, 2, 1], 3, 2)\n * 0\n */\nfunc findRemainder(arr : [Int], lens : Int, n : Int) -> Int {\n    var sum = 0\n    for i in 0..<lens {\n        sum += arr[i]\n    }\n    return sum % n\n}\n"}
{"task_id": "MBSWP/472", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given list contains consecutive numbers or not.\n *\n * >>> checkConsecutive([1, 2, 3, 4, 5])\n * true\n * >>> checkConsecutive([1, 2, 3, 5, 6])\n * false\n * >>> checkConsecutive([1, 2, 1])\n * false\n */\nfunc checkConsecutive(l : [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    var flag = false\n    while j < l.count {\n        if l[i] + 1 == l[j] {\n            flag = true\n            i = j\n            j += 1\n        } else {\n            i += 1\n            j += 1\n        }\n    }\n    return flag\n}\n"}
{"task_id": "MBSWP/473", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n *\n * >>> tupleIntersection([[3, 4], [5, 6], [9, 10], [4, 5]], [[5, 4], [3, 4], [6, 5], [9, 11]])\n * {[4, 5], [5, 6], [3, 4]}\n * >>> tupleIntersection([[4, 1], [7, 4], [11, 13], [17, 14]], [[1, 4], [7, 4], [16, 12], [10, 13]])\n * {[4, 7], [1, 4]}\n * >>> tupleIntersection([[2, 1], [3, 2], [1, 3], [1, 4]], [[11, 2], [2, 3], [6, 2], [1, 3]])\n * {[2, 3], [1, 3]}\n */\nfunc tupleIntersection(testList1 : [[Int]], testList2 : [[Int]]) -> Set<[Int]> {\n    var result = Set<[Int]>()\n    for tuple in testList1 {\n        for tuple2 in testList2 {\n            if tuple.contains(tuple2) {\n                result.insert(tuple)\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the tuple union of elements in the given tuple list irrespective of their order.\n *\n * >>> tupleUnion([[3, 4], [5, 6], [9, 10], [4, 5]], [[5, 4], [3, 4], [6, 5], [9, 11]])\n * {[3, 4], [5, 6], [9, 10], [4, 5], [5, 4], [3, 4], [6, 5], [9, 11]}\n * >>> tupleUnion([[4, 1], [7, 4], [11, 13], [17, 14]], [[1, 4], [7, 4], [16, 12], [10, 13"}
{"task_id": "MBSWP/474", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace characters in a string.\n *\n * >>> replaceChar(\"polygon\", \"y\", \"l\")\n * \"pollgon\"\n * >>> replaceChar(\"character\", \"c\", \"a\")\n * \"aharaater\"\n * >>> replaceChar(\"python\", \"l\", \"a\")\n * \"python\"\n */\nfunc replaceChar(str1 : String, ch : String, newch : String) -> String {\n    var str2 = \"\"\n    for i in 0..<str1.count {\n        if str1[i] == ch {\n            str2 += newch\n        } else {\n            str2 += str1[i]\n        }\n    }\n    return str2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a string is a palindrome.\n *\n * >>> isPalindrome(\"racecar\")\n * true\n * >>> isPalindrome(\"racecarx\")\n * false\n */\nfunc isPalindrome(str1 : String) -> Bool {\n    var str2 = \"\"\n    for i in 0..<str1.count {\n        str2 += str1[str1.count - i - 1]\n    }\n    return str1 == str2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a string is a palindrome.\n *\n * >>> isPalindrome(\"racecar\")\n * true\n * >>> isPalindrome(\"racecarx\")\n * false\n */\nfunc isPalindrome(str1 : String) -> Bool {\n    var str2 = \"\"\n    for i in 0..<str1.count {\n        str2 += str1[str1.count - i - 1]\n    }\n    return str1 == str2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a string is a palindrome.\n *\n * >>> isPalindrome(\"racecar\")\n * true\n * >>> isPalindrome(\"racecarx"}
{"task_id": "MBSWP/475", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort counter by value.\n *\n * >>> sortCounter([\"Math\" : 81, \"Physics\" : 83, \"Chemistry\" : 87])\n * [[\"Chemistry\", 87], [\"Physics\", 83], [\"Math\", 81]]\n * >>> sortCounter([\"Math\" : 400, \"Physics\" : 300, \"Chemistry\" : 250])\n * [[\"Math\", 400], [\"Physics\", 300], [\"Chemistry\", 250]]\n * >>> sortCounter([\"Math\" : 900, \"Physics\" : 1000, \"Chemistry\" : 1250])\n * [[\"Chemistry\", 1250], [\"Physics\", 1000], [\"Math\", 900]]\n */\nfunc sortCounter(dict1 : [String: Int]) -> [[AnyHashable]] {\n    var dict2 = [String: Int]()\n    for (key, value) in dict1 {\n        dict2[key] = value\n    }\n    var sortedKeys = Array(dict2.keys.sorted())\n    var sortedValues = Array(dict2.values.sorted())\n    var sortedDict = [[AnyHashable]]()\n    for i in 0..<sortedKeys.count {\n        sortedDict.append([sortedKeys[i], sortedValues[i]])\n    }\n    return sortedDict\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of strings by length.\n *\n * >>> sortByLength([\"apple\", \"banana\", \"cabbage\"])\n * [\"cabbage\", \"apple\", \"banana\"]\n * >>> sortByLength([\"apple\", \"banana\", \"cabbage\", \"dog\", \"elephant\"])\n * [\"cabbage\", \"apple\", \"banana\", \"dog\", \"elephant\"]\n * >>> sortByLength([\"apple\", \"banana\", \"cabbage\", \"dog\", \"elephant\", \"fox\"])\n * [\"cabbage\", \"apple\", \"banana\", \"dog\", \"elephant\", \"fox\"]\n */\nfunc sortByLength(list1 : [String]) -> [String] {\n    var list2 = [String]()"}
{"task_id": "MBSWP/476", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of the largest and smallest value in a given array.\n *\n * >>> bigSum([1, 2, 3])\n * 4\n * >>> bigSum([-1, 2, 3, 4])\n * 3\n * >>> bigSum([2, 3, 6])\n * 8\n */\nfunc bigSum(nums : [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of the largest and smallest value in a given array.\n *\n * >>> bigSum([1, 2, 3])\n * 4\n * >>> bigSum([-1, 2, 3, 4])\n * 3\n * >>> bigSum([2, 3, 6])\n * 8\n */\nfunc bigSum(nums : [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }\n    }\n    return max + min\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of the largest and smallest value in a given array.\n *\n * >>> bigSum([1, 2, 3])\n * 4\n * >>> bigSum([-1, 2, 3, 4])\n * 3\n * >>> bigSum([2, 3, 6])\n * 8\n */\nfunc bigSum(nums : [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for num in nums {\n        if num > max {\n            max = num\n        }\n        if num < min {\n            min = num\n        }"}
{"task_id": "MBSWP/477", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert the given string to lower case.\n *\n * >>> isLower(\"InValid\")\n * \"invalid\"\n * >>> isLower(\"TruE\")\n * \"true\"\n * >>> isLower(\"SenTenCE\")\n * \"sentence\"\n */\nfunc isLower(string : String) -> String {\n    return string.lowercased()\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert the given string to upper case.\n *\n * >>> isUpper(\"invalid\")\n * \"INVALID\"\n * >>> isUpper(\"TRUE\")\n * \"TRUE\"\n * >>> isUpper(\"sentence\")\n * \"SENTENCE\"\n */\nfunc isUpper(string : String) -> String {\n    return string.uppercased()\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if the given string is a palindrome.\n *\n * >>> isPalindrome(\"madam\")\n * false\n * >>> isPalindrome(\"racecar\")\n * true\n * >>> isPalindrome(\"racecar\")\n * true\n */\nfunc isPalindrome(string : String) -> Bool {\n    let reversed = string.reversed()\n    return reversed == string\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if the given string is a palindrome.\n *\n * >>> isPalindrome(\"madam\")\n * false\n * >>> isPalindrome(\"racecar\")\n * true\n * >>> isPalindrome(\"racecar\")\n * true\n */\nfunc isPalindrome(string : String) -> Bool {\n    let reversed = string.reversed()\n    return reversed == string\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if the given string is a palindrome.\n *\n * >>> isPalindrome(\"madam\")\n * false\n * >>> isPalindrome(\""}
{"task_id": "MBSWP/478", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove lowercase substrings from a given string.\n *\n * >>> removeLowercase(\"PYTHon\")\n * \"PYTH\"\n * >>> removeLowercase(\"FInD\")\n * \"FID\"\n * >>> removeLowercase(\"STRinG\")\n * \"STRG\"\n */\nfunc removeLowercase(str1 : String) -> String {\n    var str2 = \"\"\n    for i in 0..<str1.count {\n        if str1[i] >= \"A\" && str1[i] <= \"Z\" {\n            str2 += str1[i]\n        }\n    }\n    return str2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all vowels from a given string.\n *\n * >>> removeVowels(\"PYTHON\")\n * \"PYTHN\"\n * >>> removeVowels(\"FIND\")\n * \"FND\"\n * >>> removeVowels(\"STRING\")\n * \"STRNG\"\n */\nfunc removeVowels(str1 : String) -> String {\n    var str2 = \"\"\n    for i in 0..<str1.count {\n        if str1[i] != \"A\" && str1[i] != \"E\" && str1[i] != \"I\" && str1[i] != \"O\" && str1[i] != \"U\" && str1[i] != \"Y\" {\n            str2 += str1[i]\n        }\n    }\n    return str2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all vowels from a given string.\n *\n * >>> removeVowels(\"PYTHON\")\n * \"PYTHN\"\n * >>> removeVowels(\"FIND\")\n * \"FND\"\n * >>> removeVowels(\"STRING\")\n * \"STRNG\"\n */\nfunc removeVowels(str1 : String) -> String {\n    var str2 = \"\"\n    for i in 0..<str1.count {"}
{"task_id": "MBSWP/479", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first digit of a given number.\n *\n * >>> firstDigit(123)\n * 1\n * >>> firstDigit(456)\n * 4\n * >>> firstDigit(12)\n * 1\n */\nfunc firstDigit(n : Int) -> Int {\n    return n % 10\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the last digit of a given number.\n *\n * >>> lastDigit(123)\n * 3\n * >>> lastDigit(456)\n * 6\n * >>> lastDigit(12)\n * 2\n */\nfunc lastDigit(n : Int) -> Int {\n    return n % 10\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of digits of a given number.\n *\n * >>> sumOfDigits(123)\n * 6\n * >>> sumOfDigits(456)\n * 15\n * >>> sumOfDigits(12)\n * 3\n */\nfunc sumOfDigits(n : Int) -> Int {\n    var sum = 0\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the product of digits of a given number.\n *\n * >>> productOfDigits(123)\n * 6\n * >>> productOfDigits(456)\n * 40\n * >>> productOfDigits(12)\n * 2\n */\nfunc productOfDigits(n : Int) -> Int {\n    var product = 1\n    while n > 0 {\n        product *= n % 10\n        n /= 10\n    }\n    return product\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the number of digits of a given number.\n *\n * >>> numberOfDigits(123)\n * 3\n * >>> numberOfDigits(456)\n * 3\n"}
{"task_id": "MBSWP/480", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum occurring character in a given string.\n *\n * >>> getMaxOccuringChar(\"data\")\n * \"a\"\n * >>> getMaxOccuringChar(\"create\")\n * \"e\"\n * >>> getMaxOccuringChar(\"brilliant girl\")\n * \"i\"\n */\nfunc getMaxOccuringChar(str1 : String) -> String {\n    var maxChar : String = \"\"\n    var maxCount : Int = 0\n    for char in str1 {\n        if str1.countOf(char) > maxCount {\n            maxChar = char\n            maxCount = str1.countOf(char)\n        }\n    }\n    return maxChar\n}\n\nprint(getMaxOccuringChar(\"data\"))\nprint(getMaxOccuringChar(\"create\"))\nprint(getMaxOccuringChar(\"brilliant girl\"))\n"}
{"task_id": "MBSWP/481", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n *\n * >>> isSubsetSum([3, 34, 4, 12, 5, 2], 6, 9)\n * true\n * >>> isSubsetSum([3, 34, 4, 12, 5, 2], 6, 30)\n * false\n * >>> isSubsetSum([3, 34, 4, 12, 5, 2], 6, 15)\n * true\n */\nfunc isSubsetSum(set : [Int], n : Int, sum : Int) -> Bool {\n    var f = Array(repeating: Array(repeating: false, count: sum + 1), count: n + 1)\n    for i in 0..<f.count {\n        for j in 0..<f[0].count {\n            if j == 0 {\n                f[i][j] = false\n            } else {\n                f[i][j] = f[i - 1][j]\n                if j >= set[i - 1] {\n                    f[i][j] = f[i][j] || f[i - 1][j - set[i - 1]]\n                }\n            }\n        }\n    }\n    return f[n][sum]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum sum subset of a given set.\n *\n * >>> maxSubsetSum([3, 34, 4, 12, 5, 2], 6)\n * 15\n * >>> maxSubsetSum([3, 34, 4, 12, 5, 2], 30)\n * 30\n * >>> maxSubsetSum([3, 34, 4, 12, 5, 2], 15)\n * 12\n */\nfunc maxSubsetSum(set : [Int], n : Int) -> Int {\n    var f = Array(repeating: Array(repeating: 0, count: n + 1), count: n + 1)\n    for i in 0..<f.count {\n        for j in 0..<f[0].count {\n            if j == 0 {\n                f[i][j]"}
{"task_id": "MBSWP/482", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n *\n * >>> match(\"Geeks\")\n * \"Yes\"\n * >>> match(\"geeksforGeeks\")\n * \"Yes\"\n * >>> match(\"geeks\")\n * \"No\"\n */\nfunc match(text : String) -> String {\n    let regex = \"\\\\w\\\\w*\"\n    let regex = NSRegularExpression(pattern: regex, options: [])\n    let matches = regex.matchesInString(text, options: [], range: NSMakeRange(0, text.length))\n    if matches.count > 0 {\n        return \"Yes\"\n    }\n    return \"No\"\n}\n"}
{"task_id": "MBSWP/483", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first natural number whose factorial is divisible by x.\n *\n * >>> firstFactorialDivisibleNumber(10)\n * 5\n * >>> firstFactorialDivisibleNumber(15)\n * 5\n * >>> firstFactorialDivisibleNumber(5)\n * 4\n */\nfunc firstFactorialDivisibleNumber(x : Int) -> Int {\n    var n = 1\n    var factorial = 1\n    while factorial % x != 0 {\n        n += 1\n        factorial *= n\n    }\n    return n\n}\n"}
{"task_id": "MBSWP/484", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove the matching tuples from the given two tuples.\n *\n * >>> removeMatchingTuple([[\"Hello\", \"dude\"], [\"How\", \"are\"], [\"you\", \"?\"]], [[\"Hello\", \"dude\"], [\"How\", \"are\"]])\n * [[\"you\", \"?\"]]\n * >>> removeMatchingTuple([[\"Part\", \"of\"], [\"the\", \"journey\"], [\"is \", \"end\"]], [[\"Journey\", \"the\"], [\"is\", \"end\"]])\n * [[\"Part\", \"of\"], [\"the\", \"journey\"], [\"is \", \"end\"]]\n * >>> removeMatchingTuple([[\"Its\", \"been\"], [\"a\", \"long\"], [\"day\", \"without\"]], [[\"a\", \"long\"], [\"my\", \"friend\"]])\n * [[\"Its\", \"been\"], [\"day\", \"without\"]]\n */\nfunc removeMatchingTuple(testList1 : [[String]], testList2 : [[String]]) -> [[String]] {\n    var result : [[String]] = []\n    for i in 0..<testList1.count {\n        for j in 0..<testList2.count {\n            if testList1[i] == testList2[j] {\n                result.append(testList1[i])\n                testList1.remove(at: i)\n                testList2.remove(at: j)\n                break\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove the matching tuples from the given two tuples.\n *\n * >>> removeMatchingTuple([[\"Hello\", \"dude\"], [\"How\", \"are\"], [\"you\", \"?\"]], [[\"Hello\", \"dude\"], [\"How\", \"are\"]])\n * [[\"you\", \"?\"]]\n * >>> removeMatchingTuple([[\"Part\", \"of\"], [\"the\", \"journey\"], [\"is \", \"end\"]], [[\"Journey\", \"the\"], [\"is\", \"end\"]])\n * [[\"Part\", \"of\"], [\"the\", \"journey\"], [\"is \", \"end"}
{"task_id": "MBSWP/485", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the largest palindromic number in the given array.\n *\n * >>> largestPalindrome([1, 232, 54545, 999991], 4)\n * 54545\n * >>> largestPalindrome([1, 2, 3, 4, 5, 50], 6)\n * 5\n */\nfunc largestPalindrome(a : [Int], n : Int) -> Int {\n    var max : Int = 0\n    for i in 0..<n {\n        for j in i..<n {\n            if a[i] * a[j] > max {\n                max = a[i] * a[j]\n            }\n        }\n    }\n    return max\n}\n\n// Test\nlargestPalindrome([1, 232, 54545, 999991], 4)\nlargestPalindrome([1, 2, 3, 4, 5, 50], 6)\n"}
{"task_id": "MBSWP/486", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to compute binomial probability for the given number.\n *\n * >>> binomialProbability(10, 5, 0.3333333333333333)\n * 0.13656454808718185\n * >>> binomialProbability(11, 6, 0.5)\n * 0.2255859375\n * >>> binomialProbability(12, 7, 0.6)\n * 0.227030335488\n */\nfunc binomialProbability(n : Int, k : Int, p : Double) -> Double {\n    var result = 1.0\n    for i in 0..<k {\n        result *= (n - i) / (i + 1)\n    }\n    return result * pow(p, k) * pow(1 - p, n - k)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to compute the factorial of the given number.\n *\n * >>> factorial(5)\n * 120\n * >>> factorial(10)\n * 3628800\n */\nfunc factorial(n : Int) -> Int {\n    var result = 1\n    for i in 1..<n {\n        result *= i\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to compute the factorial of the given number.\n *\n * >>> factorial(5)\n * 120\n * >>> factorial(10)\n * 3628800\n */\nfunc factorial(n : Int) -> Int {\n    var result = 1\n    for i in 1..<n {\n        result *= i\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to compute the factorial of the given number.\n *\n * >>> factorial(5)\n * 120\n * >>> factorial(10)\n * 3628800\n */\nfunc factorial(n : Int) -> Int {\n    var result = 1\n    for i in 1..<n {\n        result *= i\n    }\n"}
{"task_id": "MBSWP/487", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n *\n * >>> sortTuple([[1, 3], [3, 2], [2, 1]])\n * [[2, 1], [3, 2], [1, 3]]\n * >>> sortTuple([[2, 4], [3, 3], [1, 1]])\n * [[1, 1], [3, 3], [2, 4]]\n * >>> sortTuple([[3, 9], [6, 7], [4, 3]])\n * [[4, 3], [6, 7], [3, 9]]\n */\nfunc sortTuple(tup : [[Int]]) -> [[Int]] {\n    var sortedTup = tup\n    sortedTup.sort { $0[1] < $1[1] }\n    return sortedTup\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of tuples in decreasing order by the last element in each tuple.\n *\n * >>> sortTuple([[1, 3], [3, 2], [2, 1]])\n * [[2, 1], [3, 2], [1, 3]]\n * >>> sortTuple([[2, 4], [3, 3], [1, 1]])\n * [[1, 1], [3, 3], [2, 4]]\n * >>> sortTuple([[3, 9], [6, 7], [4, 3]])\n * [[4, 3], [6, 7], [3, 9]]\n */\nfunc sortTuple(tup : [[Int]]) -> [[Int]] {\n    var sortedTup = tup\n    sortedTup.sort { $0[1] > $1[1] }\n    return sortedTup\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of tuples in increasing order by the first element in each tuple.\n *\n * >>> sortTuple([[1, 3], [3, 2], [2, 1]])\n * [[1,"}
{"task_id": "MBSWP/488", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a pentagon.\n *\n * >>> areaPentagon(5)\n * 43.01193501472417\n * >>> areaPentagon(10)\n * 172.0477400588967\n * >>> areaPentagon(15)\n * 387.10741513251753\n */\nfunc areaPentagon(a : Int) -> Double {\n    return (a * a) * sqrt(3) / 2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a hexagon.\n *\n * >>> areaHexagon(5)\n * 50.0\n * >>> areaHexagon(10)\n * 200.0\n * >>> areaHexagon(15)\n * 450.0\n */\nfunc areaHexagon(a : Int) -> Double {\n    return (a * a) * sqrt(3)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a heptagon.\n *\n * >>> areaHeptagon(5)\n * 55.0\n * >>> areaHeptagon(10)\n * 225.0\n * >>> areaHeptagon(15)\n * 525.0\n */\nfunc areaHeptagon(a : Int) -> Double {\n    return (a * a) * sqrt(3) * 2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a octagon.\n *\n * >>> areaOctagon(5)\n * 60.0\n * >>> areaOctagon(10)\n * 250.0\n * >>> areaOctagon(15)\n * 600.0\n */\nfunc areaOctagon(a : Int) -> Double {\n    return (a * a) * sqrt(3) * 3\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a nonagon.\n *\n * >>> areaNonagon(5)\n *"}
{"task_id": "MBSWP/489", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the frequency of the largest value in a given array.\n *\n * >>> frequencyOfLargest(5, [1, 2, 3, 4, 4])\n * 2\n * >>> frequencyOfLargest(3, [5, 6, 5])\n * 1\n * >>> frequencyOfLargest(4, [2, 7, 7, 7])\n * 3\n */\nfunc frequencyOfLargest(n : Int, arr : [Int]) -> Int {\n    var max : Int = 0\n    var count : Int = 0\n    for i in arr {\n        if i > max {\n            max = i\n            count = 1\n        } else if i == max {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/490", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract all the pairs which are symmetric in the given tuple list.\n *\n * >>> extractSymmetric([[6, 7], [2, 3], [7, 6], [9, 8], [10, 2], [8, 9]])\n * {[6, 7], [8, 9]}\n * >>> extractSymmetric([[7, 8], [3, 4], [8, 7], [10, 9], [11, 3], [9, 10]])\n * {[9, 10], [7, 8]}\n * >>> extractSymmetric([[8, 9], [4, 5], [9, 8], [11, 10], [12, 4], [10, 11]])\n * {[8, 9], [10, 11]}\n */\nfunc extractSymmetric(testList : [[Int]]) -> Set<[Int]> {\n    var symmetricPairs = Set<[Int]>()\n    for pair in testList {\n        if pair[0] == pair[1] {\n            symmetricPairs.insert(pair)\n        }\n    }\n    return symmetricPairs\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract all the pairs which are symmetric in the given tuple list.\n *\n * >>> extractSymmetric([[6, 7], [2, 3], [7, 6], [9, 8], [10, 2], [8, 9]])\n * {[6, 7], [8, 9]}\n * >>> extractSymmetric([[7, 8], [3, 4], [8, 7], [10, 9], [11, 3], [9, 10]])\n * {[9, 10], [7, 8]}\n * >>> extractSymmetric([[8, 9], [4, 5], [9, 8], [11, 10], [12, 4], [10, 11]])\n * {[8, 9], [10, 11]}\n */\nfunc extractSymmetric(testList : [[Int]]) -> Set<[Int]> {\n    var symmetricPairs = Set<"}
{"task_id": "MBSWP/491", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of geometric progression series.\n *\n * >>> sumGp(1, 5, 2)\n * 31\n * >>> sumGp(1, 5, 4)\n * 341\n * >>> sumGp(2, 6, 3)\n * 728\n */\nfunc sumGp(a : Int, n : Int, r : Int) -> Int {\n    var sum = 0\n    for i in 0..<n {\n        sum += a * (r ** i)\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of geometric progression series.\n *\n * >>> sumGp(1, 5, 2)\n * 31\n * >>> sumGp(1, 5, 4)\n * 341\n * >>> sumGp(2, 6, 3)\n * 728\n */\nfunc sumGp(a : Int, n : Int, r : Int) -> Int {\n    var sum = 0\n    for i in 0..<n {\n        sum += a * (r ** i)\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of geometric progression series.\n *\n * >>> sumGp(1, 5, 2)\n * 31\n * >>> sumGp(1, 5, 4)\n * 341\n * >>> sumGp(2, 6, 3)\n * 728\n */\nfunc sumGp(a : Int, n : Int, r : Int) -> Int {\n    var sum = 0\n    for i in 0..<n {\n        sum += a * (r ** i)\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of geometric progression series.\n *\n * >>> sumGp(1, 5, 2)\n * 31\n * >>> sumGp(1, 5, 4)\n * 341\n * >>> sumGp(2, 6, 3)\n * 728\n"}
{"task_id": "MBSWP/492", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search an element in the given array by using binary search.\n *\n * >>> binarySearch([1, 2, 3, 5, 8], 6)\n * false\n * >>> binarySearch([7, 8, 9, 10, 13], 10)\n * true\n * >>> binarySearch([11, 13, 14, 19, 22, 36], 23)\n * false\n */\nfunc binarySearch(itemList : [Int], item : Int) -> Bool {\n    var low = 0\n    var high = itemList.count - 1\n    var mid : Int\n    var found = false\n    while low <= high && !found {\n        mid = (low + high) / 2\n        if itemList[mid] == item {\n            found = true\n        } else if itemList[mid] < item {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return found\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search an element in the given array by using linear search.\n *\n * >>> linearSearch([1, 2, 3, 5, 8], 6)\n * false\n * >>> linearSearch([7, 8, 9, 10, 13], 10)\n * true\n * >>> linearSearch([11, 13, 14, 19, 22, 36], 23)\n * false\n */\nfunc linearSearch(itemList : [Int], item : Int) -> Bool {\n    var found = false\n    for itemList[i] in itemList {\n        if itemList[i] == item {\n            found = true\n            break\n        }\n    }\n    return found\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search an element in the given array by using binary search.\n *\n * >>> binarySearch([1, 2, 3, 5, 8], 6)\n * false\n * >>> binarySearch([7, 8, 9, 10, 13], 10)\n * true\n * >>> binarySearch([11, 13, 14, 19, 22, 36], 23)\n * false\n"}
{"task_id": "MBSWP/493", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n *\n * >>> calculatePolygons(1, 1, 4, 4, 3)\n * [[[-5.0, -4.196152422706632], [-5.0, -0.7320508075688767], [-2.0, 1.0], [1.0, -0.7320508075688767], [1.0, -4.196152422706632], [-2.0, -5.928203230275509], [-5.0, -4.196152422706632]], [[1.0, -4.196152422706632], [1.0, -0.7320508075688767], [4.0, 1.0], [7.0, -0.7320508075688767], [7.0, -4.196152422706632], [4.0, -5.928203230275509], [1.0, -4.196152422706632]], [[7.0, -4.196152422706632], [7.0, -0.7320508075688767], [10.0, 1.0], [13.0, -0.7320508075688767], [13.0, -4.196152422706632], [10.0, -5.928203230275509], [7.0, -4.196152422706632]], [[-2.0, 1.0000000000000004], [-2.0, 4.464101615137755], [1.0, 6.196152422706632], [4.0, 4.464101615137755], [4.0, 1.0000000000000004], [1.0, -0.7320508075688767], [-2.0, 1.0000000000000004]], [[4.0, 1.0000000000000004], [4.0, 4.464101615137755], [7.0, 6.196152422706632], [10.0, 4.464101615137755], [10.0, 1.0000000000000004], [7.0, -0.7320508075688767], [4.0, 1.0000000000000004]], [[-5.0, 6.196152422706632], [-5.0, 9.660254037844387], [-2.0, 11.392304845413264], [1.0, 9.660254037844387], [1.0, 6.196152422706632], [-2.0, 4.464101615137755], [-5.0, 6.196152422706632]], [[1.0, 6.196152422706632], [1.0, 9.660254037844387], [4.0, 11.392304845413264], [7.0, 9.660254037844387], [7.0, 6.196152422706632], [4.0, 4.464101615137755], [1.0, 6.196152422706632]], [[7.0, 6.196152422706632], [7.0, 9.660254037844387], [10.0, 11.392304845413264], [13.0, 9.660254037844387], [13.0, 6.196152422706632], [10.0, 4.464101615137755], [7.0, 6.196152422706632]], [[-2.0, 11.392304845413264], [-2.0, 14.85640646055102], [1.0, 16.588457268119896], [4.0, 14.85640646055102], [4.0, 11.392304845413264], [1.0, 9.660254037844387], [-2.0, 11.392304845413264]], [[4.0, 11.392304845413264], [4.0, 14.85640646055102], [7.0, 16.588457268119896], [10.0, 14.85640646055102], [10.0, 11.392304845413264], [7.0, 9.660254037844387], [4.0, 11.392304845413264]]]\n * >>> calculatePolygons(5, 4, 7, 9, 8)\n * [[[-11.0, -9.856406460551018], [-11.0, -0.6188021535170058], [-3.0, 4.0], [5.0, -0.6188021535170058], [5.0, -9.856406460551018], [-3.0, -14.475208614068023], [-11.0, -9.856406460551018]], [[5.0, -9.856406460551018], [5.0, -0.6188021535170058], [13.0, 4.0], [21.0, -0.6188021535170058], [21.0, -9.856406460551018], [13.0, -14.475208614068023], [5.0, -9.856406460551018]], [[21.0, -9.856406460551018], [21.0, -0.6188021535170058], [29.0, 4.0], [37.0, -0.6188021535170058], [37.0, -9.856406460551018], [29.0, -14.475208614068023], [21.0, -9.856406460551018]], [[-3.0, 4.0], [-3.0, 13.237604307034012], [5.0, 17.856406460551018], [13.0, 13.237604307034012], [13.0, 4.0], [5.0, -0.6188021535170058], [-3.0, 4.0]], [[13.0, 4.0], [13.0, 13.237604307034012], [21.0, 17.856406460551018], [29.0, 13.237604307034012], [29.0, 4.0], [21.0, -0.6188021535170058], [13.0, 4.0]], [[-11.0, 17.856406460551018], [-11.0, 27.09401076758503], [-3.0, 31.712812921102035], [5.0, 27.09401076758503], [5.0, 17.856406460551018], [-3.0, 13.237604307034012], [-11.0, 17.856406460551018]], [[5.0, 17.856406460551018], [5.0, 27.09401076758503], [13.0, 31.712812921102035], [21.0, 27.09401076758503], [21.0, 17.856406460551018], [13.0, 13.237604307034012], [5.0, 17.856406460551018]], [[21.0, 17.856406460551018], [21.0, 27.09401076758503], [29.0, 31.712812921102035], [37.0, 27.09401076758503], [37.0, 17.856406460551018], [29.0, 13.237604307034012], [21.0, 17.856406460551018]], [[-3.0, 31.712812921102035], [-3.0, 40.95041722813605], [5.0, 45.569219381653056], [13.0, 40.95041722813605], [13.0, 31.712812921102035], [5.0, 27.09401076758503], [-3.0, 31.712812921102035]], [[13.0, 31.712812921102035], [13.0, 40.95041722813605], [21.0, 45.569219381653056], [29.0, 40.95041722813605], [29.0, 31.712812921102035], [21.0, 27.09401076758503], [13.0, 31.712812921102035]]]\n * >>> calculatePolygons(9, 6, 4, 3, 2)\n * [[[5.0, 2.5358983848622456], [5.0, 4.8452994616207485], [7.0, 6.0], [9.0, 4.8452994616207485], [9.0, 2.5358983848622456], [7.0, 1.3811978464829942], [5.0, 2.5358983848622456]], [[7.0, 6.0], [7.0, 8.309401076758503], [9.0, 9.464101615137753], [11.0, 8.309401076758503], [11.0, 6.0], [9.0, 4.8452994616207485], [7.0, 6.0]]]\n */\nfunc calculatePolygons(startx : Int, starty : Int, endx : Int, endy : Int, radius : Int) -> [[[Double]]] {\n *"}
{"task_id": "MBSWP/494", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given binary tuple to integer.\n *\n * >>> binaryToInteger([1, 1, 0, 1, 0, 0, 1])\n * \"105\"\n * >>> binaryToInteger([0, 1, 1, 0, 0, 1, 0, 1])\n * \"101\"\n * >>> binaryToInteger([1, 1, 0, 1, 0, 1])\n * \"53\"\n */\nfunc binaryToInteger(testTup : [Int]) -> String {\n    var result = \"\"\n    for i in testTup {\n        result += String(i)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given integer to binary tuple.\n *\n * >>> integerToBinary(105)\n * [1, 1, 0, 1, 0, 0, 1]\n * >>> integerToBinary(101)\n * [0, 1, 1, 0, 0, 1, 0, 1]\n * >>> integerToBinary(53)\n * [1, 1, 0, 1, 0, 1]\n */\nfunc integerToBinary(testInt : Int) -> [Int] {\n    var result = [Int]()\n    var temp = testInt\n    while temp > 0 {\n        result.insert(temp % 2, at: 0)\n        temp /= 2\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given binary tuple to decimal.\n *\n * >>> binaryToDecimal([1, 1, 0, 1, 0, 0, 1])\n * 105\n * >>> binaryToDecimal([0, 1, 1, 0, 0, 1, 0, 1])\n * 101\n * >>> binaryToDecimal([1, 1, 0, 1, 0, 1])\n * 53\n */\nfunc binaryToDecimal(testTup : [Int]) -> Int {\n    var result = 0\n    for i in testTup {\n        result *= 2\n        result += i\n    }\n    return result\n}"}
{"task_id": "MBSWP/495", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove lowercase substrings from a given string by using regex.\n *\n * >>> removeLowercase(\"KDeoALOklOOHserfLoAJSIskdsf\")\n * \"KDALOOOHLAJSI\"\n * >>> removeLowercase(\"ProducTnamEstreAmIngMediAplAYer\")\n * \"PTEAIMAAY\"\n * >>> removeLowercase(\"maNufacTuredbYSheZenTechNolOGIes\")\n * \"NTYSZTNOGI\"\n */\nfunc removeLowercase(str1 : String) -> String {\n    let lowercase = \"abcdefghijklmnopqrstuvwxyz\"\n    let str2 = str1.lowercased()\n    let str3 = str2.filter({ (char : Character) -> Bool in\n        return !lowercase.contains(char)\n    })\n    return str3\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all vowels from a given string by using regex.\n *\n * >>> removeVowels(\"KDeoALOklOOHserfLoAJSIskdsf\")\n * \"KDELOKLOLHSEFJSI\"\n * >>> removeVowels(\"ProducTnamEstreAmIngMediAplAYer\")\n * \"PRODTNAMEAMINGMEDIAPLAYER\"\n * >>> removeVowels(\"maNufacTuredbYSheZenTechNolOGIes\")\n * \"MNUFACTUREDBYSHEZENTECHNOLOGIES\"\n */\nfunc removeVowels(str1 : String) -> String {\n    let vowels = \"aeiou\"\n    let str2 = str1.lowercased()\n    let str3 = str2.filter({ (char : Character) -> Bool in\n        return !vowels.contains(char)\n    })\n    return str3\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all vowels"}
{"task_id": "MBSWP/496", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n *\n * >>> heapQueueSmallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3)\n * [14, 22, 25]\n * >>> heapQueueSmallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2)\n * [14, 22]\n * >>> heapQueueSmallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)\n * [14, 22, 22, 25, 35]\n */\nfunc heapQueueSmallest(nums : [Int], n : Int) -> [Int] {\n    var heap = Heap(nums)\n    var smallest = [Int]()\n    for i in 0..<n {\n        smallest.append(heap.pop())\n    }\n    return smallest\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\n *\n * >>> heapQueueLargest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3)\n * [85, 75, 65]\n * >>> heapQueueLargest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2)\n * [85, 75]\n * >>> heapQueueLargest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)\n * [85, 75, 65, 58, 35]\n */\nfunc heapQueueLargest(nums : [Int], n : Int) -> [Int] {\n    var heap = Heap(nums)\n    var largest = [Int]()\n    for i in 0..<n {\n        largest.append(heap.pop())\n    }\n    return largest\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the smallest integers from a given list of numbers using heap sort algorithm.\n *\n * >>> heapSortSmallest([25,"}
{"task_id": "MBSWP/497", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the surface area of a cone.\n *\n * >>> surfaceareaCone(5, 12)\n * 282.7433388230814\n * >>> surfaceareaCone(10, 15)\n * 880.5179353159282\n * >>> surfaceareaCone(19, 17)\n * 2655.923961165254\n */\nfunc surfaceareaCone(r : Int, h : Int) -> Double {\n    return 3.14159 * r * r * h / 3\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cone.\n *\n * >>> volumeCone(5, 12)\n * 715.9229915966386\n * >>> volumeCone(10, 15)\n * 2235.9229915966386\n * >>> volumeCone(19, 17)\n * 6051.923961165254\n */\nfunc volumeCone(r : Int, h : Int) -> Double {\n    return (3.14159 * r * r * h) / 3\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the surface area of a cylinder.\n *\n * >>> surfaceareaCylinder(5, 12)\n * 282.7433388230814\n * >>> surfaceareaCylinder(10, 15)\n * 880.5179353159282\n * >>> surfaceareaCylinder(19, 17)\n * 2655.923961165254\n */\nfunc surfaceareaCylinder(r : Int, h : Int) -> Double {\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cylinder.\n *\n * >>> volumeCylinder(5, 12)\n * 715.9229915966386\n * >>> volumeCylinder(10, 15)\n * 2235.9229915966386\n * >>> volume"}
{"task_id": "MBSWP/498", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find gcd of two positive integers.\n *\n * >>> gcd(12, 17)\n * 1\n * >>> gcd(4, 6)\n * 2\n * >>> gcd(2, 9)\n * 1\n */\nfunc gcd(x : Int, y : Int) -> Int {\n    if y == 0 {\n        return x\n    }\n    return gcd(y, x % y)\n}\n"}
{"task_id": "MBSWP/499", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the diameter of a circle.\n *\n * >>> diameterCircle(10)\n * 20\n * >>> diameterCircle(40)\n * 80\n * >>> diameterCircle(15)\n * 30\n */\nfunc diameterCircle(r : Int) -> Int {\n    return 2 * r * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a circle.\n *\n * >>> areaCircle(10)\n * 314.159\n * >>> areaCircle(40)\n * 1256.63\n * >>> areaCircle(15)\n * 78.539\n */\nfunc areaCircle(r : Int) -> Double {\n    return 3.14159 * r * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the circumference of a circle.\n *\n * >>> circumferenceCircle(10)\n * 62.8318\n * >>> circumferenceCircle(40)\n * 251.9641\n * >>> circumferenceCircle(15)\n * 62.8318\n */\nfunc circumferenceCircle(r : Int) -> Double {\n    return 2 * 3.14159 * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a rectangle.\n *\n * >>> areaRectangle(10, 20)\n * 200\n * >>> areaRectangle(40, 20)\n * 800\n * >>> areaRectangle(15, 30)\n * 450\n */\nfunc areaRectangle(w : Int, h : Int) -> Int {\n    return w * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a rectangle.\n *\n * >>> perimeterRectangle(10, 20)\n * 60\n * >>> perimeterRectangle(40, 20)\n * 240\n * >>> perimeterRectangle(15, 30)\n * 90\n */\nfunc perimeterRectangle(w : Int, h : Int) -> Int {\n    return 2 * (w +"}
{"task_id": "MBSWP/500", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to concatenate all elements of the given list into a string.\n *\n * >>> concatenateElements([\"hello\", \"there\", \"have\", \"a\", \"rocky\", \"day\"])\n * \"  hello there have a rocky day\"\n * >>> concatenateElements([\"Hi\", \"there\", \"How\", \"are\", \"you\"])\n * \"  Hi there How are you\"\n * >>> concatenateElements([\"Part\", \"of\", \"the\", \"journey\", \"is\", \"end\"])\n * \"  Part of the journey is end\"\n */\nfunc concatenateElements(list : [String]) -> String {\n    var result = \"\"\n    for element in list {\n        result += \"  \" + element\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to concatenate all elements of the given list into a string,\n *   but with a space between each element.\n *\n * >>> concatenateElementsWithSpace([\"hello\", \"there\", \"have\", \"a\", \"rocky\", \"day\"])\n * \"hello there have a rocky day\"\n * >>> concatenateElementsWithSpace([\"Hi\", \"there\", \"How\", \"are\", \"you\"])\n * \"Hi there How are you\"\n * >>> concatenateElementsWithSpace([\"Part\", \"of\", \"the\", \"journey\", \"is\", \"end\"])\n * \"Part of the journey is end\"\n */\nfunc concatenateElementsWithSpace(list : [String]) -> String {\n    var result = \"\"\n    for element in list {\n        result += element + \" \"\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to concatenate all elements of the given list into a string,\n *   but with a space between each element, and a new line at the end.\n *\n * >>> concatenateElementsWithSpaceAndNewLine([\"hello\", \"there\", \"have\", \"a\", \"rocky\", \"day"}
{"task_id": "MBSWP/501", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find common divisor between two numbers in a given pair.\n *\n * >>> numCommDiv(2, 4)\n * 2\n * >>> numCommDiv(2, 8)\n * 2\n * >>> numCommDiv(12, 24)\n * 6\n */\nfunc numCommDiv(x : Int, y : Int) -> Int {\n    var x = x\n    var y = y\n    var commonDivisor = 1\n    while x != y {\n        if x > y {\n            x = x - y\n        } else {\n            y = y - x\n        }\n    }\n    return commonDivisor\n}\n"}
{"task_id": "MBSWP/502", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find remainder of two numbers.\n *\n * >>> find(3, 3)\n * 0\n * >>> find(10, 3)\n * 1\n * >>> find(16, 5)\n * 1\n */\nfunc find(n : Int, m : Int) -> Int {\n    return n % m\n}\n"}
{"task_id": "MBSWP/503", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add consecutive numbers of a given list.\n *\n * >>> addConsecutiveNums([1, 1, 3, 4, 4, 5, 6, 7])\n * [2, 4, 7, 8, 9, 11, 13]\n * >>> addConsecutiveNums([4, 5, 8, 9, 6, 10])\n * [9, 13, 17, 15, 16]\n * >>> addConsecutiveNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [3, 5, 7, 9, 11, 13, 15, 17, 19]\n */\nfunc addConsecutiveNums(nums : [Int]) -> [Int] {\n    var result = [Int]()\n    var sum = 0\n    for num in nums {\n        sum += num\n        result.append(sum)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the longest word in a given sentence.\n *\n * >>> findLongestWord(\"The quick brown fox jumps over the lazy dog\")\n * \"jumps\"\n * >>> findLongestWord(\"The quick brown fox jumps over the lazy dog\")\n * \"fox\"\n * >>> findLongestWord(\"The quick brown fox jumps over the lazy dog\")\n * \"dog\"\n */\nfunc findLongestWord(sentence : String) -> String {\n    var longestWord = \"\"\n    var words = sentence.components(separatedBy: CharacterSet.whitespacesAndNewlines)\n    for word in words {\n        if word.count > longestWord.count {\n            longestWord = word\n        }\n    }\n    return longestWord\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the longest word in a given sentence.\n *\n * >>> findLongestWord(\"The quick brown fox jumps over the lazy dog\")\n * \"jumps\"\n * >>> findLongestWord(\"The quick brown fox jumps over the lazy dog\")\n * \"fox\"\n * >>> findLongestWord(\""}
{"task_id": "MBSWP/504", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the cube sum of first n natural numbers.\n *\n * >>> sumOfSeries(5)\n * 225\n * >>> sumOfSeries(2)\n * 9\n * >>> sumOfSeries(3)\n * 36\n */\nfunc sumOfSeries(n : Int) -> Int {\n    var sum = 0\n    for i in 1..<n {\n        sum += i * i * i\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/505", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to move all zeroes to the end of the given array.\n *\n * >>> reOrder([6, 0, 8, 2, 3, 0, 4, 0, 1])\n * [6, 8, 2, 3, 4, 1, 0, 0, 0]\n * >>> reOrder([4, 0, 2, 7, 0, 9, 0, 12, 0])\n * [4, 2, 7, 9, 12, 0, 0, 0, 0]\n * >>> reOrder([3, 11, 0, 74, 14, 0, 1, 0, 2])\n * [3, 11, 74, 14, 1, 2, 0, 0, 0]\n */\nfunc reOrder(a : [Int]) -> [Int] {\n    var i = 0\n    var j = 0\n    var k = 0\n    var temp = 0\n    var count = 0\n    var count2 = 0\n    var count3 = 0\n    var count4 = 0\n    var count5 = 0\n    var count6 = 0\n    var count7 = 0\n    var count8 = 0\n    var count9 = 0\n    var count10 = 0\n    var count11 = 0\n    var count12 = 0\n    var count13 = 0\n    var count14 = 0\n    var count15 = 0\n    var count16 = 0\n    var count17 = 0\n    var count18 = 0\n    var count19 = 0\n    var count20 = 0\n    var count21 = 0\n    var count22 = 0\n    var count23 = 0\n    var count24 = 0\n    var count25 = 0\n    var count26 = 0\n    var count27 = 0\n    var count28 = 0\n    var count29 = 0\n    var count30 = 0\n    var count31 = 0\n    var count32 = 0\n    var count33 = 0\n    var count34 = 0\n    var count35 = 0\n    var count36 = 0\n    var count37 = 0\n    var count38 = 0\n    var count39 = 0\n    var count40 = 0\n    var count41 = 0\n    var count42 = 0\n    var count43"}
{"task_id": "MBSWP/506", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the permutation coefficient of given p(n, k).\n *\n * >>> permutationCoefficient(10, 2)\n * 90\n * >>> permutationCoefficient(10, 3)\n * 720\n * >>> permutationCoefficient(10, 1)\n * 10\n */\nfunc permutationCoefficient(n : Int, k : Int) -> Int {\n    if k == 0 {\n        return 1\n    }\n    if k == 1 {\n        return n\n    }\n    if k == n {\n        return 1\n    }\n    if k > n {\n        return 0\n    }\n    return n * permutationCoefficient(n - 1, k - 1) / k\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the combination coefficient of given c(n, k).\n *\n * >>> combinationCoefficient(10, 2)\n * 45\n * >>> combinationCoefficient(10, 3)\n * 120\n * >>> combinationCoefficient(10, 1)\n * 10\n */\nfunc combinationCoefficient(n : Int, k : Int) -> Int {\n    if k == 0 {\n        return 1\n    }\n    if k == 1 {\n        return n\n    }\n    if k == n {\n        return 1\n    }\n    if k > n {\n        return 0\n    }\n    return permutationCoefficient(n, k) / k\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the factorial of given n.\n *\n * >>> factorial(5)\n * 120\n * >>> factorial(0)\n * 1\n */\nfunc factorial(n : Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * factorial(n - 1)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the binomial coefficient of given b(n, k).\n *\n * >>> binomialCoefficient(10"}
{"task_id": "MBSWP/507", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove specific words from a given list.\n *\n * >>> removeWords([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"], [\"white\", \"orange\"])\n * [\"red\", \"green\", \"blue\", \"black\"]\n * >>> removeWords([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"], [\"black\", \"orange\"])\n * [\"red\", \"green\", \"blue\", \"white\"]\n * >>> removeWords([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"], [\"blue\", \"white\"])\n * [\"red\", \"green\", \"black\", \"orange\"]\n */\nfunc removeWords(list1 : [String], removewords : [String]) -> [String] {\n    var list2 = list1\n    for word in removewords {\n        list2.removeAll(where: { $0 == word })\n    }\n    return list2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove specific words from a given list.\n *\n * >>> removeWords([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"], [\"white\", \"orange\"])\n * [\"red\", \"green\", \"blue\", \"black\"]\n * >>> removeWords([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"], [\"black\", \"orange\"])\n * [\"red\", \"green\", \"blue\", \"white\"]\n * >>> removeWords([\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"], [\"blue\", \"white\"])\n * [\"red\", \"green\", \"black\", \"orange\"]\n */\nfunc removeWords(list1 : [String], removewords : [String]) -> [String] {\n    var list2 = list1\n    for word in removewords {\n        list2.removeAll(where: { $0 == word })\n    }\n    return list2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove specific words from a given list.\n *\n * >>> removeWords([\""}
{"task_id": "MBSWP/508", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the common elements between two given lists are in the same order or not.\n *\n * >>> sameOrder([\"red\", \"green\", \"black\", \"orange\"], [\"red\", \"pink\", \"green\", \"white\", \"black\"])\n * true\n * >>> sameOrder([\"red\", \"pink\", \"green\", \"white\", \"black\"], [\"white\", \"orange\", \"pink\", \"black\"])\n * false\n * >>> sameOrder([\"red\", \"green\", \"black\", \"orange\"], [\"red\", \"pink\", \"green\", \"white\", \"black\"])\n * true\n */\nfunc sameOrder(l1 : [String], l2 : [String]) -> Bool {\n    var l1_copy = l1\n    var l2_copy = l2\n    var l1_copy_index = 0\n    var l2_copy_index = 0\n    var l1_copy_length = l1_copy.count\n    var l2_copy_length = l2_copy.count\n    var l1_copy_element : String\n    var l2_copy_element : String\n    var l1_copy_element_index : Int\n    var l2_copy_element_index : Int\n    var l1_copy_element_index_found : Bool\n    var l2_copy_element_index_found : Bool\n    var l1_copy_element_index_found_index : Int\n    var l2_copy_element_index_found_index : Int\n    var l1_copy_element_index_found_element : String\n    var l2_copy_element_index_found_element : String\n    var l1_copy_element_index_found_element_index : Int\n    var l2_copy_element_index_found_element_index : Int\n    var l1_copy_element_index_found_element_index_found : Bool\n    var l2_copy_element_index_found_element_index_found : Bool\n    var l1_copy_element_index_found_element_index_found_index : Int\n    var l2"}
{"task_id": "MBSWP/509", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the average of odd numbers till a given odd number.\n *\n * >>> averageOdd(9)\n * 5\n * >>> averageOdd(5)\n * 3\n * >>> averageOdd(11)\n * 6\n */\nfunc averageOdd(n : Int) -> Int {\n    var sum = 0\n    var count = 0\n    var i = 1\n    while i <= n {\n        if i % 2 == 1 {\n            sum += i\n            count += 1\n        }\n        i += 1\n    }\n    return sum / count\n}\n"}
{"task_id": "MBSWP/510", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n *\n * >>> noOfSubsequences([1, 2, 3, 4], 10)\n * 11\n * >>> noOfSubsequences([4, 8, 7, 2], 50)\n * 9\n * >>> noOfSubsequences([5, 6, 7, 8], 15)\n * 4\n */\nfunc noOfSubsequences(arr : [Int], k : Int) -> Int {\n    var count = 0\n    var product = 1\n    var i = 0\n    var j = 0\n    var k = 0\n    while i < arr.count {\n        while j < arr.count {\n            while k < arr.count {\n                product = product * arr[k]\n                if product < k {\n                    count += 1\n                }\n                k += 1\n            }\n            k = 0\n            j += 1\n        }\n        j = 0\n        product = 1\n        i += 1\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/511", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find minimum sum of factors of a given number.\n *\n * >>> findMinSum(12)\n * 7\n * >>> findMinSum(105)\n * 15\n * >>> findMinSum(2)\n * 2\n */\nfunc findMinSum(num : Int) -> Int {\n    var minSum = num\n    for i in 1...num {\n        if num % i == 0 {\n            minSum = min(minSum, i)\n        }\n    }\n    return minSum\n}\n"}
{"task_id": "MBSWP/512", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the element frequency in the mixed nested tuple.\n *\n * >>> countElementFreq([5, 6, [5, 6], 7, [8, 9], 9])\n * [5 : 2, 6 : 2, 7 : 1, 8 : 1, 9 : 2]\n * >>> countElementFreq([6, 7, [6, 7], 8, [9, 10], 10])\n * [6 : 2, 7 : 2, 8 : 1, 9 : 1, 10 : 2]\n * >>> countElementFreq([7, 8, [7, 8], 9, [10, 11], 11])\n * [7 : 2, 8 : 2, 9 : 1, 10 : 1, 11 : 2]\n */\nfunc countElementFreq(testTuple : [AnyHashable]) -> [Int: Int] {\n    var result : [Int: Int] = [:]\n    for element in testTuple {\n        if let element = element as? Int {\n            if let count = result[element] {\n                result[element] = count + 1\n            } else {\n                result[element] = 1\n            }\n        } else if let element = element as? [AnyHashable] {\n            result = countElementFreq(element)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the element frequency in the mixed nested tuple.\n *\n * >>> countElementFreq([5, 6, [5, 6], 7, [8, 9], 9])\n * [5 : 2, 6 : 2, 7 : 1, 8 : 1, 9 : 2]\n * >>> countElementFreq([6, 7, [6, 7], 8, [9, 10], 10])\n * [6 : 2, 7 : 2, 8 : 1, 9 : 1, 10 : 2]\n * >>> countElementFreq([7, 8, [7, 8], 9, [10, 11], 11])\n * [7 : 2, 8 : 2, 9 : 1, 10 : 1, 11 : 2]\n */\nfunc countElementFreq(testT"}
{"task_id": "MBSWP/513", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert tuple into list by adding the given string after every element.\n *\n * >>> addStr([5, 6, 7, 4, 9], \"FDF\")\n * [5, \"FDF\", 6, \"FDF\", 7, \"FDF\", 4, \"FDF\", 9, \"FDF\"]\n * >>> addStr([7, 8, 9, 10], \"PF\")\n * [7, \"PF\", 8, \"PF\", 9, \"PF\", 10, \"PF\"]\n * >>> addStr([11, 14, 12, 1, 4], \"JH\")\n * [11, \"JH\", 14, \"JH\", 12, \"JH\", 1, \"JH\", 4, \"JH\"]\n */\nfunc addStr(testTup : [Int], k : String) -> [AnyHashable] {\n    var testList = testTup\n    for i in 0..<testList.count {\n        testList[i] = testList[i] + k\n    }\n    return testList\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert tuple into list by adding the given string before every element.\n *\n * >>> addStr([5, 6, 7, 4, 9], \"FDF\")\n * [5, \"FDF\", 6, \"FDF\", 7, \"FDF\", 4, \"FDF\", 9, \"FDF\"]\n * >>> addStr([7, 8, 9, 10], \"PF\")\n * [7, \"PF\", 8, \"PF\", 9, \"PF\", 10, \"PF\"]\n * >>> addStr([11, 14, 12, 1, 4], \"JH\")\n * [11, \"JH\", 14, \"JH\", 12, \"JH\", 1, \"JH\", 4, \"JH\"]\n */\nfunc addStr(testTup : [Int], k : String) -> [AnyHashable] {\n    var testList = testTup\n    for i in 0..<testList.count {\n        testList[i] = k + testList[i]\n    }\n    return testList"}
{"task_id": "MBSWP/514", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the summation of tuple elements in the given tuple list.\n *\n * >>> sumElements([7, 8, 9, 1, 10, 7])\n * 42\n * >>> sumElements([1, 2, 3, 4, 5, 6])\n * 21\n * >>> sumElements([11, 12, 13, 45, 14])\n * 95\n */\nfunc sumElements(testTup : [Int]) -> Int {\n    var sum = 0\n    for i in testTup {\n        sum += i\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the summation of tuple elements in the given tuple list.\n *\n * >>> sumElements([7, 8, 9, 1, 10, 7])\n * 42\n * >>> sumElements([1, 2, 3, 4, 5, 6])\n * 21\n * >>> sumElements([11, 12, 13, 45, 14])\n * 95\n */\nfunc sumElements(testTup : [Int]) -> Int {\n    var sum = 0\n    for i in testTup {\n        sum += i\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the summation of tuple elements in the given tuple list.\n *\n * >>> sumElements([7, 8, 9, 1, 10, 7])\n * 42\n * >>> sumElements([1, 2, 3, 4, 5, 6])\n * 21\n * >>> sumElements([11, 12, 13, 45, 14])\n * 95\n */\nfunc sumElements(testTup : [Int]) -> Int {\n    var sum = 0\n    for i in testTup {\n        sum += i\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the summation of tuple elements in the given tuple list.\n *\n * >>> sumElements([7, 8, 9, 1, 10, 7])\n *"}
{"task_id": "MBSWP/515", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if there is a subset with sum divisible by m.\n *\n * >>> modularSum([3, 1, 7, 5], 4, 6)\n * true\n * >>> modularSum([1, 7], 2, 5)\n * false\n * >>> modularSum([1, 6], 2, 5)\n * false\n */\nfunc modularSum(arr : [Int], n : Int, m : Int) -> Bool {\n    var sum = 0\n    for i in arr {\n        sum += i\n    }\n    return sum % m == 0\n}\n"}
{"task_id": "MBSWP/516", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of elements using radix sort.\n *\n * >>> radixSort([15, 79, 25, 68, 37])\n * [15, 25, 37, 68, 79]\n * >>> radixSort([9, 11, 8, 7, 3, 2])\n * [2, 3, 7, 8, 9, 11]\n * >>> radixSort([36, 12, 24, 26, 29])\n * [12, 24, 26, 29, 36]\n */\nfunc radixSort(nums : [Int]) -> [Int] {\n    var nums = nums\n    var max = nums.max()!\n    var min = nums.min()!\n    var maxDigit = Int(max.toString().count)\n    var digit = 0\n    var buckets = [[Int]]()\n    var bucketsCount = [[Int]]()\n    var bucketsCountSum = 0\n    var bucketsCountSumMax = 0\n    var bucketsCountSumMin = 0\n    var bucketsCountSumMaxMin = 0\n    var bucketsCountSumMaxMinMax = 0\n    var bucketsCountSumMaxMinMaxMax = 0\n    var bucketsCountSumMaxMinMaxMaxMax = 0\n    var bucketsCountSumMaxMinMaxMaxMaxMax = 0\n    var bucketsCountSumMaxMinMaxMaxMaxMaxMax = 0\n    var bucketsCountSumMaxMinMaxMaxMaxMaxMaxMax = 0\n    var bucketsCountSumMaxMinMaxMaxMaxMaxMaxMaxMax = 0\n    var bucketsCountSumMaxMinMaxMaxMaxMaxMaxMaxMaxMax = 0\n    var bucketsCountSumMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n    var bucketsCountSumMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n    var bucketsCountSumMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n    var bucketsCountSumMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n    var bucketsCountSumMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n    var bucketsCountSumMaxMinMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMaxMax = 0\n    var bucketsCountSumMaxMinMaxMaxMaxMax"}
{"task_id": "MBSWP/517", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the largest postive number from the given list.\n *\n * >>> largestPos([1, 2, 3, 4, -1])\n * 4\n * >>> largestPos([0, 1, 2, -5, -1, 6])\n * 6\n * >>> largestPos([0, 0, 1, 0])\n * 1\n */\nfunc largestPos(list1 : [Int]) -> Int {\n    var largest = 0\n    for i in list1 {\n        if i > largest {\n            largest = i\n        }\n    }\n    return largest\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the smallest negative number from the given list.\n *\n * >>> smallestNeg([1, 2, 3, 4, -1])\n * -1\n * >>> smallestNeg([0, 1, 2, -5, -1, 6])\n * -5\n * >>> smallestNeg([0, 0, 1, 0])\n * 0\n */\nfunc smallestNeg(list1 : [Int]) -> Int {\n    var smallest = 0\n    for i in list1 {\n        if i < smallest {\n            smallest = i\n        }\n    }\n    return smallest\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the largest negative number from the given list.\n *\n * >>> largestNeg([1, 2, 3, 4, -1])\n * -1\n * >>> largestNeg([0, 1, 2, -5, -1, 6])\n * -1\n * >>> largestNeg([0, 0, 1, 0])\n * 0\n */\nfunc largestNeg(list1 : [Int]) -> Int {\n    var largest = 0\n    for i in list1 {\n        if i < largest {\n            largest = i\n        }\n    }\n    return largest\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the smallest positive number from the given list.\n *\n * >>> smallestPos([1, 2, 3, 4, -"}
{"task_id": "MBSWP/518", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the square root of a perfect number.\n *\n * >>> sqrtRoot(4)\n * 2\n * >>> sqrtRoot(16)\n * 4\n * >>> sqrtRoot(400)\n * 20\n */\nfunc sqrtRoot(num : Int) -> Int {\n    var n = num\n    var i = 1\n    while i * i < n {\n        i += 1\n    }\n    return i\n}\n"}
{"task_id": "MBSWP/519", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate volume of a tetrahedron.\n *\n * >>> volumeTetrahedron(10)\n * 117.85\n * >>> volumeTetrahedron(15)\n * 397.75\n * >>> volumeTetrahedron(20)\n * 942.81\n */\nfunc volumeTetrahedron(num : Int) -> Double {\n    let a = num\n    let b = num * num\n    let c = num * num * num\n    let d = a * b\n    let e = b * c\n    let f = c * a\n    let g = a * d\n    let h = b * e\n    let i = c * f\n    let j = d * e\n    let k = e * f\n    let l = f * a\n    let m = a * h\n    let n = b * i\n    let o = c * j\n    let p = d * k\n    let q = e * l\n    let r = f * m\n    let s = h * i\n    let t = i * j\n    let u = j * k\n    let v = k * l\n    let w = l * m\n    let x = m * n\n    let y = n * o\n    let z = o * p\n    let aa = p * q\n    let bb = q * r\n    let cc = r * s\n    let dd = s * t\n    let ee = t * u\n    let ff = u * v\n    let gg = v * w\n    let hh = w * x\n    let ii = x * y\n    let jj = y * z\n    let kk = z * aa\n    let ll = aa * bb\n    let mm = bb * cc\n    let nn = cc * dd\n    let oo = dd * ee\n    let pp = ee * ff\n    let qq = ff * gg\n    let rr = gg * hh\n    let ss = hh * ii\n    let tt = ii * jj\n    let uu = jj * kk\n    let vv"}
{"task_id": "MBSWP/520", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lcm of the given array elements.\n *\n * >>> getLcm([2, 7, 3, 9, 4])\n * 252\n * >>> getLcm([1, 2, 8, 3])\n * 24\n * >>> getLcm([3, 8, 4, 10, 5])\n * 120\n */\nfunc getLcm(l : [Int]) -> Int {\n    var lcm = l[0]\n    for i in 1..<l.count {\n        lcm = lcm * l[i] / gcd(lcm, l[i])\n    }\n    return lcm\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the gcd of the given array elements.\n *\n * >>> getGcd([2, 7, 3, 9, 4])\n * 3\n * >>> getGcd([1, 2, 8, 3])\n * 1\n * >>> getGcd([3, 8, 4, 10, 5])\n * 1\n */\nfunc getGcd(l : [Int]) -> Int {\n    var gcd = l[0]\n    for i in 1..<l.count {\n        gcd = gcd * l[i] / lcm(gcd, l[i])\n    }\n    return gcd\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of the given array elements.\n *\n * >>> getSum([2, 7, 3, 9, 4])\n * 25\n * >>> getSum([1, 2, 8, 3])\n * 10\n * >>> getSum([3, 8, 4, 10, 5])\n * 30\n */\nfunc getSum(l : [Int]) -> Int {\n    var sum = 0\n    for i in l {\n        sum += i\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the product of the given array elements.\n *\n * >>> getProduct([2, 7, 3, 9"}
{"task_id": "MBSWP/521", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print check if the triangle is scalene or not.\n *\n * >>> checkIsosceles(6, 8, 12)\n * true\n * >>> checkIsosceles(6, 6, 12)\n * false\n * >>> checkIsosceles(6, 15, 20)\n * true\n */\nfunc checkIsosceles(x : Int, y : Int, z : Int) -> Bool {\n    if x == y || y == z || x == z {\n        return false\n    }\n    return true\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print check if the triangle is equilateral or not.\n *\n * >>> checkIsosceles(6, 8, 12)\n * true\n * >>> checkIsosceles(6, 6, 12)\n * false\n * >>> checkIsosceles(6, 15, 20)\n * true\n */\nfunc checkEquilateral(x : Int, y : Int, z : Int) -> Bool {\n    if x == y && y == z {\n        return true\n    }\n    return false\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print check if the triangle is isosceles or not.\n *\n * >>> checkIsosceles(6, 8, 12)\n * true\n * >>> checkIsosceles(6, 6, 12)\n * false\n * >>> checkIsosceles(6, 15, 20)\n * true\n */\nfunc checkIsosceles(x : Int, y : Int, z : Int) -> Bool {\n    if x == y || y == z || x == z {\n        return true\n    }\n    return false\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print check if the triangle is scalene or not.\n *\n * >>> checkIsosceles(6, 8, 12)\n * true\n * >>> checkIsosceles(6, 6, 12)\n * false\n * >>> checkIsos"}
{"task_id": "MBSWP/522", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the longest bitonic subsequence for the given array.\n *\n * >>> lbs([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15])\n * 7\n * >>> lbs([1, 11, 2, 10, 4, 5, 2, 1])\n * 6\n * >>> lbs([80, 60, 30, 40, 20, 10])\n * 5\n */\nfunc lbs(arr : [Int]) -> Int {\n    var arr = arr\n    var max = 0\n    var maxIndex = 0\n    var maxLength = 0\n    var maxIndexes = [Int]()\n    var maxLengths = [Int]()\n    var maxIndexes2 = [Int]()\n    var maxLengths2 = [Int]()\n    var maxIndexes3 = [Int]()\n    var maxLengths3 = [Int]()\n    var maxIndexes4 = [Int]()\n    var maxLengths4 = [Int]()\n    var maxIndexes5 = [Int]()\n    var maxLengths5 = [Int]()\n    var maxIndexes6 = [Int]()\n    var maxLengths6 = [Int]()\n    var maxIndexes7 = [Int]()\n    var maxLengths7 = [Int]()\n    var maxIndexes8 = [Int]()\n    var maxLengths8 = [Int]()\n    var maxIndexes9 = [Int]()\n    var maxLengths9 = [Int]()\n    var maxIndexes10 = [Int]()\n    var maxLengths10 = [Int]()\n    var maxIndexes11 = [Int]()\n    var maxLengths11 = [Int]()\n    var maxIndexes12 = [Int]()\n    var maxLengths12 = [Int]()\n    var maxIndexes13 = [Int]()\n    var maxLengths13 = [Int]()\n    var maxIndexes14 = [Int]()\n    var maxLengths14 = [Int]()\n    var maxIndexes15 = [Int]()\n    var maxLength"}
{"task_id": "MBSWP/523", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\n *\n * >>> checkString(\"python\")\n * [\"String must have 1 upper case character.\", \"String must have 1 number.\", \"String length should be atleast 8.\"]\n * >>> checkString(\"123python\")\n * [\"String must have 1 upper case character.\"]\n * >>> checkString(\"123Python\")\n * [\"Valid string.\"]\n */\nfunc checkString(str1 : String) -> [String] {\n    var str2 = str1\n    var str3 = str1\n    var str4 = str1\n    var str5 = str1\n    var str6 = str1\n    var str7 = str1\n    var str8 = str1\n    var str9 = str1\n    var str10 = str1\n    var str11 = str1\n    var str12 = str1\n    var str13 = str1\n    var str14 = str1\n    var str15 = str1\n    var str16 = str1\n    var str17 = str1\n    var str18 = str1\n    var str19 = str1\n    var str20 = str1\n    var str21 = str1\n    var str22 = str1\n    var str23 = str1\n    var str24 = str1\n    var str25 = str1\n    var str26 = str1\n    var str27 = str1\n    var str28 = str1\n    var str29 = str1\n    var str30 = str1\n    var str31 = str1\n    var str32 = str1\n    var str33 = str1\n    var str34 = str1\n    var str35 = str1\n    var str36 = str1\n    var str37 = str1\n    var str38 = str1\n    var str39 = str1\n    var str40 = str1\n    var str41 = str1\n    var str42 = str1\n    var str43 = str1\n    var str44 = str1\n    var str45 = str1\n    var str46 = str1\n    var str47 = str1\n    var str"}
{"task_id": "MBSWP/524", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of maximum increasing subsequence of the given array.\n *\n * >>> maxSumIncreasingSubsequence([1, 101, 2, 3, 100, 4, 5], 7)\n * 106\n * >>> maxSumIncreasingSubsequence([3, 4, 5, 10], 4)\n * 22\n * >>> maxSumIncreasingSubsequence([10, 5, 4, 3], 4)\n * 10\n */\nfunc maxSumIncreasingSubsequence(arr : [Int], n : Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    var maxSum = 0\n    for i in 0..<n {\n        dp[i] = arr[i]\n        for j in i+1..<n {\n            if arr[j] > arr[i] {\n                dp[i] = max(dp[i], dp[j] + arr[i])\n            }\n        }\n        maxSum = max(maxSum, dp[i])\n    }\n    return maxSum\n}\n"}
{"task_id": "MBSWP/525", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether two given lines are parallel or not.\n *\n * >>> parallelLines([2, 3, 4], [2, 3, 8])\n * true\n * >>> parallelLines([2, 3, 4], [4, -3, 8])\n * false\n * >>> parallelLines([3, 3], [5, 5])\n * true\n */\nfunc parallelLines(line1 : [Int], line2 : [Int]) -> Bool {\n    let line1Slope = slope(line1)\n    let line2Slope = slope(line2)\n    return line1Slope == line2Slope\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether two given lines are parallel or not.\n *\n * >>> slope([2, 3, 4])\n * 1.0\n * >>> slope([4, -3, 8])\n * -1.0\n * >>> slope([3, 3])\n * 0.0\n */\nfunc slope(line : [Int]) -> Double {\n    let x1 = line[0]\n    let y1 = line[1]\n    let x2 = line[2]\n    let y2 = line[3]\n    return (y2 - y1) / (x2 - x1)\n}\n"}
{"task_id": "MBSWP/526", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to capitalize first and last letters of each word of a given string.\n *\n * >>> capitalizeFirstLastLetters(\"python\")\n * \"PythoN\"\n * >>> capitalizeFirstLastLetters(\"bigdata\")\n * \"BigdatA\"\n * >>> capitalizeFirstLastLetters(\"Hadoop\")\n * \"HadooP\"\n */\nfunc capitalizeFirstLastLetters(str1 : String) -> String {\n    var str2 = \"\"\n    var str3 = \"\"\n    var str4 = \"\"\n    var str5 = \"\"\n    var str6 = \"\"\n    var str7 = \"\"\n    var str8 = \"\"\n    var str9 = \"\"\n    var str10 = \"\"\n    var str11 = \"\"\n    var str12 = \"\"\n    var str13 = \"\"\n    var str14 = \"\"\n    var str15 = \"\"\n    var str16 = \"\"\n    var str17 = \"\"\n    var str18 = \"\"\n    var str19 = \"\"\n    var str20 = \"\"\n    var str21 = \"\"\n    var str22 = \"\"\n    var str23 = \"\"\n    var str24 = \"\"\n    var str25 = \"\"\n    var str26 = \"\"\n    var str27 = \"\"\n    var str28 = \"\"\n    var str29 = \"\"\n    var str30 = \"\"\n    var str31 = \"\"\n    var str32 = \"\"\n    var str33 = \"\"\n    var str34 = \"\"\n    var str35 = \"\"\n    var str36 = \"\"\n    var str37 = \"\"\n    var str38 = \"\"\n    var str39 = \"\"\n    var str40 = \"\"\n    var str41 = \"\"\n    var str42 = \"\"\n    var str43 = \"\"\n    var str44 = \"\"\n    var str45 = \"\"\n    var str46 = \"\"\n    var str47 = \"\"\n    var str48 = \"\"\n    var str49 = \"\"\n    var str50 = \"\"\n    var str51 = \"\"\n    var str52 = \"\"\n    var str53 = \"\"\n    var str54 = \"\"\n    var str55 = \"\"\n    var str56 = \"\"\n    var str57 = \"\"\n    var str58"}
{"task_id": "MBSWP/527", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all pairs in an integer array whose sum is equal to a given number.\n *\n * >>> getPairsCount([1, 5, 7, -1, 5], 5, 6)\n * 3\n * >>> getPairsCount([1, 5, 7, -1], 4, 6)\n * 2\n * >>> getPairsCount([1, 1, 1, 1], 4, 2)\n * 6\n */\nfunc getPairsCount(arr : [Int], n : Int, sum : Int) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all pairs in an integer array whose sum is equal to a given number.\n *\n * >>> getPairs([1, 5, 7, -1, 5], 5, 6)\n * [[1, 5], [7, -1]]\n * >>> getPairs([1, 5, 7, -1], 4, 6)\n * [[1, 5], [7, -1]]\n * >>> getPairs([1, 1, 1, 1], 4, 2)\n * [[1, 1], [1, 1], [1, 1], [1, 1]]\n */\nfunc getPairs(arr : [Int], n : Int, sum : Int) -> [[Int]] {\n    var pairs = [[Int]]()\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] + arr[j] == sum {\n                pairs.append([arr[i], arr[j]])\n            }\n        }\n    }\n    return pairs\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all pairs in an integer array whose sum is equal to a given number.\n *\n * >>> getP"}
{"task_id": "MBSWP/528", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the list of lists with minimum length.\n *\n * >>> minLength([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n * [1, [0]]\n * >>> minLength([[1], [5, 7], [10, 12, 14, 15]])\n * [1, [1]]\n * >>> minLength([[5], [15, 20, 25]])\n * [1, [5]]\n */\nfunc minLength(list1 : [[Int]]) -> [AnyHashable] {\n    var minLength = list1.count\n    var minList = list1\n    for list in list1 {\n        if list.count < minLength {\n            minLength = list.count\n            minList = [list]\n        } else if list.count == minLength {\n            minList.append(list)\n        }\n    }\n    return minList\n}\n"}
{"task_id": "MBSWP/529", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth jacobsthal-lucas number.\n *\n * >>> jacobsthalLucas(5)\n * 31\n * >>> jacobsthalLucas(2)\n * 5\n * >>> jacobsthalLucas(4)\n * 17\n */\nfunc jacobsthalLucas(n : Int) -> Int {\n    var n = n\n    var a = 1\n    var b = 1\n    var c = 0\n    var d = 0\n    var result = 0\n    while n > 0 {\n        if n % 2 == 1 {\n            result = a + b + c\n            a = b\n            b = c\n            c = d\n            d = result\n        }\n        n = n / 2\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/530", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the ration of negative numbers in an array of integers.\n *\n * >>> negativeCount([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n * 0.31\n * >>> negativeCount([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n * 0.31\n * >>> negativeCount([2, 4, -6, -9, 11, -12, 14, -5, 17])\n * 0.44\n */\nfunc negativeCount(nums : [Int]) -> Double {\n    var count = 0\n    var sum = 0\n    for num in nums {\n        if num < 0 {\n            count += 1\n        }\n        sum += num\n    }\n    return Double(count) / Double(sum)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the ration of positive numbers in an array of integers.\n *\n * >>> positiveCount([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n * 0.69\n * >>> positiveCount([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n * 0.69\n * >>> positiveCount([2, 4, -6, -9, 11, -12, 14, -5, 17])\n * 0.56\n */\nfunc positiveCount(nums : [Int]) -> Double {\n    var count = 0\n    var sum = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n        sum += num\n    }\n    return Double(count) / Double(sum)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the ration of positive numbers in an array of integers.\n *\n * >>> average([0, 1, 2, -1, -5, 6, 0,"}
{"task_id": "MBSWP/531", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find minimum number of coins that make a given value.\n *\n * >>> minCoins([9, 6, 5, 1], 4, 11)\n * 2\n * >>> minCoins([4, 5, 6, 7, 8, 9], 6, 9)\n * 1\n * >>> minCoins([1, 2, 3], 3, 4)\n * 2\n */\nfunc minCoins(coins : [Int], m : Int, v : Int) -> Int {\n    var dp = [0..<v+1]\n    for i in 0..<coins.count {\n        for j in 0..<dp.count {\n            if j + coins[i] <= v {\n                dp[j] = max(dp[j], dp[j+coins[i]] + 1)\n            }\n        }\n    }\n    return dp[0]\n}\n"}
{"task_id": "MBSWP/532", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the two given strings are permutations of each other.\n *\n * >>> checkPermutation(\"abc\", \"cba\")\n * true\n * >>> checkPermutation(\"test\", \"ttew\")\n * false\n * >>> checkPermutation(\"xxyz\", \"yxzx\")\n * true\n */\nfunc checkPermutation(str1 : String, str2 : String) -> Bool {\n    if str1.count != str2.count {\n        return false\n    }\n    var str1Arr = [Character](str1)\n    var str2Arr = [Character](str2)\n    str1Arr.sort()\n    str2Arr.sort()\n    for i in 0..<str1Arr.count {\n        if str1Arr[i] != str2Arr[i] {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "MBSWP/534", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\n *\n * >>> searchLiteral(\"python\", \"python programming language\")\n * [0, 6]\n * >>> searchLiteral(\"programming\", \"python programming language\")\n * [7, 18]\n * >>> searchLiteral(\"language\", \"python programming language\")\n * [19, 27]\n */\nfunc searchLiteral(pattern : String, text : String) -> [Int] {\n    var result : [Int] = []\n    var i = 0\n    var j = 0\n    while i < text.count {\n        if text[i] == pattern[j] {\n            if j == pattern.count - 1 {\n                result.append(i - pattern.count + 1)\n                j = 0\n            } else {\n                j += 1\n            }\n        } else {\n            if j > 0 {\n                j = 0\n            }\n        }\n        i += 1\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search a regular expression in a string and also find the location within the original string where the pattern occurs.\n *\n * >>> searchRegex(\"[a-z]{3}\", \"python programming language\")\n * [0, 6]\n * >>> searchRegex(\"[a-z]{3}\", \"python programming language\")\n * [7, 18]\n * >>> searchRegex(\"[a-z]{3}\", \"python programming language\")\n * [19, 27]\n */\nfunc searchRegex(pattern : String, text : String) -> [Int] {\n    var result : [Int] = []\n    var i = 0\n    var j = 0\n    while i < text.count {\n        if text[i] == pattern[j] {\n            if j == pattern.count - 1 {\n                result.append(i - pattern.count + 1)\n                j = 0\n            } else {\n                j += 1\n            }\n        } else {\n            if j > 0 {"}
{"task_id": "MBSWP/535", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the top or bottom surface area of a cylinder.\n *\n * >>> topbottomSurfacearea(10)\n * 314.15000000000003\n * >>> topbottomSurfacearea(5)\n * 78.53750000000001\n * >>> topbottomSurfacearea(4)\n * 50.264\n */\nfunc topbottomSurfacearea(r : Int) -> Double {\n    return 2 * 3.14159 * r * r * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cylinder.\n *\n * >>> volume(10)\n * 314.15000000000003\n * >>> volume(5)\n * 78.53750000000001\n * >>> volume(4)\n * 50.264\n */\nfunc volume(r : Int) -> Double {\n    return 3.14159 * r * r * r * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the surface area of a cylinder.\n *\n * >>> surfacearea(10)\n * 314.15000000000003\n * >>> surfacearea(5)\n * 78.53750000000001\n * >>> surfacearea(4)\n * 50.264\n */\nfunc surfacearea(r : Int) -> Double {\n    return 2 * 3.14159 * r * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a sphere.\n *\n * >>> volume(10)\n * 314.15000000000003\n * >>> volume(5)\n * 78.53750000000001\n * >>> volume(4)\n * 50.264\n */\nfunc volume(r : Int) -> Double {\n    return 4 * 3.14159 * r * r * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the surface area of a sphere.\n *\n * >>> surfacearea(10)\n * 314.15000000000003\n * >>> surfacearea(5)\n * 78.53750000000001"}
{"task_id": "MBSWP/536", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to select the nth items of a list.\n *\n * >>> nthItems([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)\n * [1, 3, 5, 7, 9]\n * >>> nthItems([10, 15, 19, 17, 16, 18], 3)\n * [10, 17]\n * >>> nthItems([14, 16, 19, 15, 17], 4)\n * [14, 17]\n */\nfunc nthItems(list : [Int], n : Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list.count {\n        if i % n == 0 {\n            result.append(list[i])\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to select the nth items of a list.\n *\n * >>> nthItems([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)\n * [1, 3, 5, 7, 9]\n * >>> nthItems([10, 15, 19, 17, 16, 18], 3)\n * [10, 17]\n * >>> nthItems([14, 16, 19, 15, 17], 4)\n * [14, 17]\n */\nfunc nthItems(list : [Int], n : Int) -> [Int] {\n    var result = [Int]()\n    for i in 0..<list.count {\n        if i % n == 0 {\n            result.append(list[i])\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to select the nth items of a list.\n *\n * >>> nthItems([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)\n * [1, 3, 5, 7, 9]\n * >>> nthItems([10, 15, 19, 17, 16, 18], 3)\n * [10, 17]\n *"}
{"task_id": "MBSWP/537", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first repeated word in a given string.\n *\n * >>> firstRepeatedWord(\"ab ca bc ab\")\n * \"ab\"\n * >>> firstRepeatedWord(\"ab ca bc\")\n * \"None\"\n * >>> firstRepeatedWord(\"ab ca bc ca ab bc\")\n * \"ca\"\n */\nfunc firstRepeatedWord(str1 : String) -> String {\n    let words = str1.components(separatedBy: \" \")\n    let wordsSet = Set(words)\n    let firstRepeatedWord = wordsSet.first\n    return firstRepeatedWord\n}\n\n// Test\nprint(firstRepeatedWord(\"ab ca bc ab\"))\nprint(firstRepeatedWord(\"ab ca bc\"))\nprint(firstRepeatedWord(\"ab ca bc ca ab bc\"))\n"}
{"task_id": "MBSWP/538", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert a given string list to a tuple.\n *\n * >>> stringListToTuple(\"python 3.0\")\n * [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"]\n * >>> stringListToTuple(\"bigdata\")\n * [\"b\", \"i\", \"g\", \"d\", \"a\", \"t\", \"a\"]\n * >>> stringListToTuple(\"language\")\n * [\"l\", \"a\", \"n\", \"g\", \"u\", \"a\", \"g\", \"e\"]\n */\nfunc stringListToTuple(str1 : String) -> [String] {\n    var str2 = str1\n    var str3 = str1\n    var str4 = str1\n    var str5 = str1\n    var str6 = str1\n    var str7 = str1\n    var str8 = str1\n    var str9 = str1\n    var str10 = str1\n    var str11 = str1\n    var str12 = str1\n    var str13 = str1\n    var str14 = str1\n    var str15 = str1\n    var str16 = str1\n    var str17 = str1\n    var str18 = str1\n    var str19 = str1\n    var str20 = str1\n    var str21 = str1\n    var str22 = str1\n    var str23 = str1\n    var str24 = str1\n    var str25 = str1\n    var str26 = str1\n    var str27 = str1\n    var str28 = str1\n    var str29 = str1\n    var str30 = str1\n    var str31 = str1\n    var str32 = str1\n    var str33 = str1\n    var str34 = str1\n    var str35 = str1\n    var str36 = str1\n    var str37 = str1\n    var str38 = str1\n    var str39 = str1\n    var str40 = str1\n    var str41 = str1\n    var str42 = str1\n    var str43 = str1\n    var str44 = str"}
{"task_id": "MBSWP/539", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n *\n * >>> basesnumCoresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\n * >>> basesnumCoresspondingnum([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70])\n * [1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\n * >>> basesnumCoresspondingnum([4, 8, 12, 16, 20, 24, 28], [3, 6, 9, 12, 15, 18, 21])\n * [64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]\n */\nfunc basesnumCoresspondingnum(basesNum : [Int], index : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<basesNum.count {\n        result.append(Int(pow(Double(basesNum[i]), Double(index[i]))))\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\n *\n * >>> basesnumCore"}
{"task_id": "MBSWP/540", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the difference between highest and least frequencies in a given array.\n *\n * >>> findDiff([1, 1, 2, 2, 7, 8, 4, 5, 1, 4], 10)\n * 2\n * >>> findDiff([1, 7, 9, 2, 3, 3, 1, 3, 3], 9)\n * 3\n * >>> findDiff([1, 2, 1, 2], 4)\n * 0\n */\nfunc findDiff(arr : [Int], n : Int) -> Int {\n    var max = 0\n    var min = 0\n    var count = 0\n    for i in arr {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n        count += 1\n    }\n    return max - min\n}\n"}
{"task_id": "MBSWP/541", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find if the given number is abundant or not.\n *\n * >>> checkAbundant(12)\n * true\n * >>> checkAbundant(15)\n * false\n * >>> checkAbundant(18)\n * true\n */\nfunc checkAbundant(n : Int) -> Bool {\n    var sum : Int = 0\n    for i in 1..<n {\n        if i < n {\n            sum += i\n        }\n    }\n    return sum > n\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find if the given number is deficient or not.\n *\n * >>> checkDeficient(12)\n * false\n * >>> checkDeficient(15)\n * true\n * >>> checkDeficient(18)\n * false\n */\nfunc checkDeficient(n : Int) -> Bool {\n    var sum : Int = 0\n    for i in 1..<n {\n        if i < n {\n            sum += i\n        }\n    }\n    return sum < n\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find if the given number is perfect or not.\n *\n * >>> checkPerfect(12)\n * false\n * >>> checkPerfect(15)\n * true\n * >>> checkPerfect(18)\n * false\n */\nfunc checkPerfect(n : Int) -> Bool {\n    var sum : Int = 0\n    for i in 1..<n {\n        if i < n {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find if the given number is perfect square or not.\n *\n * >>> checkPerfectSquare(12)\n * false\n * >>> checkPerfectSquare(15)\n * false\n * >>> checkPerfectSquare(18)\n * true\n */\nfunc checkPerfectSquare(n : Int) -> Bool {\n    var sum : Int = 0\n    for i in 1..<n {\n        if i < n {"}
{"task_id": "MBSWP/542", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n *\n * >>> fillSpaces(\"Boult Curve Wireless Neckband\")\n * \"Boult:Curve:Wireless:Neckband\"\n * >>> fillSpaces(\"Stereo Sound Sweatproof\")\n * \"Stereo:Sound:Sweatproof\"\n * >>> fillSpaces(\"Probass Curve Audio\")\n * \"Probass:Curve:Audio\"\n */\nfunc fillSpaces(text : String) -> String {\n    let regex = \"\\\\s|\\\\.|\\\\,\"\n    return text.replacingOccurrences(of: regex, with: \":\")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n *\n * >>> fillSpaces(\"Boult Curve Wireless Neckband\")\n * \"Boult:Curve:Wireless:Neckband\"\n * >>> fillSpaces(\"Stereo Sound Sweatproof\")\n * \"Stereo:Sound:Sweatproof\"\n * >>> fillSpaces(\"Probass Curve Audio\")\n * \"Probass:Curve:Audio\"\n */\nfunc fillSpaces(text : String) -> String {\n    let regex = \"\\\\s|\\\\.|\\\\,\"\n    return text.replacingOccurrences(of: regex, with: \":\")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\n *\n * >>> fillSpaces(\"Boult Curve Wireless Neckband\")\n * \"Boult:Curve:Wireless:Neckband\"\n * >>> fillSpaces(\"Stereo Sound Sweatproof\")\n * \"Stereo:Sound:Sweatproof\"\n * >>> fillSpaces(\"Probass Curve Audio\")\n * \"Probass:Curve:Audio\"\n */\nfunc fillSpaces(text : String) -> String {\n    let regex = \"\\\\s|\\\\.|\\\\"}
{"task_id": "MBSWP/543", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add two numbers and print number of digits of sum.\n *\n * >>> countDigits(9875, 10)\n * 4\n * >>> countDigits(98759853034, 100)\n * 11\n * >>> countDigits(1234567, 500)\n * 7\n */\nfunc countDigits(num1 : Int, num2 : Int) -> Int {\n    var sum = num1 + num2\n    var count = 0\n    while sum > 0 {\n        sum /= 10\n        count += 1\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/544", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to flatten the tuple list to a string.\n *\n * >>> flattenTuple([[\"1\", \"4\", \"6\"], [\"5\", \"8\"], [\"2\", \"9\"], [\"1\", \"10\"]])\n * \"1 4 6 5 8 2 9 1 10\"\n * >>> flattenTuple([[\"2\", \"3\", \"4\"], [\"6\", \"9\"], [\"3\", \"2\"], [\"2\", \"11\"]])\n * \"2 3 4 6 9 3 2 2 11\"\n * >>> flattenTuple([[\"14\", \"21\", \"9\"], [\"24\", \"19\"], [\"12\", \"29\"], [\"23\", \"17\"]])\n * \"14 21 9 24 19 12 29 23 17\"\n */\nfunc flattenTuple(testList : [[String]]) -> String {\n    var result = \"\"\n    for i in testList {\n        for j in i {\n            result += j\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to flatten the array list to a string.\n *\n * >>> flattenArray([[\"1\", \"4\", \"6\"], [\"5\", \"8\"], [\"2\", \"9\"], [\"1\", \"10\"]])\n * \"1 4 6 5 8 2 9 1 10\"\n * >>> flattenArray([[\"2\", \"3\", \"4\"], [\"6\", \"9\"], [\"3\", \"2\"], [\"2\", \"11\"]])\n * \"2 3 4 6 9 3 2 2 11\"\n * >>> flattenArray([[\"14\", \"21\", \"9\"], [\"24\", \"19\"], [\"12\", \"29\"], [\"23\", \"17\"]])\n * \"14 21 9 24 19 12 29 23 17\"\n */\nfunc flattenArray(testList : [[String]]) -> String {\n    var result = \"\"\n    for i in testList {\n        for j in i {\n            result += j\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to flatten the dictionary list to a string.\n *\n *"}
{"task_id": "MBSWP/545", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to toggle only first and last bits of a given number.\n *\n * >>> toggleFAndLBits(10)\n * 3\n * >>> toggleFAndLBits(15)\n * 6\n * >>> toggleFAndLBits(20)\n * 5\n */\nfunc toggleFAndLBits(n : Int) -> Int {\n    var n = n\n    n = n & (n - 1)\n    n = n | (n + 1)\n    return n\n}\n"}
{"task_id": "MBSWP/546", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the last occurrence of a character in a string.\n *\n * >>> lastOccurenceChar(\"hello world\", \"l\")\n * 10\n * >>> lastOccurenceChar(\"language\", \"g\")\n * 7\n * >>> lastOccurenceChar(\"little\", \"y\")\n * \"none\"\n */\nfunc lastOccurenceChar(string : String, ch : String) -> AnyHashable {\n    var lastOccurence : AnyHashable = \"none\"\n    var index : Int = 0\n    var count : Int = 0\n    for char in string {\n        if char == ch {\n            count += 1\n            lastOccurence = index\n        }\n        index += 1\n    }\n    return lastOccurence\n}\n\n// Test\nassert(lastOccurenceChar(\"hello world\", \"l\") == 10)\nassert(lastOccurenceChar(\"language\", \"g\") == 7)\nassert(lastOccurenceChar(\"little\", \"y\") == \"none\")\n"}
{"task_id": "MBSWP/547", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of hamming distances of all consecutive numbers from o to n.\n *\n * >>> totalHammingDistance(4)\n * 7\n * >>> totalHammingDistance(2)\n * 3\n * >>> totalHammingDistance(5)\n * 8\n */\nfunc totalHammingDistance(n : Int) -> Int {\n    var total = 0\n    for i in 1...n {\n        for j in i+1...n {\n            total += hammingDistance(i, j)\n        }\n    }\n    return total\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of hamming distances of all consecutive numbers from o to n.\n *\n * >>> hammingDistance(4, 5)\n * 1\n * >>> hammingDistance(2, 3)\n * 1\n * >>> hammingDistance(5, 6)\n * 2\n */\nfunc hammingDistance(i : Int, j : Int) -> Int {\n    var distance = 0\n    var x = i\n    var y = j\n    while x != 0 || y != 0 {\n        if x % 2 != y % 2 {\n            distance += 1\n        }\n        x = x / 2\n        y = y / 2\n    }\n    return distance\n}\n"}
{"task_id": "MBSWP/548", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the length of the longest increasing subsequence of the given sequence.\n *\n * >>> longestIncreasingSubsequence([10, 22, 9, 33, 21, 50, 41, 60])\n * 5\n * >>> longestIncreasingSubsequence([3, 10, 2, 1, 20])\n * 3\n * >>> longestIncreasingSubsequence([50, 3, 10, 7, 40, 80])\n * 4\n */\nfunc longestIncreasingSubsequence(arr : [Int]) -> Int {\n    var dp = Array(repeating: 1, count: arr.count)\n    var prev = Array(repeating: 0, count: arr.count)\n    for i in arr.indices {\n        for j in 0..<i {\n            if arr[i] > arr[j] {\n                if dp[j] + 1 > dp[i] {\n                    dp[i] = dp[j] + 1\n                    prev[i] = j\n                }\n            }\n        }\n    }\n    var max = 0\n    var index = 0\n    for i in 0..<dp.count {\n        if dp[i] > max {\n            max = dp[i]\n            index = i\n        }\n    }\n    var result = [Int]()\n    var current = index\n    while current != 0 {\n        result.append(arr[current])\n        current = prev[current]\n    }\n    result.append(arr[0])\n    return result.count\n}\n"}
{"task_id": "MBSWP/549", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of fifth power of first n odd natural numbers.\n *\n * >>> oddNumSum(1)\n * 1\n * >>> oddNumSum(2)\n * 244\n * >>> oddNumSum(3)\n * 3369\n */\nfunc oddNumSum(n : Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 1 {\n            sum += pow(i, 5)\n        }\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/550", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum element in a sorted and rotated array.\n *\n * >>> findMax([2, 3, 5, 6, 9], 0, 4)\n * 9\n * >>> findMax([3, 4, 5, 2, 1], 0, 4)\n * 5\n * >>> findMax([1, 2, 3], 0, 2)\n * 3\n */\nfunc findMax(arr : [Int], low : Int, high : Int) -> Int {\n    if low == high {\n        return arr[low]\n    }\n    let mid = (low + high) / 2\n    if arr[mid] > arr[mid + 1] {\n        return findMax(arr, low, mid)\n    } else {\n        return findMax(arr, mid + 1, high)\n    }\n}\n"}
{"task_id": "MBSWP/551", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract a specified column from a given nested list.\n *\n * >>> extractColumn([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)\n * [1, 2, 1]\n * >>> extractColumn([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2)\n * [3, -5, 1]\n * >>> extractColumn([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)\n * [1, 5, 1, 13, 5, 9]\n */\nfunc extractColumn(list1 : [[Int]], n : Int) -> [Int] {\n    var result = [Int]()\n    for i in list1 {\n        result.append(i[n])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract a specified row from a given nested list.\n *\n * >>> extractRow([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)\n * [1, 2, 1]\n * >>> extractRow([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2)\n * [-5, 1]\n * >>> extractRow([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)\n * [1, 5, 1, 13, 5, 9]\n */\nfunc extractRow(list1 : [[Int]], n : Int) -> [Int] {\n    var result = [Int]()\n    for i in list1 {\n        result.append(i[n])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract a specified row from a given nested list.\n *\n * >>> extractRow([[1, 2, 3], ["}
{"task_id": "MBSWP/552", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether a given sequence is linear or not.\n *\n * >>> seqLinear([0, 2, 4, 6, 8, 10])\n * \"Linear Sequence\"\n * >>> seqLinear([1, 2, 3])\n * \"Linear Sequence\"\n * >>> seqLinear([1, 5, 2])\n * \"Non Linear Sequence\"\n */\nfunc seqLinear(seqNums : [Int]) -> String {\n    var seq = seqNums\n    var seqLen = seq.count\n    var seqSum = 0\n    var seqMax = 0\n    var seqMin = 0\n    var seqAvg = 0\n    var seqMedian = 0\n    var seqMode = 0\n    var seqModeCount = 0\n    var seqModeCount2 = 0\n    var seqModeCount3 = 0\n    var seqModeCount4 = 0\n    var seqModeCount5 = 0\n    var seqModeCount6 = 0\n    var seqModeCount7 = 0\n    var seqModeCount8 = 0\n    var seqModeCount9 = 0\n    var seqModeCount10 = 0\n    var seqModeCount11 = 0\n    var seqModeCount12 = 0\n    var seqModeCount13 = 0\n    var seqModeCount14 = 0\n    var seqModeCount15 = 0\n    var seqModeCount16 = 0\n    var seqModeCount17 = 0\n    var seqModeCount18 = 0\n    var seqModeCount19 = 0\n    var seqModeCount20 = 0\n    var seqModeCount21 = 0\n    var seqModeCount22 = 0\n    var seqModeCount23 = 0\n    var seqModeCount24 = 0\n    var seqModeCount25 = 0\n    var seqModeCount26 = 0\n    var seqModeCount27 = 0\n    var seqModeCount28 = 0\n    var seqModeCount29 = 0\n    var seqModeCount30 = 0\n    var seqModeCount31 = 0\n    var seqModeCount32 = 0\n    var seqModeCount33 = 0\n    var seqModeCount34 = 0\n    var seqModeCount35 = 0\n    var seqModeCount36 = 0\n    var seqModeCount37 = 0"}
{"task_id": "MBSWP/553", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given tuple to a floating-point number.\n *\n * >>> tupleToFloat([4, 56])\n * 4.56\n * >>> tupleToFloat([7, 256])\n * 7.256\n * >>> tupleToFloat([8, 123])\n * 8.123\n */\nfunc tupleToFloat(testTup : [Int]) -> Double {\n    return Double(testTup[0]) / Double(testTup[1])\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given tuple to a string.\n *\n * >>> tupleToString([4, 56])\n * \"4.56\"\n * >>> tupleToString([7, 256])\n * \"7.256\"\n * >>> tupleToString([8, 123])\n * \"8.123\"\n */\nfunc tupleToString(testTup : [Int]) -> String {\n    return String(format: \"%d.%d\", arguments: testTup)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given tuple to a string.\n *\n * >>> tupleToString([4, 56])\n * \"4.56\"\n * >>> tupleToString([7, 256])\n * \"7.256\"\n * >>> tupleToString([8, 123])\n * \"8.123\"\n */\nfunc tupleToString(testTup : [Int]) -> String {\n    return String(format: \"%d.%d\", arguments: testTup)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given tuple to a string.\n *\n * >>> tupleToString([4, 56])\n * \"4.56\"\n * >>> tupleToString([7, 256])\n * \"7.256\"\n * >>> tupleToString([8, 123])\n * \"8.123\"\n */\nfunc tupleToString(testTup : [Int]) -> String {\n    return String(format: \"%d.%d\", arguments: testTup)\n}\n\n/**\n"}
{"task_id": "MBSWP/554", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find odd numbers from a mixed list.\n *\n * >>> split([1, 2, 3, 4, 5, 6])\n * [1, 3, 5]\n * >>> split([10, 11, 12, 13])\n * [11, 13]\n * >>> split([7, 8, 9, 1])\n * [7, 9, 1]\n */\nfunc split(list : [Int]) -> [Int] {\n    var odd = [Int]()\n    for i in list {\n        if i % 2 == 1 {\n            odd.append(i)\n        }\n    }\n    return odd\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first odd number from a mixed list.\n *\n * >>> firstOdd([1, 2, 3, 4, 5, 6])\n * 1\n * >>> firstOdd([10, 11, 12, 13])\n * 11\n * >>> firstOdd([7, 8, 9, 1])\n * 7\n */\nfunc firstOdd(list : [Int]) -> Int {\n    for i in list {\n        if i % 2 == 1 {\n            return i\n        }\n    }\n    return 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the last odd number from a mixed list.\n *\n * >>> lastOdd([1, 2, 3, 4, 5, 6])\n * 5\n * >>> lastOdd([10, 11, 12, 13])\n * 13\n * >>> lastOdd([7, 8, 9, 1])\n * 9\n */\nfunc lastOdd(list : [Int]) -> Int {\n    var last = 0\n    for i in list {\n        if i % 2 == 1 {\n            last = i\n        }\n    }\n    return last\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first even number from a mixed list.\n *\n * >>> firstEven([1, 2, 3, 4, 5,"}
{"task_id": "MBSWP/555", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\n *\n * >>> difference(3)\n * 30\n * >>> difference(5)\n * 210\n * >>> difference(2)\n * 6\n */\nfunc difference(n : Int) -> Int {\n    var sum = 0\n    for i in 1..<n {\n        sum += i * i * i\n    }\n    var sum2 = 0\n    for i in 1..<n {\n        sum2 += i\n    }\n    return sum - sum2 * sum2\n}\n"}
{"task_id": "MBSWP/556", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the pairs with xor as an odd number.\n *\n * >>> findOddPair([5, 4, 7, 2, 1], 5)\n * 6\n * >>> findOddPair([7, 2, 8, 1, 0, 5, 11], 7)\n * 12\n * >>> findOddPair([1, 2, 3], 3)\n * 2\n */\nfunc findOddPair(a : [Int], n : Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if a[i] ^ a[j] == n {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/557", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to toggle characters case in a string.\n *\n * >>> toggleString(\"Python\")\n * \"pYTHON\"\n * >>> toggleString(\"Pangram\")\n * \"pANGRAM\"\n * >>> toggleString(\"LIttLE\")\n * \"liTTle\"\n */\nfunc toggleString(string : String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to toggle characters case in a string.\n *\n * >>> toggleString(\"Python\")\n * \"pYTHON\"\n * >>> toggleString(\"Pangram\")\n * \"pANGRAM\"\n * >>> toggleString(\"LIttLE\")\n * \"liTTle\"\n */\nfunc toggleString(string : String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to toggle characters case in a string.\n *\n * >>> toggleString(\"Python\")\n * \"pYTHON\"\n * >>> toggleString(\"Pangram\")\n * \"pANGRAM\"\n * >>> toggleString(\"LIttLE\")\n * \"liTTle\"\n */\nfunc toggleString(string : String) -> String {\n    var result = \"\"\n    for char in string {\n        if char.isUppercase {\n            result += char.lowercased()\n        } else {\n            result += char.uppercased()\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to toggle characters case in a string.\n *\n * >>>"}
{"task_id": "MBSWP/558", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the digit distance between two integers.\n *\n * >>> digitDistanceNums(1, 2)\n * 1\n * >>> digitDistanceNums(23, 56)\n * 6\n * >>> digitDistanceNums(123, 256)\n * 7\n */\nfunc digitDistanceNums(n1 : Int, n2 : Int) -> Int {\n    var n1 = n1\n    var n2 = n2\n    var distance = 0\n    while n1 != n2 {\n        if n1 > n2 {\n            n1 -= 10\n            distance += 1\n        } else {\n            n2 -= 10\n            distance += 1\n        }\n    }\n    return distance\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the digit distance between two strings.\n *\n * >>> digitDistanceStrings(\"1\", \"2\")\n * 1\n * >>> digitDistanceStrings(\"23\", \"56\")\n * 6\n * >>> digitDistanceStrings(\"123\", \"256\")\n * 7\n */\nfunc digitDistanceStrings(s1 : String, s2 : String) -> Int {\n    var s1 = s1\n    var s2 = s2\n    var distance = 0\n    while s1 != s2 {\n        if s1 > s2 {\n            s1 = s1.dropFirst(1)\n            distance += 1\n        } else {\n            s2 = s2.dropFirst(1)\n            distance += 1\n        }\n    }\n    return distance\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the digit distance between two arrays.\n *\n * >>> digitDistanceArrays([1, 2], [3, 4])\n * 1\n * >>> digitDistanceArrays([23, 56], [34, 56])\n * 6\n * >>> digitDistanceArrays([123, 256], [234, 256])\n * 7\n */\nfunc digitDistanceArrays(a1 : [Int], a2 : [Int]) -> Int {\n    var a1 = a1\n    var a2"}
{"task_id": "MBSWP/559", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the largest sum of contiguous subarray in the given array.\n *\n * >>> maxSubArraySum([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n * 7\n * >>> maxSubArraySum([-3, -4, 5, -2, -3, 2, 6, -4], 8)\n * 8\n * >>> maxSubArraySum([-4, -5, 6, -3, -4, 3, 7, -5], 8)\n * 10\n */\nfunc maxSubArraySum(a : [Int], size : Int) -> Int {\n    var maxSum = 0\n    var sum = 0\n    var start = 0\n    var end = 0\n    for i in 0..<size {\n        sum += a[i]\n        if sum > maxSum {\n            maxSum = sum\n            start = i - size + 1\n            end = i\n        }\n        if sum < 0 {\n            sum = 0\n        }\n    }\n    return maxSum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the largest sum of contiguous subarray in the given array.\n *\n * >>> maxSubArraySum([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n * 7\n * >>> maxSubArraySum([-3, -4, 5, -2, -3, 2, 6, -4], 8)\n * 8\n * >>> maxSubArraySum([-4, -5, 6, -3, -4, 3, 7, -5], 8)\n * 10\n */\nfunc maxSubArraySum(a : [Int], size : Int) -> Int {\n    var maxSum = 0\n    var sum = 0\n    var start = 0\n    var end = 0\n    for i in 0..<size {\n        sum += a[i]\n        if sum > maxSum {\n            maxSum = sum\n            start = i - size + 1\n            end = i\n        }\n        if sum < 0 {\n            sum = 0\n        }"}
{"task_id": "MBSWP/560", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the union of elements of the given tuples.\n *\n * >>> unionElements([3, 4, 5, 6], [5, 7, 4, 10])\n * [3, 4, 5, 6, 7, 10]\n * >>> unionElements([1, 2, 3, 4], [3, 4, 5, 6])\n * [1, 2, 3, 4, 5, 6]\n * >>> unionElements([11, 12, 13, 14], [13, 15, 16, 17])\n * [11, 12, 13, 14, 15, 16, 17]\n */\nfunc unionElements(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in testTup1 {\n        for j in testTup2 {\n            if i == j {\n                result.append(i)\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the intersection of elements of the given tuples.\n *\n * >>> intersectionElements([3, 4, 5, 6], [5, 7, 4, 10])\n * [4, 5]\n * >>> intersectionElements([1, 2, 3, 4], [3, 4, 5, 6])\n * [3, 4]\n * >>> intersectionElements([11, 12, 13, 14], [13, 15, 16, 17])\n * [13]\n */\nfunc intersectionElements(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in testTup1 {\n        for j in testTup2 {\n            if i == j {\n                result.append(i)\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the difference of elements of the given tuples.\n *\n * >>> differenceElements([3, 4, 5"}
{"task_id": "MBSWP/561", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n *\n * >>> assignElements([[5, 3], [7, 5], [2, 7], [3, 8], [8, 4]])\n * [3 : [8], 5 : [3], 7 : [5], 2 : [7], 8 : [4], 4 : []]\n * >>> assignElements([[6, 4], [9, 4], [3, 8], [4, 9], [9, 5]])\n * [4 : [9], 6 : [4], 9 : [4, 5], 8 : [], 3 : [8], 5 : []]\n * >>> assignElements([[6, 2], [6, 8], [4, 9], [4, 9], [3, 7]])\n * [2 : [], 6 : [2, 8], 8 : [], 9 : [], 4 : [9, 9], 7 : [], 3 : [7]]\n */\nfunc assignElements(testList : [[Int]]) -> [Int: [AnyHashable]] {\n    var result = [Int: [AnyHashable]]()\n    for pair in testList {\n        let first = pair[0]\n        let second = pair[1]\n        if let firstPair = result[first] {\n            result[first] = [firstPair, second]\n        } else {\n            result[first] = [second]\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\n *\n * >>> assignElements([[5, 3], [7, 5], [2, 7], [3, 8], [8, 4]])\n * [3 : [8], 5 : [3], 7 : [5], 2 : [7], 8 : [4], 4 : []]\n * >>> assignElements([[6, 4], [9, 4], [3, 8], [4, 9], [9, 5]])\n * [4 : [9"}
{"task_id": "MBSWP/562", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum length of sublist.\n *\n * >>> findMaxLength([[1], [1, 4], [5, 6, 7, 8]])\n * 4\n * >>> findMaxLength([[0, 1], [2, 2], [3, 2, 1]])\n * 3\n * >>> findMaxLength([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]])\n * 5\n */\nfunc findMaxLength(lst : [[Int]]) -> Int {\n    var max = 0\n    var dict = [Int: [Int]]()\n    for i in 0..<lst.count {\n        for j in 0..<lst[i].count {\n            if let v = dict[lst[i][j]] {\n                if i - v.count > max {\n                    max = i - v.count\n                }\n            }\n            dict[lst[i][j]] = [i]\n        }\n    }\n    return max\n}\n"}
{"task_id": "MBSWP/563", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract values between quotation marks of a string.\n *\n * >>> extractValues(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\")\n * [\"Python\", \"PHP\", \"Java\"]\n * >>> extractValues(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\")\n * [\"python\", \"program\", \"language\"]\n * >>> extractValues(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\")\n * [\"red\", \"blue\", \"green\", \"yellow\"]\n */\nfunc extractValues(text : String) -> [String] {\n    var values = [String]()\n    var start = 0\n    var end = 0\n    var isInQuotes = false\n    for i in 0..<text.count {\n        if text[i] == \"\\\"\" {\n            isInQuotes = !isInQuotes\n        }\n        if isInQuotes {\n            end = i\n        } else {\n            start = i\n        }\n        if start != end {\n            values.append(text[start..<end])\n        }\n    }\n    return values\n}\n\n// Test\nassert(extractValues(\"\\\"Python\\\", \\\"PHP\\\", \\\"Java\\\"\") == [\"Python\", \"PHP\", \"Java\"])\nassert(extractValues(\"\\\"python\\\",\\\"program\\\",\\\"language\\\"\") == [\"python\", \"program\", \"language\"])\nassert(extractValues(\"\\\"red\\\",\\\"blue\\\",\\\"green\\\",\\\"yellow\\\"\") == [\"red\", \"blue\", \"green\", \"yellow\"])\n"}
{"task_id": "MBSWP/564", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count unequal element pairs from the given array.\n *\n * >>> countPairs([1, 2, 1], 3)\n * 2\n * >>> countPairs([1, 1, 1, 1], 4)\n * 0\n * >>> countPairs([1, 2, 3, 4, 5], 5)\n * 10\n */\nfunc countPairs(arr : [Int], n : Int) -> Int {\n    var count = 0\n    for i in 0..<arr.count {\n        for j in i+1..<arr.count {\n            if arr[i] != arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/565", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to split a string into characters.\n *\n * >>> split(\"python\")\n * [\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]\n * >>> split(\"Name\")\n * [\"N\", \"a\", \"m\", \"e\"]\n * >>> split(\"program\")\n * [\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"]\n */\nfunc split(word : String) -> [String] {\n    var result = [String]()\n    for char in word {\n        result.append(String(char))\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to split a string into words.\n *\n * >>> splitIntoWords(\"python\")\n * [\"python\"]\n * >>> splitIntoWords(\"Name\")\n * [\"Name\"]\n * >>> splitIntoWords(\"program\")\n * [\"program\"]\n * >>> splitIntoWords(\"programming\")\n * [\"program\", \"ming\"]\n * >>> splitIntoWords(\"programming language\")\n * [\"program\", \"ming\", \"language\"]\n */\nfunc splitIntoWords(sentence : String) -> [String] {\n    var result = [String]()\n    var words = split(sentence)\n    var word = \"\"\n    for char in words {\n        if char == \" \" {\n            result.append(word)\n            word = \"\"\n        } else {\n            word += char\n        }\n    }\n    result.append(word)\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to split a string into sentences.\n *\n * >>> splitIntoSentences(\"\")\n * []\n * >>> splitIntoSentences(\".\")\n * []\n * >>> splitIntoSentences(\".\")\n * []\n * >>> splitIntoSentences(\".\")\n * []\n * >>> splitIntoSentences(\".\")\n * []\n * >>> splitIntoSentences(\".\")\n * []\n * >>> splitIntoSentences(\".\")\n * []\n * >>> split"}
{"task_id": "MBSWP/566", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get the sum of a non-negative integer.\n *\n * >>> sumDigits(345)\n * 12\n * >>> sumDigits(12)\n * 3\n * >>> sumDigits(97)\n * 16\n */\nfunc sumDigits(n : Int) -> Int {\n    var sum = 0\n    while n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/567", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether a specified list is sorted or not.\n *\n * >>> issortList([1, 2, 4, 6, 8, 10, 12, 14, 16, 17])\n * true\n * >>> issortList([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])\n * false\n * >>> issortList([1, 2, 4, 6, 8, 10, 15, 14, 20])\n * false\n */\nfunc issortList(list1 : [Int]) -> Bool {\n    var flag = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether a specified list is sorted or not.\n *\n * >>> issortList([1, 2, 4, 6, 8, 10, 12, 14, 16, 17])\n * true\n * >>> issortList([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])\n * false\n * >>> issortList([1, 2, 4, 6, 8, 10, 15, 14, 20])\n * false\n */\nfunc issortList(list1 : [Int]) -> Bool {\n    var flag = true\n    for i in 0..<list1.count-1 {\n        if list1[i] > list1[i+1] {\n            flag = false\n            break\n        }\n    }\n    return flag\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether a specified list is sorted or not.\n *\n * >>> issortList([1, 2, 4, 6, 8, 10, 12, 14, 16, 17])\n * true\n * >>> issortList([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])\n * false\n * >>> issortList([1, 2, 4, 6,"}
{"task_id": "MBSWP/568", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to create a list of empty dictionaries.\n *\n * >>> emptyList(5)\n * [[], [], [], [], []]\n * >>> emptyList(6)\n * [[], [], [], [], [], []]\n * >>> emptyList(7)\n * [[], [], [], [], [], [], []]\n */\nfunc emptyList(length : Int) -> [[AnyHashable: AnyHashable]] {\n    var list = [[]]\n    for i in 0..<length {\n        list.append([])\n    }\n    return list\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to create a list of empty dictionaries.\n *\n * >>> emptyList(5)\n * [[], [], [], [], []]\n * >>> emptyList(6)\n * [[], [], [], [], [], []]\n * >>> emptyList(7)\n * [[], [], [], [], [], [], []]\n */\nfunc emptyList(length : Int) -> [[AnyHashable: AnyHashable]] {\n    var list = [[]]\n    for i in 0..<length {\n        list.append([])\n    }\n    return list\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to create a list of empty dictionaries.\n *\n * >>> emptyList(5)\n * [[], [], [], [], []]\n * >>> emptyList(6)\n * [[], [], [], [], [], []]\n * >>> emptyList(7)\n * [[], [], [], [], [], [], []]\n */\nfunc emptyList(length : Int) -> [[AnyHashable: AnyHashable]] {\n    var list = [[]]\n    for i in 0..<length {\n        list.append([])\n    }\n    return list\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to create a list of empty dictionaries.\n *\n * >>> emptyList(5)\n * [["}
{"task_id": "MBSWP/569", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort each sublist of strings in a given list of lists.\n *\n * >>> sortSublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n * [[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]]\n * >>> sortSublists([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]])\n * [[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]]\n * >>> sortSublists([[\"a\", \"b\"], [\"d\", \"c\"], [\"g\", \"h\"], [\"f\", \"e\"]])\n * [[\"a\", \"b\"], [\"c\", \"d\"], [\"g\", \"h\"], [\"e\", \"f\"]]\n */\nfunc sortSublists(list1 : [[String]]) -> [[String]] {\n    var list2 = list1\n    for i in 0..<list1.count {\n        list2[i] = sort(list1[i])\n    }\n    return list2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort each sublist of integers in a given list of lists.\n *\n * >>> sortSublists([[1, 2], [3, 4], [5, 6, 7]])\n * [[1, 2], [3, 4], [5, 6, 7]]\n * >>> sortSublists([[1, 2], [3], [1, 2], [5]])\n * [[1, 2], [3], [1, 2], [5]]\n * >>> sortSublists([[1, 2], [3, 4], [5, 6, 7], [8, 9]])\n * [[1, 2], [3, 4], [5, 6, 7], [8, 9]]\n */\nfunc sortSublists(list1 : [[Int]]) -> [[Int]] {\n    var list2 = list1\n    for i in 0..<list1.count {\n        list2[i] = sort(list1[i])\n    }\n    return list2\n}"}
{"task_id": "MBSWP/570", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove words from a given list of strings containing a character or string.\n *\n * >>> removeWords([\"Red color\", \"Orange#\", \"Green\", \"Orange @\", \"White\"], [\"#\", \"color\", \"@\"])\n * [\"Red\", \"\", \"Green\", \"Orange\", \"White\"]\n * >>> removeWords([\"Red &\", \"Orange+\", \"Green\", \"Orange @\", \"White\"], [\"&\", \"+\", \"@\"])\n * [\"Red\", \"\", \"Green\", \"Orange\", \"White\"]\n * >>> removeWords([\"Red &\", \"Orange+\", \"Green\", \"Orange @\", \"White\"], [\"@\"])\n * [\"Red &\", \"Orange+\", \"Green\", \"Orange\", \"White\"]\n */\nfunc removeWords(list1 : [String], charlist : [String]) -> [String] {\n    var list2 : [String] = []\n    for i in 0..<list1.count {\n        var flag = false\n        for j in 0..<charlist.count {\n            if list1[i].hasPrefix(charlist[j]) {\n                flag = true\n                break\n            }\n        }\n        if flag == false {\n            list2.append(list1[i])\n        }\n    }\n    return list2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove words from a given list of strings containing a character or string.\n *\n * >>> removeWords([\"Red color\", \"Orange#\", \"Green\", \"Orange @\", \"White\"], [\"#\", \"color\", \"@\"])\n * [\"Red\", \"\", \"Green\", \"Orange\", \"White\"]\n * >>> removeWords([\"Red &\", \"Orange+\", \"Green\", \"Orange @\", \"White\"], [\"&\", \"+\", \"@\"])\n * [\"Red\", \"\", \"Green\", \"Orange\", \"White\"]\n * >>> removeWords([\"Red &\", \"Orange+\", \"Green\", \"Orange @\", \"White\"], [\"@\"])\n * [\"Red &\", \"Orange+\", \"Green\", \"Orange\", \"White\"]\n */\nfunc removeWords(list1 : [String],"}
{"task_id": "MBSWP/571", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n *\n * >>> maxSumPairDiffLessthanK([3, 5, 10, 15, 17, 12, 9], 7, 4)\n * 62\n * >>> maxSumPairDiffLessthanK([5, 15, 10, 300], 4, 12)\n * 25\n * >>> maxSumPairDiffLessthanK([1, 2, 3, 4, 5, 6], 6, 6)\n * 21\n */\nfunc maxSumPairDiffLessthanK(arr : [Int], n : Int, k : Int) -> Int {\n    var maxSum = 0\n    var maxSumIndex = 0\n    var maxSumIndex2 = 0\n    var maxSumIndex3 = 0\n    var maxSumIndex4 = 0\n    var maxSumIndex5 = 0\n    var maxSumIndex6 = 0\n    var maxSumIndex7 = 0\n    var maxSumIndex8 = 0\n    var maxSumIndex9 = 0\n    var maxSumIndex10 = 0\n    var maxSumIndex11 = 0\n    var maxSumIndex12 = 0\n    var maxSumIndex13 = 0\n    var maxSumIndex14 = 0\n    var maxSumIndex15 = 0\n    var maxSumIndex16 = 0\n    var maxSumIndex17 = 0\n    var maxSumIndex18 = 0\n    var maxSumIndex19 = 0\n    var maxSumIndex20 = 0\n    var maxSumIndex21 = 0\n    var maxSumIndex22 = 0\n    var maxSumIndex23 = 0\n    var maxSumIndex24 = 0\n    var maxSumIndex25 = 0\n    var maxSumIndex26 = 0\n    var maxSumIndex27 = 0\n    var maxSumIndex28 = 0\n    var maxSumIndex29 = 0\n    var maxSumIndex30 = 0\n    var maxSumIndex31 = 0\n    var maxSumIndex32 = 0\n    var maxSumIndex33 = 0\n    var maxSumIndex34 = 0\n    var maxSumIndex35 = 0\n    var maxSumIndex36 = 0\n    var maxSumIndex37 = 0\n    var max"}
{"task_id": "MBSWP/572", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove two duplicate numbers from a given number of lists.\n *\n * >>> twoUniqueNums([1, 2, 3, 2, 3, 4, 5])\n * [1, 4, 5]\n * >>> twoUniqueNums([1, 2, 3, 2, 4, 5])\n * [1, 3, 4, 5]\n * >>> twoUniqueNums([1, 2, 3, 4, 5])\n * [1, 2, 3, 4, 5]\n */\nfunc twoUniqueNums(nums : [Int]) -> [Int] {\n    var nums = nums\n    nums.sort()\n    var i = 0\n    var j = 1\n    while j < nums.count {\n        if nums[i] == nums[j] {\n            nums.remove(at: j)\n        } else {\n            i += 1\n            j += 1\n        }\n    }\n    return nums\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove two duplicate numbers from a given number of lists.\n *\n * >>> twoUniqueNums([1, 2, 3, 2, 3, 4, 5])\n * [1, 4, 5]\n * >>> twoUniqueNums([1, 2, 3, 2, 4, 5])\n * [1, 3, 4, 5]\n * >>> twoUniqueNums([1, 2, 3, 4, 5])\n * [1, 2, 3, 4, 5]\n */\nfunc twoUniqueNums(nums : [Int]) -> [Int] {\n    var nums = nums\n    nums.sort()\n    var i = 0\n    var j = 1\n    while j < nums.count {\n        if nums[i] == nums[j] {\n            nums.remove(at: j)\n        } else {\n            i += 1\n            j += 1\n        }\n    }\n    return nums\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove two"}
{"task_id": "MBSWP/573", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to calculate the product of the unique numbers of a given list.\n *\n * >>> uniqueProduct([10, 20, 30, 40, 20, 50, 60, 40])\n * 720000000\n * >>> uniqueProduct([1, 2, 3, 1])\n * 6\n * >>> uniqueProduct([7, 8, 9, 0, 1, 1])\n * 0\n */\nfunc uniqueProduct(listData : [Int]) -> Int {\n    var product = 1\n    var uniqueList = [Int]()\n    for i in listData {\n        if !uniqueList.contains(i) {\n            uniqueList.append(i)\n        }\n    }\n    for i in uniqueList {\n        product *= i\n    }\n    return product\n}\n"}
{"task_id": "MBSWP/574", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the surface area of a cylinder.\n *\n * >>> surfaceareaCylinder(10, 5)\n * 942.45\n * >>> surfaceareaCylinder(4, 5)\n * 226.18800000000002\n * >>> surfaceareaCylinder(4, 10)\n * 351.848\n */\nfunc surfaceareaCylinder(r : Int, h : Int) -> Double {\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cylinder.\n *\n * >>> volumeCylinder(10, 5)\n * 314.15\n * >>> volumeCylinder(4, 5)\n * 78.5\n * >>> volumeCylinder(4, 10)\n * 220.0\n */\nfunc volumeCylinder(r : Int, h : Int) -> Double {\n    return 3.14159 * r * r * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the surface area of a cone.\n *\n * >>> surfaceareaCone(10, 5)\n * 942.45\n * >>> surfaceareaCone(4, 5)\n * 226.18800000000002\n * >>> surfaceareaCone(4, 10)\n * 351.848\n */\nfunc surfaceareaCone(r : Int, h : Int) -> Double {\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the volume of a cone.\n *\n * >>> volumeCone(10, 5)\n * 314.15\n * >>> volumeCone(4, 5)\n * 78.5\n * >>> volumeCone(4, 10)\n * 220.0\n */\nfunc volumeCone(r : Int, h : Int) -> Double {\n    return 3.14159 * r * r * h\n}\n\n"}
{"task_id": "MBSWP/575", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find nth number in a sequence which is not a multiple of a given number.\n *\n * >>> countNo(2, 3, 1, 10)\n * 5\n * >>> countNo(3, 6, 4, 20)\n * 11\n * >>> countNo(5, 10, 4, 20)\n * 16\n */\nfunc countNo(a : Int, n : Int, l : Int, r : Int) -> Int {\n    var i = 0\n    var j = 0\n    var k = 0\n    var count = 0\n    var flag = false\n    var flag2 = false\n    var flag3 = false\n    var flag4 = false\n    var flag5 = false\n    var flag6 = false\n    var flag7 = false\n    var flag8 = false\n    var flag9 = false\n    var flag10 = false\n    var flag11 = false\n    var flag12 = false\n    var flag13 = false\n    var flag14 = false\n    var flag15 = false\n    var flag16 = false\n    var flag17 = false\n    var flag18 = false\n    var flag19 = false\n    var flag20 = false\n    var flag21 = false\n    var flag22 = false\n    var flag23 = false\n    var flag24 = false\n    var flag25 = false\n    var flag26 = false\n    var flag27 = false\n    var flag28 = false\n    var flag29 = false\n    var flag30 = false\n    var flag31 = false\n    var flag32 = false\n    var flag33 = false\n    var flag34 = false\n    var flag35 = false\n    var flag36 = false\n    var flag37 = false\n    var flag38 = false\n    var flag39 = false\n    var flag40 = false\n    var flag41 = false\n    var flag42 = false\n    var flag43 = false\n    var flag44 = false\n    var flag45 = false\n    var flag46 = false\n    var flag47 = false\n    var flag48 = false\n    var flag49 = false\n    var flag50 = false\n    var flag51 = false\n    var flag52 = false\n    var flag53"}
{"task_id": "MBSWP/576", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether an array is subarray of another or not.\n *\n * >>> isSubArray([1, 4, 3, 5], [1, 2], 4, 2)\n * false\n * >>> isSubArray([1, 2, 1], [1, 2, 1], 3, 3)\n * true\n * >>> isSubArray([1, 0, 2, 2], [2, 2, 0], 4, 3)\n * false\n */\nfunc isSubArray(a : [Int], b : [Int], n : Int, m : Int) -> Bool {\n    var i = 0, j = 0\n    while i < n && j < m {\n        if a[i] == b[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return i == n\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether an array is subarray of another or not.\n *\n * >>> isSubArray([1, 4, 3, 5], [1, 2], 4, 2)\n * false\n * >>> isSubArray([1, 2, 1], [1, 2, 1], 3, 3)\n * true\n * >>> isSubArray([1, 0, 2, 2], [2, 2, 0], 4, 3)\n * false\n */\nfunc isSubArray(a : [Int], b : [Int], n : Int, m : Int) -> Bool {\n    var i = 0, j = 0\n    while i < n && j < m {\n        if a[i] == b[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return i == n\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether an array is subarray of another or not.\n *\n * >>> isSubArray([1, 4, 3, 5], [1, 2], 4, 2)\n * false\n * >>> isSub"}
{"task_id": "MBSWP/577", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the last digit in factorial of a given number.\n *\n * >>> lastDigitFactorial(4)\n * 4\n * >>> lastDigitFactorial(21)\n * 0\n * >>> lastDigitFactorial(30)\n * 0\n */\nfunc lastDigitFactorial(n : Int) -> Int {\n    var n = n\n    var result = 1\n    while n > 0 {\n        result *= n\n        n -= 1\n    }\n    return result % 10\n}\n"}
{"task_id": "MBSWP/578", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to interleave lists of the same length.\n *\n * >>> interleaveLists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700])\n * [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n * >>> interleaveLists([10, 20], [15, 2], [5, 10])\n * [10, 15, 5, 20, 2, 10]\n * >>> interleaveLists([11, 44], [10, 15], [20, 5])\n * [11, 10, 20, 44, 15, 5]\n */\nfunc interleaveLists(list1 : [Int], list2 : [Int], list3 : [Int]) -> [Int] {\n    var result = [Int]()\n    var i = 0\n    var j = 0\n    var k = 0\n    while i < list1.count && j < list2.count && k < list3.count {\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to interleave lists of the same length.\n *\n * >>> interleaveLists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700])\n * [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n * >>> interleaveLists([10, 20], [15, 2], [5, 10])\n * [10, 15, 5, 20, 2, 10"}
{"task_id": "MBSWP/579", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the dissimilar elements in the given two tuples.\n *\n * >>> findDissimilar([3, 4, 5, 6], [5, 7, 4, 10])\n * [3, 6, 7, 10]\n * >>> findDissimilar([1, 2, 3, 4], [7, 2, 3, 9])\n * [1, 4, 7, 9]\n * >>> findDissimilar([21, 11, 25, 26], [26, 34, 21, 36])\n * [34, 36, 11, 25]\n */\nfunc findDissimilar(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var tup1 = testTup1\n    var tup2 = testTup2\n    var result = [Int]()\n    for i in 0..<tup1.count {\n        for j in 0..<tup2.count {\n            if tup1[i] == tup2[j] {\n                tup1.remove(at: i)\n                tup2.remove(at: j)\n                break\n            }\n        }\n    }\n    result.append(contentsOf: tup1)\n    result.append(contentsOf: tup2)\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the common elements in the given two tuples.\n *\n * >>> findCommon([3, 4, 5, 6], [5, 7, 4, 10])\n * [4, 5, 7]\n * >>> findCommon([1, 2, 3, 4], [7, 2, 3, 9])\n * [2, 3]\n * >>> findCommon([21, 11, 25, 26], [26, 34, 21, 36])\n * [21, 25, 26]\n */\nfunc findCommon(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var tup1 = testTup1\n    var tup2 = testTup2\n    var result = [Int]()"}
{"task_id": "MBSWP/580", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the even elements in the nested mixed tuple.\n *\n * >>> extractEven([4, 5, [7, 6, [2, 4]], 6, 8])\n * [4, [6, [2, 4]], 6, 8]\n * >>> extractEven([5, 6, [8, 7, [4, 8]], 7, 9])\n * [6, [8, [4, 8]]]\n * >>> extractEven([5, 6, [9, 8, [4, 6]], 8, 10])\n * [6, [8, [4, 6]], 8, 10]\n */\nfunc extractEven(testTuple : [AnyHashable]) -> [AnyHashable] {\n    var evenTuple = [AnyHashable]()\n    for element in testTuple {\n        if let element = element as? [AnyHashable] {\n            evenTuple.append(extractEven(element))\n        } else {\n            if element % 2 == 0 {\n                evenTuple.append(element)\n            }\n        }\n    }\n    return evenTuple\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the odd elements in the nested mixed tuple.\n *\n * >>> extractOdd([4, 5, [7, 6, [2, 4]], 6, 8])\n * [5, [7, [2, 4]], 7, 9]\n * >>> extractOdd([5, 6, [8, 7, [4, 8]], 7, 9])\n * [6, [8, [4, 6]], 8, 10]\n * >>> extractOdd([5, 6, [9, 8, [4, 6]], 8, 10])\n * [6, [9, [4, 8]], 9, 11]\n */\nfunc extractOdd(testTuple : [AnyHashable]) -> [AnyHashable] {\n    var oddTuple = [AnyHashable]()\n    for element in testTuple {\n        if let element = element as? [AnyHashable] {\n            oddTuple.append"}
{"task_id": "MBSWP/581", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the surface area of the square pyramid.\n *\n * >>> surfaceArea(3, 4)\n * 33\n * >>> surfaceArea(4, 5)\n * 56\n * >>> surfaceArea(1, 2)\n * 5\n */\nfunc surfaceArea(b : Int, s : Int) -> Int {\n    return 2 * (b * s + s * s) + 2 * (b * b)\n}\n"}
{"task_id": "MBSWP/582", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a dictionary is empty or not.\n *\n * >>> myDict({10})\n * false\n * >>> myDict({11})\n * false\n * >>> myDict([])\n * true\n */\nfunc myDict(dict1 : AnyHashable) -> Bool {\n    return dict1.count == 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a string is empty or not.\n *\n * >>> myString(\"\")\n * true\n * >>> myString(\" \")\n * false\n */\nfunc myString(str1 : String) -> Bool {\n    return str1.isEmpty\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a string is empty or not.\n *\n * >>> myString(\"\")\n * true\n * >>> myString(\" \")\n * false\n */\nfunc myString(str1 : String) -> Bool {\n    return str1.isEmpty\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a string is empty or not.\n *\n * >>> myString(\"\")\n * true\n * >>> myString(\" \")\n * false\n */\nfunc myString(str1 : String) -> Bool {\n    return str1.isEmpty\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a string is empty or not.\n *\n * >>> myString(\"\")\n * true\n * >>> myString(\" \")\n * false\n */\nfunc myString(str1 : String) -> Bool {\n    return str1.isEmpty\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a string is empty or not.\n *\n * >>> myString(\"\")\n * true\n * >>> myString(\" \")\n * false\n */\nfunc myString(str1 : String) -> Bool {\n    return str1.isEmpty"}
{"task_id": "MBSWP/583", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function for nth catalan number.\n *\n * >>> catalanNumber(10)\n * 16796\n * >>> catalanNumber(9)\n * 4862\n * >>> catalanNumber(7)\n * 429\n */\nfunc catalanNumber(num : Int) -> Int {\n    if num == 0 {\n        return 1\n    }\n    if num == 1 {\n        return 1\n    }\n    return catalanNumber(num - 1) * catalanNumber(num - 2)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function for nth fibonacci number.\n *\n * >>> fibonacciNumber(10)\n * 55\n * >>> fibonacciNumber(9)\n * 34\n * >>> fibonacciNumber(7)\n * 13\n */\nfunc fibonacciNumber(num : Int) -> Int {\n    if num == 0 {\n        return 0\n    }\n    if num == 1 {\n        return 1\n    }\n    return fibonacciNumber(num - 1) + fibonacciNumber(num - 2)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function for nth prime number.\n *\n * >>> primeNumber(10)\n * 29\n * >>> primeNumber(9)\n * 19\n * >>> primeNumber(7)\n * 7\n */\nfunc primeNumber(num : Int) -> Int {\n    if num == 0 {\n        return 0\n    }\n    if num == 1 {\n        return 2\n    }\n    if num == 2 {\n        return 3\n    }\n    if num == 3 {\n        return 5\n    }\n    if num == 4 {\n        return 7\n    }\n    if num == 5 {\n        return 11\n    }\n    if num == 6 {\n        return 13\n    }\n    if num == 7 {\n        return 17\n    }\n    if num == 8 {\n        return 19\n    }\n    if num == 9 {\n        return 23\n    }\n    if num == 10 {\n        return 29\n    }\n    return"}
{"task_id": "MBSWP/584", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all adverbs and their positions in a given sentence by using regex.\n *\n * >>> findAdverbs(\"Clearly, he has no excuse for such behavior.\")\n * \"0-7: Clearly\"\n * >>> findAdverbs(\"Please handle the situation carefuly\")\n * \"28-36: carefuly\"\n * >>> findAdverbs(\"Complete the task quickly\")\n * \"18-25: quickly\"\n */\nfunc findAdverbs(text : String) -> String {\n    let adverbs = text.components(separatedBy: \" \")\n    let adverbPositions = adverbs.map {\n        let adverb = $0\n        let adverbPosition = text.index(text.startIndex, offsetBy: adverb.count, limitedBy: text.endIndex)\n        return \"\\(adverbPosition)-\\(adverbPosition + adverb.count): \\(adverb)\"\n    }\n    return adverbPositions.joined(separator: \"\\n\")\n}\n\n// test cases\nassert(findAdverbs(\"Clearly, he has no excuse for such behavior.\") == \"0-7: Clearly\")\nassert(findAdverbs(\"Please handle the situation carefuly\") == \"28-36: carefuly\")\nassert(findAdverbs(\"Complete the task quickly\") == \"18-25: quickly\")\n```\n\n## SwiftUI\n\n```swift\nimport SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        Text(\"Hello, World!\")\n            .font(.title)\n            .foregroundColor(.blue)\n            .padding()\n    }\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}\n```\n\n## SwiftUI\n\n```swift\nimport SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        Text(\"Hello, World!\")\n            .font(.title)\n            .foregroundColor(.blue)\n            .padding()\n    }\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View"}
{"task_id": "MBSWP/585", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\n *\n * >>> expensiveItems([[\"name\" : \"Item-1\", \"price\" : 101.1], [\"name\" : \"Item-2\", \"price\" : 555.22]], 1)\n * [[\"name\" : \"Item-2\", \"price\" : 555.22]]\n * >>> expensiveItems([[\"name\" : \"Item-1\", \"price\" : 101.1], [\"name\" : \"Item-2\", \"price\" : 555.22], [\"name\" : \"Item-3\", \"price\" : 45.09]], 2)\n * [[\"name\" : \"Item-2\", \"price\" : 555.22], [\"name\" : \"Item-1\", \"price\" : 101.1]]\n * >>> expensiveItems([[\"name\" : \"Item-1\", \"price\" : 101.1], [\"name\" : \"Item-2\", \"price\" : 555.22], [\"name\" : \"Item-3\", \"price\" : 45.09], [\"name\" : \"Item-4\", \"price\" : 22.75]], 1)\n * [[\"name\" : \"Item-2\", \"price\" : 555.22]]\n */\nfunc expensiveItems(items : [[String: AnyHashable]], n : Int) -> [[String: AnyHashable]] {\n    var heap : [[String: AnyHashable]] = []\n    var maxHeap : [[String: AnyHashable]] = []\n    var maxHeapSize : Int = 0\n    var heapSize : Int = 0\n    var maxPrice : Double = 0\n    var price : Double = 0\n    var maxPriceItem : [[String: AnyHashable]] = []\n    var priceItem : [[String: AnyHashable]] = []\n    var i : Int = 0\n    var j : Int = 0\n    var k : Int = 0\n    var l : Int = 0\n    var m : Int = 0\n    var n : Int = 0\n    var o : Int = 0\n    var p : Int = 0\n    var q : Int = 0\n    var r : Int = 0\n    var s : Int"}
{"task_id": "MBSWP/586", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to split the array and add the first part to the end.\n *\n * >>> splitArr([12, 10, 5, 6, 52, 36], 6, 2)\n * [5, 6, 52, 36, 12, 10]\n * >>> splitArr([1, 2, 3, 4], 4, 1)\n * [2, 3, 4, 1]\n * >>> splitArr([0, 1, 2, 3, 4, 5, 6, 7], 8, 3)\n * [3, 4, 5, 6, 7, 0, 1, 2]\n */\nfunc splitArr(a : [Int], n : Int, k : Int) -> [Int] {\n    var a = a\n    var k = k\n    var n = n\n    var a1 = a[0..<k]\n    var a2 = a[k..<n]\n    a1.append(contentsOf: a2)\n    return a1\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to split the array and add the first part to the end.\n *\n * >>> splitArr([12, 10, 5, 6, 52, 36], 6, 2)\n * [5, 6, 52, 36, 12, 10]\n * >>> splitArr([1, 2, 3, 4], 4, 1)\n * [2, 3, 4, 1]\n * >>> splitArr([0, 1, 2, 3, 4, 5, 6, 7], 8, 3)\n * [3, 4, 5, 6, 7, 0, 1, 2]\n */\nfunc splitArr(a : [Int], n : Int, k : Int) -> [Int] {\n    var a = a\n    var k = k\n    var n = n\n    var a1 = a[0..<k]\n    var a2 = a[k..<n]\n    a1.append(contentsOf: a2)\n    return a1\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift"}
{"task_id": "MBSWP/587", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a list to a tuple.\n *\n * >>> listTuple([5, 10, 7, 4, 15, 3])\n * [5, 10, 7, 4, 15, 3]\n * >>> listTuple([2, 4, 5, 6, 2, 3, 4, 4, 7])\n * [2, 4, 5, 6, 2, 3, 4, 4, 7]\n * >>> listTuple([58, 44, 56])\n * [58, 44, 56]\n */\nfunc listTuple(listx : [Int]) -> [Int] {\n    return listx\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a tuple to a list.\n *\n * >>> tupleList([5, 10, 7, 4, 15, 3])\n * [5, 10, 7, 4, 15, 3]\n * >>> tupleList([2, 4, 5, 6, 2, 3, 4, 4, 7])\n * [2, 4, 5, 6, 2, 3, 4, 4, 7]\n * >>> tupleList([58, 44, 56])\n * [58, 44, 56]\n */\nfunc tupleList(tuplex : [Int]) -> [Int] {\n    return tuplex\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a list to a dictionary.\n *\n * >>> listDict([5, 10, 7, 4, 15, 3])\n * [5, 10, 7, 4, 15, 3]\n * >>> listDict([2, 4, 5, 6, 2, 3, 4, 4, 7])\n * [2, 4, 5, 6, 2, 3, 4, 4, 7]\n * >>> listDict([58, 44, 56])\n * [58, 44, 56]\n */\nfunc listDict(listx : [Int]) -> [Int] {\n    return listx\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a dictionary to a list"}
{"task_id": "MBSWP/588", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the difference between largest and smallest value in a given array.\n *\n * >>> bigDiff([1, 2, 3, 4])\n * 3\n * >>> bigDiff([4, 5, 12])\n * 8\n * >>> bigDiff([9, 2, 3])\n * 7\n */\nfunc bigDiff(nums : [Int]) -> Int {\n    var max = nums[0]\n    var min = nums[0]\n    for i in nums {\n        if i > max {\n            max = i\n        }\n        if i < min {\n            min = i\n        }\n    }\n    return max - min\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all the elements in a given array.\n *\n * >>> sum([1, 2, 3, 4])\n * 10\n * >>> sum([4, 5, 12])\n * 20\n * >>> sum([9, 2, 3])\n * 12\n */\nfunc sum(nums : [Int]) -> Int {\n    var sum = 0\n    for i in nums {\n        sum += i\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the product of all the elements in a given array.\n *\n * >>> product([1, 2, 3, 4])\n * 24\n * >>> product([4, 5, 12])\n * 120\n * >>> product([9, 2, 3])\n * 36\n */\nfunc product(nums : [Int]) -> Int {\n    var product = 1\n    for i in nums {\n        product *= i\n    }\n    return product\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all the elements in a given array.\n *\n * >>> average([1, 2, 3, 4])\n * 2.5\n * >>> average([4, 5, 12])\n * 6.0\n * >>> average([9, 2, 3])\n"}
{"task_id": "MBSWP/589", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find perfect squares between two given numbers.\n *\n * >>> perfectSquares(1, 30)\n * [1, 4, 9, 16, 25]\n * >>> perfectSquares(50, 100)\n * [64, 81, 100]\n * >>> perfectSquares(100, 200)\n * [100, 121, 144, 169, 196]\n */\nfunc perfectSquares(a : Int, b : Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if i * i == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find perfect cubes between two given numbers.\n *\n * >>> perfectCubes(1, 30)\n * [1, 8, 27, 64, 125]\n * >>> perfectCubes(50, 100)\n * [64, 81, 100]\n * >>> perfectCubes(100, 200)\n * [100, 125, 150, 175, 200]\n */\nfunc perfectCubes(a : Int, b : Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if i * i * i == i {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find perfect fourths between two given numbers.\n *\n * >>> perfectFourth(1, 30)\n * [1, 16, 81, 256, 625]\n * >>> perfectFourth(50, 100)\n * [64, 81, 100]\n * >>> perfectFourth(100, 200)\n * [100, 121, 144, 169, 196]\n */\nfunc perfectFourth(a : Int, b : Int) -> [Int] {\n    var result = [Int]()\n    for i in a...b {\n        if i * i * i * i == i {\n            result.append(i)\n        }\n    }\n    return result"}
{"task_id": "MBSWP/591", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to interchange the first and last elements in a list.\n *\n * >>> swapList([12, 35, 9, 56, 24])\n * [24, 35, 9, 56, 12]\n * >>> swapList([1, 2, 3])\n * [3, 2, 1]\n * >>> swapList([4, 5, 6])\n * [6, 5, 4]\n */\nfunc swapList(newlist : [Int]) -> [Int] {\n    var newlist = newlist\n    var first = newlist[0]\n    var last = newlist[newlist.count - 1]\n    newlist[0] = last\n    newlist[newlist.count - 1] = first\n    return newlist\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to interchange the first and last elements in a list.\n *\n * >>> swapList([12, 35, 9, 56, 24])\n * [24, 35, 9, 56, 12]\n * >>> swapList([1, 2, 3])\n * [3, 2, 1]\n * >>> swapList([4, 5, 6])\n * [6, 5, 4]\n */\nfunc swapList(newlist : [Int]) -> [Int] {\n    var newlist = newlist\n    var first = newlist[0]\n    var last = newlist[newlist.count - 1]\n    newlist[0] = last\n    newlist[newlist.count - 1] = first\n    return newlist\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to interchange the first and last elements in a list.\n *\n * >>> swapList([12, 35, 9, 56, 24])\n * [24, 35, 9, 56, 12]\n * >>> swapList([1, 2, 3])\n * [3, 2, 1]\n * >>> swapList([4, 5, 6])\n * [6, 5, 4]\n */\nfunc swapList(newlist : [Int]) -> [Int] {\n    var newlist = new"}
{"task_id": "MBSWP/592", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of product of binomial co-efficients.\n *\n * >>> sumOfProduct(3)\n * 15\n * >>> sumOfProduct(4)\n * 56\n * >>> sumOfProduct(1)\n * 1\n */\nfunc sumOfProduct(n : Int) -> Int {\n    var sum = 0\n    for i in 1..<n {\n        for j in 1..<n {\n            sum += i * j\n        }\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/593", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove leading zeroes from an ip address.\n *\n * >>> removezeroIp(\"216.08.094.196\")\n * \"216.8.94.196\"\n * >>> removezeroIp(\"12.01.024\")\n * \"12.1.24\"\n * >>> removezeroIp(\"216.08.094.0196\")\n * \"216.8.94.196\"\n */\nfunc removezeroIp(ip : String) -> String {\n    let ipArray = ip.components(separatedBy: \".\")\n    let ipArrayWithoutLeadingZeros = ipArray.filter({ $0 != \"0\" })\n    return ipArrayWithoutLeadingZeros.joined(separator: \".\")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove leading zeroes from an ip address.\n *\n * >>> removezeroIp(\"216.08.094.196\")\n * \"216.8.94.196\"\n * >>> removezeroIp(\"12.01.024\")\n * \"12.1.24\"\n * >>> removezeroIp(\"216.08.094.0196\")\n * \"216.8.94.196\"\n */\nfunc removezeroIp(ip : String) -> String {\n    let ipArray = ip.components(separatedBy: \".\")\n    let ipArrayWithoutLeadingZeros = ipArray.filter({ $0 != \"0\" })\n    return ipArrayWithoutLeadingZeros.joined(separator: \".\")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove leading zeroes from an ip address.\n *\n * >>> removezeroIp(\"216.08.094.196\")\n * \"216.8.94.196\"\n * >>> removezeroIp(\"12.01.024\")\n * \"12.1.24\"\n * >>> removezeroIp(\"216.08.094.0196\")\n * \"216.8.94.196\"\n */\nfunc removezeroIp(ip :"}
{"task_id": "MBSWP/594", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the difference of first even and odd number of a given list.\n *\n * >>> diffEvenOdd([1, 3, 5, 7, 4, 1, 6, 8])\n * 3\n * >>> diffEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * 1\n * >>> diffEvenOdd([1, 5, 7, 9, 10])\n * 9\n */\nfunc diffEvenOdd(list1 : [Int]) -> Int {\n    var evenSum = 0\n    var oddSum = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            evenSum += i\n        } else {\n            oddSum += i\n        }\n    }\n    return evenSum - oddSum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the difference of first even and odd number of a given list.\n *\n * >>> diffEvenOdd([1, 3, 5, 7, 4, 1, 6, 8])\n * 3\n * >>> diffEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * 1\n * >>> diffEvenOdd([1, 5, 7, 9, 10])\n * 9\n */\nfunc diffEvenOdd(list1 : [Int]) -> Int {\n    var evenSum = 0\n    var oddSum = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            evenSum += i\n        } else {\n            oddSum += i\n        }\n    }\n    return evenSum - oddSum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the difference of first even and odd number of a given list.\n *\n * >>> diffEvenOdd([1, 3, 5, 7, 4, 1, 6, 8])\n * 3\n * >>> diffEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * 1\n * >>> diffEvenOdd([1, 5"}
{"task_id": "MBSWP/595", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count minimum number of swaps required to convert one binary string to another.\n *\n * >>> minSwaps(\"1101\", \"1110\")\n * 1\n * >>> minSwaps(\"111\", \"000\")\n * \"Not Possible\"\n * >>> minSwaps(\"111\", \"110\")\n * \"Not Possible\"\n */\nfunc minSwaps(str1 : String, str2 : String) -> AnyHashable {\n    let str1 = str1.map { $0 == \"1\" }\n    let str2 = str2.map { $0 == \"1\" }\n    let n = str1.count\n    let m = str2.count\n    if n != m {\n        return \"Not Possible\"\n    }\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<n {\n        if str1[i] != str2[i] {\n            let j = i\n            while j < n && str1[j] == str2[j] {\n                j += 1\n            }\n            if j == n {\n                return \"Not Possible\"\n            }\n            let temp = str1[i]\n            str1[i] = str1[j]\n            str1[j] = temp\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/597", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find kth element from the given two sorted arrays.\n *\n * >>> findKth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5)\n * 6\n * >>> findKth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7)\n * 256\n * >>> findKth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6)\n * 8\n */\nfunc findKth(arr1 : [Int], arr2 : [Int], m : Int, n : Int, k : Int) -> Int {\n    var i = 0\n    var j = 0\n    var kth = 0\n    while i < m && j < n {\n        if arr1[i] < arr2[j] {\n            kth += 1\n            i += 1\n        } else {\n            kth += 1\n            j += 1\n        }\n        if kth == k {\n            return arr1[i-1]\n        }\n    }\n    return arr1[i-1]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find kth element from the given two sorted arrays.\n *\n * >>> findKth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5)\n * 6\n * >>> findKth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7)\n * 256\n * >>> findKth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6)\n * 8\n */\nfunc findKth(arr1 : [Int], arr2 : [Int], m : Int, n : Int, k : Int) -> Int {\n    var i = 0\n    var j = 0\n    var kth = 0\n    while i < m && j < n {\n        if"}
{"task_id": "MBSWP/598", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given number is armstrong or not.\n *\n * >>> armstrongNumber(153)\n * true\n * >>> armstrongNumber(259)\n * false\n * >>> armstrongNumber(4458)\n * false\n */\nfunc armstrongNumber(number : Int) -> Bool {\n    var sum = 0\n    var temp = number\n    while temp > 0 {\n        let digit = temp % 10\n        sum += digit * digit * digit\n        temp /= 10\n    }\n    return number == sum\n}\n"}
{"task_id": "MBSWP/599", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find sum and average of first n natural numbers.\n *\n * >>> sumAverage(10)\n * [55, 5.5]\n * >>> sumAverage(15)\n * [120, 8.0]\n * >>> sumAverage(20)\n * [210, 10.5]\n */\nfunc sumAverage(number : Int) -> [Double] {\n    var sum = 0\n    var average = 0.0\n    for i in 1..<number {\n        sum += i\n        average += i\n    }\n    average /= number\n    return [Double(sum), average]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find sum and average of first n natural numbers.\n *\n * >>> sumAverage(10)\n * [55, 5.5]\n * >>> sumAverage(15)\n * [120, 8.0]\n * >>> sumAverage(20)\n * [210, 10.5]\n */\nfunc sumAverage(number : Int) -> [Double] {\n    var sum = 0\n    var average = 0.0\n    for i in 1..<number {\n        sum += i\n        average += i\n    }\n    average /= number\n    return [Double(sum), average]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find sum and average of first n natural numbers.\n *\n * >>> sumAverage(10)\n * [55, 5.5]\n * >>> sumAverage(15)\n * [120, 8.0]\n * >>> sumAverage(20)\n * [210, 10.5]\n */\nfunc sumAverage(number : Int) -> [Double] {\n    var sum = 0\n    var average = 0.0\n    for i in 1..<number {\n        sum += i\n        average += i\n    }\n    average /= number\n    return [Double(sum), average]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find sum and average of first n natural numbers.\n *"}
{"task_id": "MBSWP/600", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number is even or not using bitwise operator.\n *\n * >>> isEven(1)\n * false\n * >>> isEven(2)\n * true\n * >>> isEven(3)\n * false\n */\nfunc isEven(n : Int) -> Bool {\n    return n & 1 == 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number is odd or not using bitwise operator.\n *\n * >>> isOdd(1)\n * true\n * >>> isOdd(2)\n * false\n * >>> isOdd(3)\n * true\n */\nfunc isOdd(n : Int) -> Bool {\n    return n & 1 == 1\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number is prime or not using bitwise operator.\n *\n * >>> isPrime(1)\n * false\n * >>> isPrime(2)\n * true\n * >>> isPrime(3)\n * true\n * >>> isPrime(4)\n * false\n */\nfunc isPrime(n : Int) -> Bool {\n    if n <= 1 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(n))) {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number is perfect square or not using bitwise operator.\n *\n * >>> isPerfectSquare(1)\n * false\n * >>> isPerfectSquare(2)\n * false\n * >>> isPerfectSquare(3)\n * false\n * >>> isPerfectSquare(4)\n * true\n * >>> isPerfectSquare(5)\n * false\n */\nfunc isPerfectSquare(n : Int) -> Bool {\n    var x = n\n    while x * x > n {\n        x -= 1\n    }\n    return x * x == n\n}\n"}
{"task_id": "MBSWP/602", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first repeated character in a given string.\n *\n * >>> firstRepeatedChar(\"abcabc\")\n * \"a\"\n * >>> firstRepeatedChar(\"abc\")\n * \"None\"\n * >>> firstRepeatedChar(\"123123\")\n * \"1\"\n */\nfunc firstRepeatedChar(str1 : String) -> String {\n    var str2 = str1\n    var str3 = str1\n    var str4 = str1\n    var str5 = str1\n    var str6 = str1\n    var str7 = str1\n    var str8 = str1\n    var str9 = str1\n    var str10 = str1\n    var str11 = str1\n    var str12 = str1\n    var str13 = str1\n    var str14 = str1\n    var str15 = str1\n    var str16 = str1\n    var str17 = str1\n    var str18 = str1\n    var str19 = str1\n    var str20 = str1\n    var str21 = str1\n    var str22 = str1\n    var str23 = str1\n    var str24 = str1\n    var str25 = str1\n    var str26 = str1\n    var str27 = str1\n    var str28 = str1\n    var str29 = str1\n    var str30 = str1\n    var str31 = str1\n    var str32 = str1\n    var str33 = str1\n    var str34 = str1\n    var str35 = str1\n    var str36 = str1\n    var str37 = str1\n    var str38 = str1\n    var str39 = str1\n    var str40 = str1\n    var str41 = str1\n    var str42 = str1\n    var str43 = str1\n    var str44 = str1\n    var str45 = str1\n    var str46 = str1\n    var str47 = str1\n    var str48 = str1\n    var str49 = str1\n    var str50 = str1\n    var str51 = str1\n    var str52 = str1\n    var str"}
{"task_id": "MBSWP/603", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get a lucid number smaller than or equal to n.\n *\n * >>> getLudic(10)\n * [1, 2, 3, 5, 7]\n * >>> getLudic(25)\n * [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n * >>> getLudic(45)\n * [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n */\nfunc getLudic(n : Int) -> [Int] {\n    var ludic = [Int]()\n    var current = 1\n    var next = 2\n    var i = 1\n    while current <= n {\n        ludic.append(current)\n        if i == next {\n            current = next\n            next = ludic[i] * ludic[i]\n            i += 1\n        } else {\n            current = next\n            next = ludic[i] * ludic[i]\n            i += 1\n        }\n    }\n    return ludic\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get a list of prime numbers smaller than or equal to n.\n *\n * >>> getPrimes(10)\n * [2, 3, 5, 7]\n * >>> getPrimes(25)\n * [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n * >>> getPrimes(45)\n * [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]\n */\nfunc getPrimes(n : Int) -> [Int] {\n    var"}
{"task_id": "MBSWP/604", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reverse words in a given string.\n *\n * >>> reverseWords(\"python program\")\n * \"program python\"\n * >>> reverseWords(\"java language\")\n * \"language java\"\n * >>> reverseWords(\"indian man\")\n * \"man indian\"\n */\nfunc reverseWords(s : String) -> String {\n    var words = s.split(\" \")\n    var reversedWords = words.map { $0.reverse() }\n    return reversedWords.joined(separator: \" \")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reverse words in a given string.\n *\n * >>> reverseWords(\"python program\")\n * \"program python\"\n * >>> reverseWords(\"java language\")\n * \"language java\"\n * >>> reverseWords(\"indian man\")\n * \"man indian\"\n */\nfunc reverseWords(s : String) -> String {\n    var words = s.split(\" \")\n    var reversedWords = words.map { $0.reverse() }\n    return reversedWords.joined(separator: \" \")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reverse words in a given string.\n *\n * >>> reverseWords(\"python program\")\n * \"program python\"\n * >>> reverseWords(\"java language\")\n * \"language java\"\n * >>> reverseWords(\"indian man\")\n * \"man indian\"\n */\nfunc reverseWords(s : String) -> String {\n    var words = s.split(\" \")\n    var reversedWords = words.map { $0.reverse() }\n    return reversedWords.joined(separator: \" \")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reverse words in a given string.\n *\n * >>> reverseWords(\"python program\")\n * \"program python\"\n * >>> reverseWords(\"java language\")\n * \"language java\"\n * >>> reverseWords(\"indian man\")\n * \"man indian\"\n */\nfunc reverseWords(s : String) -> String {\n    var words ="}
{"task_id": "MBSWP/605", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given integer is a prime number.\n *\n * >>> primeNum(13)\n * true\n * >>> primeNum(7)\n * true\n * >>> primeNum(-1010)\n * false\n */\nfunc primeNum(num : Int) -> Bool {\n    if num < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(num))) {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "MBSWP/606", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert degrees to radians.\n *\n * >>> radianDegree(90)\n * 1.5707963267948966\n * >>> radianDegree(60)\n * 1.0471975511965976\n * >>> radianDegree(120)\n * 2.0943951023931953\n */\nfunc radianDegree(degree : Int) -> Double {\n    return Double(degree) * 0.017453292519943295\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert radians to degrees.\n *\n * >>> degreeRadian(1.0471975511965976)\n * 60.0\n * >>> degreeRadian(1.5707963267948966)\n * 90.0\n * >>> degreeRadian(2.0943951023931953)\n * 120.0\n */\nfunc degreeRadian(radian : Double) -> Int {\n    return Int(radian * 57.29577951308232)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert degrees to radians.\n * * Write a function to convert radians to degrees.\n *\n * >>> degreeRadian(1.0471975511965976)\n * 60.0\n * >>> degreeRadian(1.5707963267948966)\n * 90.0\n * >>> degreeRadian(2.0943951023931953)\n * 120.0\n */\nfunc degreeRadian(radian : Double) -> Int {\n    return Int(radian * 57.29577951308232)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert degrees to radians.\n * * Write a function to convert radians to degrees.\n * * Write a function to convert radians to degrees.\n *\n * >>> degreeRadian(1.0471975511965976)\n * 60.0\n * >>> degreeRadian(1.5707963267948966)\n"}
{"task_id": "MBSWP/607", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n *\n * >>> findLiterals(\"The quick brown fox jumps over the lazy dog.\", \"fox\")\n * [\"fox\", 16, 19]\n * >>> findLiterals(\"Its been a very crazy procedure right\", \"crazy\")\n * [\"crazy\", 16, 21]\n * >>> findLiterals(\"Hardest choices required strongest will\", \"will\")\n * [\"will\", 35, 39]\n */\nfunc findLiterals(text : String, pattern : String) -> [AnyHashable] {\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSMakeRange(0, text.count))\n    var result = [AnyHashable]()\n    for match in matches {\n        let range = match.range\n        let start = range.location\n        let end = range.location + range.length\n        result.append([pattern, start, end])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n *\n * >>> findLiterals(\"The quick brown fox jumps over the lazy dog.\", \"fox\")\n * [\"fox\", 16, 19]\n * >>> findLiterals(\"Its been a very crazy procedure right\", \"crazy\")\n * [\"crazy\", 16, 21]\n * >>> findLiterals(\"Hardest choices required strongest will\", \"will\")\n * [\"will\", 35, 39]\n */\nfunc findLiterals(text : String, pattern : String) -> [AnyHashable] {\n    let regex = try! NSRegularExpression(pattern: pattern, options: [])\n    let matches = regex.matches(in: text, options: [], range: NSMakeRange(0, text.count))\n    var result = [AnyHashable]()\n    for match in matches {\n        let range = match.range\n        let start = range."}
{"task_id": "MBSWP/608", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find nth bell number.\n *\n * >>> bellNumber(2)\n * 2\n * >>> bellNumber(3)\n * 5\n * >>> bellNumber(4)\n * 15\n */\nfunc bellNumber(n : Int) -> Int {\n    var nth = 1\n    for i in 1..<n {\n        nth *= bellNumber(i)\n    }\n    return nth\n}\n"}
{"task_id": "MBSWP/609", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find minimum possible value for the given periodic function.\n *\n * >>> floorMin(10, 20, 30)\n * 15\n * >>> floorMin(1, 2, 1)\n * 0\n * >>> floorMin(11, 10, 9)\n * 9\n */\nfunc floorMin(a : Int, b : Int, n : Int) -> Int {\n    var min = a\n    for i in a+1...b {\n        if i % n == 0 {\n            min = i\n        }\n    }\n    return min\n}\n"}
{"task_id": "MBSWP/610", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove the k'th element from a given list.\n *\n * >>> removeKthElement([1, 1, 2, 3, 4, 4, 5, 1], 3)\n * [1, 1, 3, 4, 4, 5, 1]\n * >>> removeKthElement([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4)\n * [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n * >>> removeKthElement([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5)\n * [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]\n */\nfunc removeKthElement(list1 : [Int], l : Int) -> [Int] {\n    var list2 = list1\n    var i = 0\n    var j = 0\n    var k = 0\n    var count = 0\n    while i < list1.count {\n        if count == l {\n            list2.remove(at: i)\n            k = k + 1\n            count = 0\n        }\n        count = count + 1\n        i = i + 1\n    }\n    return list2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove the k'th element from a given list.\n *\n * >>> removeKthElement([1, 1, 2, 3, 4, 4, 5, 1], 3)\n * [1, 1, 3, 4, 4, 5, 1]\n * >>> removeKthElement([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4)\n * [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n * >>> removeKthElement([10, 10, 15, 19, 18,"}
{"task_id": "MBSWP/611", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum of nth column from the given tuple list.\n *\n * >>> maxOfNth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n * 19\n * >>> maxOfNth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1)\n * 10\n * >>> maxOfNth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1)\n * 11\n */\nfunc maxOfNth(testList : [[Int]], n : Int) -> Int {\n    var max = testList[0][n]\n    for i in 1..<testList.count {\n        if testList[i][n] > max {\n            max = testList[i][n]\n        }\n    }\n    return max\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum of nth column from the given tuple list.\n *\n * >>> minOfNth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n * 1\n * >>> minOfNth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1)\n * 2\n * >>> minOfNth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1)\n * 3\n */\nfunc minOfNth(testList : [[Int]], n : Int) -> Int {\n    var min = testList[0][n]\n    for i in 1..<testList.count {\n        if testList[i][n] < min {\n            min = testList[i][n]\n        }\n    }\n    return min\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum of nth column from the given tuple list.\n *\n * >>> maxOfNth([[5, 6, 7], ["}
{"task_id": "MBSWP/612", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to merge the first and last elements separately in a list of lists.\n *\n * >>> merge([[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\"]])\n * [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"]]\n * >>> merge([[1, 2], [3, 4], [5, 6], [7, 8]])\n * [[1, 3, 5, 7], [2, 4, 6, 8]]\n * >>> merge([[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"m\", \"n\", \"o\"]])\n * [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"], [\"z\", \"c\", \"o\"]]\n */\nfunc merge(lst : [[AnyHashable]]) -> [[AnyHashable]] {\n    var result = [[AnyHashable]]()\n    var first = lst[0]\n    var last = lst[lst.count - 1]\n    for i in 0..<first.count {\n        var temp = [AnyHashable]()\n        temp.append(first[i])\n        temp.append(last[i])\n        result.append(temp)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to merge the first and last elements separately in a list of lists.\n *\n * >>> merge([[\"x\", \"y\"], [\"a\", \"b\"], [\"m\", \"n\"]])\n * [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"]]\n * >>> merge([[1, 2], [3, 4], [5, 6], [7, 8]])\n * [[1, 3, 5, 7], [2, 4, 6, 8]]\n * >>> merge([[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"m\", \"n\", \"o\"]])\n * [[\"x\", \"a\", \"m\"], [\"y\", \"b\", \"n\"], [\"z\", \"c\", \"o\"]]\n */"}
{"task_id": "MBSWP/613", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\n *\n * >>> maximumValue([[\"key1\", [3, 4, 5]], [\"key2\", [1, 4, 2]], [\"key3\", [9, 3]]])\n * [[\"key1\", 5], [\"key2\", 4], [\"key3\", 9]]\n * >>> maximumValue([[\"key1\", [4, 5, 6]], [\"key2\", [2, 5, 3]], [\"key3\", [10, 4]]])\n * [[\"key1\", 6], [\"key2\", 5], [\"key3\", 10]]\n * >>> maximumValue([[\"key1\", [5, 6, 7]], [\"key2\", [3, 6, 4]], [\"key3\", [11, 5]]])\n * [[\"key1\", 7], [\"key2\", 6], [\"key3\", 11]]\n */\nfunc maximumValue(testList : [[AnyHashable]]) -> [[AnyHashable]] {\n    var maxValue = 0\n    var maxKey = \"\"\n    for i in 0..<testList.count {\n        for j in 0..<testList[i][1].count {\n            if testList[i][1][j] > maxValue {\n                maxValue = testList[i][1][j]\n                maxKey = testList[i][0]\n            }\n        }\n    }\n    var result = [[AnyHashable]]()\n    result.append([maxKey, maxValue])\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum value in record list as tuple attribute in the given tuple list.\n *\n * >>> minimumValue([[\"key1\", [3, 4, 5]], [\"key2\", [1, 4, 2]], [\"key3\", [9, 3]]])\n * [[\"key1\", 3], [\"key2\", 1], [\"key3\", 3]]\n * >>> minimumValue([[\"key1\", [4, 5, 6]], [\"key2\", [2, 5, 3]], [\"key3\", [10,"}
{"task_id": "MBSWP/614", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n *\n * >>> cummulativeSum([[1, 3], [5, 6, 7], [2, 6]])\n * 30\n * >>> cummulativeSum([[2, 4], [6, 7, 8], [3, 7]])\n * 37\n * >>> cummulativeSum([[3, 5], [7, 8, 9], [4, 8]])\n * 44\n */\nfunc cummulativeSum(testList : [[Int]]) -> Int {\n    var sum = 0\n    for i in testList {\n        for j in i {\n            sum += j\n        }\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/615", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find average value of the numbers in a given tuple of tuples.\n *\n * >>> averageTuple([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]])\n * [30.5, 34.25, 27.0, 23.25]\n * >>> averageTuple([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]])\n * [25.5, -18.0, 3.75]\n * >>> averageTuple([[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]])\n * [305.0, 342.5, 270.0, 232.5]\n */\nfunc averageTuple(nums : [[Int]]) -> [Double] {\n    var sum = 0\n    var count = 0\n    for num in nums {\n        for n in num {\n            sum += n\n            count += 1\n        }\n    }\n    var avg = Double(sum) / Double(count)\n    var result = [Double]()\n    for _ in nums {\n        result.append(avg)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find average value of the numbers in a given array of arrays.\n *\n * >>> averageArray([[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]])\n * [30.5, 34.25, 27.0, 23.25]\n * >>> averageArray([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]])\n * [25.5, -18.0, 3.75]\n * >>> averageArray([[100, 100, 100, 120], [300, 450, 560,"}
{"task_id": "MBSWP/616", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perfom the modulo of tuple elements in the given two tuples.\n *\n * >>> tupleModulo([10, 4, 5, 6], [5, 6, 7, 5])\n * [0, 4, 5, 1]\n * >>> tupleModulo([11, 5, 6, 7], [6, 7, 8, 6])\n * [5, 5, 6, 1]\n * >>> tupleModulo([12, 6, 7, 8], [7, 8, 9, 7])\n * [5, 6, 7, 1]\n */\nfunc tupleModulo(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<testTup1.count {\n        result.append(testTup1[i] % testTup2[i])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perfom the modulo of tuple elements in the given two tuples.\n *\n * >>> tupleModulo([10, 4, 5, 6], [5, 6, 7, 5])\n * [0, 4, 5, 1]\n * >>> tupleModulo([11, 5, 6, 7], [6, 7, 8, 6])\n * [5, 5, 6, 1]\n * >>> tupleModulo([12, 6, 7, 8], [7, 8, 9, 7])\n * [5, 6, 7, 1]\n */\nfunc tupleModulo(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<testTup1.count {\n        result.append(testTup1[i] % testTup2[i])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perfom the modulo of tuple elements in the given two tuples.\n *\n * >>> tupleModulo([10, 4"}
{"task_id": "MBSWP/617", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n *\n * >>> minJumps(3, 4, 11)\n * 3.5\n * >>> minJumps(3, 4, 0)\n * 0\n * >>> minJumps(11, 14, 11)\n * 1\n */\nfunc minJumps(a : Int, b : Int, d : Int) -> Double {\n    var a = a\n    var b = b\n    var d = d\n    var jumps = 0\n    var distance = 0\n    var maxDistance = 0\n    var maxDistanceReached = false\n    var maxDistanceReachedAt = 0\n    var maxDistanceReachedAtJumps = 0\n    var maxDistanceReachedAtDistance = 0\n    var maxDistanceReachedAtDistanceJumps = 0\n    var maxDistanceReachedAtDistanceJumpsDistance = 0\n    var maxDistanceReachedAtDistanceJumpsDistanceJumps = 0\n    var maxDistanceReachedAtDistanceJumpsDistanceJumpsDistance = 0\n    var maxDistanceReachedAtDistanceJumpsDistanceJumpsDistanceJumps = 0\n    var maxDistanceReachedAtDistanceJumpsDistanceJumpsDistanceJumpsDistance = 0\n    var maxDistanceReachedAtDistanceJumpsDistanceJumpsDistanceJumpsDistanceJumps = 0\n    var maxDistanceReachedAtDistanceJumpsDistanceJumpsDistanceJumpsDistanceJumpsDistance = 0\n    var maxDistanceReachedAtDistanceJumpsDistanceJumpsDistanceJumpsDistanceJumpsDistanceJumps = 0\n    var maxDistanceReachedAtDistanceJumpsDistanceJumpsDistanceJumpsDistanceJumpsDistanceJumpsDistance = 0\n    var maxDistanceReachedAtDistanceJumpsDistanceJumpsDistanceJumpsDistanceJumpsDistanceJumpsDistanceJumps = 0\n    var maxDistanceReachedAtDistanceJumpsDistanceJumpsDistanceJumpsDistanceJumpsDistanceJumpsDistanceJumpsDistance = 0\n    var maxDistanceReachedAtDistanceJumpsDistanceJumpsDistanceJumpsDistanceJumpsDistanceJumpsDistanceJumpsDistanceJumps = 0\n    var maxDistanceReachedAtDistanceJumpsDistanceJumpsDistanceJumpsDistanceJumpsDistanceJumps"}
{"task_id": "MBSWP/618", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to divide two lists using map and lambda function.\n *\n * >>> divList([4, 5, 6], [1, 2, 3])\n * [4.0, 2.5, 2.0]\n * >>> divList([3, 2], [1, 4])\n * [3.0, 0.5]\n * >>> divList([90, 120], [50, 70])\n * [1.8, 1.7142857142857142]\n */\nfunc divList(nums1 : [Int], nums2 : [Int]) -> [Double] {\n    return nums1.map({ (num1 : Int) -> Double in\n        return num1 / nums2[0]\n    })\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to divide two lists using map and lambda function.\n *\n * >>> divList([4, 5, 6], [1, 2, 3])\n * [4.0, 2.5, 2.0]\n * >>> divList([3, 2], [1, 4])\n * [3.0, 0.5]\n * >>> divList([90, 120], [50, 70])\n * [1.8, 1.7142857142857142]\n */\nfunc divList(nums1 : [Int], nums2 : [Int]) -> [Double] {\n    return nums1.map({ (num1 : Int) -> Double in\n        return num1 / nums2[0]\n    })\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to divide two lists using map and lambda function.\n *\n * >>> divList([4, 5, 6], [1, 2, 3])\n * [4.0, 2.5, 2.0]\n * >>> divList([3, 2], [1, 4])\n * [3.0, 0.5]\n * >>> divList([90, 120], [50, 70])\n * [1.8, 1.7142857142857142]\n */\nfunc divList(n"}
{"task_id": "MBSWP/619", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to move all the numbers in it to the given string.\n *\n * >>> moveNum(\"I1love143you55three3000thousand\")\n * \"Iloveyouthreethousand1143553000\"\n * >>> moveNum(\"Avengers124Assemble\")\n * \"AvengersAssemble124\"\n * >>> moveNum(\"Its11our12path13to14see15things16do17things\")\n * \"Itsourpathtoseethingsdothings11121314151617\"\n */\nfunc moveNum(testStr : String) -> String {\n    var result = \"\"\n    var temp = \"\"\n    var num = 0\n    var isNum = false\n    var isNum2 = false\n    var isNum3 = false\n    var isNum4 = false\n    var isNum5 = false\n    var isNum6 = false\n    var isNum7 = false\n    var isNum8 = false\n    var isNum9 = false\n    var isNum10 = false\n    var isNum11 = false\n    var isNum12 = false\n    var isNum13 = false\n    var isNum14 = false\n    var isNum15 = false\n    var isNum16 = false\n    var isNum17 = false\n    var isNum18 = false\n    var isNum19 = false\n    var isNum20 = false\n    var isNum21 = false\n    var isNum22 = false\n    var isNum23 = false\n    var isNum24 = false\n    var isNum25 = false\n    var isNum26 = false\n    var isNum27 = false\n    var isNum28 = false\n    var isNum29 = false\n    var isNum30 = false\n    var isNum31 = false\n    var isNum32 = false\n    var isNum33 = false\n    var isNum34 = false\n    var isNum35 = false\n    var isNum36 = false\n    var isNum37 = false\n    var isNum38 = false\n    var isNum39 = false\n    var isNum40 = false\n    var isNum41 = false\n    var isNum42 = false\n    var isNum43 = false\n   "}
{"task_id": "MBSWP/620", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the largest subset where each pair is divisible.\n *\n * >>> largestSubset([1, 3, 6, 13, 17, 18], 6)\n * 4\n * >>> largestSubset([10, 5, 3, 15, 20], 5)\n * 3\n * >>> largestSubset([18, 1, 3, 6, 13, 17], 6)\n * 4\n */\nfunc largestSubset(a : [Int], n : Int) -> Int {\n    var a = a\n    var n = n\n    var dp = Array(repeating: 0, count: n)\n    var max = 0\n    for i in 0..<n {\n        for j in 0..<i {\n            if a[i] % a[j] == 0 {\n                dp[i] = max(dp[i], dp[j] + 1)\n            }\n        }\n        max = max(max, dp[i])\n    }\n    return max\n}\n"}
{"task_id": "MBSWP/621", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to increment the numeric values in the given strings by k.\n *\n * >>> incrementNumerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"], 6)\n * [\"MSM\", \"240\", \"is\", \"104\", \"129\", \"best\", \"10\"]\n * >>> incrementNumerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"], 12)\n * [\"Dart\", \"368\", \"is\", \"100\", \"181\", \"Super\", \"18\"]\n * >>> incrementNumerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"], 33)\n * [\"Flutter\", \"484\", \"is\", \"77\", \"129\", \"Magnificent\", \"45\"]\n */\nfunc incrementNumerics(testList : [String], k : Int) -> [String] {\n    var result : [String] = []\n    for i in testList {\n        if let num = Int(i) {\n            result.append(String(num + k))\n        } else {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to increment the numeric values in the given strings by k.\n *\n * >>> incrementNumerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"], 6)\n * [\"MSM\", \"240\", \"is\", \"104\", \"129\", \"best\", \"10\"]\n * >>> incrementNumerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"], 12)\n * [\"Dart\", \"368\", \"is\", \"100\", \"181\", \"Super\", \"18\"]\n * >>> incrementNumerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"], 33)\n * [\"Flutter\", \"484\", \"is\", \"77\", \"129\", \"Magnificent\", \"45\"]\n */\nfunc incrementNumerics"}
{"task_id": "MBSWP/622", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the median of two sorted arrays of same size.\n *\n * >>> getMedian([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)\n * 16.0\n * >>> getMedian([2, 4, 8, 9], [7, 13, 19, 28], 4)\n * 8.5\n * >>> getMedian([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6)\n * 25.0\n */\nfunc getMedian(arr1 : [Int], arr2 : [Int], n : Int) -> Double {\n    var arr = [Int]()\n    var i = 0, j = 0\n    while i < n && j < n {\n        if arr1[i] < arr2[j] {\n            arr.append(arr1[i])\n            i += 1\n        } else {\n            arr.append(arr2[j])\n            j += 1\n        }\n    }\n    while i < n {\n        arr.append(arr1[i])\n        i += 1\n    }\n    while j < n {\n        arr.append(arr2[j])\n        j += 1\n    }\n    if n % 2 == 0 {\n        return (arr[n/2] + arr[n/2 - 1]) / 2.0\n    } else {\n        return Double(arr[n/2])\n    }\n}\n"}
{"task_id": "MBSWP/623", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n-th power of individual elements in a list using lambda function.\n *\n * >>> nthNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n * [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n * >>> nthNums([10, 20, 30], 3)\n * [1000, 8000, 27000]\n * >>> nthNums([12, 15], 5)\n * [248832, 759375]\n */\nfunc nthNums(nums : [Int], n : Int) -> [Int] {\n    return nums.map { $0 ** n }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n-th power of individual elements in a list using map.\n *\n * >>> nthNumsMap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n * [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n * >>> nthNumsMap([10, 20, 30], 3)\n * [1000, 8000, 27000]\n * >>> nthNumsMap([12, 15], 5)\n * [248832, 759375]\n */\nfunc nthNumsMap(nums : [Int], n : Int) -> [Int] {\n    return nums.map { $0 ** n }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n-th power of individual elements in a list using reduce.\n *\n * >>> nthNumsReduce([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n * [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n * >>> nthNumsReduce([10, 20, 30], 3)\n * [1000, 8000, 27000]\n * >>> nthNumsReduce([12, 15],"}
{"task_id": "MBSWP/624", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert the given string to upper case.\n *\n * >>> isUpper(\"person\")\n * \"PERSON\"\n * >>> isUpper(\"final\")\n * \"FINAL\"\n * >>> isUpper(\"Valid\")\n * \"VALID\"\n */\nfunc isUpper(string : String) -> String {\n    return string.uppercased()\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert the given string to lower case.\n *\n * >>> isLower(\"Person\")\n * \"person\"\n * >>> isLower(\"Final\")\n * \"final\"\n * >>> isLower(\"Valid\")\n * \"valid\"\n */\nfunc isLower(string : String) -> String {\n    return string.lowercased()\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if the given string is a palindrome.\n *\n * >>> isPalindrome(\"racecar\")\n * true\n * >>> isPalindrome(\"race\")\n * false\n */\nfunc isPalindrome(string : String) -> Bool {\n    let reversed = string.reversed()\n    return string == reversed\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if the given string is a palindrome.\n *\n * >>> isPalindrome(\"racecar\")\n * true\n * >>> isPalindrome(\"race\")\n * false\n */\nfunc isPalindrome(string : String) -> Bool {\n    let reversed = string.reversed()\n    return string == reversed\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if the given string is a palindrome.\n *\n * >>> isPalindrome(\"racecar\")\n * true\n * >>> isPalindrome(\"race\")\n * false\n */\nfunc isPalindrome(string : String) -> Bool {\n    let reversed = string.reversed()\n    return string == reversed\n}\n"}
{"task_id": "MBSWP/625", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to interchange first and last elements in a given list.\n *\n * >>> swapList([1, 2, 3])\n * [3, 2, 1]\n * >>> swapList([1, 2, 3, 4, 4])\n * [4, 2, 3, 4, 1]\n * >>> swapList([4, 5, 6])\n * [6, 5, 4]\n */\nfunc swapList(newlist : [Int]) -> [Int] {\n    var newlist = newlist\n    var first = newlist[0]\n    var last = newlist[newlist.count - 1]\n    newlist[0] = last\n    newlist[newlist.count - 1] = first\n    return newlist\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to interchange first and last elements in a given list.\n *\n * >>> swapList([1, 2, 3])\n * [3, 2, 1]\n * >>> swapList([1, 2, 3, 4, 4])\n * [4, 2, 3, 4, 1]\n * >>> swapList([4, 5, 6])\n * [6, 5, 4]\n */\nfunc swapList(newlist : [Int]) -> [Int] {\n    var newlist = newlist\n    var first = newlist[0]\n    var last = newlist[newlist.count - 1]\n    newlist[0] = last\n    newlist[newlist.count - 1] = first\n    return newlist\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to interchange first and last elements in a given list.\n *\n * >>> swapList([1, 2, 3])\n * [3, 2, 1]\n * >>> swapList([1, 2, 3, 4, 4])\n * [4, 2, 3, 4, 1]\n * >>> swapList([4, 5, 6])\n * [6, 5, 4]\n */\nfunc swapList(newlist : [Int]) -> [Int] {\n    var newlist = new"}
{"task_id": "MBSWP/626", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the largest triangle that can be inscribed in the semicircle.\n *\n * >>> triangleArea(0)\n * 0\n * >>> triangleArea(-1)\n * -1\n * >>> triangleArea(2)\n * 4\n */\nfunc triangleArea(r : Int) -> Int {\n    if r < 0 {\n        return -1\n    }\n    return r * r * r\n}\n"}
{"task_id": "MBSWP/627", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the smallest missing number from the given array.\n *\n * >>> findFirstMissing([0, 1, 2, 3], 0, 3)\n * 4\n * >>> findFirstMissing([0, 1, 2, 6, 9], 0, 4)\n * 3\n * >>> findFirstMissing([2, 3, 5, 8, 9], 0, 4)\n * 0\n */\nfunc findFirstMissing(array : [Int], start : Int, end : Int) -> Int {\n    var i = start\n    while i < end {\n        if array[i] != i + start {\n            return i + start\n        }\n        i += 1\n    }\n    return i + start\n}\n"}
{"task_id": "MBSWP/628", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\n *\n * >>> replaceSpaces(\"My Name is Dawood\")\n * \"My%20Name%20is%20Dawood\"\n * >>> replaceSpaces(\"I am a Programmer\")\n * \"I%20am%20a%20Programmer\"\n * >>> replaceSpaces(\"I love Coding\")\n * \"I%20love%20Coding\"\n */\nfunc replaceSpaces(string : String) -> String {\n    var result = \"\"\n    for char in string {\n        if char == \" \" {\n            result += \"%20\"\n        } else {\n            result += char\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reverse the given string.\n *\n * >>> reverseString(\"My Name is Dawood\")\n * \"doowD si am yM\"\n * >>> reverseString(\"I am a Programmer\")\n * \"eram a P rogrammi\"\n * >>> reverseString(\"I love Coding\")\n * \"dniC owl vI\"\n */\nfunc reverseString(string : String) -> String {\n    var result = \"\"\n    for char in string.characters.reversed() {\n        result += char\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given string is a palindrome.\n *\n * >>> isPalindrome(\"My Name is Dawood\")\n * false\n * >>> isPalindrome(\"I am a Programmer\")\n * false\n * >>> isPalindrome(\"I love Coding\")\n * true\n */\nfunc isPalindrome(string : String) -> Bool {\n    var result = \"\"\n    for char in string.characters.reversed() {\n        result += char\n    }\n    return result == string\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to"}
{"task_id": "MBSWP/629", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find even numbers from a mixed list.\n *\n * >>> split([1, 2, 3, 4, 5])\n * [2, 4]\n * >>> split([4, 5, 6, 7, 8, 0, 1])\n * [4, 6, 8, 0]\n */\nfunc split(list : [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first odd number from a mixed list.\n *\n * >>> firstOdd([1, 2, 3, 4, 5])\n * 1\n * >>> firstOdd([4, 5, 6, 7, 8, 0, 1])\n * 5\n */\nfunc firstOdd(list : [Int]) -> Int {\n    for i in list {\n        if i % 2 == 1 {\n            return i\n        }\n    }\n    return 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first even number from a mixed list.\n *\n * >>> firstEven([1, 2, 3, 4, 5])\n * 2\n * >>> firstEven([4, 5, 6, 7, 8, 0, 1])\n * 6\n */\nfunc firstEven(list : [Int]) -> Int {\n    for i in list {\n        if i % 2 == 0 {\n            return i\n        }\n    }\n    return 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the last odd number from a mixed list.\n *\n * >>> lastOdd([1, 2, 3, 4, 5])\n * 3\n * >>> lastOdd([4, 5, 6, 7, 8, 0, 1])\n * 7\n */\nfunc lastOdd(list : [Int]) -> Int {\n    var last = 0\n"}
{"task_id": "MBSWP/630", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n *\n * >>> getCoordinates([3, 4])\n * [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n * >>> getCoordinates([4, 5])\n * [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n * >>> getCoordinates([5, 6])\n * [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n */\nfunc getCoordinates(testTup : [Int]) -> [[Int]] {\n    var result : [[Int]] = []\n    for i in 0..<testTup.count {\n        for j in 0..<testTup.count {\n            if i != j {\n                result.append([testTup[i] + j, testTup[j] + i])\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n *\n * >>> getCoordinates([3, 4])\n * [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n * >>> getCoordinates([4, 5])\n * [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n * >>> getCoordinates([5, 6])\n * [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6"}
{"task_id": "MBSWP/631", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\n *\n * >>> replaceSpaces(\"Jumanji The Jungle\")\n * \"Jumanji_The_Jungle\"\n * >>> replaceSpaces(\"The Avengers\")\n * \"The_Avengers\"\n * >>> replaceSpaces(\"Fast and Furious\")\n * \"Fast_and_Furious\"\n */\nfunc replaceSpaces(text : String) -> String {\n    return text.replacingOccurrences(of: \" \", with: \"_\")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a given string is a palindrome or not.\n *\n * >>> isPalindrome(\"Jumanji\")\n * false\n * >>> isPalindrome(\"Jumanji The Jungle\")\n * true\n * >>> isPalindrome(\"The Avengers\")\n * true\n * >>> isPalindrome(\"Fast and Furious\")\n * false\n */\nfunc isPalindrome(text : String) -> Bool {\n    let reversedText = text.reversed()\n    return text == reversedText\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a given string is a palindrome or not.\n *\n * >>> isPalindrome(\"Jumanji\")\n * false\n * >>> isPalindrome(\"Jumanji The Jungle\")\n * true\n * >>> isPalindrome(\"The Avengers\")\n * true\n * >>> isPalindrome(\"Fast and Furious\")\n * false\n */\nfunc isPalindrome(text : String) -> Bool {\n    let reversedText = text.reversed()\n    return text == reversedText\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a given string is a palindrome or not.\n *\n * >>> isPalindrome(\"Jumanji\")\n * false\n * >>> isPalindrome(\"Jumanji The Jungle\")\n * true\n * >>> isPalindrome(\"The Avengers\")\n * true\n * >>> isPal"}
{"task_id": "MBSWP/632", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to move all zeroes to the end of the given list.\n *\n * >>> moveZero([1, 0, 2, 0, 3, 4])\n * [1, 2, 3, 4, 0, 0]\n * >>> moveZero([2, 3, 2, 0, 0, 4, 0, 5, 0])\n * [2, 3, 2, 4, 5, 0, 0, 0, 0]\n * >>> moveZero([0, 1, 0, 1, 1])\n * [1, 1, 1, 0, 0]\n */\nfunc moveZero(numList : [Int]) -> [Int] {\n    var numList = numList\n    var zeroIndex = 0\n    for i in 0..<numList.count {\n        if numList[i] == 0 {\n            numList.insert(numList[i], at: zeroIndex)\n            numList.remove(at: i)\n            zeroIndex += 1\n        }\n    }\n    return numList\n}\n"}
{"task_id": "MBSWP/633", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of xor of all pairs of numbers in the given array.\n *\n * >>> pairOrSum([5, 9, 7, 6], 4)\n * 47\n * >>> pairOrSum([7, 3, 5], 3)\n * 12\n * >>> pairOrSum([7, 3], 2)\n * 4\n */\nfunc pairOrSum(arr : [Int], n : Int) -> Int {\n    var sum = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            sum += arr[i] ^ arr[j]\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of xor of all triples of numbers in the given array.\n *\n * >>> tripleOrSum([5, 9, 7, 6], 4)\n * 47\n * >>> tripleOrSum([7, 3, 5], 3)\n * 12\n * >>> tripleOrSum([7, 3], 2)\n * 4\n */\nfunc tripleOrSum(arr : [Int], n : Int) -> Int {\n    var sum = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            for k in j+1..<n {\n                sum += arr[i] ^ arr[j] ^ arr[k]\n            }\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of xor of all quadruples of numbers in the given array.\n *\n * >>> quadrupleOrSum([5, 9, 7, 6], 4)\n * 47\n * >>> quadrupleOrSum([7, 3, 5], 3)\n * 12\n * >>> quadrupleOrSum([7, 3], 2)\n * 4\n */\nfunc quadrupleOrSum(arr : [Int], n : Int) -> Int {\n    var sum = 0\n    for i in 0..<n {\n        for j in i+1..<n {"}
{"task_id": "MBSWP/634", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of fourth power of first n even natural numbers.\n *\n * >>> evenPowerSum(2)\n * 272\n * >>> evenPowerSum(3)\n * 1568\n * >>> evenPowerSum(4)\n * 5664\n */\nfunc evenPowerSum(n : Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n            sum += Int(i.pow(4))\n        }\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/635", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to push all values into a heap and then pop off the smallest values one at a time.\n *\n * >>> heapSort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n * [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n * >>> heapSort([25, 35, 22, 85, 14, 65, 75, 25, 58])\n * [14, 22, 25, 25, 35, 58, 65, 75, 85]\n * >>> heapSort([7, 1, 9, 5])\n * [1, 5, 7, 9]\n */\nfunc heapSort(iterable : [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var sorted = [Int]()\n    while heap.size > 0 {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to push all values into a heap and then pop off the smallest values one at a time.\n *\n * >>> heapSort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n * [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n * >>> heapSort([25, 35, 22, 85, 14, 65, 75, 25, 58])\n * [14, 22, 25, 25, 35, 58, 65, 75, 85]\n * >>> heapSort([7, 1, 9, 5])\n * [1, 5, 7, 9]\n */\nfunc heapSort(iterable : [Int]) -> [Int] {\n    var heap = Heap(iterable)\n    var sorted = [Int]()\n    while heap.size > 0 {\n        sorted.append(heap.pop())\n    }\n    return sorted\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to push all values into a heap and then pop off the smallest values one at a time.\n *\n * >>> heapSort([1"}
{"task_id": "MBSWP/636", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if roots of a quadratic equation are reciprocal of each other or not.\n *\n * >>> checkSolution(2, 0, 2)\n * \"Yes\"\n * >>> checkSolution(2, -5, 2)\n * \"Yes\"\n * >>> checkSolution(1, 2, 3)\n * \"No\"\n */\nfunc checkSolution(a : Int, b : Int, c : Int) -> String {\n    let d = b * b - 4 * a * c\n    if d > 0 {\n        return \"Yes\"\n    } else if d == 0 {\n        return \"Yes\"\n    } else {\n        return \"No\"\n    }\n}\n"}
{"task_id": "MBSWP/637", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given amount has no profit and no loss\n *\n * >>> noprofitNoloss(1500, 1200)\n * false\n * >>> noprofitNoloss(100, 100)\n * true\n * >>> noprofitNoloss(2000, 5000)\n * false\n */\nfunc noprofitNoloss(actualCost : Int, saleAmount : Int) -> Bool {\n    let profit = saleAmount - actualCost\n    return profit == 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given amount has no profit and no loss\n *\n * >>> noprofitNoloss(1500, 1200)\n * false\n * >>> noprofitNoloss(100, 100)\n * true\n * >>> noprofitNoloss(2000, 5000)\n * false\n */\nfunc noprofitNoloss(actualCost : Int, saleAmount : Int) -> Bool {\n    let profit = saleAmount - actualCost\n    return profit == 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given amount has no profit and no loss\n *\n * >>> noprofitNoloss(1500, 1200)\n * false\n * >>> noprofitNoloss(100, 100)\n * true\n * >>> noprofitNoloss(2000, 5000)\n * false\n */\nfunc noprofitNoloss(actualCost : Int, saleAmount : Int) -> Bool {\n    let profit = saleAmount - actualCost\n    return profit == 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given amount has no profit and no loss\n *\n * >>> noprofitNoloss(1500, 1200)\n * false\n * >>> noprofitNoloss(100, 100)\n * true\n * >>> noprofitNoloss(2000, 5000)\n * false\n */\nfunc noprofitNoloss(actualCost"}
{"task_id": "MBSWP/638", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate wind chill index.\n *\n * >>> windChill(120, 35)\n * 40\n * >>> windChill(40, 70)\n * 86\n * >>> windChill(10, 100)\n * 116\n */\nfunc windChill(v : Int, t : Int) -> Int {\n    return (v * (t / (t + 100))).round()\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate heat index.\n *\n * >>> heatIndex(80, 60)\n * 80\n * >>> heatIndex(80, 80)\n * 80\n * >>> heatIndex(80, 100)\n * 90\n */\nfunc heatIndex(v : Int, t : Int) -> Int {\n    return (v * (t / (t + 100))).round()\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the distance between two points.\n *\n * >>> distance(0, 0, 0, 0)\n * 0\n * >>> distance(0, 0, 0, 1)\n * 1\n * >>> distance(0, 0, 1, 0)\n * 1\n * >>> distance(0, 0, 1, 1)\n * 1.4142135623730951\n */\nfunc distance(x1 : Int, y1 : Int, x2 : Int, y2 : Int) -> Double {\n    return sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the area of a rectangle.\n *\n * >>> area(0, 0, 0, 0)\n * 0\n * >>> area(0, 0, 0, 1)\n * 0\n * >>> area(0, 0, 1, 0)\n * 0\n * >>> area(0, 0, 1, 1)\n * 1\n */\nfunc area(x1 : Int, y1 : Int, x2 : Int, y2 :"}
{"task_id": "MBSWP/639", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n *\n * >>> sampleNam([\"sally\", \"Dylan\", \"rebecca\", \"Diana\", \"Joanne\", \"keith\"])\n * 16\n * >>> sampleNam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])\n * 10\n * >>> sampleNam([\"abcd\", \"Python\", \"abba\", \"aba\"])\n * 6\n */\nfunc sampleNam(sampleNames : [String]) -> Int {\n    var sum = 0\n    for name in sampleNames {\n        if name.hasPrefix(\"a\") {\n            continue\n        }\n        sum += name.count\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/640", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove the parenthesis area in a string.\n *\n * >>> removeParenthesis([\"python (chrome)\"])\n * \"python\"\n * >>> removeParenthesis([\"string(.abc)\"])\n * \"string\"\n * >>> removeParenthesis([\"alpha(num)\"])\n * \"alpha\"\n */\nfunc removeParenthesis(items : [String]) -> String {\n    var result = \"\"\n    for item in items {\n        var i = 0\n        while i < item.count {\n            if item[i] == \"(\" {\n                break\n            }\n            result += item[i]\n            i += 1\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove the parenthesis area in a string.\n *\n * >>> removeParenthesis([\"python (chrome)\"])\n * \"python\"\n * >>> removeParenthesis([\"string(.abc)\"])\n * \"string\"\n * >>> removeParenthesis([\"alpha(num)\"])\n * \"alpha\"\n */\nfunc removeParenthesis(items : [String]) -> String {\n    var result = \"\"\n    for item in items {\n        var i = 0\n        while i < item.count {\n            if item[i] == \"(\" {\n                break\n            }\n            result += item[i]\n            i += 1\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove the parenthesis area in a string.\n *\n * >>> removeParenthesis([\"python (chrome)\"])\n * \"python\"\n * >>> removeParenthesis([\"string(.abc)\"])\n * \"string\"\n * >>> removeParenthesis([\"alpha(num)\"])\n * \"alpha\"\n */\nfunc removeParenthesis(items : [String]) -> String {\n    var result = \"\"\n    for item in items {\n        var i = 0\n        while i < item.count {\n            if item[i] == \"(\" {\n                break\n           "}
{"task_id": "MBSWP/641", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth nonagonal number.\n *\n * >>> isNonagonal(10)\n * 325\n * >>> isNonagonal(15)\n * 750\n * >>> isNonagonal(18)\n * 1089\n */\nfunc isNonagonal(n : Int) -> Int {\n    return n * (n + 1) * (2 * n + 1) / 6\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth pentagonal number.\n *\n * >>> isPentagonal(10)\n * 165\n * >>> isPentagonal(15)\n * 286\n * >>> isPentagonal(18)\n * 405\n */\nfunc isPentagonal(n : Int) -> Int {\n    return n * (3 * n - 1) / 2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth hexagonal number.\n *\n * >>> isHexagonal(10)\n * 145\n * >>> isHexagonal(15)\n * 190\n * >>> isHexagonal(18)\n * 225\n */\nfunc isHexagonal(n : Int) -> Int {\n    return n * (2 * n - 1)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth heptagonal number.\n *\n * >>> isHeptagonal(10)\n * 55\n * >>> isHeptagonal(15)\n * 66\n * >>> isHeptagonal(18)\n * 77\n */\nfunc isHeptagonal(n : Int) -> Int {\n    return n * (5 * n - 3) / 2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth octagonal number.\n *\n * >>> isOctagonal(10)\n * 45\n * >>> isOctagonal(15)\n * 60\n * >>> isOctagonal(18)\n * 75\n */\nfunc isOctagonal(n : Int) -> Int {\n   "}
{"task_id": "MBSWP/643", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a word containing 'z', not at the start or end of the word.\n *\n * >>> textMatchWordzMiddle(\"pythonzabc.\")\n * \"Found a match!\"\n * >>> textMatchWordzMiddle(\"xyzabc.\")\n * \"Found a match!\"\n * >>> textMatchWordzMiddle(\"  lang  .\")\n * \"Not matched!\"\n */\nfunc textMatchWordzMiddle(text : String) -> String {\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n    let regex = \"\\\\w*z\\\\w*\"\n"}
{"task_id": "MBSWP/644", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to reverse an array upto a given position.\n *\n * >>> reverseArrayUptoK([1, 2, 3, 4, 5, 6], 4)\n * [4, 3, 2, 1, 5, 6]\n * >>> reverseArrayUptoK([4, 5, 6, 7], 2)\n * [5, 4, 6, 7]\n * >>> reverseArrayUptoK([9, 8, 7, 6, 5], 3)\n * [7, 8, 9, 6, 5]\n */\nfunc reverseArrayUptoK(input : [Int], k : Int) -> [Int] {\n    var result = input\n    var i = 0\n    while i < k {\n        result.append(result.remove(at: result.count - 1))\n        i += 1\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to reverse an array.\n *\n * >>> reverseArray([1, 2, 3, 4, 5, 6])\n * [6, 5, 4, 3, 2, 1]\n * >>> reverseArray([4, 5, 6, 7])\n * [7, 6, 5, 4]\n * >>> reverseArray([9, 8, 7, 6, 5])\n * [5, 6, 7, 8, 9]\n */\nfunc reverseArray(input : [Int]) -> [Int] {\n    var result = input\n    var i = 0\n    while i < result.count / 2 {\n        result.append(result.remove(at: result.count - 1))\n        i += 1\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to reverse a string.\n *\n * >>> reverseString(\"hello\")\n * \"olleh\"\n * >>> reverseString(\"world\")\n * \"dlrow\"\n * >>> reverseString(\"swift\")\n * \"tswif\"\n */\nfunc reverseString(input : String) -> String {\n    var result = input\n    var i = 0\n   "}
{"task_id": "MBSWP/645", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the product of it\u2019s kth index in the given tuples.\n *\n * >>> findKProduct([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n * 665\n * >>> findKProduct([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1)\n * 280\n * >>> findKProduct([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 0)\n * 210\n */\nfunc findKProduct(testList : [[Int]], k : Int) -> Int {\n    var product = 1\n    for i in 0..<testList.count {\n        product *= testList[i][k]\n    }\n    return product\n}\n"}
{"task_id": "MBSWP/646", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count number of cubes of size k in a cube of size n.\n *\n * >>> noOfCubes(2, 1)\n * 8\n * >>> noOfCubes(5, 2)\n * 64\n * >>> noOfCubes(1, 1)\n * 1\n */\nfunc noOfCubes(n : Int, k : Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in 0..<n {\n            for l in 0..<n {\n                if i + j + l == k {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/647", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to split a string at uppercase letters.\n *\n * >>> splitUpperstring(\"PythonProgramLanguage\")\n * [\"Python\", \"Program\", \"Language\"]\n * >>> splitUpperstring(\"PythonProgram\")\n * [\"Python\", \"Program\"]\n * >>> splitUpperstring(\"ProgrammingLanguage\")\n * [\"Programming\", \"Language\"]\n */\nfunc splitUpperstring(text : String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n    for char in text {\n        if char.isUpperCase {\n            if current.isEmpty {\n                current = String(char)\n            } else {\n                result.append(current)\n                current = String(char)\n            }\n        } else {\n            current += String(char)\n        }\n    }\n    result.append(current)\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to split a string at uppercase letters.\n *\n * >>> splitUpperstring(\"PythonProgramLanguage\")\n * [\"Python\", \"Program\", \"Language\"]\n * >>> splitUpperstring(\"PythonProgram\")\n * [\"Python\", \"Program\"]\n * >>> splitUpperstring(\"ProgrammingLanguage\")\n * [\"Programming\", \"Language\"]\n */\nfunc splitUpperstring(text : String) -> [String] {\n    var result = [String]()\n    var current = \"\"\n    for char in text {\n        if char.isUpperCase {\n            if current.isEmpty {\n                current = String(char)\n            } else {\n                result.append(current)\n                current = String(char)\n            }\n        } else {\n            current += String(char)\n        }\n    }\n    result.append(current)\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to split a string at uppercase letters.\n *\n * >>> splitUpperstring(\"PythonProgramLanguage\")\n * [\"Python\", \"Program\", \"Language\"]\n * >>> splitUpperstring(\"PythonProgram\")"}
{"task_id": "MBSWP/648", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n *\n * >>> exchangeElements([0, 1, 2, 3, 4, 5])\n * [1, 0, 3, 2, 5, 4]\n * >>> exchangeElements([5, 6, 7, 8, 9, 10])\n * [6, 5, 8, 7, 10, 9]\n * >>> exchangeElements([25, 35, 45, 55, 75, 95])\n * [35, 25, 55, 45, 95, 75]\n */\nfunc exchangeElements(lst : [Int]) -> [Int] {\n    var lst = lst\n    for i in stride(from: 0, through: lst.count, by: 2) {\n        let temp = lst[i]\n        lst[i] = lst[i+1]\n        lst[i+1] = temp\n    }\n    return lst\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n *\n * >>> exchangeElements([0, 1, 2, 3, 4, 5])\n * [1, 0, 3, 2, 5, 4]\n * >>> exchangeElements([5, 6, 7, 8, 9, 10])\n * [6, 5, 8, 7, 10, 9]\n * >>> exchangeElements([25, 35, 45, 55, 75, 95])\n * [35, 25, 55, 45, 95, 75]\n */\nfunc exchangeElements(lst : [Int]) -> [Int] {\n    var lst = lst\n    for i in stride(from: 0, through: lst.count, by: 2) {\n        let temp = lst[i]\n        lst[i] = lst[i+1]\n        lst[i+1] = temp\n    }\n"}
{"task_id": "MBSWP/649", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to calculate the sum of the numbers in a list between the indices of a specified range.\n *\n * >>> sumRangeList([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n * 29\n * >>> sumRangeList([1, 2, 3, 4, 5], 1, 2)\n * 5\n * >>> sumRangeList([1, 0, 1, 2, 5, 6], 4, 5)\n * 11\n */\nfunc sumRangeList(nums : [Int], m : Int, n : Int) -> Int {\n    var sum = 0\n    for i in m..<n {\n        sum += nums[i]\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to calculate the sum of the numbers in a list between the indices of a specified range.\n *\n * >>> sumRangeList([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n * 29\n * >>> sumRangeList([1, 2, 3, 4, 5], 1, 2)\n * 5\n * >>> sumRangeList([1, 0, 1, 2, 5, 6], 4, 5)\n * 11\n */\nfunc sumRangeList(nums : [Int], m : Int, n : Int) -> Int {\n    var sum = 0\n    for i in m..<n {\n        sum += nums[i]\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to calculate the sum of the numbers in a list between the indices of a specified range.\n *\n * >>> sumRangeList([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n * 29\n * >>> sumRangeList([1, 2, 3, 4, 5], 1, 2)\n * 5\n * >>> sumRangeList([1, 0, 1, 2, 5, 6], 4, 5)"}
{"task_id": "MBSWP/650", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given two arrays are equal or not.\n *\n * >>> areEqual([1, 2, 3], [3, 2, 1], 3, 3)\n * true\n * >>> areEqual([1, 1, 1], [2, 2, 2], 3, 3)\n * false\n * >>> areEqual([8, 9], [4, 5, 6], 2, 3)\n * false\n */\nfunc areEqual(arr1 : [Int], arr2 : [Int], n : Int, m : Int) -> Bool {\n    if arr1.count != arr2.count {\n        return false\n    }\n    var i = 0\n    var j = 0\n    while i < n && j < m {\n        if arr1[i] != arr2[j] {\n            return false\n        }\n        i += 1\n        j += 1\n    }\n    return true\n}\n"}
{"task_id": "MBSWP/651", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if one tuple is a subset of another tuple.\n *\n * >>> checkSubset([10, 4, 5, 6], [5, 10])\n * true\n * >>> checkSubset([1, 2, 3, 4], [5, 6])\n * false\n * >>> checkSubset([7, 8, 9, 10], [10, 8])\n * true\n */\nfunc checkSubset(testTup1 : [Int], testTup2 : [Int]) -> Bool {\n    var tup1 = testTup1\n    var tup2 = testTup2\n    var tup1Len = tup1.count\n    var tup2Len = tup2.count\n    var tup1Index = 0\n    var tup2Index = 0\n    var tup1IndexFound = false\n    var tup2IndexFound = false\n    var tup1IndexFoundCount = 0\n    var tup2IndexFoundCount = 0\n    var tup1IndexFoundCountMax = 0\n    var tup2IndexFoundCountMax = 0\n    var tup1IndexFoundCountMaxTup2IndexFoundCount = 0\n    var tup2IndexFoundCountMaxTup1IndexFoundCount = 0\n    var tup1IndexFoundCountMaxTup2IndexFoundCountMax = 0\n    var tup2IndexFoundCountMaxTup1IndexFoundCountMax = 0\n    var tup1IndexFoundCountMaxTup2IndexFoundCountMaxTup1IndexFoundCount = 0\n    var tup2IndexFoundCountMaxTup1IndexFoundCountMaxTup2IndexFoundCount = 0\n    var tup1IndexFoundCountMaxTup2IndexFoundCountMaxTup1IndexFoundCountMax = 0\n    var tup2IndexFoundCountMaxTup1IndexFoundCountMaxTup2IndexFoundCountMax = 0\n    var tup1IndexFoundCountMaxTup2IndexFoundCountMaxTup1IndexFoundCountMaxTup2IndexFoundCount = 0\n    var tup2IndexFoundCountMaxTup1IndexFoundCountMaxTup2IndexFoundCountMaxTup1IndexFoundCount = 0\n    var tup1Index"}
{"task_id": "MBSWP/652", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n *\n * >>> matrixToList([[[4, 5], [7, 8]], [[10, 13], [18, 17]], [[0, 4], [10, 1]]])\n * \"[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]\"\n * >>> matrixToList([[[5, 6], [8, 9]], [[11, 14], [19, 18]], [[1, 5], [11, 2]]])\n * \"[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]\"\n * >>> matrixToList([[[6, 7], [9, 10]], [[12, 15], [20, 21]], [[23, 7], [15, 8]]])\n * \"[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]\"\n */\nfunc matrixToList(testList : [[[Int]]]) -> String {\n    var result = \"\"\n    for i in 0..<testList.count {\n        for j in 0..<testList[i].count {\n            for k in 0..<testList[i][j].count {\n                result += \"\\(testList[i][j][k])\"\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n *\n * >>> matrixToList([[[4, 5], [7, 8]], [[10, 13], [18, 17]], [[0, 4], [10, 1]]])\n * \"[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]\"\n * >>> matrixToList([[[5, 6], [8, 9]], [[11, 14], [19, 18]], [[1, 5], [11, 2]]])\n * \"[(5"}
{"task_id": "MBSWP/653", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n *\n * >>> groupingDictionary([[\"yellow\", 1], [\"blue\", 2], [\"yellow\", 3], [\"blue\", 4], [\"red\", 1]])\n * [\"yellow\" : [1, 3], \"blue\" : [2, 4], \"red\" : [1]]\n * >>> groupingDictionary([[\"yellow\", 10], [\"blue\", 20], [\"yellow\", 30], [\"blue\", 40], [\"red\", 10]])\n * [\"yellow\" : [10, 30], \"blue\" : [20, 40], \"red\" : [10]]\n * >>> groupingDictionary([[\"yellow\", 15], [\"blue\", 25], [\"yellow\", 35], [\"blue\", 45], [\"red\", 15]])\n * [\"yellow\" : [15, 35], \"blue\" : [25, 45], \"red\" : [15]]\n */\nfunc groupingDictionary(l : [[AnyHashable]]) -> [String: [Int]] {\n    var dict : [String: [Int]] = [:]\n    for i in l {\n        let key = i[0] as! String\n        let value = i[1] as! Int\n        if let v = dict[key] {\n            dict[key] = v + [value]\n        } else {\n            dict[key] = [value]\n        }\n    }\n    return dict\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\n *\n * >>> groupingDictionary([[\"yellow\", 1], [\"blue\", 2], [\"yellow\", 3], [\"blue\", 4], [\"red\", 1]])\n * [\"yellow\" : [1, 3], \"blue\" : [2, 4], \"red\" : [1]]\n * >>> groupingDictionary([[\"yellow\", 10], [\"blue\", 20], [\"yellow\", 30], [\"blue\", 40], [\"red\", 10]])\n * [\"yellow\" : [10, 30], \"blue\" : [20, 40], \"red\" : [10]]\n * >>> groupingDictionary(["}
{"task_id": "MBSWP/654", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a rectangle.\n *\n * >>> rectanglePerimeter(10, 20)\n * 60\n * >>> rectanglePerimeter(10, 5)\n * 30\n * >>> rectanglePerimeter(4, 2)\n * 12\n */\nfunc rectanglePerimeter(l : Int, b : Int) -> Int {\n    return 2 * (l + b)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a rectangle.\n *\n * >>> rectangleArea(10, 20)\n * 200\n * >>> rectangleArea(10, 5)\n * 50\n * >>> rectangleArea(4, 2)\n * 8\n */\nfunc rectangleArea(l : Int, b : Int) -> Int {\n    return l * b\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a square.\n *\n * >>> squarePerimeter(10)\n * 40\n * >>> squarePerimeter(5)\n * 20\n * >>> squarePerimeter(4)\n * 16\n */\nfunc squarePerimeter(s : Int) -> Int {\n    return 4 * s\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a square.\n *\n * >>> squareArea(10)\n * 100\n * >>> squareArea(5)\n * 25\n * >>> squareArea(4)\n * 16\n */\nfunc squareArea(s : Int) -> Int {\n    return s * s\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a circle.\n *\n * >>> circlePerimeter(10)\n * 62.83185307179586\n * >>> circlePerimeter(5)\n * 31.41592653589793\n * >>> circlePerimeter(4)\n * 22.566370614359172\n */\nfunc circlePerimeter(r : Double) -> Double {\n    return 2 * 3.141592653589793 * r\n}\n\n/**\n"}
{"task_id": "MBSWP/655", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of fifth power of n natural numbers.\n *\n * >>> fifthPowerSum(2)\n * 33\n * >>> fifthPowerSum(4)\n * 1300\n * >>> fifthPowerSum(3)\n * 276\n */\nfunc fifthPowerSum(n : Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += Int(pow(Double(i), 5))\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/656", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum sum of absolute differences of two arrays.\n *\n * >>> findMinSum([3, 2, 1], [2, 1, 3], 3)\n * 0\n * >>> findMinSum([1, 2, 3], [4, 5, 6], 3)\n * 9\n * >>> findMinSum([4, 1, 8, 7], [2, 3, 6, 5], 4)\n * 6\n */\nfunc findMinSum(a : [Int], b : [Int], n : Int) -> Int {\n    var a = a\n    var b = b\n    var n = n\n    var min = Int.max\n    var sum = 0\n    for i in 0..<n {\n        sum = a[i] - b[i]\n        if sum < 0 {\n            sum = -sum\n        }\n        min = min > sum ? sum : min\n    }\n    return min\n}\n"}
{"task_id": "MBSWP/657", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first digit in factorial of a given number.\n *\n * >>> firstDigit(5)\n * 1\n * >>> firstDigit(10)\n * 3\n * >>> firstDigit(7)\n * 5\n */\nfunc firstDigit(n : Int) -> Int {\n    var fact = 1\n    for i in 1..<n {\n        fact *= i\n    }\n    return fact % 10\n}\n"}
{"task_id": "MBSWP/658", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the item with maximum occurrences in a given list.\n *\n * >>> maxOccurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2])\n * 2\n * >>> maxOccurrences([1, 3, 5, 7, 1, 3, 13, 15, 17, 5, 7, 9, 1, 11])\n * 1\n * >>> maxOccurrences([1, 2, 3, 2, 4, 5, 1, 1, 1])\n * 1\n */\nfunc maxOccurrences(list1 : [Int]) -> Int {\n    var max = 0\n    var maxOccur = 0\n    for i in list1 {\n        if maxOccur < list1.count(where: { $0 == i }) {\n            maxOccur = list1.count(where: { $0 == i })\n            max = i\n        }\n    }\n    return max\n}\n"}
{"task_id": "MBSWP/659", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to print duplicants from a list of integers.\n *\n * >>> do_repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20])\n * [20, 30, -20, 60]\n * >>> do_repeat([-1, 1, -1, 8])\n * [-1]\n * >>> do_repeat([1, 2, 3, 1, 2])\n * [1, 2]\n */\nfunc do_repeat(x : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<x.count {\n        if x[i] in result {\n            result.append(x[i])\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to print the longest increasing subsequence from a list of integers.\n *\n * >>> do_lis([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20])\n * [10, 20, 30, 40, 50, 60]\n * >>> do_lis([-1, 1, -1, 8])\n * [-1, 1, 8]\n * >>> do_lis([1, 2, 3, 1, 2])\n * [1, 2, 3]\n */\nfunc do_lis(x : [Int]) -> [Int] {\n    var result : [Int] = []\n    var dp : [[Int]] = []\n    for i in 0..<x.count {\n        var row : [Int] = []\n        for j in 0..<x.count {\n            row.append(0)\n        }\n        dp.append(row)\n    }\n    for i in 0..<x.count {\n        dp[i][i] = 1\n    }\n    for i in 0..<x.count {\n        for j in 0..<x.count {\n            if i == j {\n                continue\n            }\n            if x[i] >"}
{"task_id": "MBSWP/660", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to choose points from two ranges such that no point lies in both the ranges.\n *\n * >>> findPoints(5, 10, 1, 5)\n * [1, 10]\n * >>> findPoints(3, 5, 7, 9)\n * [3, 9]\n * >>> findPoints(1, 5, 2, 8)\n * [1, 8]\n */\nfunc findPoints(l1 : Int, r1 : Int, l2 : Int, r2 : Int) -> [Int] {\n    var points = [Int]()\n    for i in l1...r1 {\n        for j in l2...r2 {\n            if i != j {\n                points.append(i)\n            }\n        }\n    }\n    return points\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum of three numbers.\n *\n * >>> maxOfThree(1, 2, 3)\n * 3\n * >>> maxOfThree(2, 3, 1)\n * 3\n * >>> maxOfThree(3, 1, 2)\n * 3\n */\nfunc maxOfThree(a : Int, b : Int, c : Int) -> Int {\n    var max = a\n    if b > max {\n        max = b\n    }\n    if c > max {\n        max = c\n    }\n    return max\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum of three numbers.\n *\n * >>> minOfThree(1, 2, 3)\n * 1\n * >>> minOfThree(2, 3, 1)\n * 1\n * >>> minOfThree(3, 1, 2)\n * 1\n */\nfunc minOfThree(a : Int, b : Int, c : Int) -> Int {\n    var min = a\n    if b < min {\n        min = b\n    }\n    if c < min {\n        min = c\n    }\n    return min\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n"}
{"task_id": "MBSWP/661", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\n *\n * >>> maxSumOfThreeConsecutive([100, 1000, 100, 1000, 1], 5)\n * 2101\n * >>> maxSumOfThreeConsecutive([3000, 2000, 1000, 3, 10], 5)\n * 5013\n * >>> maxSumOfThreeConsecutive([1, 2, 3, 4, 5, 6, 7, 8], 8)\n * 27\n */\nfunc maxSumOfThreeConsecutive(arr : [Int], n : Int) -> Int {\n    var maxSum = 0\n    var sum = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    while i < n {\n        while j < n {\n            while k < n {\n                if i != j && j != k && k != i {\n                    sum = arr[i] + arr[j] + arr[k]\n                    if sum > maxSum {\n                        maxSum = sum\n                    }\n                }\n                k += 1\n            }\n            j += 1\n            k = j\n        }\n        i += 1\n        j = i + 1\n        k = j\n    }\n    return maxSum\n}\n"}
{"task_id": "MBSWP/662", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list in a dictionary.\n *\n * >>> sortedDict([\"n1\" : [2, 3, 1], \"n2\" : [5, 1, 2], \"n3\" : [3, 2, 4]])\n * [\"n1\" : [1, 2, 3], \"n2\" : [1, 2, 5], \"n3\" : [2, 3, 4]]\n * >>> sortedDict([\"n1\" : [25, 37, 41], \"n2\" : [41, 54, 63], \"n3\" : [29, 38, 93]])\n * [\"n1\" : [25, 37, 41], \"n2\" : [41, 54, 63], \"n3\" : [29, 38, 93]]\n * >>> sortedDict([\"n1\" : [58, 44, 56], \"n2\" : [91, 34, 58], \"n3\" : [100, 200, 300]])\n * [\"n1\" : [44, 56, 58], \"n2\" : [34, 58, 91], \"n3\" : [100, 200, 300]]\n */\nfunc sortedDict(dict1 : [String: [Int]]) -> [String: [Int]] {\n    var dict2 = dict1\n    for key in dict1.keys {\n        dict2[key] = sorted(dict1[key])\n    }\n    return dict2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list in a dictionary.\n *\n * >>> sortedDict([\"n1\" : [2, 3, 1], \"n2\" : [5, 1, 2], \"n3\" : [3, 2, 4]])\n * [\"n1\" : [1, 2, 3], \"n2\" : [1, 2, 5], \"n3\" : [2, 3, 4]]\n * >>> sortedDict([\"n1\" : [25, 37, 41], \"n2\" : [41, 54, 63], \"n3\" : [29, 38, 93]])\n * [\"n1"}
{"task_id": "MBSWP/663", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the largest possible value of k such that k modulo x is y.\n *\n * >>> findMaxVal(15, 10, 5)\n * 15\n * >>> findMaxVal(187, 10, 5)\n * 185\n * >>> findMaxVal(16, 11, 1)\n * 12\n */\nfunc findMaxVal(n : Int, x : Int, y : Int) -> Int {\n    var k = 0\n    var max = 0\n    while k < n {\n        if k % x == y {\n            max = k\n        }\n        k += 1\n    }\n    return max\n}\n"}
{"task_id": "MBSWP/664", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the average of even numbers till a given even number.\n *\n * >>> averageEven(2)\n * 2\n * >>> averageEven(4)\n * 3\n * >>> averageEven(100)\n * 51\n */\nfunc averageEven(n : Int) -> Int {\n    var sum = 0\n    var count = 0\n    for i in 1...n {\n        if i % 2 == 0 {\n            sum += i\n            count += 1\n        }\n    }\n    return sum / count\n}\n"}
{"task_id": "MBSWP/665", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to shift first element to the end of given list.\n *\n * >>> moveLast([1, 2, 3, 4])\n * [2, 3, 4, 1]\n * >>> moveLast([2, 3, 4, 1, 5, 0])\n * [3, 4, 1, 5, 0, 2]\n * >>> moveLast([5, 4, 3, 2, 1])\n * [4, 3, 2, 1, 5]\n */\nfunc moveLast(numList : [Int]) -> [Int] {\n    var numList = numList\n    var last = numList.popLast()\n    numList.append(last)\n    return numList\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to swap first two elements of given list.\n *\n * >>> swapFirstTwo([1, 2, 3, 4])\n * [2, 1, 3, 4]\n * >>> swapFirstTwo([2, 3, 4, 1, 5, 0])\n * [3, 2, 4, 1, 5, 0]\n * >>> swapFirstTwo([5, 4, 3, 2, 1])\n * [4, 5, 3, 2, 1]\n */\nfunc swapFirstTwo(numList : [Int]) -> [Int] {\n    var numList = numList\n    var first = numList.popFirst()\n    var second = numList.popFirst()\n    numList.insert(first, at: 1)\n    numList.insert(second, at: 1)\n    return numList\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to swap last two elements of given list.\n *\n * >>> swapLastTwo([1, 2, 3, 4])\n * [1, 3, 2, 4]\n * >>> swapLastTwo([2, 3, 4, 1, 5, 0])\n * [2, 4, 3, 1, 5, 0]\n * >>> swapLastTwo([5, 4, 3, 2, 1])\n * [5, 3, 4, 2, 1, 5]"}
{"task_id": "MBSWP/666", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count occurrence of a character in a string.\n *\n * >>> countChar(\"Python\", \"o\")\n * 1\n * >>> countChar(\"little\", \"t\")\n * 2\n * >>> countChar(\"assert\", \"s\")\n * 2\n */\nfunc countChar(string : String, ch : String) -> Int {\n    var count = 0\n    for char in string {\n        if char == ch {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/667", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count number of vowels in the string.\n *\n * >>> checkVow(\"corner\", \"AaEeIiOoUu\")\n * 2\n * >>> checkVow(\"valid\", \"AaEeIiOoUu\")\n * 2\n * >>> checkVow(\"true\", \"AaEeIiOoUu\")\n * 2\n */\nfunc checkVow(string : String, vowels : String) -> Int {\n    var count = 0\n    for char in string {\n        if vowels.contains(char) {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/668", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to replace multiple occurence of character by single.\n *\n * >>> replace(\"peep\", \"e\")\n * \"pep\"\n * >>> replace(\"Greek\", \"e\")\n * \"Grek\"\n * >>> replace(\"Moon\", \"o\")\n * \"Mon\"\n */\nfunc replace(string : String, ch : String) -> String {\n    var result = \"\"\n    var count = 0\n    for i in 0..<string.count {\n        if string[i] == ch {\n            count += 1\n        } else {\n            result += string[i]\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if a string is a palindrome.\n *\n * >>> isPalindrome(\"racecar\")\n * true\n * >>> isPalindrome(\"hello\")\n * false\n */\nfunc isPalindrome(string : String) -> Bool {\n    var result = true\n    var count = 0\n    for i in 0..<string.count {\n        if string[i] != string[string.count - i - 1] {\n            result = false\n            break\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if a string is a palindrome.\n *\n * >>> isPalindrome(\"racecar\")\n * true\n * >>> isPalindrome(\"hello\")\n * false\n */\nfunc isPalindrome(string : String) -> Bool {\n    var result = true\n    var count = 0\n    for i in 0..<string.count {\n        if string[i] != string[string.count - i - 1] {\n            result = false\n            break\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if a string is a palindrome.\n *\n * >>> isPalindrome(\"racecar\")\n * true\n * >>> isPal"}
{"task_id": "MBSWP/669", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given ip address is valid or not using regex.\n *\n * >>> checkIp(\"192.168.0.1\")\n * \"Valid IP address\"\n * >>> checkIp(\"110.234.52.124\")\n * \"Valid IP address\"\n * >>> checkIp(\"366.1.2.2\")\n * \"Invalid IP address\"\n */\nfunc checkIp(ip : String) -> String {\n    let ipRegex = \"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    let ipRegex = \"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    let ipRegex = \"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    let ipRegex = \"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    let ipRegex = \"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3"}
{"task_id": "MBSWP/670", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether a sequence of numbers has a decreasing trend or not.\n *\n * >>> decreasingTrend([-4, -3, -2, -1])\n * true\n * >>> decreasingTrend([1, 2, 3])\n * true\n * >>> decreasingTrend([3, 2, 1])\n * false\n */\nfunc decreasingTrend(nums : [Int]) -> Bool {\n    var i = 0\n    var j = 1\n    while j < nums.count {\n        if nums[i] > nums[j] {\n            return false\n        }\n        i += 1\n        j += 1\n    }\n    return true\n}\n"}
{"task_id": "MBSWP/671", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to set the right most unset bit.\n *\n * >>> setRightMostUnsetBit(21)\n * 23\n * >>> setRightMostUnsetBit(11)\n * 15\n * >>> setRightMostUnsetBit(15)\n * 15\n */\nfunc setRightMostUnsetBit(n : Int) -> Int {\n    var n = n\n    var i = 0\n    while n > 0 {\n        n = n & (n - 1)\n        i += 1\n    }\n    return 1 << i\n}\n"}
{"task_id": "MBSWP/672", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find maximum of three numbers.\n *\n * >>> maxOfThree(10, 20, 30)\n * 30\n * >>> maxOfThree(55, 47, 39)\n * 55\n * >>> maxOfThree(10, 49, 30)\n * 49\n */\nfunc maxOfThree(num1 : Int, num2 : Int, num3 : Int) -> Int {\n    if num1 > num2 && num1 > num3 {\n        return num1\n    } else if num2 > num1 && num2 > num3 {\n        return num2\n    } else {\n        return num3\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find minimum of three numbers.\n *\n * >>> minOfThree(10, 20, 30)\n * 10\n * >>> minOfThree(55, 47, 39)\n * 39\n * >>> minOfThree(10, 49, 30)\n * 10\n */\nfunc minOfThree(num1 : Int, num2 : Int, num3 : Int) -> Int {\n    if num1 < num2 && num1 < num3 {\n        return num1\n    } else if num2 < num1 && num2 < num3 {\n        return num2\n    } else {\n        return num3\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find maximum of four numbers.\n *\n * >>> maxOfFour(10, 20, 30, 40)\n * 40\n * >>> maxOfFour(55, 47, 39, 50)\n * 55\n * >>> maxOfFour(10, 49, 30, 40)\n * 49\n */\nfunc maxOfFour(num1 : Int, num2 : Int, num3 : Int, num4 : Int) -> Int {\n    if num1 > num2 && num1 > num3 && num1 > num4 {\n        return num1\n    } else if num2 > num1 && num2 > num3 && num2 > num4 {\n        return num2\n    } else if num3 > num1 && num3 >"}
{"task_id": "MBSWP/673", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert a list of multiple integers into a single integer.\n *\n * >>> convert([1, 2, 3])\n * 123\n * >>> convert([4, 5, 6])\n * 456\n * >>> convert([7, 8, 9])\n * 789\n */\nfunc convert(list : [Int]) -> Int {\n    var result = 0\n    for i in list {\n        result = result * 10 + i\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert a list of multiple integers into a single integer.\n *\n * >>> convert([1, 2, 3])\n * 123\n * >>> convert([4, 5, 6])\n * 456\n * >>> convert([7, 8, 9])\n * 789\n */\nfunc convert(list : [Int]) -> Int {\n    var result = 0\n    for i in list {\n        result = result * 10 + i\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert a list of multiple integers into a single integer.\n *\n * >>> convert([1, 2, 3])\n * 123\n * >>> convert([4, 5, 6])\n * 456\n * >>> convert([7, 8, 9])\n * 789\n */\nfunc convert(list : [Int]) -> Int {\n    var result = 0\n    for i in list {\n        result = result * 10 + i\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert a list of multiple integers into a single integer.\n *\n * >>> convert([1, 2, 3])\n * 123\n * >>> convert([4, 5, 6])\n * 456\n * >>> convert([7, 8, 9])\n * 789\n */\nfunc convert(list : [Int]) -> Int {\n    var result = 0\n    for i in list {\n        result = result * 10 + i\n    }\n    return result\n}\n\n"}
{"task_id": "MBSWP/674", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove duplicate words from a given string using collections module.\n *\n * >>> removeDuplicate(\"Python Exercises Practice Solution Exercises\")\n * \"Python Exercises Practice Solution\"\n * >>> removeDuplicate(\"Python Exercises Practice Solution Python\")\n * \"Python Exercises Practice Solution\"\n * >>> removeDuplicate(\"Python Exercises Practice Solution Practice\")\n * \"Python Exercises Practice Solution\"\n */\nfunc removeDuplicate(string : String) -> String {\n    let words = string.components(separatedBy: .whitespacesAndNewlines)\n    let uniqueWords = words.distinct()\n    return uniqueWords.joined(separator: \" \")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove duplicate words from a given string using array.\n *\n * >>> removeDuplicate(\"Python Exercises Practice Solution Exercises\")\n * \"Python Exercises Practice Solution\"\n * >>> removeDuplicate(\"Python Exercises Practice Solution Python\")\n * \"Python Exercises Practice Solution\"\n * >>> removeDuplicate(\"Python Exercises Practice Solution Practice\")\n * \"Python Exercises Practice Solution\"\n */\nfunc removeDuplicate(string : String) -> String {\n    let words = string.components(separatedBy: .whitespacesAndNewlines)\n    let uniqueWords = words.distinct()\n    return uniqueWords.joined(separator: \" \")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove duplicate words from a given string using array.\n *\n * >>> removeDuplicate(\"Python Exercises Practice Solution Exercises\")\n * \"Python Exercises Practice Solution\"\n * >>> removeDuplicate(\"Python Exercises Practice Solution Python\")\n * \"Python Exercises Practice Solution\"\n * >>> removeDuplicate(\"Python Exercises Practice Solution Practice\")\n * \"Python Exercises Practice Solution\"\n */\nfunc removeDuplicate(string : String) -> String {\n    let words = string.components(separatedBy: .wh"}
{"task_id": "MBSWP/675", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add two integers. however, if the sum is between the given range it will return 20.\n *\n * >>> sumNums(2, 10, 11, 20)\n * 20\n * >>> sumNums(15, 17, 1, 10)\n * 32\n * >>> sumNums(10, 15, 5, 30)\n * 20\n */\nfunc sumNums(x : Int, y : Int, m : Int, n : Int) -> Int {\n    if x + y >= m && x + y <= n {\n        return 20\n    }\n    return x + y\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a string is a palindrome.\n *\n * >>> isPalindrome(\"racecar\")\n * true\n * >>> isPalindrome(\"racecarx\")\n * false\n */\nfunc isPalindrome(s : String) -> Bool {\n    let reversed = s.reversed()\n    return s == reversed\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a string is a palindrome.\n *\n * >>> isPalindrome(\"racecar\")\n * true\n * >>> isPalindrome(\"racecarx\")\n * false\n */\nfunc isPalindrome(s : String) -> Bool {\n    let reversed = s.reversed()\n    return s == reversed\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a string is a palindrome.\n *\n * >>> isPalindrome(\"racecar\")\n * true\n * >>> isPalindrome(\"racecarx\")\n * false\n */\nfunc isPalindrome(s : String) -> Bool {\n    let reversed = s.reversed()\n    return s == reversed\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a string is a palindrome.\n *\n * >>> isPalindrome(\"racecar\")\n * true"}
{"task_id": "MBSWP/676", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove everything except alphanumeric characters from the given string by using regex.\n *\n * >>> removeExtraChar(\"**\\\\/\\/Google Android\\/\\/ - 12. \")\n * \"GoogleAndroid12\"\n * >>> removeExtraChar(\"****\\\\/\\/Google Flutter/\\/*** - 36. \")\n * \"GoogleFlutter36\"\n * >>> removeExtraChar(\"**\\\\/\\/Google Firebase\\/\\/ - 478. \")\n * \"GoogleFirebase478\"\n */\nfunc removeExtraChar(text1 : String) -> String {\n    let text2 = text1.replacingOccurrences(of: \"\\\\/\", with: \"\")\n    let text3 = text2.replacingOccurrences(of: \"/\", with: \"\")\n    let text4 = text3.replacingOccurrences(of: \" \", with: \"\")\n    let text5 = text4.replacingOccurrences(of: \".\", with: \"\")\n    let text6 = text5.replacingOccurrences(of: \"-\", with: \"\")\n    let text7 = text6.replacingOccurrences(of: \",\", with: \"\")\n    let text8 = text7.replacingOccurrences(of: \":\", with: \"\")\n    let text9 = text8.replacingOccurrences(of: \";\", with: \"\")\n    let text10 = text9.replacingOccurrences(of: \"?\", with: \"\")\n    let text11 = text10.replacingOccurrences(of: \"!\", with: \"\")\n    let text12 = text11.replacingOccurrences(of: \"*\", with: \"\")\n    let text13 = text12.replacingOccurrences(of: \"&\", with: \"\")\n    let text14 = text13.replacingOccurrences(of: \"|\", with: \"\")\n    let text15 = text14.replacingOccurrences(of: \"\\\"\", with: \"\")\n    let text16 = text15.replacingOccurrences(of: \"'\", with: \"\")\n    let text17 = text16.replacingOccurrences(of:"}
{"task_id": "MBSWP/677", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the triangle is valid or not.\n *\n * >>> validityTriangle(60, 50, 90)\n * false\n * >>> validityTriangle(45, 75, 60)\n * true\n * >>> validityTriangle(30, 50, 100)\n * true\n */\nfunc validityTriangle(a : Int, b : Int, c : Int) -> Bool {\n    if a + b <= c || a + c <= b || b + c <= a {\n        return false\n    }\n    return true\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the triangle is valid or not.\n *\n * >>> validityTriangle(60, 50, 90)\n * false\n * >>> validityTriangle(45, 75, 60)\n * true\n * >>> validityTriangle(30, 50, 100)\n * true\n */\nfunc validityTriangle(a : Int, b : Int, c : Int) -> Bool {\n    if a + b <= c || a + c <= b || b + c <= a {\n        return false\n    }\n    return true\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the triangle is valid or not.\n *\n * >>> validityTriangle(60, 50, 90)\n * false\n * >>> validityTriangle(45, 75, 60)\n * true\n * >>> validityTriangle(30, 50, 100)\n * true\n */\nfunc validityTriangle(a : Int, b : Int, c : Int) -> Bool {\n    if a + b <= c || a + c <= b || b + c <= a {\n        return false\n    }\n    return true\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the triangle is valid or not.\n *\n * >>> validityTriangle(60, 50, 90)\n * false\n * >>> validityTriangle(45, 75, 60)\n * true\n * >>> validityTriangle(30, 50, 100)\n * true\n */\nfunc"}
{"task_id": "MBSWP/678", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove spaces from a given string.\n *\n * >>> removeSpaces(\"a b c\")\n * \"abc\"\n * >>> removeSpaces(\"1 2 3\")\n * \"123\"\n * >>> removeSpaces(\" b c\")\n * \"bc\"\n */\nfunc removeSpaces(str1 : String) -> String {\n    let str2 = str1.replacingOccurrences(of: \" \", with: \"\")\n    return str2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove all vowels from a given string.\n *\n * >>> removeVowels(\"a b c\")\n * \"abc\"\n * >>> removeVowels(\"1 2 3\")\n * \"123\"\n * >>> removeVowels(\" b c\")\n * \"bc\"\n */\nfunc removeVowels(str1 : String) -> String {\n    let str2 = str1.replacingOccurrences(of: \"a\", with: \"\")\n    let str3 = str2.replacingOccurrences(of: \"e\", with: \"\")\n    let str4 = str3.replacingOccurrences(of: \"i\", with: \"\")\n    let str5 = str4.replacingOccurrences(of: \"o\", with: \"\")\n    let str6 = str5.replacingOccurrences(of: \"u\", with: \"\")\n    let str7 = str6.replacingOccurrences(of: \"A\", with: \"\")\n    let str8 = str7.replacingOccurrences(of: \"E\", with: \"\")\n    let str9 = str8.replacingOccurrences(of: \"I\", with: \"\")\n    let str10 = str9.replacingOccurrences(of: \"O\", with: \"\")\n    let str11 = str10.replacingOccurrences(of: \"U\", with: \"\")\n    return str11\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove all vowels from a given string."}
{"task_id": "MBSWP/679", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to access dictionary key\u2019s element by index.\n *\n * >>> accessKey([\"physics\" : 80, \"math\" : 90, \"chemistry\" : 86], 0)\n * \"physics\"\n * >>> accessKey([\"python\" : 10, \"java\" : 20, \"C++\" : 30], 2)\n * \"C++\"\n * >>> accessKey([\"program\" : 15, \"computer\" : 45], 1)\n * \"computer\"\n */\nfunc accessKey(ditionary : [String: Int], key : Int) -> String {\n    var key = key\n    var dictionary = ditionary\n    var result = \"\"\n    for (key, value) in dictionary {\n        if key == key {\n            result = key\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to access dictionary value\u2019s element by index.\n *\n * >>> accessValue([\"physics\" : 80, \"math\" : 90, \"chemistry\" : 86], 0)\n * 80\n * >>> accessValue([\"python\" : 10, \"java\" : 20, \"C++\" : 30], 2)\n * 30\n * >>> accessValue([\"program\" : 15, \"computer\" : 45], 1)\n * 45\n */\nfunc accessValue(ditionary : [String: Int], key : Int) -> Int {\n    var key = key\n    var dictionary = ditionary\n    var result = 0\n    for (key, value) in dictionary {\n        if key == key {\n            result = value\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to access dictionary key\u2019s element by value.\n *\n * >>> accessKeyByValue([\"physics\" : 80, \"math\" : 90, \"chemistry\" : 86], 90)\n * \"math\"\n * >>> accessKeyByValue([\"python\" : 10, \"java\" : 20, \"C++\" : 30], 20)\n * \"java\"\n *"}
{"task_id": "MBSWP/680", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether a sequence of numbers has an increasing trend or not.\n *\n * >>> increasingTrend([1, 2, 3, 4])\n * true\n * >>> increasingTrend([4, 3, 2, 1])\n * false\n * >>> increasingTrend([0, 1, 4, 9])\n * true\n */\nfunc increasingTrend(nums : [Int]) -> Bool {\n    var increasing = true\n    var previous = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] < previous {\n            increasing = false\n        }\n        previous = nums[i]\n    }\n    return increasing\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether a sequence of numbers has a decreasing trend or not.\n *\n * >>> decreasingTrend([1, 2, 3, 4])\n * false\n * >>> decreasingTrend([4, 3, 2, 1])\n * true\n * >>> decreasingTrend([0, 1, 4, 9])\n * false\n */\nfunc decreasingTrend(nums : [Int]) -> Bool {\n    var decreasing = true\n    var previous = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] > previous {\n            decreasing = false\n        }\n        previous = nums[i]\n    }\n    return decreasing\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether a sequence of numbers has a constant trend or not.\n *\n * >>> constantTrend([1, 2, 3, 4])\n * false\n * >>> constantTrend([4, 3, 2, 1])\n * false\n * >>> constantTrend([0, 1, 4, 9])\n * true\n */\nfunc constantTrend(nums : [Int]) -> Bool {\n    var constant = true\n    var previous = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] != previous {\n            constant = false\n        }\n        previous = nums["}
{"task_id": "MBSWP/681", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the smallest prime divisor of a number.\n *\n * >>> smallestDivisor(10)\n * 2\n * >>> smallestDivisor(25)\n * 5\n * >>> smallestDivisor(31)\n * 31\n */\nfunc smallestDivisor(n : Int) -> Int {\n    if n % 2 == 0 {\n        return 2\n    }\n    if n % 3 == 0 {\n        return 3\n    }\n    if n % 5 == 0 {\n        return 5\n    }\n    if n % 7 == 0 {\n        return 7\n    }\n    if n % 11 == 0 {\n        return 11\n    }\n    if n % 13 == 0 {\n        return 13\n    }\n    if n % 17 == 0 {\n        return 17\n    }\n    if n % 19 == 0 {\n        return 19\n    }\n    if n % 23 == 0 {\n        return 23\n    }\n    if n % 29 == 0 {\n        return 29\n    }\n    if n % 31 == 0 {\n        return 31\n    }\n    if n % 37 == 0 {\n        return 37\n    }\n    if n % 41 == 0 {\n        return 41\n    }\n    if n % 43 == 0 {\n        return 43\n    }\n    if n % 47 == 0 {\n        return 47\n    }\n    if n % 53 == 0 {\n        return 53\n    }\n    if n % 59 == 0 {\n        return 59\n    }\n    if n % 61 == 0 {\n        return 61\n    }\n    if n % 67 == 0 {\n        return 67\n    }\n    if n % 71 == 0 {\n        return 71\n    }\n    if n % 73 == 0 {\n        return 73\n    }\n    if n % 79 == 0 {\n        return 79\n    }\n    if n % 83 == 0 {\n        return 83\n    }\n    if n % 89 == 0 {\n        return 89\n    }\n    if n % 97 == 0 {\n        return 97\n    }\n    if n % 101 == 0 {\n        return 101\n    }\n    if n"}
{"task_id": "MBSWP/682", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to multiply two lists using map and lambda function.\n *\n * >>> mulList([1, 2, 3], [4, 5, 6])\n * [4, 10, 18]\n * >>> mulList([1, 2], [3, 4])\n * [3, 8]\n * >>> mulList([90, 120], [50, 70])\n * [4500, 8400]\n */\nfunc mulList(nums1 : [Int], nums2 : [Int]) -> [Int] {\n    return nums1.map({ (num1) -> Int in\n        return nums2.map({ (num2) -> Int in\n            return num1 * num2\n        })\n    })\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to multiply two lists using reduce.\n *\n * >>> mulListReduce([1, 2, 3], [4, 5, 6])\n * [4, 10, 18]\n * >>> mulListReduce([1, 2], [3, 4])\n * [3, 8]\n * >>> mulListReduce([90, 120], [50, 70])\n * [4500, 8400]\n */\nfunc mulListReduce(nums1 : [Int], nums2 : [Int]) -> [Int] {\n    return nums1.reduce([]) { (mulList, num1) -> [Int] in\n        return nums2.reduce(mulList) { (mulList, num2) -> [Int] in\n            return mulList + [num1 * num2]\n        }\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to multiply two lists using flatMap.\n *\n * >>> mulListFlatMap([1, 2, 3], [4, 5, 6])\n * [4, 10, 18]\n * >>> mulListFlatMap([1, 2], [3, 4])\n * [3, 8]\n * >>> mulListFlatMap([90, 120], [50, 70])\n * [4500, 8"}
{"task_id": "MBSWP/683", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number can be represented by sum of two squares or not.\n *\n * >>> sumSquare(25)\n * true\n * >>> sumSquare(24)\n * false\n * >>> sumSquare(17)\n * true\n */\nfunc sumSquare(n : Int) -> Bool {\n    var sum = 0\n    var square = 0\n    for i in 1...n {\n        sum += i * i\n    }\n    for i in 1...n {\n        square += i * i * i\n    }\n    return sum == square\n}\n"}
{"task_id": "MBSWP/684", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count occurences of a character in a repeated string.\n *\n * >>> countChar(\"abcac\", \"a\")\n * 4\n * >>> countChar(\"abca\", \"c\")\n * 2\n * >>> countChar(\"aba\", \"a\")\n * 7\n */\nfunc countChar(str : String, x : String) -> Int {\n    var count = 0\n    for i in 0..<str.count {\n        if str[i] == x {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/685", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of prime numbers between 1 to n.\n *\n * >>> sumOfPrimes(10)\n * 17\n * >>> sumOfPrimes(20)\n * 77\n * >>> sumOfPrimes(5)\n * 10\n */\nfunc sumOfPrimes(n : Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        if isPrime(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of even numbers between 1 to n.\n *\n * >>> sumOfEvens(10)\n * 30\n * >>> sumOfEvens(20)\n * 60\n * >>> sumOfEvens(5)\n * 10\n */\nfunc sumOfEvens(n : Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        if isEven(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of odd numbers between 1 to n.\n *\n * >>> sumOfOdds(10)\n * 25\n * >>> sumOfOdds(20)\n * 55\n * >>> sumOfOdds(5)\n * 15\n */\nfunc sumOfOdds(n : Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        if isOdd(i) {\n            sum += i\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of numbers between 1 to n which are divisible by 3.\n *\n * >>> sumOfDivisibleBy3(10)\n * 18\n * >>> sumOfDivisibleBy3(20)\n * 60\n * >>> sumOfDivisibleBy3(5)\n * 9\n */\nfunc sumOfDivisibleBy3(n : Int) -> Int {\n    var sum ="}
{"task_id": "MBSWP/686", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the frequency of each element in the given list.\n *\n * >>> freqElement([4, 5, 4, 5, 6, 6, 5, 5, 4])\n * \"{4: 3, 5: 4, 6: 2}\"\n * >>> freqElement([7, 8, 8, 9, 4, 7, 6, 5, 4])\n * \"{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}\"\n * >>> freqElement([1, 4, 3, 1, 4, 5, 2, 6, 2, 7])\n * \"{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}\"\n */\nfunc freqElement(testTup : [Int]) -> String {\n    var testDict : [Int : Int] = [:]\n    for i in testTup {\n        if testDict[i] == nil {\n            testDict[i] = 1\n        } else {\n            testDict[i] = testDict[i]! + 1\n        }\n    }\n    return String(describing: testDict)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the frequency of each element in the given list.\n *\n * >>> freqElement([4, 5, 4, 5, 6, 6, 5, 5, 4])\n * \"{4: 3, 5: 4, 6: 2}\"\n * >>> freqElement([7, 8, 8, 9, 4, 7, 6, 5, 4])\n * \"{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}\"\n * >>> freqElement([1, 4, 3, 1, 4, 5, 2, 6, 2, 7])\n * \"{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}\"\n */\nfunc freqElement(testTup : [Int]) -> String {\n    var testDict : [Int : Int] ="}
{"task_id": "MBSWP/687", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\n *\n * >>> recurGcd(12, 14)\n * 2\n * >>> recurGcd(13, 17)\n * 1\n * >>> recurGcd(9, 3)\n * 3\n */\nfunc recurGcd(a : Int, b : Int) -> Int {\n    if b == 0 {\n        return a\n    }\n    return recurGcd(b, a % b)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the least common multiple (lcm) of two integers by using recursion.\n *\n * >>> recurLcm(12, 14)\n * 168\n * >>> recurLcm(13, 17)\n * 13\n * >>> recurLcm(9, 3)\n * 27\n */\nfunc recurLcm(a : Int, b : Int) -> Int {\n    return a * b / recurGcd(a, b)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the factorial of an integer by using recursion.\n *\n * >>> recurFactorial(5)\n * 120\n * >>> recurFactorial(0)\n * 1\n * >>> recurFactorial(1)\n * 1\n */\nfunc recurFactorial(n : Int) -> Int {\n    if n == 0 {\n        return 1\n    }\n    return n * recurFactorial(n - 1)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth fibonacci number by using recursion.\n *\n * >>> recurFibonacci(0)\n * 0\n * >>> recurFibonacci(1)\n * 1\n * >>> recurFibonacci(2)\n * 1\n * >>> recurFibonacci(3)\n * 2\n * >>> recurFibonacci(4)\n * 3\n * >>> recurFib"}
{"task_id": "MBSWP/688", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get the length of a complex number.\n *\n * >>> lenComplex(3, 4)\n * 5.0\n * >>> lenComplex(9, 10)\n * 13.45362404707371\n * >>> lenComplex(7, 9)\n * 11.40175425099138\n */\nfunc lenComplex(a : Int, b : Int) -> Double {\n    return sqrt(a * a + b * b)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get the length of a complex number.\n *\n * >>> lenComplex(3, 4)\n * 5.0\n * >>> lenComplex(9, 10)\n * 13.45362404707371\n * >>> lenComplex(7, 9)\n * 11.40175425099138\n */\nfunc lenComplex(a : Double, b : Double) -> Double {\n    return sqrt(a * a + b * b)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get the length of a complex number.\n *\n * >>> lenComplex(3, 4)\n * 5.0\n * >>> lenComplex(9, 10)\n * 13.45362404707371\n * >>> lenComplex(7, 9)\n * 11.40175425099138\n */\nfunc lenComplex(a : Float, b : Float) -> Float {\n    return sqrt(a * a + b * b)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get the length of a complex number.\n *\n * >>> lenComplex(3, 4)\n * 5.0\n * >>> lenComplex(9, 10)\n * 13.45362404707371\n * >>> lenComplex(7, 9)\n * 11.40175425099138\n */\nfunc lenComplex(a : Int, b : Int) -> Int {\n    return Int(sqrt(a * a + b * b))\n}"}
{"task_id": "MBSWP/689", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * ## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n *\n * >>> minJumps([1, 3, 6, 1, 0, 9], 6)\n * 3\n * >>> minJumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11)\n * 3\n * >>> minJumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11)\n * 10\n */\nfunc minJumps(arr : [Int], n : Int) -> Int {\n    var dp = Array(repeating: Array(repeating: 0, count: n), count: n)\n    for i in 0..<n {\n        dp[i][i] = 1\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] >= arr[j] {\n                dp[i][j] = dp[i][j-1] + 1\n            } else {\n                dp[i][j] = max(dp[i][j-1], dp[j][j])\n            }\n        }\n    }\n    return dp[0][n-1]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * ## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\n *\n * >>> minJumps([1, 3, 6, 1, 0, 9], 6)\n * 3\n * >>> minJumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11)\n * 3\n * >>> minJumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11)\n * 10\n */\n"}
{"task_id": "MBSWP/690", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to multiply consecutive numbers of a given list.\n *\n * >>> mulConsecutiveNums([1, 1, 3, 4, 4, 5, 6, 7])\n * [1, 3, 12, 16, 20, 30, 42]\n * >>> mulConsecutiveNums([4, 5, 8, 9, 6, 10])\n * [20, 40, 72, 54, 60]\n * >>> mulConsecutiveNums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [2, 6, 12, 20, 30, 42, 56, 72, 90]\n */\nfunc mulConsecutiveNums(nums : [Int]) -> [Int] {\n    var result = [Int]()\n    var current = nums[0]\n    for i in 1..<nums.count {\n        if nums[i] == nums[i-1] + 1 {\n            current *= nums[i]\n        } else {\n            result.append(current)\n            current = nums[i]\n        }\n    }\n    result.append(current)\n    return result\n}\n"}
{"task_id": "MBSWP/691", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n *\n * >>> groupElement([[6, 5], [2, 7], [2, 5], [8, 7], [9, 8], [3, 7]])\n * [5 : [6, 2], 7 : [2, 8, 3], 8 : [9]]\n * >>> groupElement([[7, 6], [3, 8], [3, 6], [9, 8], [10, 9], [4, 8]])\n * [6 : [7, 3], 8 : [3, 9, 4], 9 : [10]]\n * >>> groupElement([[8, 7], [4, 9], [4, 7], [10, 9], [11, 10], [5, 9]])\n * [7 : [8, 4], 9 : [4, 10, 5], 10 : [11]]\n */\nfunc groupElement(testList : [[Int]]) -> [Int: [Int]] {\n    var result : [Int: [Int]] = [:]\n    for i in 0..<testList.count {\n        var temp = testList[i]\n        var key = temp[0]\n        var value = temp[1]\n        if result[key] == nil {\n            result[key] = [value]\n        } else {\n            result[key].append(value)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\n *\n * >>> groupElement([[6, 5], [2, 7], [2, 5], [8, 7], [9, 8], [3, 7]])\n * [5 : [6, 2], 7 : [2, 8, 3], 8 : [9]]\n * >>> groupElement([[7, 6], [3, 8], [3, 6], [9, 8], [10, 9], [4, 8]])\n * [6 : [7, 3], 8 : [3, 9, 4],"}
{"task_id": "MBSWP/692", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the last two digits in factorial of a given number.\n *\n * >>> lastTwoDigits(7)\n * 40\n * >>> lastTwoDigits(5)\n * 20\n * >>> lastTwoDigits(2)\n * 2\n */\nfunc lastTwoDigits(n : Int) -> Int {\n    var fact = 1\n    for i in 1..<n {\n        fact *= i\n    }\n    return fact % 100\n}\n"}
{"task_id": "MBSWP/693", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove multiple spaces in a string by using regex.\n *\n * >>> removeMultipleSpaces(\"Google      Assistant\")\n * \"Google Assistant\"\n * >>> removeMultipleSpaces(\"Quad      Core\")\n * \"Quad Core\"\n * >>> removeMultipleSpaces(\"ChromeCast      Built-in\")\n * \"ChromeCast Built-in\"\n */\nfunc removeMultipleSpaces(text1 : String) -> String {\n    let text2 = text1.replacingOccurrences(of: \"  \", with: \" \")\n    return text2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all spaces in a string by using regex.\n *\n * >>> removeAllSpaces(\"Google      Assistant\")\n * \"GoogleAssistant\"\n * >>> removeAllSpaces(\"Quad      Core\")\n * \"QuadCore\"\n * >>> removeAllSpaces(\"ChromeCast      Built-in\")\n * \"ChromeCastBuilt-in\"\n */\nfunc removeAllSpaces(text1 : String) -> String {\n    let text2 = text1.replacingOccurrences(of: \" \", with: \"\")\n    return text2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all spaces and multiple spaces in a string by using regex.\n *\n * >>> removeAllSpacesAndMultipleSpaces(\"Google      Assistant\")\n * \"GoogleAssistant\"\n * >>> removeAllSpacesAndMultipleSpaces(\"Quad      Core\")\n * \"QuadCore\"\n * >>> removeAllSpacesAndMultipleSpaces(\"ChromeCast      Built-in\")\n * \"ChromeCastBuilt-in\"\n */\nfunc removeAllSpacesAndMultipleSpaces(text1 : String) -> String {\n    let text2 = text1.replacingOccurrences(of: \"  \", with: \" \")\n    let text3 = text2.replacingOccurrences(of: \" \", with: \"\")\n    return text3\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function"}
{"task_id": "MBSWP/694", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract unique values from the given dictionary values.\n *\n * >>> extractUnique([\"msm\" : [5, 6, 7, 8], \"is\" : [10, 11, 7, 5], \"best\" : [6, 12, 10, 8], \"for\" : [1, 2, 5]])\n * [1, 2, 5, 6, 7, 8, 10, 11, 12]\n * >>> extractUnique([\"Built\" : [7, 1, 9, 4], \"for\" : [11, 21, 36, 14, 9], \"ISP\" : [4, 1, 21, 39, 47], \"TV\" : [1, 32, 38]])\n * [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\n * >>> extractUnique([\"F\" : [11, 13, 14, 17], \"A\" : [12, 11, 15, 18], \"N\" : [19, 21, 15, 36], \"G\" : [37, 36, 35]])\n * [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]\n */\nfunc extractUnique(testDict : [String: [Int]]) -> [Int] {\n    var uniqueValues : [Int] = []\n    for (key, value) in testDict {\n        uniqueValues.append(value)\n    }\n    return uniqueValues.sorted()\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract unique keys from the given dictionary keys.\n *\n * >>> extractUniqueKeys([\"msm\" : [5, 6, 7, 8], \"is\" : [10, 11, 7, 5], \"best\" : [6, 12, 10, 8], \"for\" : [1, 2, 5]])\n * [\"for\", \"is\", \"msm\", \"best\"]\n * >>> extractUniqueKeys([\"Built\" : [7, 1, 9, 4], \"for\" : [11, 21, 36, 14, 9], \"ISP\" : [4, 1, 21"}
{"task_id": "MBSWP/695", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\n *\n * >>> checkGreater([10, 4, 5], [13, 5, 18])\n * true\n * >>> checkGreater([1, 2, 3], [2, 1, 4])\n * false\n * >>> checkGreater([4, 5, 6], [5, 6, 7])\n * true\n */\nfunc checkGreater(testTup1 : [Int], testTup2 : [Int]) -> Bool {\n    var tup1 = testTup1\n    var tup2 = testTup2\n    var tup1Len = tup1.count\n    var tup2Len = tup2.count\n    var tup1Index = 0\n    var tup2Index = 0\n    var tup1IndexIsGreater = false\n    var tup2IndexIsGreater = false\n    var tup1IndexIsLess = false\n    var tup2IndexIsLess = false\n    var tup1IndexIsEqual = false\n    var tup2IndexIsEqual = false\n    var tup1IndexIsGreaterOrEqual = false\n    var tup2IndexIsGreaterOrEqual = false\n    var tup1IndexIsLessOrEqual = false\n    var tup2IndexIsLessOrEqual = false\n    var tup1IndexIsNotEqual = false\n    var tup2IndexIsNotEqual = false\n    var tup1IndexIsNotGreater = false\n    var tup2IndexIsNotGreater = false\n    var tup1IndexIsNotLess = false\n    var tup2IndexIsNotLess = false\n    var tup1IndexIsNotGreaterOrEqual = false\n    var tup2IndexIsNotGreaterOrEqual = false\n    var tup1IndexIsNotLessOrEqual = false\n    var tup2IndexIsNotLessOrEqual = false\n    var tup1IndexIsNotEqualOrGreater = false\n    var tup2IndexIsNotEqualOrGreater = false\n    var tup1Index"}
{"task_id": "MBSWP/696", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to zip two given lists of lists.\n *\n * >>> zipList([[1, 3], [5, 7], [9, 11]], [[2, 4], [6, 8], [10, 12, 14]])\n * [[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\n * >>> zipList([[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]])\n * [[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\n * >>> zipList([[\"a\", \"b\"], [\"c\", \"d\"]], [[\"e\", \"f\"], [\"g\", \"h\"]])\n * [[\"a\", \"b\", \"e\", \"f\"], [\"c\", \"d\", \"g\", \"h\"]]\n */\nfunc zipList(list1 : [[AnyHashable]], list2 : [[AnyHashable]]) -> [[AnyHashable]] {\n    var result = [[AnyHashable]]()\n    for i in 0..<list1.count {\n        var row = [AnyHashable]()\n        for j in 0..<list1[i].count {\n            row.append(list1[i][j])\n            row.append(list2[i][j])\n        }\n        result.append(row)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to zip two given lists of lists.\n *\n * >>> zipList([[1, 3], [5, 7], [9, 11]], [[2, 4], [6, 8], [10, 12, 14]])\n * [[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\n * >>> zipList([[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]])\n * [[1, 2, 7, 8"}
{"task_id": "MBSWP/697", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find number of even elements in the given list using lambda function.\n *\n * >>> countEven([1, 2, 3, 5, 7, 8, 9, 10])\n * 3\n * >>> countEven([10, 15, 14, 13, -18, 12, -20])\n * 5\n * >>> countEven([1, 2, 4, 8, 9])\n * 3\n */\nfunc countEven(arrayNums : [Int]) -> Int {\n    var count = 0\n    for num in arrayNums {\n        if num % 2 == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/698", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n *\n * >>> sortDictItem([[5, 6] : 3, [2, 3] : 9, [8, 4] : 10, [6, 4] : 12])\n * [[2, 3] : 9, [6, 4] : 12, [5, 6] : 3, [8, 4] : 10]\n * >>> sortDictItem([[6, 7] : 4, [3, 4] : 10, [9, 5] : 11, [7, 5] : 13])\n * [[3, 4] : 10, [7, 5] : 13, [6, 7] : 4, [9, 5] : 11]\n * >>> sortDictItem([[7, 8] : 5, [4, 5] : 11, [10, 6] : 12, [8, 6] : 14])\n * [[4, 5] : 11, [8, 6] : 14, [7, 8] : 5, [10, 6] : 12]\n */\nfunc sortDictItem(testDict : [[Int]: Int]) -> [[Int]: Int] {\n    var sortedDict = testDict\n    var sortedKeys = Array(sortedDict.keys)\n    sortedKeys.sort()\n    for i in 0..<sortedKeys.count {\n        sortedDict[sortedKeys[i]] = testDict[sortedKeys[i]]\n    }\n    return sortedDict\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\n *\n * >>> sortDictItem([[5, 6] : 3, [2, 3] : 9, [8, 4] : 10, [6, 4] : 12])\n * [[2, 3] : 9, [6, 4] : 12, [5, 6] : 3, [8, 4] : 10]\n * >>> sortDictItem([[6, 7] : 4, [3, 4] : 10, [9,"}
{"task_id": "MBSWP/699", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum number of swaps required to convert one binary string to another.\n *\n * >>> minSwaps(\"1101\", \"1110\")\n * 1\n * >>> minSwaps(\"1111\", \"0100\")\n * \"Not Possible\"\n * >>> minSwaps(\"1110000\", \"0001101\")\n * 3\n */\nfunc minSwaps(str1 : String, str2 : String) -> AnyHashable {\n    let str1 = str1.map { $0 == \"1\" }\n    let str2 = str2.map { $0 == \"1\" }\n    let n = str1.count\n    let m = str2.count\n    if n != m {\n        return \"Not Possible\"\n    }\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    for i in 0..<n {\n        if str1[i] != str2[i] {\n            let j = i\n            while j < n && str1[j] == str2[j] {\n                j += 1\n            }\n            if j == n {\n                return \"Not Possible\"\n            }\n            let temp = str1[i]\n            str1[i] = str1[j]\n            str1[j] = temp\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/700", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the number of elements in a list which are within a specific range.\n *\n * >>> countRangeInList([10, 20, 30, 40, 40, 40, 70, 80, 99], 40, 100)\n * 6\n * >>> countRangeInList([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"a\", \"e\")\n * 5\n * >>> countRangeInList([7, 8, 9, 15, 17, 19, 45], 15, 20)\n * 3\n */\nfunc countRangeInList(li : [AnyHashable], min : AnyHashable, max : AnyHashable) -> Int {\n    var count = 0\n    for i in li {\n        if i >= min && i <= max {\n            count += 1\n        }\n    }\n    return count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the number of elements in a dictionary which are within a specific range.\n *\n * >>> countRangeInDict([10, 20, 30, 40, 40, 40, 70, 80, 99], 40, 100)\n * 6\n * >>> countRangeInDict([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"a\", \"e\")\n * 5\n * >>> countRangeInDict([7, 8, 9, 15, 17, 19, 45], 15, 20)\n * 3\n */\nfunc countRangeInDict(di : [AnyHashable : AnyHashable], min : AnyHashable, max : AnyHashable) -> Int {\n    var count = 0\n    for i in di {\n        if i.key >= min && i.key <= max {\n            count += 1\n        }\n    }\n    return count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the number of elements in a set which are within a specific range.\n *\n * >>> countRangeInSet([10, 20, 30, 40, 40, 40, 70, 80, 99], 40, 100)\n * 6\n * >>> countRange"}
{"task_id": "MBSWP/701", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the equilibrium index of the given array.\n *\n * >>> equilibriumIndex([1, 2, 3, 4, 1, 2, 3])\n * 3\n * >>> equilibriumIndex([-7, 1, 5, 2, -4, 3, 0])\n * 3\n * >>> equilibriumIndex([1, 2, 3])\n * -1\n */\nfunc equilibriumIndex(arr : [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        sum += i\n    }\n    var leftSum = 0\n    for i in arr {\n        if leftSum == sum - leftSum - i {\n            return i\n        }\n        leftSum += i\n    }\n    return -1\n}\n"}
{"task_id": "MBSWP/702", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\n *\n * >>> removals([1, 3, 4, 9, 10, 11, 12, 17, 20], 9, 4)\n * 5\n * >>> removals([1, 5, 6, 2, 8], 5, 2)\n * 3\n * >>> removals([1, 2, 3, 4, 5, 6], 6, 3)\n * 2\n */\nfunc removals(arr : [Int], n : Int, k : Int) -> Int {\n    var arr = arr\n    var n = n\n    var k = k\n    var min = 0\n    var max = 0\n    var count = 0\n    var flag = false\n    var flag2 = false\n    var flag3 = false\n    var flag4 = false\n    var flag5 = false\n    var flag6 = false\n    var flag7 = false\n    var flag8 = false\n    var flag9 = false\n    var flag10 = false\n    var flag11 = false\n    var flag12 = false\n    var flag13 = false\n    var flag14 = false\n    var flag15 = false\n    var flag16 = false\n    var flag17 = false\n    var flag18 = false\n    var flag19 = false\n    var flag20 = false\n    var flag21 = false\n    var flag22 = false\n    var flag23 = false\n    var flag24 = false\n    var flag25 = false\n    var flag26 = false\n    var flag27 = false\n    var flag28 = false\n    var flag29 = false\n    var flag30 = false\n    var flag31 = false\n    var flag32 = false\n    var flag33 = false\n    var flag34 = false\n    var flag35 = false\n    var flag36 = false\n    var flag37 = false\n    var flag38 = false\n    var flag39 = false\n    var flag40 = false\n    var flag41 = false\n    var flag42 = false\n    var flag43 = false\n    var flag44 = false\n    var flag45 = false\n    var flag46 = false\n    var flag"}
{"task_id": "MBSWP/703", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given key is present in the dictionary or not.\n *\n * >>> isKeyPresent([1 : 10, 2 : 20, 3 : 30, 4 : 40, 5 : 50, 6 : 60], 5)\n * true\n * >>> isKeyPresent([1 : 10, 2 : 20, 3 : 30, 4 : 40, 5 : 50, 6 : 60], 6)\n * true\n * >>> isKeyPresent([1 : 10, 2 : 20, 3 : 30, 4 : 40, 5 : 50, 6 : 60], 10)\n * false\n */\nfunc isKeyPresent(d : [Int: Int], x : Int) -> Bool {\n    for (key, value) in d {\n        if key == x {\n            return true\n        }\n    }\n    return false\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given key is present in the dictionary or not.\n *\n * >>> isKeyPresent([1 : 10, 2 : 20, 3 : 30, 4 : 40, 5 : 50, 6 : 60], 5)\n * true\n * >>> isKeyPresent([1 : 10, 2 : 20, 3 : 30, 4 : 40, 5 : 50, 6 : 60], 6)\n * true\n * >>> isKeyPresent([1 : 10, 2 : 20, 3 : 30, 4 : 40, 5 : 50, 6 : 60], 10)\n * false\n */\nfunc isKeyPresent(d : [Int: Int], x : Int) -> Bool {\n    for (key, value) in d {\n        if key == x {\n            return true\n        }\n    }\n    return false\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given key is present in the dictionary or not.\n *\n * >>> isKeyPresent([1 : 10, 2 : 20, 3 : 30, 4 : 40, 5 : 50, 6 : 60], 5)\n * true\n * >>> isKeyPresent([1 : 10, 2 : 20, 3 : 30, 4 : 40, 5 : 50, 6"}
{"task_id": "MBSWP/704", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the harmonic sum of n-1.\n *\n * >>> harmonicSum(10)\n * 2.9289682539682538\n * >>> harmonicSum(4)\n * 2.083333333333333\n * >>> harmonicSum(7)\n * 2.5928571428571425\n */\nfunc harmonicSum(n : Int) -> Double {\n    var sum = 0.0\n    for i in 1..<n {\n        sum += 1.0 / Double(i)\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/705", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of lists by length and value.\n *\n * >>> sortSublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])\n * [[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\n * >>> sortSublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])\n * [[1], [7], [2, 3], [10, 11], [4, 5, 6]]\n * >>> sortSublists([[\"python\"], [\"java\", \"C\", \"C++\"], [\"DBMS\"], [\"SQL\", \"HTML\"]])\n * [[\"DBMS\"], [\"python\"], [\"SQL\", \"HTML\"], [\"java\", \"C\", \"C++\"]]\n */\nfunc sortSublists(list1 : [[AnyHashable]]) -> [[AnyHashable]] {\n    var list2 = list1\n    var list3 = list1\n    var list4 = list1\n    var list5 = list1\n    var list6 = list1\n    var list7 = list1\n    var list8 = list1\n    var list9 = list1\n    var list10 = list1\n    var list11 = list1\n    var list12 = list1\n    var list13 = list1\n    var list14 = list1\n    var list15 = list1\n    var list16 = list1\n    var list17 = list1\n    var list18 = list1\n    var list19 = list1\n    var list20 = list1\n    var list21 = list1\n    var list22 = list1\n    var list23 = list1\n    var list24 = list1\n    var list25 = list1\n    var list26 = list1\n    var list27 = list1\n    var list28 = list1\n    var list29 = list1\n    var list30 = list1\n    var list31 = list1\n    var list32 = list1\n    var list33 = list1\n    var list34 = list1\n    var list35 = list1\n"}
{"task_id": "MBSWP/706", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find whether an array is subset of another array.\n *\n * >>> isSubset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4)\n * true\n * >>> isSubset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3)\n * true\n * >>> isSubset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3)\n * false\n */\nfunc isSubset(arr1 : [Int], m : Int, arr2 : [Int], n : Int) -> Bool {\n    var i = 0\n    var j = 0\n    while i < m && j < n {\n        if arr1[i] == arr2[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return i == m\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find whether an array is subset of another array.\n *\n * >>> isSubset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4)\n * true\n * >>> isSubset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3)\n * true\n * >>> isSubset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3)\n * false\n */\nfunc isSubset(arr1 : [Int], m : Int, arr2 : [Int], n : Int) -> Bool {\n    var i = 0\n    var j = 0\n    while i < m && j < n {\n        if arr1[i] == arr2[j] {\n            i += 1\n            j += 1\n        } else {\n            i += 1\n        }\n    }\n    return i == m\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find whether an array is subset of another array"}
{"task_id": "MBSWP/707", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the total set bits from 1 to n.\n *\n * >>> countSetBits(16)\n * 33\n * >>> countSetBits(2)\n * 2\n * >>> countSetBits(14)\n * 28\n */\nfunc countSetBits(n : Int) -> Int {\n    var count = 0\n    var i = 1\n    while i <= n {\n        if i & (i - 1) == 0 {\n            count += 1\n        }\n        i = i << 1\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/708", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to convert a string to a list.\n *\n * >>> convert(\"python program\")\n * [\"python\", \"program\"]\n * >>> convert(\"Data Analysis\")\n * [\"Data\", \"Analysis\"]\n * >>> convert(\"Hadoop Training\")\n * [\"Hadoop\", \"Training\"]\n */\nfunc convert(string : String) -> [String] {\n    var result = [String]()\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n"}
{"task_id": "MBSWP/709", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count unique keys for each value present in the tuple.\n *\n * >>> getUnique([[3, 4], [1, 2], [2, 4], [8, 2], [7, 2], [8, 1], [9, 1], [8, 4], [10, 4]])\n * \"{4: 4, 2: 3, 1: 2}\"\n * >>> getUnique([[4, 5], [2, 3], [3, 5], [9, 3], [8, 3], [9, 2], [10, 2], [9, 5], [11, 5]])\n * \"{5: 4, 3: 3, 2: 2}\"\n * >>> getUnique([[6, 5], [3, 4], [2, 6], [11, 1], [8, 22], [8, 11], [4, 3], [14, 3], [11, 6]])\n * \"{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}\"\n */\nfunc getUnique(testList : [[Int]]) -> String {\n    var unique : [Int : Int] = [:]\n    for i in testList {\n        for j in i {\n            if unique[j] == nil {\n                unique[j] = 1\n            } else {\n                unique[j] = unique[j]! + 1\n            }\n        }\n    }\n    var uniqueString : String = \"\"\n    for i in unique.keys {\n        uniqueString += \"\\(i) : \\(unique[i]!)\"\n    }\n    return uniqueString\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count unique keys for each value present in the tuple.\n *\n * >>> getUnique([[3, 4], [1, 2], [2, 4], [8, 2], [7, 2], [8, 1], [9, 1], [8, 4], [10, 4]])\n * \"{4: 4, 2: 3, 1: 2}\"\n * >>> getUnique([[4, 5], [2, 3], [3"}
{"task_id": "MBSWP/710", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to access the initial and last data of the given tuple record.\n *\n * >>> frontAndRear([10, 4, 5, 6, 7])\n * [10, 7]\n * >>> frontAndRear([1, 2, 3, 4, 5])\n * [1, 5]\n * >>> frontAndRear([6, 7, 8, 9, 10])\n * [6, 10]\n */\nfunc frontAndRear(testTup : [Int]) -> [Int] {\n    var testTup = testTup\n    var front = testTup[0]\n    var rear = testTup[testTup.count - 1]\n    return [front, rear]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to access the initial and last data of the given array.\n *\n * >>> frontAndRear([\"a\", \"b\", \"c\", \"d\", \"e\"])\n * [\"a\", \"e\"]\n * >>> frontAndRear([\"f\", \"g\", \"h\", \"i\", \"j\"])\n * [\"f\", \"j\"]\n * >>> frontAndRear([\"k\", \"l\", \"m\", \"n\", \"o\"])\n * [\"k\", \"o\"]\n */\nfunc frontAndRear(testArr : [String]) -> [String] {\n    var testArr = testArr\n    var front = testArr[0]\n    var rear = testArr[testArr.count - 1]\n    return [front, rear]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to access the initial and last data of the given dictionary.\n *\n * >>> frontAndRear([\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5])\n * [\"a\": 1, \"e\": 5]\n * >>> frontAndRear([\"f\": 6, \"g\": 7, \"h\": 8, \"i\": 9, \"j\": 10])\n * [\"f\": 6, \"j\": 10]"}
{"task_id": "MBSWP/711", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the product of digits of a number at even and odd places is equal or not.\n *\n * >>> productEqual(2841)\n * true\n * >>> productEqual(1234)\n * false\n * >>> productEqual(1212)\n * false\n */\nfunc productEqual(n : Int) -> Bool {\n    var even = 0\n    var odd = 0\n    var temp = n\n    while temp > 0 {\n        if temp % 10 == 0 {\n            even += temp % 10\n        } else {\n            odd += temp % 10\n        }\n        temp /= 10\n    }\n    return even == odd\n}\n"}
{"task_id": "MBSWP/712", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove duplicates from a list of lists.\n *\n * >>> removeDuplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n * [[10, 20], [30, 56, 25], [33], [40]]\n * >>> removeDuplicate([\"a\", \"b\", \"a\", \"c\", \"c\"])\n * [\"a\", \"b\", \"c\"]\n * >>> removeDuplicate([1, 3, 5, 6, 3, 5, 6, 1])\n * [1, 3, 5, 6]\n */\nfunc removeDuplicate(list1 : [AnyHashable]) -> [AnyHashable] {\n    var list2 = list1\n    for i in 0..<list1.count {\n        for j in i+1..<list1.count {\n            if list1[i] == list1[j] {\n                list2.remove(at: j)\n            }\n        }\n    }\n    return list2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove duplicates from a list of lists.\n *\n * >>> removeDuplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n * [[10, 20], [30, 56, 25], [33], [40]]\n * >>> removeDuplicate([\"a\", \"b\", \"a\", \"c\", \"c\"])\n * [\"a\", \"b\", \"c\"]\n * >>> removeDuplicate([1, 3, 5, 6, 3, 5, 6, 1])\n * [1, 3, 5, 6]\n */\nfunc removeDuplicate(list1 : [AnyHashable]) -> [AnyHashable] {\n    var list2 = list1\n    for i in 0..<list1.count {\n        for j in i+1..<list1.count {\n            if list1[i] == list1[j] {\n                list2.remove(at: j)\n            }\n"}
{"task_id": "MBSWP/713", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given tuple contains all valid values or not.\n *\n * >>> checkValid([true, true, true, true])\n * true\n * >>> checkValid([true, false, true, true])\n * false\n * >>> checkValid([true, true, true, true])\n * true\n */\nfunc checkValid(testTup : [Bool]) -> Bool {\n    var valid = true\n    for i in 0..<testTup.count {\n        if testTup[i] == false {\n            valid = false\n        }\n    }\n    return valid\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given tuple contains all valid values or not.\n *\n * >>> checkValid([true, true, true, true])\n * true\n * >>> checkValid([true, false, true, true])\n * false\n * >>> checkValid([true, true, true, true])\n * true\n */\nfunc checkValid(testTup : [Bool]) -> Bool {\n    var valid = true\n    for i in 0..<testTup.count {\n        if testTup[i] == false {\n            valid = false\n        }\n    }\n    return valid\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given tuple contains all valid values or not.\n *\n * >>> checkValid([true, true, true, true])\n * true\n * >>> checkValid([true, false, true, true])\n * false\n * >>> checkValid([true, true, true, true])\n * true\n */\nfunc checkValid(testTup : [Bool]) -> Bool {\n    var valid = true\n    for i in 0..<testTup.count {\n        if testTup[i] == false {\n            valid = false\n        }\n    }\n    return valid\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given tuple contains all valid values or not.\n *\n"}
{"task_id": "MBSWP/714", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of distinct power of prime factor of given number.\n *\n * >>> countFac(24)\n * 3\n * >>> countFac(12)\n * 2\n * >>> countFac(4)\n * 1\n */\nfunc countFac(n : Int) -> Int {\n    var count = 0\n    var n = n\n    while n > 1 {\n        if n % 2 == 0 {\n            n /= 2\n        } else if n % 3 == 0 {\n            n /= 3\n        } else if n % 5 == 0 {\n            n /= 5\n        } else if n % 7 == 0 {\n            n /= 7\n        } else {\n            n -= 1\n        }\n        count += 1\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/715", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given string of integers into a tuple.\n *\n * >>> strToTuple(\"1, -5, 4, 6, 7\")\n * [1, -5, 4, 6, 7]\n * >>> strToTuple(\"1, 2, 3, 4, 5\")\n * [1, 2, 3, 4, 5]\n * >>> strToTuple(\"4, 6, 9, 11, 13, 14\")\n * [4, 6, 9, 11, 13, 14]\n */\nfunc strToTuple(testStr : String) -> [Int] {\n    var testArr = [Int]()\n    var testArrStr = testStr.components(separatedBy: \",\")\n    for i in testArrStr {\n        testArr.append(Int(i))\n    }\n    return testArr\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given tuple into a string.\n *\n * >>> tupleToStr([1, -5, 4, 6, 7])\n * \"1, -5, 4, 6, 7\"\n * >>> tupleToStr([1, 2, 3, 4, 5])\n * \"1, 2, 3, 4, 5\"\n * >>> tupleToStr([4, 6, 9, 11, 13, 14])\n * \"4, 6, 9, 11, 13, 14\"\n */\nfunc tupleToStr(testArr : [Int]) -> String {\n    var testStr = \"\"\n    for i in testArr {\n        testStr += \"\\(i),\"\n    }\n    return testStr.dropLast()\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given string of integers into a dictionary.\n *\n * >>> strToDict(\"1, -5, 4, 6, 7\")\n * [\"1\": -5, \"4\": 6, \"7\": 7]\n * >>> strToDict(\"1, 2, 3, 4, 5\")\n * [\"1\": 2, \"4\": 5, \"7"}
{"task_id": "MBSWP/716", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a rombus.\n *\n * >>> rombusPerimeter(10)\n * 40\n * >>> rombusPerimeter(5)\n * 20\n * >>> rombusPerimeter(4)\n * 16\n */\nfunc rombusPerimeter(a : Int) -> Int {\n    return a * (a + 1) * 2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a rombus.\n *\n * >>> rombusArea(10)\n * 100\n * >>> rombusArea(5)\n * 25\n * >>> rombusArea(4)\n * 16\n */\nfunc rombusArea(a : Int) -> Int {\n    return a * (a + 1)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a rombus.\n *\n * >>> rombusPerimeter(10)\n * 40\n * >>> rombusPerimeter(5)\n * 20\n * >>> rombusPerimeter(4)\n * 16\n */\nfunc rombusPerimeter(a : Int) -> Int {\n    return a * (a + 1) * 2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a rombus.\n *\n * >>> rombusArea(10)\n * 100\n * >>> rombusArea(5)\n * 25\n * >>> rombusArea(4)\n * 16\n */\nfunc rombusArea(a : Int) -> Int {\n    return a * (a + 1)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the perimeter of a rombus.\n *\n * >>> rombusPerimeter(10)\n * 40\n * >>> rombusPerimeter(5)\n * 20\n * >>> rombusPerimeter(4)\n * 16\n */\nfunc rombusPerimeter(a :"}
{"task_id": "MBSWP/717", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the standard deviation.\n *\n * >>> sdCalc([4, 2, 5, 8, 6])\n * 2.23606797749979\n * >>> sdCalc([1, 2, 3, 4, 5, 6, 7])\n * 2.160246899469287\n * >>> sdCalc([5, 9, 10, 15, 6, 4])\n * 4.070217029430577\n */\nfunc sdCalc(data : [Int]) -> Double {\n    let mean = meanCalc(data)\n    let sum = data.reduce(0, +)\n    let sumOfSquares = data.map({ $0 * $0 }).reduce(0, +)\n    let variance = Double(sumOfSquares) / Double(data.count) - mean * mean\n    return sqrt(variance)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the mean.\n *\n * >>> meanCalc([4, 2, 5, 8, 6])\n * 5.0\n * >>> meanCalc([1, 2, 3, 4, 5, 6, 7])\n * 4.0\n * >>> meanCalc([5, 9, 10, 15, 6, 4])\n * 8.0\n */\nfunc meanCalc(data : [Int]) -> Double {\n    return Double(data.reduce(0, +)) / Double(data.count)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the median.\n *\n * >>> medianCalc([4, 2, 5, 8, 6])\n * 5.0\n * >>> medianCalc([1, 2, 3, 4, 5, 6, 7])\n * 4.0\n * >>> medianCalc([5, 9, 10, 15, 6, 4])\n * 8.0\n */\nfunc medianCalc(data : [Int]) -> Double {\n    let sortedData = data.sorted()\n    let middleIndex = Int(ceil(Double(data.count) / 2))\n   "}
{"task_id": "MBSWP/718", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to create a list taking alternate elements from another given list.\n *\n * >>> alternateElements([\"red\", \"black\", \"white\", \"green\", \"orange\"])\n * [\"red\", \"white\", \"orange\"]\n * >>> alternateElements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])\n * [2, 3, 0, 8, 4]\n * >>> alternateElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [1, 3, 5, 7, 9]\n */\nfunc alternateElements(list1 : [AnyHashable]) -> [AnyHashable] {\n    var list2 = [AnyHashable]()\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            list2.append(list1[i])\n        }\n    }\n    return list2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to create a list taking even elements from another given list.\n *\n * >>> evenElements([\"red\", \"black\", \"white\", \"green\", \"orange\"])\n * [\"red\", \"green\"]\n * >>> evenElements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])\n * [2, 0, 4, 0, 8]\n * >>> evenElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [2, 4, 6, 8, 10]\n */\nfunc evenElements(list1 : [AnyHashable]) -> [AnyHashable] {\n    var list2 = [AnyHashable]()\n    for i in 0..<list1.count {\n        if i % 2 == 0 {\n            list2.append(list1[i])\n        }\n    }\n    return list2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to create a list taking odd elements from another given list.\n *\n * >>> oddElements([\"red\", \""}
{"task_id": "MBSWP/719", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by zero or more b's.\n *\n * >>> textMatch(\"ac\")\n * \"Found a match!\"\n * >>> textMatch(\"dc\")\n * \"Not matched!\"\n * >>> textMatch(\"abba\")\n * \"Found a match!\"\n */\nfunc textMatch(text : String) -> String {\n    let a = \"a\"\n    let b = \"b\"\n    let aCount = text.count(where: { $0 == a })\n    let bCount = text.count(where: { $0 == b })\n    if aCount > 0 && bCount > 0 {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by zero or more b's.\n *\n * >>> textMatch(\"ac\")\n * \"Found a match!\"\n * >>> textMatch(\"dc\")\n * \"Not matched!\"\n * >>> textMatch(\"abba\")\n * \"Found a match!\"\n */\nfunc textMatch(text : String) -> String {\n    let a = \"a\"\n    let b = \"b\"\n    let aCount = text.count(where: { $0 == a })\n    let bCount = text.count(where: { $0 == b })\n    if aCount > 0 && bCount > 0 {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by zero or more b's.\n *\n * >>> textMatch(\"ac\")\n * \"Found a match!\"\n * >>> textMatch(\"dc\")\n * \"Not matched!\"\n * >>> textMatch(\"abba\")\n * \"Found a match!\"\n */\nfunc textMatch(text : String) -> String {\n    let a = \"a\"\n    let b = \"b\"\n    let aCount = text.count(where: { $0 == a })\n    let bCount = text.count("}
{"task_id": "MBSWP/720", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add a dictionary to the tuple.\n *\n * >>> addDictToTuple([4, 5, 6], [\"MSAM\" : 1, \"is\" : 2, \"best\" : 3])\n * [4, 5, 6, [\"MSAM\" : 1, \"is\" : 2, \"best\" : 3]]\n * >>> addDictToTuple([1, 2, 3], [\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4])\n * [1, 2, 3, [\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4]]\n * >>> addDictToTuple([8, 9, 10], [\"POS\" : 3, \"is\" : 4, \"Okay\" : 5])\n * [8, 9, 10, [\"POS\" : 3, \"is\" : 4, \"Okay\" : 5]]\n */\nfunc addDictToTuple(testTup : [Int], testDict : [String: Int]) -> [AnyHashable] {\n    var tup = testTup\n    tup.append(testDict)\n    return tup\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add a dictionary to the tuple.\n *\n * >>> addDictToTuple([4, 5, 6], [\"MSAM\" : 1, \"is\" : 2, \"best\" : 3])\n * [4, 5, 6, [\"MSAM\" : 1, \"is\" : 2, \"best\" : 3]]\n * >>> addDictToTuple([1, 2, 3], [\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4])\n * [1, 2, 3, [\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4]]\n * >>> addDictToTuple([8, 9, 10], [\"POS\" : 3, \"is\" : 4, \"Okay\" : 5])\n * [8, 9, 10, [\"POS\" : 3, \"is\" : 4, \"Okay\" : 5]]\n */\nfunc addDict"}
{"task_id": "MBSWP/721", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n *\n * >>> maxaverageofpath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3)\n * 5.2\n * >>> maxaverageofpath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3)\n * 6.2\n * >>> maxaverageofpath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3)\n * 7.2\n */\nfunc maxaverageofpath(cost : [[Int]], n : Int) -> Double {\n    var max : Double = 0\n    var max_path : [[Int]] = []\n    var max_path_avg : Double = 0\n    var path : [[Int]] = []\n    var path_avg : Double = 0\n    var path_sum : Double = 0\n    var path_count : Int = 0\n    var path_avg_count : Int = 0\n    var path_avg_sum : Double = 0\n    var path_avg_count_sum : Double = 0\n    var path_avg_sum_sum : Double = 0\n    var path_avg_count_sum_sum : Double = 0\n    var path_avg_sum_sum_sum : Double = 0\n    var path_avg_count_sum_sum_sum : Double = 0\n    var path_avg_sum_sum_sum_sum : Double = 0\n    var path_avg_count_sum_sum_sum_sum : Double = 0\n    var path_avg_sum_sum_sum_sum_sum : Double = 0\n    var path_avg_count_sum_sum_sum_sum_sum : Double = 0\n    var path_avg_sum_sum_sum_sum_sum_sum : Double = 0\n    var path_avg_count_sum_sum_sum_sum_sum_sum : Double = 0\n    var path_avg_sum_sum_sum_sum_sum"}
{"task_id": "MBSWP/722", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to filter the height and width of students which are stored in a dictionary.\n *\n * >>> filterData([\"Cierra Vega\" : [6.2, 70], \"Alden Cantrell\" : [5.9, 65], \"Kierra Gentry\" : [6.0, 68], \"Pierre Cox\" : [5.8, 66]], 6.0, 70)\n * [\"Cierra Vega\" : [6.2, 70]]\n * >>> filterData([\"Cierra Vega\" : [6.2, 70], \"Alden Cantrell\" : [5.9, 65], \"Kierra Gentry\" : [6.0, 68], \"Pierre Cox\" : [5.8, 66]], 5.9, 67)\n * [\"Cierra Vega\" : [6.2, 70], \"Kierra Gentry\" : [6.0, 68]]\n * >>> filterData([\"Cierra Vega\" : [6.2, 70], \"Alden Cantrell\" : [5.9, 65], \"Kierra Gentry\" : [6.0, 68], \"Pierre Cox\" : [5.8, 66]], 5.7, 64)\n * [\"Cierra Vega\" : [6.2, 70], \"Alden Cantrell\" : [5.9, 65], \"Kierra Gentry\" : [6.0, 68], \"Pierre Cox\" : [5.8, 66]]\n */\nfunc filterData(students : [String: [Double]], h : Double, w : Int) -> [String: [Double]] {\n    var result : [String: [Double]] = [:]\n    for (key, value) in students {\n        if value[0] >= h && value[1] >= w {\n            result[key] = value\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to filter the height and width of students which are stored in a dictionary.\n *\n * >>> filterData([\"Cierra Vega\" : [6.2, 70], \"Alden Cantrell\" : [5.9, 65], \"K"}
{"task_id": "MBSWP/723", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the same pair in two given lists using map function.\n *\n * >>> countSamePair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9])\n * 4\n * >>> countSamePair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n * 11\n * >>> countSamePair([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n * 1\n */\nfunc countSamePair(nums1 : [Int], nums2 : [Int]) -> Int {\n    let nums1Set = Set(nums1)\n    let nums2Set = Set(nums2)\n    let intersection = nums1Set.intersection(nums2Set)\n    return intersection.count\n}\n"}
{"task_id": "MBSWP/724", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of all digits of the base to the specified power.\n *\n * >>> powerBaseSum(2, 100)\n * 115\n * >>> powerBaseSum(8, 10)\n * 37\n * >>> powerBaseSum(8, 15)\n * 62\n */\nfunc powerBaseSum(base : Int, power : Int) -> Int {\n    var sum = 0\n    for i in 0..<power {\n        sum += Int(base.toString().characters.dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().dropLast().dropFirst().drop"}
{"task_id": "MBSWP/725", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract values between quotation marks of the given string by using regex.\n *\n * >>> extractQuotation(\"Cortex \\\"A53\\\" Based \\\"multi\\\" tasking \\\"Processor\\\"\")\n * [\"A53\", \"multi\", \"Processor\"]\n * >>> extractQuotation(\"Cast your \\\"favorite\\\" entertainment \\\"apps\\\"\")\n * [\"favorite\", \"apps\"]\n * >>> extractQuotation(\"Watch content \\\"4k Ultra HD\\\" resolution with \\\"HDR 10\\\" Support\")\n * [\"4k Ultra HD\", \"HDR 10\"]\n */\nfunc extractQuotation(text1 : String) -> [String] {\n    let text = text1.replacingOccurrences(of: \"\\\"\", with: \"\")\n    let regex = \"\\\"[^\\\"]*\\\"\"\n    let matches = text.matches(of: regex, options: .regularExpression)\n    return matches\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract values between quotation marks of the given string by using regex.\n *\n * >>> extractQuotation(\"Cortex \\\"A53\\\" Based \\\"multi\\\" tasking \\\"Processor\\\"\")\n * [\"A53\", \"multi\", \"Processor\"]\n * >>> extractQuotation(\"Cast your \\\"favorite\\\" entertainment \\\"apps\\\"\")\n * [\"favorite\", \"apps\"]\n * >>> extractQuotation(\"Watch content \\\"4k Ultra HD\\\" resolution with \\\"HDR 10\\\" Support\")\n * [\"4k Ultra HD\", \"HDR 10\"]\n */\nfunc extractQuotation(text1 : String) -> [String] {\n    let text = text1.replacingOccurrences(of: \"\\\"\", with: \"\")\n    let regex = \"\\\"[^\\\"]*\\\"\"\n    let matches = text.matches(of: regex, options: .regularExpression)\n    return matches\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract values between quotation marks of the given string by using regex.\n *\n * >>> extractQuotation(\"Cortex \\\"A53\\\" Based \\\"multi\\\" tasking \\\"Processor\\\"\")\n * [\"A53\", \"multi"}
{"task_id": "MBSWP/726", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to multiply the adjacent elements of the given tuple.\n *\n * >>> multiplyElements([1, 5, 7, 8, 10])\n * [5, 35, 56, 80]\n * >>> multiplyElements([2, 4, 5, 6, 7])\n * [8, 20, 30, 42]\n * >>> multiplyElements([12, 13, 14, 9, 15])\n * [156, 182, 126, 135]\n */\nfunc multiplyElements(testTup : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<testTup.count {\n        if i == 0 {\n            result.append(testTup[i] * testTup[i+1])\n        } else if i == testTup.count - 1 {\n            result.append(testTup[i] * testTup[i-1])\n        } else {\n            result.append(testTup[i] * testTup[i+1])\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum element of the given tuple.\n *\n * >>> findMin([1, 5, 7, 8, 10])\n * 1\n * >>> findMin([2, 4, 5, 6, 7])\n * 2\n * >>> findMin([12, 13, 14, 9, 15])\n * 9\n */\nfunc findMin(testTup : [Int]) -> Int {\n    var min = testTup[0]\n    for i in 1..<testTup.count {\n        if testTup[i] < min {\n            min = testTup[i]\n        }\n    }\n    return min\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum element of the given tuple.\n *\n * >>> findMax([1, 5, 7, 8, 10])\n * 10\n * >>> findMax([2, 4, 5, 6, 7])\n * 7\n * >>> findMax"}
{"task_id": "MBSWP/727", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all characters except letters and numbers using regex\n *\n * >>> removeChar(\"123abcjw:, .@! eiw\")\n * \"123abcjweiw\"\n * >>> removeChar(\"Hello1234:, ! Howare33u\")\n * \"Hello1234Howare33u\"\n * >>> removeChar(\"Cool543Triks@:, Make@987Trips\")\n * \"Cool543TriksMake987Trips\"\n */\nfunc removeChar(s : String) -> String {\n    let regex = \"[^a-zA-Z0-9]\"\n    let result = s.replacingOccurrences(of: regex, with: \"\")\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all vowels from a string using regex\n *\n * >>> removeVowels(\"123abcjw:, .@! eiw\")\n * \"123bcjw:, .@! eiw\"\n * >>> removeVowels(\"Hello1234:, ! Howare33u\")\n * \"Hll1234:, ! Howare33u\"\n * >>> removeVowels(\"Cool543Triks@:, Make@987Trips\")\n * \"Cll543Triks@:, Make@987Trips\"\n */\nfunc removeVowels(s : String) -> String {\n    let regex = \"[aeiouAEIOU]\"\n    let result = s.replacingOccurrences(of: regex, with: \"\")\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all vowels from a string using regex\n *\n * >>> removeVowels(\"123abcjw:, .@! eiw\")\n * \"123bcjw:, .@! eiw\"\n * >>> removeVowels(\"Hello1234:, ! Howare33u\")\n * \"Hll1234:, ! Howare33u\"\n * >>> removeVowels(\"Cool543Triks@:, Make@987Trips\")\n * \"Cll543Triks@:, Make@987Trips\"\n"}
{"task_id": "MBSWP/728", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sum elements in two lists.\n *\n * >>> sumList([10, 20, 30], [15, 25, 35])\n * [25, 45, 65]\n * >>> sumList([1, 2, 3], [5, 6, 7])\n * [6, 8, 10]\n * >>> sumList([15, 20, 30], [15, 45, 75])\n * [30, 65, 105]\n */\nfunc sumList(lst1 : [Int], lst2 : [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] + lst2[i])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to multiply elements in two lists.\n *\n * >>> multiplyList([10, 20, 30], [15, 25, 35])\n * [150, 500, 810]\n * >>> multiplyList([1, 2, 3], [5, 6, 7])\n * [5, 12, 21]\n * >>> multiplyList([15, 20, 30], [15, 45, 75])\n * [225, 900, 1425]\n */\nfunc multiplyList(lst1 : [Int], lst2 : [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<lst1.count {\n        result.append(lst1[i] * lst2[i])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum element in a list.\n *\n * >>> maxList([10, 20, 30])\n * 30\n * >>> maxList([1, 2, 3])\n * 3\n * >>> maxList([15, 20, 30])\n * 30\n */\nfunc maxList(lst : [Int]) -> Int {\n    var max = lst[0]\n    for i in 1..<lst.count {\n        if lst"}
{"task_id": "MBSWP/729", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add two lists using map and lambda function.\n *\n * >>> addList([1, 2, 3], [4, 5, 6])\n * [5, 7, 9]\n * >>> addList([1, 2], [3, 4])\n * [4, 6]\n * >>> addList([10, 20], [50, 70])\n * [60, 90]\n */\nfunc addList(nums1 : [Int], nums2 : [Int]) -> [Int] {\n    return nums1.map({ (num1) -> Int in\n        return nums2.map({ (num2) -> Int in\n            return num1 + num2\n        })\n    })\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add two lists using map and lambda function.\n *\n * >>> addList([1, 2, 3], [4, 5, 6])\n * [5, 7, 9]\n * >>> addList([1, 2], [3, 4])\n * [4, 6]\n * >>> addList([10, 20], [50, 70])\n * [60, 90]\n */\nfunc addList(nums1 : [Int], nums2 : [Int]) -> [Int] {\n    return nums1.map({ (num1) -> Int in\n        return nums2.map({ (num2) -> Int in\n            return num1 + num2\n        })\n    })\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add two lists using map and lambda function.\n *\n * >>> addList([1, 2, 3], [4, 5, 6])\n * [5, 7, 9]\n * >>> addList([1, 2], [3, 4])\n * [4, 6]\n * >>> addList([10, 20], [50, 70])\n * [60, 90]\n */\nfunc addList(nums1 : [Int], nums2 : [Int]) -> [Int] {\n    return nums1.map({ (num1) -> Int in"}
{"task_id": "MBSWP/730", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove consecutive duplicates of a given list.\n *\n * >>> consecutiveDuplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n * [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n * >>> consecutiveDuplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])\n * [10, 15, 19, 18, 17, 26, 17, 18, 10]\n * >>> consecutiveDuplicates([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"])\n * [\"a\", \"b\", \"c\", \"d\"]\n */\nfunc consecutiveDuplicates(nums : [AnyHashable]) -> [AnyHashable] {\n    var result = [nums[0]]\n    for i in 1..<nums.count {\n        if nums[i] == result[result.count - 1] {\n            continue\n        }\n        result.append(nums[i])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove consecutive duplicates of a given list.\n *\n * >>> consecutiveDuplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n * [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n * >>> consecutiveDuplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])\n * [10, 15, 19, 18, 17, 26, 17, 18, 10]\n * >>> consecutiveDuplicates([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"])\n * [\"a\", \"b\", \"c\", \"d\"]\n */\nfunc consecutiveDuplicates(nums : [AnyHashable]) -> [AnyHashable] {\n    var result = [nums"}
{"task_id": "MBSWP/731", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area of a cone.\n *\n * >>> lateralsurfaceCone(5, 12)\n * 204.20352248333654\n * >>> lateralsurfaceCone(10, 15)\n * 566.3586699569488\n * >>> lateralsurfaceCone(19, 17)\n * 1521.8090132193388\n */\nfunc lateralsurfaceCone(r : Int, h : Int) -> Double {\n    return 3.14159 * r * r * h / 3\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area of a cylinder.\n *\n * >>> lateralsurfaceCylinder(5, 12)\n * 204.20352248333654\n * >>> lateralsurfaceCylinder(10, 15)\n * 566.3586699569488\n * >>> lateralsurfaceCylinder(19, 17)\n * 1521.8090132193388\n */\nfunc lateralsurfaceCylinder(r : Int, h : Int) -> Double {\n    return 3.14159 * r * r * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area of a sphere.\n *\n * >>> lateralsurfaceSphere(5, 12)\n * 204.20352248333654\n * >>> lateralsurfaceSphere(10, 15)\n * 566.3586699569488\n * >>> lateralsurfaceSphere(19, 17)\n * 1521.8090132193388\n */\nfunc lateralsurfaceSphere(r : Int, h : Int) -> Double {\n    return 4 * 3.14159 * r * r * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the lateral surface area of a cuboid.\n *\n * >>> lateralsurfaceCuboid(5, 12, 10)\n * 204.20352248333654\n * >>> lateralsurfaceCuboid"}
{"task_id": "MBSWP/732", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n *\n * >>> replaceSpecialchar(\"Python language, Programming language.\")\n * \"Python:language::Programming:language:\"\n * >>> replaceSpecialchar(\"a b c,d e f\")\n * \"a:b:c:d:e:f\"\n * >>> replaceSpecialchar(\"ram reshma,ram rahim\")\n * \"ram:reshma:ram:rahim\"\n */\nfunc replaceSpecialchar(text : String) -> String {\n    var result = \"\"\n    for char in text {\n        if char == \" \" || char == \",\" || char == \".\" {\n            result += \":\"\n        } else {\n            result += char\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n *\n * >>> replaceSpecialchar(\"Python language, Programming language.\")\n * \"Python:language::Programming:language:\"\n * >>> replaceSpecialchar(\"a b c,d e f\")\n * \"a:b:c:d:e:f\"\n * >>> replaceSpecialchar(\"ram reshma,ram rahim\")\n * \"ram:reshma:ram:rahim\"\n */\nfunc replaceSpecialchar(text : String) -> String {\n    var result = \"\"\n    for char in text {\n        if char == \" \" || char == \",\" || char == \".\" {\n            result += \":\"\n        } else {\n            result += char\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n *\n * >>> replaceSpecialchar(\"Python language, Programming language.\")\n * \"Python:language::Programming:language:\"\n * >>> replaceSpecialchar(\"a b c,d e f\")\n * \"a:b:c:d:e:f\"\n * >>> replaceSpecialchar(\"ram reshma,ram rahim\")\n * \""}
{"task_id": "MBSWP/733", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the index of the first occurrence of a given number in a sorted array.\n *\n * >>> findFirstOccurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n * 1\n * >>> findFirstOccurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n * 2\n * >>> findFirstOccurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6)\n * 4\n */\nfunc findFirstOccurrence(a : [Int], x : Int) -> Int {\n    var i = 0\n    var j = a.count\n    while i < j {\n        let m = i + (j - i) / 2\n        if a[m] < x {\n            i = m + 1\n        } else {\n            j = m\n        }\n    }\n    return i\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the index of the last occurrence of a given number in a sorted array.\n *\n * >>> findLastOccurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n * 3\n * >>> findLastOccurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n * 4\n * >>> findLastOccurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6)\n * 6\n */\nfunc findLastOccurrence(a : [Int], x : Int) -> Int {\n    var i = 0\n    var j = a.count\n    while i < j {\n        let m = i + (j - i) / 2\n        if a[m] < x {\n            i = m + 1\n        } else {\n            j = m\n        }\n    }\n    return j - 1\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the index of the first occurrence of a given number in a"}
{"task_id": "MBSWP/734", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of products of all possible subarrays.\n *\n * >>> sumOfSubarrayProd([1, 2, 3], 3)\n * 20\n * >>> sumOfSubarrayProd([1, 2], 2)\n * 5\n * >>> sumOfSubarrayProd([1, 2, 3, 4], 4)\n * 84\n */\nfunc sumOfSubarrayProd(arr : [Int], n : Int) -> Int {\n    var sum = 0\n    for i in 0..<n {\n        for j in i..<n {\n            sum += arr[i] * arr[j]\n        }\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/735", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to toggle bits of the number except the first and the last bit.\n *\n * >>> toggleMiddleBits(9)\n * 15\n * >>> toggleMiddleBits(10)\n * 12\n * >>> toggleMiddleBits(11)\n * 13\n */\nfunc toggleMiddleBits(n : Int) -> Int {\n    var n = n\n    n = n & (n - 1)\n    n = n | (n + 1)\n    return n\n}\n"}
{"task_id": "MBSWP/736", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to locate the left insertion point for a specified value in sorted order.\n *\n * >>> leftInsertion([1, 2, 4, 5], 6)\n * 4\n * >>> leftInsertion([1, 2, 4, 5], 3)\n * 2\n * >>> leftInsertion([1, 2, 4, 5], 7)\n * 4\n */\nfunc leftInsertion(a : [Int], x : Int) -> Int {\n    var i = 0\n    while i < a.count && a[i] < x {\n        i += 1\n    }\n    return i\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to locate the right insertion point for a specified value in sorted order.\n *\n * >>> rightInsertion([1, 2, 4, 5], 6)\n * 4\n * >>> rightInsertion([1, 2, 4, 5], 3)\n * 2\n * >>> rightInsertion([1, 2, 4, 5], 7)\n * 4\n */\nfunc rightInsertion(a : [Int], x : Int) -> Int {\n    var i = a.count - 1\n    while i >= 0 && a[i] > x {\n        i -= 1\n    }\n    return i\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to locate the left bisection point for a specified value in sorted order.\n *\n * >>> leftBisection([1, 2, 4, 5], 6)\n * 4\n * >>> leftBisection([1, 2, 4, 5], 3)\n * 2\n * >>> leftBisection([1, 2, 4, 5], 7)\n * 4\n */\nfunc leftBisection(a : [Int], x : Int) -> Int {\n    var i = 0\n    while i < a.count && a[i] < x {\n        i += 1\n    }\n    return i\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to locate the right bisection point for a specified value in sorted order."}
{"task_id": "MBSWP/737", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given string is starting with a vowel or not using regex.\n *\n * >>> checkStr(\"annie\")\n * \"Valid\"\n * >>> checkStr(\"dawood\")\n * \"Invalid\"\n * >>> checkStr(\"Else\")\n * \"Valid\"\n */\nfunc checkStr(string : String) -> String {\n    let regex = \"^[aeiouAEIOU]*$\"\n    let regex = NSRegularExpression(pattern: regex, options: [])\n    let range = NSMakeRange(0, string.length)\n    let match = regex.firstMatch(in: string, options: [], range: range)\n    if match != nil {\n        return \"Valid\"\n    }\n    return \"Invalid\"\n}\n"}
{"task_id": "MBSWP/738", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the geometric sum of n-1.\n *\n * >>> geometricSum(7)\n * 1.9921875\n * >>> geometricSum(4)\n * 1.9375\n * >>> geometricSum(8)\n * 1.99609375\n */\nfunc geometricSum(n : Int) -> Double {\n    var sum = 1.0\n    for i in 1..<n {\n        sum *= Double(i)\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/739", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the index of smallest triangular number with n digits.\n *\n * >>> findIndex(2)\n * 4\n * >>> findIndex(3)\n * 14\n * >>> findIndex(4)\n * 45\n */\nfunc findIndex(n : Int) -> Int {\n    var index = 0\n    var count = 0\n    var temp = 1\n    for i in 1...n {\n        temp *= i\n        count += temp\n        if count >= index + 1 {\n            index = count\n        }\n    }\n    return index\n}\n"}
{"task_id": "MBSWP/740", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n *\n * >>> tupleToDict([1, 5, 7, 10, 13, 5])\n * [1 : 5, 7 : 10, 13 : 5]\n * >>> tupleToDict([1, 2, 3, 4, 5, 6])\n * [1 : 2, 3 : 4, 5 : 6]\n * >>> tupleToDict([7, 8, 9, 10, 11, 12])\n * [7 : 8, 9 : 10, 11 : 12]\n */\nfunc tupleToDict(testTup : [Int]) -> [Int: Int] {\n    var dict : [Int: Int] = [:]\n    for i in 0..<testTup.count {\n        dict[testTup[i]] = testTup[i+1]\n    }\n    return dict\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given dictionary to a tuple using adjacent elements.\n *\n * >>> dictToTuple([1 : 5, 7 : 10, 13 : 5])\n * [1, 5, 7, 10, 13, 5]\n * >>> dictToTuple([1 : 2, 3 : 4, 5 : 6])\n * [1, 2, 3, 4, 5, 6]\n * >>> dictToTuple([7 : 8, 9 : 10, 11 : 12])\n * [7, 8, 9, 10, 11, 12]\n */\nfunc dictToTuple(testDict : [Int: Int]) -> [Int] {\n    var tup : [Int] = []\n    for key in testDict.keys {\n        tup.append(key)\n        tup.append(testDict[key]!)\n    }\n    return tup\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n *\n * >>> tupleToDict([1, 5, 7, 10, 13, 5])\n * [1 : 5, 7"}
{"task_id": "MBSWP/741", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether all the characters are same or not.\n *\n * >>> allCharactersSame(\"python\")\n * false\n * >>> allCharactersSame(\"aaa\")\n * true\n * >>> allCharactersSame(\"data\")\n * false\n */\nfunc allCharactersSame(s : String) -> Bool {\n    if s.count == 0 {\n        return false\n    }\n    let first = s[0]\n    for i in 1..<s.count {\n        if s[i] != first {\n            return false\n        }\n    }\n    return true\n}\n"}
{"task_id": "MBSWP/742", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate the area of a tetrahedron.\n *\n * >>> areaTetrahedron(3)\n * 15.588457268119894\n * >>> areaTetrahedron(20)\n * 692.8203230275509\n * >>> areaTetrahedron(10)\n * 173.20508075688772\n */\nfunc areaTetrahedron(side : Int) -> Double {\n    return (4 * pow(side, 2)) / (6 * sqrt(2))\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate the area of a pentagon.\n *\n * >>> areaPentagon(3)\n * 15.588457268119894\n * >>> areaPentagon(20)\n * 692.8203230275509\n * >>> areaPentagon(10)\n * 173.20508075688772\n */\nfunc areaPentagon(side : Int) -> Double {\n    return (5 * pow(side, 2)) / (4 * sqrt(2))\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate the area of a hexagon.\n *\n * >>> areaHexagon(3)\n * 15.588457268119894\n * >>> areaHexagon(20)\n * 692.8203230275509\n * >>> areaHexagon(10)\n * 173.20508075688772\n */\nfunc areaHexagon(side : Int) -> Double {\n    return (6 * pow(side, 2)) / (4 * sqrt(2))\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate the area of a heptagon.\n *\n * >>> areaHeptagon(3)\n * 15.588457268119894\n * >>> areaHeptagon(20)\n * 692.8203230275509\n * >>> areaHeptagon(10)\n * 173."}
{"task_id": "MBSWP/743", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to rotate a given list by specified number of items to the right direction.\n *\n * >>> rotateRight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)\n * [8, 9, 10, 1, 2, 3, 4, 5, 6]\n * >>> rotateRight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)\n * [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n * >>> rotateRight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)\n * [6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n */\nfunc rotateRight(list1 : [Int], m : Int, n : Int) -> [Int] {\n    var list2 = list1\n    var list3 = list1\n    var list4 = list1\n    var list5 = list1\n    var list6 = list1\n    var list7 = list1\n    var list8 = list1\n    var list9 = list1\n    var list10 = list1\n    var list11 = list1\n    var list12 = list1\n    var list13 = list1\n    var list14 = list1\n    var list15 = list1\n    var list16 = list1\n    var list17 = list1\n    var list18 = list1\n    var list19 = list1\n    var list20 = list1\n    var list21 = list1\n    var list22 = list1\n    var list23 = list1\n    var list24 = list1\n    var list25 = list1\n    var list26 = list1\n    var list27 = list1\n    var list28 = list1\n    var list29 = list1\n    var list30 = list1\n    var list31 = list1\n    var list32 = list1\n    var list33 = list1\n    var list34 = list1\n    var list35 = list1\n    var list36 = list1\n    var list"}
{"task_id": "MBSWP/744", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given tuple has any none value or not.\n *\n * >>> checkNone([10, 4, 5, 6, \"none\"])\n * true\n * >>> checkNone([7, 8, 9, 11, 14])\n * false\n * >>> checkNone([1, 2, 3, 4, \"none\"])\n * true\n */\nfunc checkNone(testTup : [AnyHashable]) -> Bool {\n    for i in testTup {\n        if i == \"none\" {\n            return true\n        }\n    }\n    return false\n}\n"}
{"task_id": "MBSWP/745", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find numbers within a given range where every number is divisible by every digit it contains.\n *\n * >>> divisibleByDigits(1, 22)\n * [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n * >>> divisibleByDigits(1, 15)\n * [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n * >>> divisibleByDigits(20, 25)\n * [22, 24]\n */\nfunc divisibleByDigits(startnum : Int, endnum : Int) -> [Int] {\n    var result : [Int] = []\n    var startnum = startnum\n    var endnum = endnum\n    var startnumStr = String(startnum)\n    var endnumStr = String(endnum)\n    var startnumStrArr = startnumStr.map { String($0) }\n    var endnumStrArr = endnumStr.map { String($0) }\n    var startnumStrArrLen = startnumStrArr.count\n    var endnumStrArrLen = endnumStrArr.count\n    var startnumStrArrLenMinus1 = startnumStrArrLen - 1\n    var endnumStrArrLenMinus1 = endnumStrArrLen - 1\n    var startnumStrArrLenMinus2 = startnumStrArrLen - 2\n    var endnumStrArrLenMinus2 = endnumStrArrLen - 2\n    var startnumStrArrLenMinus3 = startnumStrArrLen - 3\n    var endnumStrArrLenMinus3 = endnumStrArrLen - 3\n    var startnumStrArrLenMinus4 = startnumStrArrLen - 4\n    var endnumStrArrLenMinus4 = endnumStrArrLen - 4\n    var startnumStrArrLenMinus5 = startnumStrArrLen - 5\n    var endnumStrArrLenMinus5 = endnumStrArrLen - 5\n    var startnumStrArr"}
{"task_id": "MBSWP/746", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find area of a sector.\n *\n * >>> sectorArea(4, 45)\n * 6.285714285714286\n * >>> sectorArea(9, 45)\n * 31.82142857142857\n * >>> sectorArea(9, 360)\n * \"none\"\n */\nfunc sectorArea(r : Int, a : Int) -> AnyHashable {\n    if a == 360 {\n        return \"none\"\n    }\n    return r * r * math.pi / 180\n}\n"}
{"task_id": "MBSWP/747", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the longest common subsequence for the given three string sequence.\n *\n * >>> lcsOfThree(\"AGGT12\", \"12TXAYB\", \"12XBA\", 6, 7, 5)\n * 2\n * >>> lcsOfThree(\"Reels\", \"Reelsfor\", \"ReelsforReels\", 5, 8, 13)\n * 5\n * >>> lcsOfThree(\"abcd1e2\", \"bc12ea\", \"bd1ea\", 7, 6, 5)\n * 3\n */\nfunc lcsOfThree(x : String, y : String, z : String, m : Int, n : Int, o : Int) -> Int {\n    var dp = Array(repeating: Array(repeating: Array(repeating: 0, count: o + 1), count: n + 1), count: m + 1)\n    for i in 0..<m + 1 {\n        for j in 0..<n + 1 {\n            for k in 0..<o + 1 {\n                if x[i] == y[j] && y[j] == z[k] {\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                } else {\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n                }\n            }\n        }\n    }\n    return dp[m][n][o]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the longest common subsequence for the given three string sequence.\n *\n * >>> lcsOfThree(\"AGGT12\", \"12TXAYB\", \"12XBA\", 6, 7, 5)\n * 2\n * >>> lcsOfThree(\"Reels\", \"Reelsfor\", \"ReelsforReels\", 5, 8, 13)\n * 5\n * >>> lcsOfThree(\"abcd1e2\", \"bc12ea\", \"bd1ea\", 7, 6, 5)\n"}
{"task_id": "MBSWP/748", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to put spaces between words starting with capital letters in a given string by using regex.\n *\n * >>> capitalWordsSpaces(\"Python\")\n * \"Python\"\n * >>> capitalWordsSpaces(\"PythonProgrammingExamples\")\n * \"Python Programming Examples\"\n * >>> capitalWordsSpaces(\"GetReadyToBeCodingFreak\")\n * \"Get Ready To Be Coding Freak\"\n */\nfunc capitalWordsSpaces(str1 : String) -> String {\n    let regex = \"([A-Z][a-z]*)\"\n    let result = str1.replacingOccurrences(of: regex, with: \"\\\\1 \")\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all the vowels from a given string by using regex.\n *\n * >>> removeVowels(\"Python\")\n * \"Pythn\"\n * >>> removeVowels(\"PythonProgrammingExamples\")\n * \"PythnPrgrmmngExmpls\"\n * >>> removeVowels(\"GetReadyToBeCodingFreak\")\n * \"GtRdyTbBcngFrdk\"\n */\nfunc removeVowels(str1 : String) -> String {\n    let regex = \"[aeiou]\"\n    let result = str1.replacingOccurrences(of: regex, with: \"\")\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all the vowels from a given string by using regex.\n *\n * >>> removeVowels(\"Python\")\n * \"Pythn\"\n * >>> removeVowels(\"PythonProgrammingExamples\")\n * \"PythnPrgrmmngExmpls\"\n * >>> removeVowels(\"GetReadyToBeCodingFreak\")\n * \"GtRdyTbBcngFrdk\"\n */\nfunc removeVowels(str1 : String) -> String {\n    let regex = \"[aeiou]\"\n    let result = str1.replacingOccurrences(of: regex, with: \"\")\n    return"}
{"task_id": "MBSWP/749", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a given list of strings of numbers numerically.\n *\n * >>> sortNumericStrings([\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"])\n * [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n * >>> sortNumericStrings([\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"])\n * [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n * >>> sortNumericStrings([\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"])\n * [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n */\nfunc sortNumericStrings(numsStr : [String]) -> [Int] {\n    var nums : [Int] = []\n    for numStr in numsStr {\n        nums.append(Int(numStr))\n    }\n    nums.sort()\n    return nums\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a given list of strings of numbers alphabetically.\n *\n * >>> sortAlphabeticStrings([\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"])\n * [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n * >>> sortAlphabeticStrings([\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2"}
{"task_id": "MBSWP/750", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add the given tuple to the given list.\n *\n * >>> addTuple([5, 6, 7], [9, 10])\n * [5, 6, 7, 9, 10]\n * >>> addTuple([6, 7, 8], [10, 11])\n * [6, 7, 8, 10, 11]\n * >>> addTuple([7, 8, 9], [11, 12])\n * [7, 8, 9, 11, 12]\n */\nfunc addTuple(testList : [Int], testTup : [Int]) -> [Int] {\n    var result = testList\n    for i in testTup {\n        result.append(i)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add the given tuple to the given list.\n *\n * >>> addTuple([5, 6, 7], [9, 10])\n * [5, 6, 7, 9, 10]\n * >>> addTuple([6, 7, 8], [10, 11])\n * [6, 7, 8, 10, 11]\n * >>> addTuple([7, 8, 9], [11, 12])\n * [7, 8, 9, 11, 12]\n */\nfunc addTuple(testList : [Int], testTup : [Int]) -> [Int] {\n    var result = testList\n    for i in testTup {\n        result.append(i)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add the given tuple to the given list.\n *\n * >>> addTuple([5, 6, 7], [9, 10])\n * [5, 6, 7, 9, 10]\n * >>> addTuple([6, 7, 8], [10, 11])\n * [6, 7, 8, 10, 11]\n * >>> addTuple([7, 8, 9], [11, 12])\n * [7, 8, 9, 11, 12]\n */\nfunc addTuple(test"}
{"task_id": "MBSWP/751", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given array represents min heap or not.\n *\n * >>> checkMinHeap([1, 2, 3, 4, 5, 6], 0)\n * true\n * >>> checkMinHeap([2, 3, 4, 5, 10, 15], 0)\n * true\n * >>> checkMinHeap([2, 10, 4, 5, 3, 15], 0)\n * false\n */\nfunc checkMinHeap(arr : [Int], i : Int) -> Bool {\n    if i >= arr.count {\n        return false\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n    if arr[i] > arr[2 * i + 1] && arr[i] > arr[2 * i + 2] {\n        return false\n    }\n    if arr[2 * i + 1] > arr[2 * i + 2] {\n        return false\n    }\n    return checkMinHeap(arr, 2 * i + 1) && checkMinHeap(arr, 2 * i + 2)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given array represents max heap or not.\n *\n * >>> checkMaxHeap([1, 2, 3, 4, 5, 6], 0)\n * true\n * >>> checkMaxHeap([2, 3, 4, 5, 10, 15], 0)\n * true\n * >>> checkMaxHeap([2, 10, 4, 5, 3, 15], 0)\n * false\n */\nfunc checkMaxHeap(arr : [Int], i : Int) -> Bool {\n    if i >= arr.count {\n        return false\n    }\n    if i == arr.count - 1 {\n        return true\n    }\n    if arr[i] < arr[2 * i + 1] && arr[i] < arr[2 * i + 2] {\n        return false\n    }\n    if arr[2 * i + 1] < arr[2 * i + 2] {\n        return false\n    }\n    return checkMaxHeap(arr, 2 *"}
{"task_id": "MBSWP/752", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth jacobsthal number.\n *\n * >>> jacobsthalNum(5)\n * 11\n * >>> jacobsthalNum(2)\n * 1\n * >>> jacobsthalNum(4)\n * 5\n */\nfunc jacobsthalNum(n : Int) -> Int {\n    var n = n\n    var jacobsthal = [1]\n    while jacobsthal.count < n {\n        jacobsthal.append(jacobsthal.last! * 2)\n        if jacobsthal.last! % 4 == 0 {\n            jacobsthal.append(jacobsthal.last! / 2)\n        }\n    }\n    return jacobsthal[n - 1]\n}\n"}
{"task_id": "MBSWP/753", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find minimum k records from tuple list.\n *\n * >>> minK([[\"Manjeet\", 10], [\"Akshat\", 4], [\"Akash\", 2], [\"Nikhil\", 8]], 2)\n * [[\"Akash\", 2], [\"Akshat\", 4]]\n * >>> minK([[\"Sanjeev\", 11], [\"Angat\", 5], [\"Akash\", 3], [\"Nepin\", 9]], 3)\n * [[\"Akash\", 3], [\"Angat\", 5], [\"Nepin\", 9]]\n * >>> minK([[\"tanmay\", 14], [\"Amer\", 11], [\"Ayesha\", 9], [\"SKD\", 16]], 1)\n * [[\"Ayesha\", 9]]\n */\nfunc minK(testList : [[AnyHashable]], k : Int) -> [[AnyHashable]] {\n    var minKList : [[AnyHashable]] = []\n    var minKListCount : Int = 0\n    var minKListCountTemp : Int = 0\n    var minKListCountTemp2 : Int = 0\n    var minKListCountTemp3 : Int = 0\n    var minKListCountTemp4 : Int = 0\n    var minKListCountTemp5 : Int = 0\n    var minKListCountTemp6 : Int = 0\n    var minKListCountTemp7 : Int = 0\n    var minKListCountTemp8 : Int = 0\n    var minKListCountTemp9 : Int = 0\n    var minKListCountTemp10 : Int = 0\n    var minKListCountTemp11 : Int = 0\n    var minKListCountTemp12 : Int = 0\n    var minKListCountTemp13 : Int = 0\n    var minKListCountTemp14 : Int = 0\n    var minKListCountTemp15 : Int = 0\n    var minKListCountTemp16 : Int = 0\n    var minKListCountTemp17 : Int = 0\n    var minKListCountTemp18 : Int = 0\n    var minKListCountTemp19 : Int = 0\n    var minKListCountTemp20 : Int = 0\n    var minKListCountTemp21 : Int = 0\n   "}
{"task_id": "MBSWP/754", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find common index elements from three lists.\n *\n * >>> extractIndexList([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])\n * [1, 7]\n * >>> extractIndexList([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7])\n * [1, 6]\n * >>> extractIndexList([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])\n * [1, 5]\n */\nfunc extractIndexList(l1 : [Int], l2 : [Int], l3 : [Int]) -> [Int] {\n    var result = [Int]()\n    for i in 0..<l1.count {\n        if l1[i] == l2[i] && l2[i] == l3[i] {\n            result.append(l1[i])\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find common index elements from three lists.\n *\n * >>> extractIndexList([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])\n * [1, 7]\n * >>> extractIndexList([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7])\n * [1, 6]\n * >>> extractIndexList([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])"}
{"task_id": "MBSWP/755", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the second smallest number in a list.\n *\n * >>> secondSmallest([1, 2, -8, -2, 0, -2])\n * -2\n * >>> secondSmallest([1, 1, -0.5, 0, 2, -2, -2])\n * -0.5\n * >>> secondSmallest([2, 2])\n * \"none\"\n */\nfunc secondSmallest(numbers : [Double]) -> AnyHashable {\n    var smallest = numbers[0]\n    var secondSmallest = \"none\"\n    for number in numbers {\n        if number < smallest {\n            secondSmallest = smallest\n            smallest = number\n        } else if number < secondSmallest && number != smallest {\n            secondSmallest = number\n        }\n    }\n    return secondSmallest\n}\n\n// Test\nassert(secondSmallest([1, 2, -8, -2, 0, -2]) == -2)\nassert(secondSmallest([1, 1, -0.5, 0, 2, -2, -2]) == -0.5)\nassert(secondSmallest([2, 2]) == \"none\")\n"}
{"task_id": "MBSWP/756", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by zero or one 'b'.\n *\n * >>> textMatchZeroOne(\"ac\")\n * \"Found a match!\"\n * >>> textMatchZeroOne(\"dc\")\n * \"Not matched!\"\n * >>> textMatchZeroOne(\"abbbba\")\n * \"Found a match!\"\n */\nfunc textMatchZeroOne(text : String) -> String {\n    let regex = \"a(b)?\"\n    let regex = Regex(regex)\n    let match = regex.firstMatch(in: text, options: [])\n    if match != nil {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by zero or one 'b'.\n *\n * >>> textMatchZeroOne(\"ac\")\n * \"Found a match!\"\n * >>> textMatchZeroOne(\"dc\")\n * \"Not matched!\"\n * >>> textMatchZeroOne(\"abbbba\")\n * \"Found a match!\"\n */\nfunc textMatchZeroOne(text : String) -> String {\n    let regex = \"a(b)?\"\n    let regex = Regex(regex)\n    let match = regex.firstMatch(in: text, options: [])\n    if match != nil {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by zero or one 'b'.\n *\n * >>> textMatchZeroOne(\"ac\")\n * \"Found a match!\"\n * >>> textMatchZeroOne(\"dc\")\n * \"Not matched!\"\n * >>> textMatchZeroOne(\"abbbba\")\n * \"Found a match!\"\n */\nfunc textMatchZeroOne(text : String) -> String {\n    let regex = \"a(b)?\"\n    let regex = Regex(regex)\n    let match = regex.firstMatch(in: text, options: [])\n    if match != nil {\n        return"}
{"task_id": "MBSWP/757", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the pairs of reverse strings in the given string list.\n *\n * >>> countReversePairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])\n * \"2\"\n * >>> countReversePairs([\"geeks\", \"best\", \"for\", \"skeeg\"])\n * \"1\"\n * >>> countReversePairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"])\n * \"2\"\n */\nfunc countReversePairs(testList : [String]) -> String {\n    var reversePairs = 0\n    var testList = testList\n    var testListLength = testList.count\n    var testListIndex = 0\n    var testListIndex2 = 0\n    var testListIndex3 = 0\n    var testListIndex4 = 0\n    var testListIndex5 = 0\n    var testListIndex6 = 0\n    var testListIndex7 = 0\n    var testListIndex8 = 0\n    var testListIndex9 = 0\n    var testListIndex10 = 0\n    var testListIndex11 = 0\n    var testListIndex12 = 0\n    var testListIndex13 = 0\n    var testListIndex14 = 0\n    var testListIndex15 = 0\n    var testListIndex16 = 0\n    var testListIndex17 = 0\n    var testListIndex18 = 0\n    var testListIndex19 = 0\n    var testListIndex20 = 0\n    var testListIndex21 = 0\n    var testListIndex22 = 0\n    var testListIndex23 = 0\n    var testListIndex24 = 0\n    var testListIndex25 = 0\n    var testListIndex26 = 0\n    var testListIndex27 = 0\n    var testListIndex28 = 0\n    var testListIndex29 = 0\n    var testListIndex30 = 0\n    var testListIndex31 = 0\n    var testListIndex32 = 0\n    var testListIndex33 = 0\n    var testListIndex34 = 0\n    var testListIndex35 = 0\n    var testListIndex36 = 0\n    var testList"}
{"task_id": "MBSWP/758", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count number of unique lists within a list.\n *\n * >>> uniqueSublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n * [[1, 3] : 2, [5, 7] : 2, [13, 15, 17] : 1, [9, 11] : 1]\n * >>> uniqueSublists([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]])\n * [[\"green\", \"orange\"] : 2, [\"black\"] : 1, [\"white\"] : 1]\n * >>> uniqueSublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])\n * [[10, 20, 30, 40] : 1, [60, 70, 50, 50] : 1, [90, 100, 200] : 1]\n */\nfunc uniqueSublists(list1 : [[AnyHashable]]) -> [[AnyHashable]: Int] {\n    var result : [[AnyHashable]: Int] = [:]\n    for list in list1 {\n        var temp : [AnyHashable] = []\n        for element in list {\n            if !temp.contains(element) {\n                temp.append(element)\n            }\n        }\n        if !result.keys.contains(temp) {\n            result[temp] = 1\n        } else {\n            result[temp] = result[temp]! + 1\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count number of unique lists within a list.\n *\n * >>> uniqueSublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n * [[1, 3] : 2, [5, 7] : 2, [13, 15, 17] : 1, [9, 11] : 1]\n * >>> uniqueSublists([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white"}
{"task_id": "MBSWP/759", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check a decimal with a precision of 2.\n *\n * >>> isDecimal(\"123.11\")\n * true\n * >>> isDecimal(\"e666.86\")\n * false\n * >>> isDecimal(\"3.124587\")\n * false\n */\nfunc isDecimal(num : String) -> Bool {\n    let regex = \"^[0-9]{1,3}\\\\.[0-9]{1,2}$\"\n    let regex = NSRegularExpression(pattern: regex, options: [])\n    let match = regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count))\n    return match != nil\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check a number with a precision of 2.\n *\n * >>> isNumber(\"123.11\")\n * true\n * >>> isNumber(\"e666.86\")\n * false\n * >>> isNumber(\"3.124587\")\n * true\n */\nfunc isNumber(num : String) -> Bool {\n    let regex = \"^[0-9]{1,3}\\\\.[0-9]{1,2}$\"\n    let regex = NSRegularExpression(pattern: regex, options: [])\n    let match = regex.firstMatch(in: num, options: [], range: NSMakeRange(0, num.count))\n    return match != nil\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check a number with a precision of 2.\n *\n * >>> isNumber(\"123.11\")\n * true\n * >>> isNumber(\"e666.86\")\n * false\n * >>> isNumber(\"3.124587\")\n * true\n */\nfunc isNumber(num : String) -> Bool {\n    let regex = \"^[0-9]{1,3}\\\\.[0-9]{1,2}$\"\n    let regex = NSRegularExpression(pattern: regex, options: [])\n    let match = regex.firstMatch(in"}
{"task_id": "MBSWP/760", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether an array contains only one distinct element or not.\n *\n * >>> uniqueElement([1, 1, 1], 3)\n * \"YES\"\n * >>> uniqueElement([1, 2, 1, 2], 4)\n * \"NO\"\n * >>> uniqueElement([1, 2, 3, 4, 5], 5)\n * \"NO\"\n */\nfunc uniqueElement(arr : [Int], n : Int) -> String {\n    var count = 0\n    var flag = false\n    for i in arr {\n        if count == 0 {\n            count += 1\n            continue\n        }\n        if i == arr[count - 1] {\n            flag = true\n            break\n        }\n        count += 1\n    }\n    if count == 1 {\n        return \"YES\"\n    }\n    if flag {\n        return \"NO\"\n    }\n    return \"YES\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether an array contains only one distinct element or not.\n *\n * >>> uniqueElement([1, 1, 1], 3)\n * \"YES\"\n * >>> uniqueElement([1, 2, 1, 2], 4)\n * \"NO\"\n * >>> uniqueElement([1, 2, 3, 4, 5], 5)\n * \"NO\"\n */\nfunc uniqueElement(arr : [Int], n : Int) -> String {\n    var count = 0\n    var flag = false\n    for i in arr {\n        if count == 0 {\n            count += 1\n            continue\n        }\n        if i == arr[count - 1] {\n            flag = true\n            break\n        }\n        count += 1\n    }\n    if count == 1 {\n        return \"YES\"\n    }\n    if flag {\n        return \"NO\"\n    }\n    return \"YES\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether an array contains only one distinct element or not.\n *\n * >>> uniqueElement([1, 1, 1], 3)\n * \"YES"}
{"task_id": "MBSWP/761", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate arc length of an angle.\n *\n * >>> arcLength(9, 45)\n * 3.5357142857142856\n * >>> arcLength(9, 480)\n * \"none\"\n * >>> arcLength(5, 270)\n * 11.785714285714285\n */\nfunc arcLength(d : Int, a : Int) -> AnyHashable {\n    if a == 0 {\n        return \"none\"\n    }\n    let radians = Double(a) / 180 * Double.pi\n    let arcLength = Double(d) * radians / Double.pi\n    return arcLength\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate the area of a circle.\n *\n * >>> areaOfCircle(9)\n * 78.53981633974483\n * >>> areaOfCircle(0)\n * \"none\"\n */\nfunc areaOfCircle(r : Int) -> AnyHashable {\n    if r == 0 {\n        return \"none\"\n    }\n    let area = Double.pi * Double(r) * Double(r)\n    return area\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate the area of a rectangle.\n *\n * >>> areaOfRectangle(9, 5)\n * 45\n * >>> areaOfRectangle(0, 5)\n * \"none\"\n */\nfunc areaOfRectangle(l : Int, w : Int) -> AnyHashable {\n    if l == 0 || w == 0 {\n        return \"none\"\n    }\n    let area = Double(l) * Double(w)\n    return area\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate the area of a triangle.\n *\n * >>> areaOfTriangle(9, 5)\n * 18.5\n * >>> areaOfTriangle(0, 5)\n * \"none\"\n */\nfunc areaOfTriangle(b : Int, h"}
{"task_id": "MBSWP/762", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month number contains 30 days or not.\n *\n * >>> checkMonthnumberNumber(6)\n * true\n * >>> checkMonthnumberNumber(2)\n * false\n * >>> checkMonthnumberNumber(12)\n * false\n */\nfunc checkMonthnumberNumber(monthnum3 : Int) -> Bool {\n    if monthnum3 == 6 || monthnum3 == 9 || monthnum3 == 11 {\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month number contains 31 days or not.\n *\n * >>> checkMonthnumberNumber(1)\n * true\n * >>> checkMonthnumberNumber(2)\n * false\n * >>> checkMonthnumberNumber(12)\n * false\n */\nfunc checkMonthnumberNumber(monthnum4 : Int) -> Bool {\n    if monthnum4 == 1 || monthnum4 == 3 || monthnum4 == 5 || monthnum4 == 7 || monthnum4 == 8 || monthnum4 == 10 || monthnum4 == 12 {\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month number contains 28 days or not.\n *\n * >>> checkMonthnumberNumber(1)\n * true\n * >>> checkMonthnumberNumber(2)\n * false\n * >>> checkMonthnumberNumber(12)\n * false\n */\nfunc checkMonthnumberNumber(monthnum5 : Int) -> Bool {\n    if monthnum5 == 1 || monthnum5 == 3 || monthnum5 == 5 || monthnum5 == 7 || monthnum5 == 8 || monthnum5 == 10 || monthnum5 == 12 {\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month number contains 29 days or not.\n *\n * >>> checkMonthnumberNumber(2)\n * true\n * >>> checkMonthnumber"}
{"task_id": "MBSWP/763", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum difference between any two elements in a given array.\n *\n * >>> findMinDiff([1, 5, 3, 19, 18, 25], 6)\n * 1\n * >>> findMinDiff([4, 3, 2, 6], 4)\n * 1\n * >>> findMinDiff([30, 5, 20, 9], 4)\n * 4\n */\nfunc findMinDiff(arr : [Int], n : Int) -> Int {\n    var minDiff = arr[0] - arr[1]\n    for i in 1..<n {\n        if arr[i] - arr[i-1] < minDiff {\n            minDiff = arr[i] - arr[i-1]\n        }\n    }\n    return minDiff\n}\n"}
{"task_id": "MBSWP/764", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count numeric values in a given string.\n *\n * >>> numberCtr(\"program2bedone\")\n * 1\n * >>> numberCtr(\"3wonders\")\n * 1\n * >>> numberCtr(\"123\")\n * 3\n */\nfunc numberCtr(str : String) -> Int {\n    var count = 0\n    for char in str {\n        if char.isNumber {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/765", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find nth polite number.\n *\n * >>> isPolite(7)\n * 11\n * >>> isPolite(4)\n * 7\n * >>> isPolite(9)\n * 13\n */\nfunc isPolite(n : Int) -> Int {\n    var n = n\n    var result = 0\n    while n > 0 {\n        result += n % 10\n        n /= 10\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/766", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to iterate over all pairs of consecutive items in a given list.\n *\n * >>> pairWise([1, 1, 2, 3, 3, 4, 4, 5])\n * [[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]\n * >>> pairWise([1, 5, 7, 9, 10])\n * [[1, 5], [5, 7], [7, 9], [9, 10]]\n * >>> pairWise([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]\n */\nfunc pairWise(l1 : [Int]) -> [[Int]] {\n    var result = [[Int]]()\n    for i in 0..<l1.count {\n        for j in i+1..<l1.count {\n            result.append([l1[i], l1[j]])\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to iterate over all pairs of consecutive items in a given list.\n *\n * >>> pairWise([1, 1, 2, 3, 3, 4, 4, 5])\n * [[1, 1], [1, 2], [2, 3], [3, 3], [3, 4], [4, 4], [4, 5]]\n * >>> pairWise([1, 5, 7, 9, 10])\n * [[1, 5], [5, 7], [7, 9], [9, 10]]\n * >>> pairWise([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]\n */\n"}
{"task_id": "MBSWP/767", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n *\n * >>> getPairsCount([1, 1, 1, 1], 4, 2)\n * 6\n * >>> getPairsCount([1, 5, 7, -1, 5], 5, 6)\n * 3\n * >>> getPairsCount([1, -2, 3], 3, 1)\n * 1\n */\nfunc getPairsCount(arr : [Int], n : Int, sum : Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] + arr[j] == sum {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum sum of a contiguous subarray in a given array of integers.\n *\n * >>> getMaxSubarraySum([1, 2, 3, 4, 5], 3)\n * 9\n * >>> getMaxSubarraySum([1, 2, 3, 4, 5], 4)\n * 10\n * >>> getMaxSubarraySum([1, 2, 3, 4, 5], 5)\n * 15\n * >>> getMaxSubarraySum([1, 2, 3, 4, 5], 6)\n * 15\n * >>> getMaxSubarraySum([1, 2, 3, 4, 5], 7)\n * 15\n * >>> getMaxSubarraySum([1, 2, 3, 4, 5], 8)\n * 15\n * >>> getMaxSubarraySum([1, 2, 3, 4, 5], 9)\n * 15\n * >>> getMaxSubarraySum([1, 2, 3, 4, 5], 10)\n * 15\n * >>> getMaxSubarraySum([1, 2, 3, 4, 5], 11)\n * 15\n * >>> getMaxSubarraySum([1, 2, 3, 4, 5], 12)\n * 15\n * >>> getMaxSubarraySum([1, 2, 3, 4, 5], 13)\n * 15\n * >>>"}
{"task_id": "MBSWP/768", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check for odd parity of a given number.\n *\n * >>> checkOddParity(13)\n * true\n * >>> checkOddParity(21)\n * true\n * >>> checkOddParity(18)\n * false\n */\nfunc checkOddParity(x : Int) -> Bool {\n    return x % 2 == 1\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check for even parity of a given number.\n *\n * >>> checkEvenParity(13)\n * false\n * >>> checkEvenParity(21)\n * false\n * >>> checkEvenParity(18)\n * true\n */\nfunc checkEvenParity(x : Int) -> Bool {\n    return x % 2 == 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check for prime number of a given number.\n *\n * >>> checkPrime(13)\n * true\n * >>> checkPrime(21)\n * false\n * >>> checkPrime(18)\n * true\n */\nfunc checkPrime(x : Int) -> Bool {\n    if x < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(x))) {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check for perfect number of a given number.\n *\n * >>> checkPerfect(6)\n * true\n * >>> checkPerfect(28)\n * false\n * >>> checkPerfect(18)\n * false\n */\nfunc checkPerfect(x : Int) -> Bool {\n    var sum = 0\n    for i in 1...Int(sqrt(Double(x))) {\n        if x % i == 0 {\n            sum += i\n        }\n    }\n    return sum == x\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check"}
{"task_id": "MBSWP/769", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to get the difference between two lists.\n *\n * >>> diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])\n * [10, 20, 30, 15]\n * >>> diff([1, 2, 3, 4, 5], [6, 7, 1])\n * [2, 3, 4, 5, 6, 7]\n * >>> diff([1, 2, 3], [6, 7, 1])\n * [2, 3, 6, 7]\n */\nfunc diff(li1 : [Int], li2 : [Int]) -> [Int] {\n    var li3 = [Int]()\n    for i in li1 {\n        if !li2.contains(i) {\n            li3.append(i)\n        }\n    }\n    for i in li2 {\n        if !li1.contains(i) {\n            li3.append(i)\n        }\n    }\n    return li3\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to get the difference between two lists.\n *\n * >>> diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])\n * [10, 20, 30, 15]\n * >>> diff([1, 2, 3, 4, 5], [6, 7, 1])\n * [2, 3, 4, 5, 6, 7]\n * >>> diff([1, 2, 3], [6, 7, 1])\n * [2, 3, 6, 7]\n */\nfunc diff(li1 : [Int], li2 : [Int]) -> [Int] {\n    var li3 = [Int]()\n    for i in li1 {\n        if !li2.contains(i) {\n            li3.append(i)\n        }\n    }\n    for i in li2 {\n        if !li1.contains(i) {\n            li3.append(i)\n        }\n    }\n    return li3\n}\n\n/**\n * You are an expert Swift programmer, and here"}
{"task_id": "MBSWP/770", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of fourth power of first n odd natural numbers.\n *\n * >>> oddNumSum(2)\n * 82\n * >>> oddNumSum(3)\n * 707\n * >>> oddNumSum(4)\n * 3108\n */\nfunc oddNumSum(n : Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 1 {\n            sum += Int(i.pow(4))\n        }\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/771", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given expression is balanced or not.\n *\n * >>> checkExpression(\"{()}[{}]\")\n * true\n * >>> checkExpression(\"{()}[{]\")\n * false\n * >>> checkExpression(\"{()}[{}][]({})\")\n * true\n */\nfunc checkExpression(exp : String) -> Bool {\n    var stack = [Character]()\n    var isBalanced = true\n    for char in exp {\n        if char == '{' || char == '[' || char == '(' {\n            stack.append(char)\n        } else if char == '}' || char == ']' || char == ')' {\n            if stack.isEmpty {\n                isBalanced = false\n                break\n            }\n            let top = stack.popLast()\n            if top == '{' && char == '}' || top == '[' && char == ']' || top == '(' && char == ')' {\n                continue\n            } else {\n                isBalanced = false\n                break\n            }\n        }\n    }\n    return isBalanced && stack.isEmpty\n}\n"}
{"task_id": "MBSWP/772", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all the words with k length in the given string.\n *\n * >>> removeLength(\"The person is most value tet\", 3)\n * \"person is most value\"\n * >>> removeLength(\"If you told me about this ok\", 4)\n * \"If you me about ok\"\n * >>> removeLength(\"Forces of darkeness is come into the play\", 4)\n * \"Forces of darkeness is the\"\n */\nfunc removeLength(testStr : String, k : Int) -> String {\n    var str = testStr\n    var i = 0\n    while i < str.count {\n        if str[i].count == k {\n            str = str.remove(str.index(str.startIndex, offsetBy: i))\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all the words with k length in the given string.\n *\n * >>> removeLength(\"The person is most value tet\", 3)\n * \"person is most value\"\n * >>> removeLength(\"If you told me about this ok\", 4)\n * \"If you me about ok\"\n * >>> removeLength(\"Forces of darkeness is come into the play\", 4)\n * \"Forces of darkeness is the\"\n */\nfunc removeLength(testStr : String, k : Int) -> String {\n    var str = testStr\n    var i = 0\n    while i < str.count {\n        if str[i].count == k {\n            str = str.remove(str.index(str.startIndex, offsetBy: i))\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all the words with k length in the given string.\n *\n * >>> removeLength(\"The person is most value tet\", 3)\n * \"person is most value\"\n * >>> removeLength(\"If you told me about this ok\", 4)\n * \"If you me about ok\"\n"}
{"task_id": "MBSWP/773", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the occurrence and position of the substrings within a string.\n *\n * >>> occuranceSubstring(\"python programming, python language\", \"python\")\n * [\"python\", 0, 6]\n * >>> occuranceSubstring(\"python programming,programming language\", \"programming\")\n * [\"programming\", 7, 18]\n * >>> occuranceSubstring(\"python programming,programming language\", \"language\")\n * [\"language\", 31, 39]\n */\nfunc occuranceSubstring(text : String, pattern : String) -> [AnyHashable] {\n    var result : [AnyHashable] = []\n    var index = 0\n    var start = 0\n    var end = 0\n    while index < text.count {\n        if text[index] == pattern[start] {\n            start += 1\n            if start == pattern.count {\n                result.append([pattern, start, end])\n                start = 0\n                end = 0\n            }\n        } else {\n            start = 0\n        }\n        end += 1\n        index += 1\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the occurrence and position of the substrings within a string.\n *\n * >>> occuranceSubstring(\"python programming, python language\", \"python\")\n * [\"python\", 0, 6]\n * >>> occuranceSubstring(\"python programming,programming language\", \"programming\")\n * [\"programming\", 7, 18]\n * >>> occuranceSubstring(\"python programming,programming language\", \"language\")\n * [\"language\", 31, 39]\n */\nfunc occuranceSubstring(text : String, pattern : String) -> [AnyHashable] {\n    var result : [AnyHashable] = []\n    var index = 0\n    var start = 0\n    var end = 0\n    while index < text.count {\n        if text[index] == pattern[start] {\n            start += 1\n            if start == pattern.count {\n                result.append([pattern, start, end])\n                start = 0\n                end = 0\n            }\n        } else {\n            start"}
{"task_id": "MBSWP/774", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the string is a valid email address or not using regex.\n *\n * >>> checkEmail(\"ankitrai326@gmail.com\")\n * \"Valid Email\"\n * >>> checkEmail(\"my.ownsite@ourearth.org\")\n * \"Valid Email\"\n * >>> checkEmail(\"ankitaoie326.com\")\n * \"Invalid Email\"\n */\nfunc checkEmail(email : String) -> String {\n    let emailRegex = \"^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+\\\\.[a-zA-Z0-9-.]+$\"\n    let emailRegex = emailRegex.withEscapedCharacters()\n    let emailRegex = emailRegex.withNewline()\n    let emailRegex = emailRegex.withWhitespace()\n    let emailRegex = emailRegex.withDot()\n    let emailRegex = emailRegex.withUnderscore()\n    let emailRegex = emailRegex.withAt()\n    let emailRegex = emailRegex.withDot()\n    let emailRegex = emailRegex.withDot()\n    let emailRegex = emailRegex.withDot()\n    let emailRegex = emailRegex.withDot()\n    let emailRegex = emailRegex.withDot()\n    let emailRegex = emailRegex.withDot()\n    let emailRegex = emailRegex.withDot()\n    let emailRegex = emailRegex.withDot()\n    let emailRegex = emailRegex.withDot()\n    let emailRegex = emailRegex.withDot()\n    let emailRegex = emailRegex.withDot()\n    let emailRegex = emailRegex.withDot()\n    let emailRegex = emailRegex.withDot()\n    let emailRegex = emailRegex.withDot()\n    let emailRegex = emailRegex.withDot()\n    let emailRegex = emailRegex.withDot()\n    let emailRegex = emailRegex."}
{"task_id": "MBSWP/775", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether every odd index contains odd numbers of a given list.\n *\n * >>> oddPosition([2, 1, 4, 3, 6, 7, 6, 3])\n * true\n * >>> oddPosition([4, 1, 2])\n * true\n * >>> oddPosition([1, 2, 3])\n * false\n */\nfunc oddPosition(nums : [Int]) -> Bool {\n    var odd = false\n    for i in 0..<nums.count {\n        if i % 2 == 1 {\n            if nums[i] % 2 == 1 {\n                odd = true\n            } else {\n                odd = false\n                break\n            }\n        }\n    }\n    return odd\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether every even index contains even numbers of a given list.\n *\n * >>> evenPosition([2, 1, 4, 3, 6, 7, 6, 3])\n * false\n * >>> evenPosition([4, 1, 2])\n * false\n * >>> evenPosition([1, 2, 3])\n * true\n */\nfunc evenPosition(nums : [Int]) -> Bool {\n    var even = false\n    for i in 0..<nums.count {\n        if i % 2 == 0 {\n            if nums[i] % 2 == 0 {\n                even = true\n            } else {\n                even = false\n                break\n            }\n        }\n    }\n    return even\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether every odd index contains odd numbers of a given list.\n *\n * >>> oddPosition([2, 1, 4, 3, 6, 7, 6, 3])\n * true\n * >>> oddPosition([4, 1, 2])\n * true\n * >>> oddPosition([1, 2, 3])\n * false\n */\nfunc oddPosition(nums : [Int]) -> Bool {\n    var odd = false\n    for i in 0..<nums.count {\n        if i % 2 == 1"}
{"task_id": "MBSWP/776", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count those characters which have vowels as their neighbors in the given string.\n *\n * >>> countVowels(\"bestinstareels\")\n * 7\n * >>> countVowels(\"partofthejourneyistheend\")\n * 12\n * >>> countVowels(\"amazonprime\")\n * 5\n */\nfunc countVowels(testStr : String) -> Int {\n    var count = 0\n    for char in testStr {\n        if isVowel(char) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given string is a palindrome.\n *\n * >>> isPalindrome(\"madam\")\n * false\n * >>> isPalindrome(\"madamimadam\")\n * true\n */\nfunc isPalindrome(testStr : String) -> Bool {\n    var reversedStr = \"\"\n    for char in testStr {\n        reversedStr = char + reversedStr\n    }\n    return reversedStr == testStr\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given string is a palindrome.\n *\n * >>> isPalindrome(\"madam\")\n * false\n * >>> isPalindrome(\"madamimadam\")\n * true\n */\nfunc isPalindrome(testStr : String) -> Bool {\n    var reversedStr = \"\"\n    for char in testStr {\n        reversedStr = char + reversedStr\n    }\n    return reversedStr == testStr\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given string is a palindrome.\n *\n * >>> isPalindrome(\"madam\")\n * false\n * >>> isPalindrome(\"madamimadam\")\n * true\n */\nfunc isPalindrome(testStr : String) -> Bool {\n    var reversedStr = \"\"\n    for char in testStr {\n        reversedStr = char + reversedStr\n    }\n"}
{"task_id": "MBSWP/777", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of non-repeated elements in a given array.\n *\n * >>> findSum([1, 2, 3, 1, 1, 4, 5, 6], 8)\n * 21\n * >>> findSum([1, 10, 9, 4, 2, 10, 10, 45, 4], 9)\n * 71\n * >>> findSum([12, 10, 9, 45, 2, 10, 10, 45, 10], 9)\n * 78\n */\nfunc findSum(arr : [Int], n : Int) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.countOf(i) == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of repeated elements in a given array.\n *\n * >>> findSumRepeated([1, 2, 3, 1, 1, 4, 5, 6], 8)\n * 10\n * >>> findSumRepeated([1, 10, 9, 4, 2, 10, 10, 45, 4], 9)\n * 55\n * >>> findSumRepeated([12, 10, 9, 45, 2, 10, 10, 45, 10], 9)\n * 60\n */\nfunc findSumRepeated(arr : [Int], n : Int) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.countOf(i) > 1 {\n            sum += i * (arr.countOf(i) - 1)\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of repeated elements in a given array.\n *\n * >>> findSumRepeated([1, 2, 3, 1, 1, 4, 5, 6], 8)\n * 10\n * >>> findSumRepeated([1, 10, 9, 4, 2, 10, 10, 45, 4], 9)\n * 55\n * >>> findSumRepeated([12, 10, 9, 45, 2, 10,"}
{"task_id": "MBSWP/778", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to pack consecutive duplicates of a given list elements into sublists.\n *\n * >>> packConsecutiveDuplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n * [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n * >>> packConsecutiveDuplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])\n * [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n * >>> packConsecutiveDuplicates([\"a\", \"a\", \"b\", \"c\", \"d\", \"d\"])\n * [[\"a\", \"a\"], [\"b\"], [\"c\"], [\"d\", \"d\"]]\n */\nfunc packConsecutiveDuplicates(list1 : [AnyHashable]) -> [[AnyHashable]] {\n    var result = [[AnyHashable]]()\n    var current = [AnyHashable]()\n    for element in list1 {\n        if current.count > 0 && current.last == element {\n            current.append(element)\n        } else {\n            result.append(current)\n            current = [element]\n        }\n    }\n    result.append(current)\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to pack consecutive duplicates of a given list elements into sublists.\n *\n * >>> packConsecutiveDuplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n * [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n * >>> packConsecutiveDuplicates([10, 10, 15"}
{"task_id": "MBSWP/779", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the number of unique lists within a list.\n *\n * >>> uniqueSublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n * [[1, 3] : 2, [5, 7] : 2, [13, 15, 17] : 1, [9, 11] : 1]\n * >>> uniqueSublists([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]])\n * [[\"green\", \"orange\"] : 2, [\"black\"] : 1, [\"white\"] : 1]\n * >>> uniqueSublists([[1, 2], [3, 4], [4, 5], [6, 7]])\n * [[1, 2] : 1, [3, 4] : 1, [4, 5] : 1, [6, 7] : 1]\n */\nfunc uniqueSublists(list1 : [[AnyHashable]]) -> [[AnyHashable]: Int] {\n    var result : [[AnyHashable]: Int] = [:]\n    for list in list1 {\n        var temp : [AnyHashable] = []\n        for element in list {\n            if !temp.contains(element) {\n                temp.append(element)\n            }\n        }\n        if !result.keys.contains(temp) {\n            result[temp] = 1\n        } else {\n            result[temp] = result[temp]! + 1\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the number of unique lists within a list.\n *\n * >>> uniqueSublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n * [[1, 3] : 2, [5, 7] : 2, [13, 15, 17] : 1, [9, 11] : 1]\n * >>> uniqueSublists([[\"green\", \"orange\"], [\"black\"], [\"green\", \"orange\"], [\"white\"]])\n * ["}
{"task_id": "MBSWP/780", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the combinations of sums with tuples in the given tuple list.\n *\n * >>> findCombinations([[2, 4], [6, 7], [5, 1], [6, 10]])\n * [[8, 11], [7, 5], [8, 14], [11, 8], [12, 17], [11, 11]]\n * >>> findCombinations([[3, 5], [7, 8], [6, 2], [7, 11]])\n * [[10, 13], [9, 7], [10, 16], [13, 10], [14, 19], [13, 13]]\n * >>> findCombinations([[4, 6], [8, 9], [7, 3], [8, 12]])\n * [[12, 15], [11, 9], [12, 18], [15, 12], [16, 21], [15, 15]]\n */\nfunc findCombinations(testList : [[Int]]) -> [[Int]] {\n    var result : [[Int]] = []\n    var temp : [Int] = []\n    var tempResult : [Int] = []\n    var tempList : [[Int]] = []\n    var tempList2 : [[Int]] = []\n    var tempList3 : [[Int]] = []\n    var tempList4 : [[Int]] = []\n    var tempList5 : [[Int]] = []\n    var tempList6 : [[Int]] = []\n    var tempList7 : [[Int]] = []\n    var tempList8 : [[Int]] = []\n    var tempList9 : [[Int]] = []\n    var tempList10 : [[Int]] = []\n    var tempList11 : [[Int]] = []\n    var tempList12 : [[Int]] = []\n    var tempList13 : [[Int]] = []\n    var tempList14 : [[Int]] = []\n    var tempList15 : [[Int]] = []\n    var tempList16 : [[Int]] = []\n    var tempList17 : [[Int]] = []\n    var tempList18 : [[Int]] = []\n    var tempList19 : [[Int]] = []\n    var tempList20 : [[Int]] = []\n    var"}
{"task_id": "MBSWP/781", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the count of divisors is even or odd.\n *\n * >>> countDivisors(10)\n * \"Even\"\n * >>> countDivisors(100)\n * \"Odd\"\n * >>> countDivisors(125)\n * \"Even\"\n */\nfunc countDivisors(n : Int) -> String {\n    var count = 0\n    var i = 1\n    while i <= n/2 {\n        if n % i == 0 {\n            count += 1\n        }\n        i += 1\n    }\n    if count % 2 == 0 {\n        return \"Even\"\n    } else {\n        return \"Odd\"\n    }\n}\n"}
{"task_id": "MBSWP/782", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all odd length subarrays.\n *\n * >>> oddLengthSum([1, 2, 4])\n * 14\n * >>> oddLengthSum([1, 2, 1, 2])\n * 15\n * >>> oddLengthSum([1, 7])\n * 8\n */\nfunc oddLengthSum(arr : [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        if arr.count % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/783", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert rgb color to hsv color.\n *\n * >>> rgbToHsv(255, 255, 255)\n * [0, 0.0, 100.0]\n * >>> rgbToHsv(0, 215, 0)\n * [120.0, 100.0, 84.31372549019608]\n * >>> rgbToHsv(10, 215, 110)\n * [149.26829268292684, 95.34883720930233, 84.31372549019608]\n */\nfunc rgbToHsv(r : Int, g : Int, b : Int) -> [Double] {\n    let r = Double(r) / 255\n    let g = Double(g) / 255\n    let b = Double(b) / 255\n\n    let max = max(r, g, b)\n    let min = min(r, g, b)\n\n    let h = 0\n    let s = 0\n    let v = max\n\n    let d = max - min\n    if max == 0 {\n        s = 0\n    } else {\n        s = d / max\n    }\n\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = (g - b) / d + (if g < b then 6 else 0)\n    } else if max == g {\n        h = (b - r) / d + 2\n    } else if max == b {\n        h = (r - g) / d + 4\n    }\n\n    h = h / 6\n\n    return [h, s, v]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert hsv color to rgb color.\n *\n * >>> hsvToRgb(0, 0, 0)\n * [0, 0, 0]\n * >>> hsvToRgb(120, 100, 100)\n * [0, 215, 0]\n * >>> hsvToRgb(149.26829268292684, 95.34883720930233, 84.31372549019608)\n * [10, 215, 110"}
{"task_id": "MBSWP/784", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the product of first even and odd number of a given list.\n *\n * >>> mulEvenOdd([1, 3, 5, 7, 4, 1, 6, 8])\n * 4\n * >>> mulEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * 2\n * >>> mulEvenOdd([1, 5, 7, 9, 10])\n * 10\n */\nfunc mulEvenOdd(list1 : [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = even * i\n        } else {\n            odd = odd * i\n        }\n    }\n    return even * odd\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the product of first even and odd number of a given list.\n *\n * >>> mulEvenOdd([1, 3, 5, 7, 4, 1, 6, 8])\n * 4\n * >>> mulEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * 2\n * >>> mulEvenOdd([1, 5, 7, 9, 10])\n * 10\n */\nfunc mulEvenOdd(list1 : [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = even * i\n        } else {\n            odd = odd * i\n        }\n    }\n    return even * odd\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the product of first even and odd number of a given list.\n *\n * >>> mulEvenOdd([1, 3, 5, 7, 4, 1, 6, 8])\n * 4\n * >>> mulEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * 2\n * >>> mulEvenOdd([1, 5, 7, 9"}
{"task_id": "MBSWP/785", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert tuple string to integer tuple.\n *\n * >>> tupleStrInt(\"(7, 8, 9)\")\n * [7, 8, 9]\n * >>> tupleStrInt(\"(1, 2, 3)\")\n * [1, 2, 3]\n * >>> tupleStrInt(\"(4, 5, 6)\")\n * [4, 5, 6]\n */\nfunc tupleStrInt(testStr : String) -> [Int] {\n    var testArr = [Int]()\n    var testStrArr = testStr.characters\n    var testStrArrLen = testStrArr.count\n    var testStrArrIndex = 0\n    var testStrArrIndex2 = 0\n    var testStrArrIndex3 = 0\n    var testStrArrIndex4 = 0\n    var testStrArrIndex5 = 0\n    var testStrArrIndex6 = 0\n    var testStrArrIndex7 = 0\n    var testStrArrIndex8 = 0\n    var testStrArrIndex9 = 0\n    var testStrArrIndex10 = 0\n    var testStrArrIndex11 = 0\n    var testStrArrIndex12 = 0\n    var testStrArrIndex13 = 0\n    var testStrArrIndex14 = 0\n    var testStrArrIndex15 = 0\n    var testStrArrIndex16 = 0\n    var testStrArrIndex17 = 0\n    var testStrArrIndex18 = 0\n    var testStrArrIndex19 = 0\n    var testStrArrIndex20 = 0\n    var testStrArrIndex21 = 0\n    var testStrArrIndex22 = 0\n    var testStrArrIndex23 = 0\n    var testStrArrIndex24 = 0\n    var testStrArrIndex25 = 0\n    var testStrArrIndex26 = 0\n    var testStrArrIndex27 = 0\n    var testStrArrIndex28 = 0\n    var testStrArrIndex29 = 0\n    var testStrArrIndex30 = 0\n    var testStrArrIndex31 = 0\n    var testStrArrIndex32 = 0"}
{"task_id": "MBSWP/786", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to locate the right insertion point for a specified value in sorted order.\n *\n * >>> rightInsertion([1, 2, 4, 5], 6)\n * 4\n * >>> rightInsertion([1, 2, 4, 5], 3)\n * 2\n * >>> rightInsertion([1, 2, 4, 5], 7)\n * 4\n */\nfunc rightInsertion(a : [Int], x : Int) -> Int {\n    var i = 0\n    var j = a.count\n    while i < j {\n        let m = (i + j) / 2\n        if a[m] < x {\n            i = m + 1\n        } else {\n            j = m\n        }\n    }\n    return i\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to locate the left insertion point for a specified value in sorted order.\n *\n * >>> leftInsertion([1, 2, 4, 5], 6)\n * 4\n * >>> leftInsertion([1, 2, 4, 5], 3)\n * 2\n * >>> leftInsertion([1, 2, 4, 5], 7)\n * 4\n */\nfunc leftInsertion(a : [Int], x : Int) -> Int {\n    var i = 0\n    var j = a.count\n    while i < j {\n        let m = (i + j) / 2\n        if a[m] <= x {\n            i = m + 1\n        } else {\n            j = m\n        }\n    }\n    return i\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to locate the right insertion point for a specified value in sorted order.\n *\n * >>> rightBisect([1, 2, 4, 5], 6)\n * 4\n * >>> rightBisect([1, 2, 4, 5], 3)\n * 2\n * >>> rightBisect([1, 2, 4, 5], 7)\n * 4\n */\nfunc rightBisect(a : [Int], x : Int) -> Int {\n    var i = 0"}
{"task_id": "MBSWP/787", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by three 'b'.\n *\n * >>> textMatchThree(\"ac\")\n * \"Not matched!\"\n * >>> textMatchThree(\"dc\")\n * \"Not matched!\"\n * >>> textMatchThree(\"abbbba\")\n * \"Found a match!\"\n */\nfunc textMatchThree(text : String) -> String {\n    if text.count < 3 {\n        return \"Not matched!\"\n    }\n    if text[0] == \"a\" && text[1] == \"b\" && text[2] == \"b\" && text[3] == \"b\" {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by three 'b'.\n *\n * >>> textMatchThree(\"ac\")\n * \"Not matched!\"\n * >>> textMatchThree(\"dc\")\n * \"Not matched!\"\n * >>> textMatchThree(\"abbbba\")\n * \"Found a match!\"\n */\nfunc textMatchThree(text : String) -> String {\n    if text.count < 3 {\n        return \"Not matched!\"\n    }\n    if text[0] == \"a\" && text[1] == \"b\" && text[2] == \"b\" && text[3] == \"b\" {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by three 'b'.\n *\n * >>> textMatchThree(\"ac\")\n * \"Not matched!\"\n * >>> textMatchThree(\"dc\")\n * \"Not matched!\"\n * >>> textMatchThree(\"abbbba\")\n * \"Found a match!\"\n */\nfunc textMatchThree(text : String) -> String {\n    if text.count < 3 {\n        return \"Not matched!\"\n    }\n    if text[0] == \"a\" && text[1] == \"b\" && text[2] == \"b\" &&"}
{"task_id": "MBSWP/788", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to create a new tuple from the given string and list.\n *\n * >>> newTuple([\"WEB\", \"is\"], \"best\")\n * [\"WEB\", \"is\", \"best\"]\n * >>> newTuple([\"We\", \"are\"], \"Developers\")\n * [\"We\", \"are\", \"Developers\"]\n * >>> newTuple([\"Part\", \"is\"], \"Wrong\")\n * [\"Part\", \"is\", \"Wrong\"]\n */\nfunc newTuple(testList : [String], testStr : String) -> [String] {\n    var newTuple = [String]()\n    newTuple.append(testStr)\n    newTuple.append(testList[0])\n    newTuple.append(testList[1])\n    return newTuple\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to create a new dictionary from the given string and list.\n *\n * >>> newDict([\"WEB\", \"is\"], \"best\")\n * [\"WEB\": \"best\"]\n * >>> newDict([\"We\", \"are\"], \"Developers\")\n * [\"We\": \"Developers\"]\n * >>> newDict([\"Part\", \"is\"], \"Wrong\")\n * [\"Part\": \"Wrong\"]\n */\nfunc newDict(testList : [String], testStr : String) -> [String : String] {\n    var newDict = [String : String]()\n    newDict[testList[0]] = testStr\n    return newDict\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to create a new array from the given string and list.\n *\n * >>> newArray([\"WEB\", \"is\"], \"best\")\n * [\"best\"]\n * >>> newArray([\"We\", \"are\"], \"Developers\")\n * [\"Developers\"]\n * >>> newArray([\"Part\", \"is\"], \"Wrong\")\n * [\"Wrong\"]\n */\nfunc newArray(testList : [String], testStr : String) -> [String] {\n    var newArray ="}
{"task_id": "MBSWP/789", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the perimeter of a regular polygon.\n *\n * >>> perimeterPolygon(4, 20)\n * 80\n * >>> perimeterPolygon(10, 15)\n * 150\n * >>> perimeterPolygon(9, 7)\n * 63\n */\nfunc perimeterPolygon(s : Int, l : Int) -> Int {\n    return s * l\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the perimeter of a regular polygon.\n *\n * >>> areaPolygon(4, 20)\n * 80\n * >>> areaPolygon(10, 15)\n * 150\n * >>> areaPolygon(9, 7)\n * 63\n */\nfunc areaPolygon(s : Int, l : Int) -> Int {\n    return s * l * 3\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the perimeter of a regular polygon.\n *\n * >>> perimeterCircle(4)\n * 50\n * >>> perimeterCircle(10)\n * 314\n * >>> perimeterCircle(9)\n * 63\n */\nfunc perimeterCircle(r : Int) -> Int {\n    return 2 * 3.14 * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the perimeter of a regular polygon.\n *\n * >>> areaCircle(4)\n * 50\n * >>> areaCircle(10)\n * 314\n * >>> areaCircle(9)\n * 63\n */\nfunc areaCircle(r : Int) -> Int {\n    return 3.14 * r * r\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the perimeter of a regular polygon.\n *\n * >>> perimeterTriangle(4, 20)\n * 80\n * >>> perimeterTriangle(10, 15)\n * 150\n * >>> perimeterTriangle(9, 7)\n * 63\n */\nfunc perimeterTriangle(b : Int, h : Int) -> Int {\n    return b * 3 +"}
{"task_id": "MBSWP/790", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether every even index contains even numbers of a given list.\n *\n * >>> evenPosition([3, 2, 1])\n * false\n * >>> evenPosition([1, 2, 3])\n * false\n * >>> evenPosition([2, 1, 4])\n * true\n */\nfunc evenPosition(nums : [Int]) -> Bool {\n    var evenIndex = 0\n    var evenNum = 0\n    for num in nums {\n        if num % 2 == 0 {\n            evenIndex += 1\n            evenNum += num\n        }\n    }\n    return evenIndex == evenNum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether every odd index contains odd numbers of a given list.\n *\n * >>> oddPosition([3, 2, 1])\n * false\n * >>> oddPosition([1, 2, 3])\n * false\n * >>> oddPosition([2, 1, 4])\n * true\n */\nfunc oddPosition(nums : [Int]) -> Bool {\n    var oddIndex = 0\n    var oddNum = 0\n    for num in nums {\n        if num % 2 == 1 {\n            oddIndex += 1\n            oddNum += num\n        }\n    }\n    return oddIndex == oddNum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether every even index contains even numbers of a given list.\n * * Write a Swift function to check whether every odd index contains odd numbers of a given list.\n *\n * >>> evenOdd([3, 2, 1])\n * false\n * >>> evenOdd([1, 2, 3])\n * false\n * >>> evenOdd([2, 1, 4])\n * true\n */\nfunc evenOdd(nums : [Int]) -> Bool {\n    return evenPosition(nums) && oddPosition(nums)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether every even index contains even numbers of a given list.\n * * Write a"}
{"task_id": "MBSWP/791", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove the nested record from the given tuple.\n *\n * >>> removeNested([1, 5, 7, [4, 6], 10])\n * [1, 5, 7, 10]\n * >>> removeNested([2, 6, 8, [5, 7], 11])\n * [2, 6, 8, 11]\n * >>> removeNested([3, 7, 9, [6, 8], 12])\n * [3, 7, 9, 12]\n */\nfunc removeNested(testTup : [AnyHashable]) -> [Int] {\n    var tup = testTup\n    var tup2 = tup\n    var tup3 = tup2\n    var tup4 = tup3\n    var tup5 = tup4\n    var tup6 = tup5\n    var tup7 = tup6\n    var tup8 = tup7\n    var tup9 = tup8\n    var tup10 = tup9\n    var tup11 = tup10\n    var tup12 = tup11\n    var tup13 = tup12\n    var tup14 = tup13\n    var tup15 = tup14\n    var tup16 = tup15\n    var tup17 = tup16\n    var tup18 = tup17\n    var tup19 = tup18\n    var tup20 = tup19\n    var tup21 = tup20\n    var tup22 = tup21\n    var tup23 = tup22\n    var tup24 = tup23\n    var tup25 = tup24\n    var tup26 = tup25\n    var tup27 = tup26\n    var tup28 = tup27\n    var tup29 = tup28\n    var tup30 = tup29\n    var tup31 = tup30\n    var tup32 = tup31\n    var tup33 = tup32\n    var tup34 = tup33\n    var tup35 = tup34\n    var tup36 = tup35\n    var tup"}
{"task_id": "MBSWP/792", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of lists in a given number of lists.\n *\n * >>> countList([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n * 4\n * >>> countList([[1, 2], [2, 3], [4, 5]])\n * 3\n * >>> countList([[1, 0], [2, 0]])\n * 2\n */\nfunc countList(inputList : [[Int]]) -> Int {\n    var count = 0\n    for list in inputList {\n        if list.count > 1 {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/793", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the last position of an element in a sorted array.\n *\n * >>> last([1, 2, 3], 1, 3)\n * 0\n * >>> last([1, 1, 1, 2, 3, 4], 1, 6)\n * 2\n * >>> last([2, 3, 2, 3, 6, 8, 9], 3, 8)\n * 3\n */\nfunc last(arr : [Int], x : Int, n : Int) -> Int {\n    var i = 0\n    var j = 0\n    while i < n {\n        if arr[i] == x {\n            j = i\n        }\n        i += 1\n    }\n    return j\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first position of an element in a sorted array.\n *\n * >>> first([1, 2, 3], 1, 3)\n * 1\n * >>> first([1, 1, 1, 2, 3, 4], 1, 6)\n * 0\n * >>> first([2, 3, 2, 3, 6, 8, 9], 3, 8)\n * 4\n */\nfunc first(arr : [Int], x : Int, n : Int) -> Int {\n    var i = 0\n    var j = 0\n    while i < n {\n        if arr[i] == x {\n            j = i\n        }\n        i += 1\n    }\n    return j\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the number of occurrences of an element in a sorted array.\n *\n * >>> count([1, 2, 3], 1, 3)\n * 1\n * >>> count([1, 1, 1, 2, 3, 4], 1, 6)\n * 2\n * >>> count([2, 3, 2, 3, 6, 8, 9], 3, 8)\n * 2\n */\nfunc count(arr : [Int], x : Int, n : Int) -> Int {\n    var i = 0\n    var j = 0\n    while i < n {\n       "}
{"task_id": "MBSWP/794", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n *\n * >>> textStartaEndb(\"aabbbb\")\n * \"Found a match!\"\n * >>> textStartaEndb(\"aabAbbbc\")\n * \"Not matched!\"\n * >>> textStartaEndb(\"accddbbjjj\")\n * \"Not matched!\"\n */\nfunc textStartaEndb(text : String) -> String {\n    if let match = text.match(pattern: \"a.*b\") {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n *\n * >>> textStartaEndb(\"aabbbb\")\n * \"Found a match!\"\n * >>> textStartaEndb(\"aabAbbbc\")\n * \"Not matched!\"\n * >>> textStartaEndb(\"accddbbjjj\")\n * \"Not matched!\"\n */\nfunc textStartaEndb(text : String) -> String {\n    if let match = text.match(pattern: \"a.*b\") {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n *\n * >>> textStartaEndb(\"aabbbb\")\n * \"Found a match!\"\n * >>> textStartaEndb(\"aabAbbbc\")\n * \"Not matched!\"\n * >>> textStartaEndb(\"accddbbjjj\")\n * \"Not matched!\"\n */\nfunc textStartaEndb(text : String) -> String {\n    if let match = text.match(pattern: \"a.*b\") {\n        return \"Found a match!\"\n    }\n    return \"Not matched!\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string"}
{"task_id": "MBSWP/795", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\n *\n * >>> cheapItems([[\"name\" : \"Item-1\", \"price\" : 101.1], [\"name\" : \"Item-2\", \"price\" : 555.22]], 1)\n * [[\"name\" : \"Item-1\", \"price\" : 101.1]]\n * >>> cheapItems([[\"name\" : \"Item-1\", \"price\" : 101.1], [\"name\" : \"Item-2\", \"price\" : 555.22]], 2)\n * [[\"name\" : \"Item-1\", \"price\" : 101.1], [\"name\" : \"Item-2\", \"price\" : 555.22]]\n * >>> cheapItems([[\"name\" : \"Item-1\", \"price\" : 101.1], [\"name\" : \"Item-2\", \"price\" : 555.22], [\"name\" : \"Item-3\", \"price\" : 45.09], [\"name\" : \"Item-4\", \"price\" : 22.75]], 1)\n * [[\"name\" : \"Item-4\", \"price\" : 22.75]]\n */\nfunc cheapItems(items : [[String: AnyHashable]], n : Int) -> [[String: AnyHashable]] {\n    var heap : [[String: AnyHashable]] = []\n    var heapMap : [Int: [[String: AnyHashable]]] = [:]\n    var heapMapKeys : [Int] = []\n    var heapMapKeysCount : Int = 0\n    var heapMapKeysCountMax : Int = 0\n    var heapMapKeysCountMaxIndex : Int = 0\n    var heapMapKeysCountMaxValue : Double = 0\n    var heapMapKeysCountMaxValueIndex : Int = 0\n    var heapMapKeysCountMaxValueIndex2 : Int = 0\n    var heapMapKeysCountMaxValueIndex3 : Int = 0\n    var heapMapKeysCountMaxValueIndex4 : Int = 0\n    var heapMapKeysCountMaxValueIndex5 : Int = 0\n    var heapMapKeysCountMaxValueIndex6 : Int = 0\n    var heapMapKeysCountMaxValueIndex7 : Int = 0\n   "}
{"task_id": "MBSWP/796", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write function to find the sum of all items in the given dictionary.\n *\n * >>> returnSum([\"a\" : 100, \"b\" : 200, \"c\" : 300])\n * 600\n * >>> returnSum([\"a\" : 25, \"b\" : 18, \"c\" : 45])\n * 88\n * >>> returnSum([\"a\" : 36, \"b\" : 39, \"c\" : 49])\n * 124\n */\nfunc returnSum(dict : [String: Int]) -> Int {\n    var sum = 0\n    for (key, value) in dict {\n        sum += value\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write function to find the sum of all items in the given dictionary.\n *\n * >>> returnSum([\"a\" : 100, \"b\" : 200, \"c\" : 300])\n * 600\n * >>> returnSum([\"a\" : 25, \"b\" : 18, \"c\" : 45])\n * 88\n * >>> returnSum([\"a\" : 36, \"b\" : 39, \"c\" : 49])\n * 124\n */\nfunc returnSum(dict : [String: Int]) -> Int {\n    var sum = 0\n    for (key, value) in dict {\n        sum += value\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write function to find the sum of all items in the given dictionary.\n *\n * >>> returnSum([\"a\" : 100, \"b\" : 200, \"c\" : 300])\n * 600\n * >>> returnSum([\"a\" : 25, \"b\" : 18, \"c\" : 45])\n * 88\n * >>> returnSum([\"a\" : 36, \"b\" : 39, \"c\" : 49])\n * 124\n */\nfunc returnSum(dict : [String: Int]) -> Int {\n    var sum = 0\n    for (key, value) in dict {\n        sum += value\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your"}
{"task_id": "MBSWP/797", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all odd natural numbers within the range l and r.\n *\n * >>> sumInRange(2, 5)\n * 8\n * >>> sumInRange(5, 7)\n * 12\n * >>> sumInRange(7, 13)\n * 40\n */\nfunc sumInRange(l : Int, r : Int) -> Int {\n    var sum = 0\n    for i in l...r {\n        if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all even natural numbers within the range l and r.\n *\n * >>> sumInRange(2, 5)\n * 8\n * >>> sumInRange(5, 7)\n * 12\n * >>> sumInRange(7, 13)\n * 40\n */\nfunc sumInRange(l : Int, r : Int) -> Int {\n    var sum = 0\n    for i in l...r {\n        if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all odd natural numbers within the range l and r.\n *\n * >>> sumInRange(2, 5)\n * 8\n * >>> sumInRange(5, 7)\n * 12\n * >>> sumInRange(7, 13)\n * 40\n */\nfunc sumInRange(l : Int, r : Int) -> Int {\n    var sum = 0\n    for i in l...r {\n        if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all even natural numbers within the range l and r.\n *\n * >>> sumInRange(2, 5)\n * 8\n * >>> sumInRange(5, 7)\n * 12\n * >>> sumInRange(7"}
{"task_id": "MBSWP/798", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of an array.\n *\n * >>> Sum([1, 2, 3])\n * 6\n * >>> Sum([15, 12, 13, 10])\n * 50\n * >>> Sum([0, 1, 2])\n * 3\n */\nfunc Sum(arr : [Int]) -> Int {\n    var sum = 0\n    for i in arr {\n        sum += i\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the product of an array.\n *\n * >>> Product([1, 2, 3])\n * 6\n * >>> Product([15, 12, 13, 10])\n * 151200\n * >>> Product([0, 1, 2])\n * 0\n */\nfunc Product(arr : [Int]) -> Int {\n    var product = 1\n    for i in arr {\n        product *= i\n    }\n    return product\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum of an array.\n *\n * >>> Maximum([1, 2, 3])\n * 3\n * >>> Maximum([15, 12, 13, 10])\n * 15\n * >>> Maximum([0, 1, 2])\n * 2\n */\nfunc Maximum(arr : [Int]) -> Int {\n    var max = arr[0]\n    for i in arr {\n        if i > max {\n            max = i\n        }\n    }\n    return max\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum of an array.\n *\n * >>> Minimum([1, 2, 3])\n * 1\n * >>> Minimum([15, 12, 13, 10])\n * 10\n * >>> Minimum([0, 1, 2])\n * 0\n */\nfunc Minimum(arr : [Int]) -> Int {\n    var min = arr[0]\n    for i in arr {\n        if i < min {\n            min = i\n        }\n    }\n    return min\n}\n\n/**\n * You"}
{"task_id": "MBSWP/799", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to left rotate the bits of a given number.\n *\n * >>> leftRotate(16, 2)\n * 64\n * >>> leftRotate(10, 2)\n * 40\n * >>> leftRotate(99, 3)\n * 792\n */\nfunc leftRotate(n : Int, d : Int) -> Int {\n    var result = 0\n    for i in 0..<d {\n        result = result << 1\n        result += n & 1\n        n = n >> 1\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/800", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all whitespaces from a string.\n *\n * >>> removeAllSpaces(\"python  program\")\n * \"pythonprogram\"\n * >>> removeAllSpaces(\"python   programming    language\")\n * \"pythonprogramminglanguage\"\n * >>> removeAllSpaces(\"python                     program\")\n * \"pythonprogram\"\n */\nfunc removeAllSpaces(text : String) -> String {\n    return text.replacingOccurrences(of: \" \", with: \"\")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all vowels from a string.\n *\n * >>> removeAllVowels(\"python  program\")\n * \"ppthn  prgm\"\n * >>> removeAllVowels(\"python   programming    language\")\n * \"ppthn   prgrmng    lng\"\n * >>> removeAllVowels(\"python                     program\")\n * \"ppthn  prgm\"\n */\nfunc removeAllVowels(text : String) -> String {\n    return text.replacingOccurrences(of: \"aeiouAEIOU\", with: \"\")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all vowels from a string.\n *\n * >>> removeAllVowels(\"python  program\")\n * \"ppthn  prgm\"\n * >>> removeAllVowels(\"python   programming    language\")\n * \"ppthn   prgrmng    lng\"\n * >>> removeAllVowels(\"python                     program\")\n * \"ppthn  prgm\"\n */\nfunc removeAllVowels(text : String) -> String {\n    return text.replacingOccurrences(of: \"aeiouAEIOU\", with: \"\")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all vowels from a string.\n *\n * >>> removeAllVowels(\"python  program\")\n * \"ppthn  prgm\"\n * >>> removeAllVowels(\"python   programming    language\")\n"}
{"task_id": "MBSWP/801", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of equal numbers from three given integers.\n *\n * >>> testThreeEqual(1, 1, 1)\n * 3\n * >>> testThreeEqual(-1, -2, -3)\n * 0\n * >>> testThreeEqual(1, 2, 2)\n * 2\n */\nfunc testThreeEqual(x : Int, y : Int, z : Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of equal numbers from three given integers.\n *\n * >>> testThreeEqual(1, 1, 1)\n * 3\n * >>> testThreeEqual(-1, -2, -3)\n * 0\n * >>> testThreeEqual(1, 2, 2)\n * 2\n */\nfunc testThreeEqual(x : Int, y : Int, z : Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of equal numbers from three given integers.\n *\n * >>> testThreeEqual(1, 1, 1)\n * 3\n * >>> testThreeEqual(-1, -2, -3)\n * 0\n * >>> testThreeEqual(1, 2, 2)\n * 2\n */\nfunc testThreeEqual(x : Int, y : Int, z : Int) -> Int {\n    if x == y && y == z {\n        return 3\n    } else if x == y || y == z || x == z {\n        return 2\n    } else {\n        return 0\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your"}
{"task_id": "MBSWP/802", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of rotations required to generate a sorted array.\n *\n * >>> countRotation([3, 2, 1], 3)\n * 1\n * >>> countRotation([4, 5, 1, 2, 3], 5)\n * 2\n * >>> countRotation([7, 8, 9, 1, 2, 3], 6)\n * 3\n */\nfunc countRotation(arr : [Int], n : Int) -> Int {\n    var count = 0\n    var min = arr[0]\n    for i in arr {\n        if i < min {\n            count += 1\n        }\n        min = min < i ? min : i\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/803", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number is a perfect square or not.\n *\n * >>> isPerfectSquare(10)\n * false\n * >>> isPerfectSquare(36)\n * true\n * >>> isPerfectSquare(14)\n * false\n */\nfunc isPerfectSquare(n : Int) -> Bool {\n    var x = n\n    var y = 1\n    while x != y {\n        x = (x + y) / 2\n        y = (x + y) / 2\n    }\n    return x == y\n}\n"}
{"task_id": "MBSWP/804", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the product of numbers is even or not.\n *\n * >>> isProductEven([1, 2, 3], 3)\n * true\n * >>> isProductEven([1, 2, 1, 4], 4)\n * true\n * >>> isProductEven([1, 1], 2)\n * false\n */\nfunc isProductEven(arr : [Int], n : Int) -> Bool {\n    var product = 1\n    for i in arr {\n        product *= i\n    }\n    return product % 2 == 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the product of numbers is odd or not.\n *\n * >>> isProductOdd([1, 2, 3], 3)\n * false\n * >>> isProductOdd([1, 2, 1, 4], 4)\n * false\n * >>> isProductOdd([1, 1], 2)\n * true\n */\nfunc isProductOdd(arr : [Int], n : Int) -> Bool {\n    var product = 1\n    for i in arr {\n        product *= i\n    }\n    return product % 2 == 1\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the product of numbers is even or odd.\n *\n * >>> isProductEvenOrOdd([1, 2, 3], 3)\n * true\n * >>> isProductEvenOrOdd([1, 2, 1, 4], 4)\n * false\n * >>> isProductEvenOrOdd([1, 1], 2)\n * true\n */\nfunc isProductEvenOrOdd(arr : [Int], n : Int) -> Bool {\n    var product = 1\n    for i in arr {\n        product *= i\n    }\n    return product % 2 == 0 || product % 2 == 1\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the product of numbers is even or odd.\n *\n * >>> isProductEvenOrOdd([1, 2, 3"}
{"task_id": "MBSWP/805", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the list in a list of lists whose sum of elements is the highest.\n *\n * >>> maxSumList([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n * [10, 11, 12]\n * >>> maxSumList([[3, 2, 1], [6, 5, 4], [12, 11, 10]])\n * [12, 11, 10]\n * >>> maxSumList([[2, 3, 1]])\n * [2, 3, 1]\n */\nfunc maxSumList(lists : [[Int]]) -> [Int] {\n    var maxSum = 0\n    var maxList = [Int]()\n    for list in lists {\n        var sum = 0\n        for element in list {\n            sum += element\n        }\n        if sum > maxSum {\n            maxSum = sum\n            maxList = list\n        }\n    }\n    return maxList\n}\n"}
{"task_id": "MBSWP/806", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find maximum run of uppercase characters in the given string.\n *\n * >>> maxRunUppercase(\"GeMKSForGERksISBESt\")\n * 5\n * >>> maxRunUppercase(\"PrECIOusMOVemENTSYT\")\n * 6\n * >>> maxRunUppercase(\"GooGLEFluTTER\")\n * 4\n */\nfunc maxRunUppercase(testStr : String) -> Int {\n    var maxRun = 0\n    var currentRun = 0\n    var currentChar = \"\"\n    for char in testStr {\n        if char.uppercaseString == char {\n            currentRun += 1\n        } else {\n            currentRun = 0\n        }\n        if currentRun > maxRun {\n            maxRun = currentRun\n        }\n    }\n    return maxRun\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find maximum run of vowels in the given string.\n *\n * >>> maxRunVowels(\"GeMKSForGERksISBESt\")\n * 3\n * >>> maxRunVowels(\"PrECIOusMOVemENTSYT\")\n * 4\n * >>> maxRunVowels(\"GooGLEFluTTER\")\n * 3\n */\nfunc maxRunVowels(testStr : String) -> Int {\n    var maxRun = 0\n    var currentRun = 0\n    var currentChar = \"\"\n    for char in testStr {\n        if char == \"A\" || char == \"E\" || char == \"I\" || char == \"O\" || char == \"U\" || char == \"Y\" {\n            currentRun += 1\n        } else {\n            currentRun = 0\n        }\n        if currentRun > maxRun {\n            maxRun = currentRun\n        }\n    }\n    return maxRun\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find maximum run of consonants in the given string.\n *\n * >>> maxRunConsonants(\"GeMKSForGERksISBESt\")\n * 7\n"}
{"task_id": "MBSWP/807", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first odd number in a given list of numbers.\n *\n * >>> firstOdd([1, 3, 5])\n * 1\n * >>> firstOdd([2, 4, 1, 3])\n * 1\n */\nfunc firstOdd(nums : [Int]) -> Int {\n    for num in nums {\n        if num % 2 == 1 {\n            return num\n        }\n    }\n    return 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first even number in a given list of numbers.\n *\n * >>> firstEven([1, 3, 5])\n * 3\n * >>> firstEven([2, 4, 1, 3])\n * 2\n */\nfunc firstEven(nums : [Int]) -> Int {\n    for num in nums {\n        if num % 2 == 0 {\n            return num\n        }\n    }\n    return 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first number in a given list of numbers that is divisible by 3.\n *\n * >>> firstDivisibleBy3([1, 3, 5])\n * 3\n * >>> firstDivisibleBy3([2, 4, 1, 3])\n * 3\n */\nfunc firstDivisibleBy3(nums : [Int]) -> Int {\n    for num in nums {\n        if num % 3 == 0 {\n            return num\n        }\n    }\n    return 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the first number in a given list of numbers that is divisible by 5.\n *\n * >>> firstDivisibleBy5([1, 3, 5])\n * 5\n * >>> firstDivisibleBy5([2, 4, 1, 3])\n * 5\n */\nfunc firstDivisibleBy5(nums : [Int]) -> Int {\n    for num in nums {\n        if num % 5 == 0 {\n            return num\n        }\n    }\n    return 0\n"}
{"task_id": "MBSWP/808", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given tuples contain the k or not.\n *\n * >>> checkK([10, 4, 5, 6, 8], 6)\n * true\n * >>> checkK([1, 2, 3, 4, 5, 6], 7)\n * false\n * >>> checkK([7, 8, 9, 44, 11, 12], 11)\n * true\n */\nfunc checkK(testTup : [Int], k : Int) -> Bool {\n    var count = 0\n    for i in testTup {\n        if i == k {\n            count += 1\n        }\n    }\n    return count > 0\n}\n"}
{"task_id": "MBSWP/809", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n *\n * >>> checkSmaller([1, 2, 3], [2, 3, 4])\n * false\n * >>> checkSmaller([4, 5, 6], [3, 4, 5])\n * true\n * >>> checkSmaller([11, 12, 13], [10, 11, 12])\n * true\n */\nfunc checkSmaller(testTup1 : [Int], testTup2 : [Int]) -> Bool {\n    var tup1 = testTup1\n    var tup2 = testTup2\n    var smaller = false\n    for i in 0..<tup1.count {\n        if tup1[i] < tup2[i] {\n            smaller = true\n        }\n    }\n    return smaller\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n *\n * >>> checkSmaller([1, 2, 3], [2, 3, 4])\n * false\n * >>> checkSmaller([4, 5, 6], [3, 4, 5])\n * true\n * >>> checkSmaller([11, 12, 13], [10, 11, 12])\n * true\n */\nfunc checkSmaller(testTup1 : [Int], testTup2 : [Int]) -> Bool {\n    var tup1 = testTup1\n    var tup2 = testTup2\n    var smaller = false\n    for i in 0..<tup1.count {\n        if tup1[i] < tup2[i] {\n            smaller = true\n        }\n    }\n    return smaller\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\n *\n * >>> checkSmaller([1, 2, 3], [2, 3, 4])\n * false\n * >>> checkSmaller([4, 5, 6],"}
{"task_id": "MBSWP/810", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to iterate over elements repeating each as many times as its count.\n *\n * >>> countVariable(4, 2, 0, -2)\n * [\"p\", \"p\", \"p\", \"p\", \"q\", \"q\"]\n * >>> countVariable(0, 1, 2, 3)\n * [\"q\", \"r\", \"r\", \"s\", \"s\", \"s\"]\n * >>> countVariable(11, 15, 12, 23)\n * [\"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"r\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\", \"s\"]\n */\nfunc countVariable(a : Int, b : Int, c : Int, d : Int) -> [String] {\n    var result = [String]()\n    for i in 0..<a {\n        result.append(\"p\")\n    }\n    for i in 0..<b {\n        result.append(\"q\")\n    }\n    for i in 0..<c {\n        result.append(\"r\")\n    }\n    for i in 0..<d {\n        result.append(\"s\")\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to iterate over elements repeating each as many times as its count.\n *\n * >>> countVariable(4, 2, 0, -2)\n * [\"p\", \"p\", \"p\", \"p\", \"q\", \"q\"]\n * >>> count"}
{"task_id": "MBSWP/811", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if two lists of tuples are identical or not.\n *\n * >>> checkIdentical([[10, 4], [2, 5]], [[10, 4], [2, 5]])\n * true\n * >>> checkIdentical([[1, 2], [3, 7]], [[12, 14], [12, 45]])\n * false\n * >>> checkIdentical([[2, 14], [12, 25]], [[2, 14], [12, 25]])\n * true\n */\nfunc checkIdentical(testList1 : [[Int]], testList2 : [[Int]]) -> Bool {\n    var result = true\n    for i in 0..<testList1.count {\n        for j in 0..<testList1[i].count {\n            if testList1[i][j] != testList2[i][j] {\n                result = false\n            }\n        }\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/812", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to abbreviate 'road' as 'rd.' in a given string.\n *\n * >>> roadRd(\"ravipadu Road\")\n * \"ravipadu Rd.\"\n * >>> roadRd(\"palnadu Road\")\n * \"palnadu Rd.\"\n * >>> roadRd(\"eshwar enclave Road\")\n * \"eshwar enclave Rd.\"\n */\nfunc roadRd(street : String) -> String {\n    return street.replacingOccurrences(of: \"road\", with: \"rd.\")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to abbreviate 'road' as 'rd.' in a given string.\n *\n * >>> roadRd(\"ravipadu Road\")\n * \"ravipadu Rd.\"\n * >>> roadRd(\"palnadu Road\")\n * \"palnadu Rd.\"\n * >>> roadRd(\"eshwar enclave Road\")\n * \"eshwar enclave Rd.\"\n */\nfunc roadRd(street : String) -> String {\n    return street.replacingOccurrences(of: \"road\", with: \"rd.\")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to abbreviate 'road' as 'rd.' in a given string.\n *\n * >>> roadRd(\"ravipadu Road\")\n * \"ravipadu Rd.\"\n * >>> roadRd(\"palnadu Road\")\n * \"palnadu Rd.\"\n * >>> roadRd(\"eshwar enclave Road\")\n * \"eshwar enclave Rd.\"\n */\nfunc roadRd(street : String) -> String {\n    return street.replacingOccurrences(of: \"road\", with: \"rd.\")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to abbreviate 'road' as 'rd.' in a given string.\n *\n * >>> roadRd(\"ravipadu Road\")\n * \"ravipadu Rd.\"\n * >>> roadRd(\"palnadu Road\")\n * \"palnadu Rd.\""}
{"task_id": "MBSWP/813", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find length of the string.\n *\n * >>> stringLength(\"python\")\n * 6\n * >>> stringLength(\"program\")\n * 7\n * >>> stringLength(\"language\")\n * 8\n */\nfunc stringLength(str1 : String) -> Int {\n    return str1.count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the length of the string.\n *\n * >>> stringLength(\"python\")\n * 6\n * >>> stringLength(\"program\")\n * 7\n * >>> stringLength(\"language\")\n * 8\n */\nfunc stringLength(str1 : String) -> Int {\n    return str1.count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the length of the string.\n *\n * >>> stringLength(\"python\")\n * 6\n * >>> stringLength(\"program\")\n * 7\n * >>> stringLength(\"language\")\n * 8\n */\nfunc stringLength(str1 : String) -> Int {\n    return str1.count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the length of the string.\n *\n * >>> stringLength(\"python\")\n * 6\n * >>> stringLength(\"program\")\n * 7\n * >>> stringLength(\"language\")\n * 8\n */\nfunc stringLength(str1 : String) -> Int {\n    return str1.count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the length of the string.\n *\n * >>> stringLength(\"python\")\n * 6\n * >>> stringLength(\"program\")\n * 7\n * >>> stringLength(\"language\")\n * 8\n */\nfunc stringLength(str1 : String) -> Int {\n    return str1.count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the length of the string.\n *\n * >>> stringLength(\"python\")\n * 6\n * >>> stringLength(\"program\")\n * 7\n * >>> string"}
{"task_id": "MBSWP/814", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a rombus.\n *\n * >>> rombusArea(10, 20)\n * 100\n * >>> rombusArea(10, 5)\n * 25\n * >>> rombusArea(4, 2)\n * 4\n */\nfunc rombusArea(p : Int, q : Int) -> Int {\n    return p * q\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a rombus.\n *\n * >>> rombusArea(10, 20)\n * 100\n * >>> rombusArea(10, 5)\n * 25\n * >>> rombusArea(4, 2)\n * 4\n */\nfunc rombusArea(p : Int, q : Int) -> Int {\n    return p * q\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a rombus.\n *\n * >>> rombusArea(10, 20)\n * 100\n * >>> rombusArea(10, 5)\n * 25\n * >>> rombusArea(4, 2)\n * 4\n */\nfunc rombusArea(p : Int, q : Int) -> Int {\n    return p * q\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a rombus.\n *\n * >>> rombusArea(10, 20)\n * 100\n * >>> rombusArea(10, 5)\n * 25\n * >>> rombusArea(4, 2)\n * 4\n */\nfunc rombusArea(p : Int, q : Int) -> Int {\n    return p * q\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a rombus.\n *\n * >>> rombusArea(10, 20)\n * 100\n * >>> rombusArea(10, 5)\n * 25\n * >>> rombusArea(4, 2)"}
{"task_id": "MBSWP/815", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n *\n * >>> sortByDnf([1, 2, 0, 1, 0, 1, 2, 1, 1], 9)\n * [0, 0, 1, 1, 1, 1, 1, 2, 2]\n * >>> sortByDnf([1, 0, 0, 1, 2, 1, 2, 2, 1, 0], 10)\n * [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n * >>> sortByDnf([2, 2, 1, 0, 0, 0, 1, 1, 2, 1], 10)\n * [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n */\nfunc sortByDnf(arr : [Int], n : Int) -> [Int] {\n    var arr = arr\n    var n = n\n    var i = 0\n    while i < n {\n        var j = i\n        while j < n {\n            if arr[j] == 0 {\n                arr[j] = arr[j+1]\n                arr[j+1] = 0\n            }\n            j += 1\n        }\n        i += 1\n    }\n    return arr\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\n *\n * >>> sortByDnf([1, 2, 0, 1, 0, 1, 2, 1, 1], 9)\n * [0, 0, 1, 1, 1, 1, 1, 2, 2]\n * >>> sortByDnf([1, 0, 0, 1, 2, 1, 2, 2, 1, 0], 10)\n * [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n * >>> sortByDnf([2, 2, 1, 0, 0, 0, 1, 1, 2, 1], 10)\n"}
{"task_id": "MBSWP/816", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to clear the values of the given tuples.\n *\n * >>> clearTuple([1, 5, 3, 6, 8])\n * []\n * >>> clearTuple([2, 1, 4, 5, 6])\n * []\n * >>> clearTuple([3, 2, 5, 6, 8])\n * []\n */\nfunc clearTuple(testTup : [Int]) -> [AnyHashable] {\n    var result : [AnyHashable] = []\n    for i in testTup {\n        result.append(i)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to clear the values of the given dictionaries.\n *\n * >>> clearDict({1: 5, 3: 6, 8: 9})\n * []\n * >>> clearDict({2: 1, 4: 5, 6: 8})\n * []\n * >>> clearDict({3: 2, 5: 6, 8: 9})\n * []\n */\nfunc clearDict(testDict : [Int: Int]) -> [AnyHashable: AnyHashable] {\n    var result : [AnyHashable: AnyHashable] = []\n    for i in testDict {\n        result[i.key] = i.value\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to clear the values of the given sets.\n *\n * >>> clearSet({1, 5, 3, 6, 8})\n * []\n * >>> clearSet({2, 1, 4, 5, 6})\n * []\n * >>> clearSet({3, 2, 5, 6, 8})\n * []\n */\nfunc clearSet(testSet : Set<Int>) -> Set<AnyHashable> {\n    var result : Set<AnyHashable> = []\n    for i in testSet {\n        result.insert(i)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to clear the values of the"}
{"task_id": "MBSWP/817", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\n *\n * >>> divOfNums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 19, 13)\n * [19, 65, 57, 39, 152, 190]\n * >>> divOfNums([1, 2, 3, 5, 7, 8, 10], 2, 5)\n * [2, 5, 8, 10]\n * >>> divOfNums([10, 15, 14, 13, 18, 12, 20], 10, 5)\n * [10, 15, 20]\n */\nfunc divOfNums(nums : [Int], m : Int, n : Int) -> [Int] {\n    return nums.filter({ (num) -> Bool in\n        return num % m == 0 || num % n == 0\n    })\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of all the numbers from a list of numbers using lambda function.\n *\n * >>> sumOfNums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190])\n * 654\n * >>> sumOfNums([1, 2, 3, 5, 7, 8, 10])\n * 28\n * >>> sumOfNums([10, 15, 14, 13, 18, 12, 20])\n * 60\n */\nfunc sumOfNums(nums : [Int]) -> Int {\n    return nums.reduce(0, { (sum, num) -> Int in\n        return sum + num\n    })\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of all the numbers from a list of numbers using lambda function.\n *\n * >>> sumOfNums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190])\n * 654\n * >>> sumOfNums([1, 2, 3, 5, 7, 8, 10])\n * 28\n * >>> sumOfNums([10, 15,"}
{"task_id": "MBSWP/818", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count lower case letters in a given string.\n *\n * >>> lowerCtr(\"abc\")\n * 3\n * >>> lowerCtr(\"string\")\n * 6\n * >>> lowerCtr(\"Python\")\n * 5\n */\nfunc lowerCtr(str : String) -> Int {\n    var count = 0\n    for char in str {\n        if char.lowercase == char {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/819", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n *\n * >>> countDuplic([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])\n * [[1, 2, 4, 5], [1, 3, 3, 4]]\n * >>> countDuplic([2, 2, 3, 1, 2, 6, 7, 9])\n * [[2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1]]\n * >>> countDuplic([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])\n * [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]\n */\nfunc countDuplic(lists : [Int]) -> [[Int]] {\n    var result : [[Int]] = []\n    var temp : [Int] = []\n    var temp2 : [Int] = []\n    var temp3 : [Int] = []\n    var temp4 : [Int] = []\n    var temp5 : [Int] = []\n    var temp6 : [Int] = []\n    var temp7 : [Int] = []\n    var temp8 : [Int] = []\n    var temp9 : [Int] = []\n    var temp10 : [Int] = []\n    var temp11 : [Int] = []\n    var temp12 : [Int] = []\n    var temp13 : [Int] = []\n    var temp14 : [Int] = []\n    var temp15 : [Int] = []\n    var temp16 : [Int] = []\n    var temp17 : [Int] = []\n    var temp18 : [Int] = []\n    var temp19 : [Int] = []\n    var temp20 : [Int] = []\n    var temp21 : [Int] = []\n    var temp22 : [Int] = []\n    var temp23 : [Int] = []\n   "}
{"task_id": "MBSWP/820", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month number contains 28 days or not.\n *\n * >>> checkMonthnumNumber(2)\n * true\n * >>> checkMonthnumNumber(1)\n * false\n * >>> checkMonthnumNumber(3)\n * false\n */\nfunc checkMonthnumNumber(monthnum1 : Int) -> Bool {\n    if monthnum1 == 2 {\n        return true\n    } else if monthnum1 == 1 {\n        return false\n    } else {\n        return false\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month number contains 29 days or not.\n *\n * >>> checkMonthnumNumber(2)\n * true\n * >>> checkMonthnumNumber(1)\n * false\n * >>> checkMonthnumNumber(3)\n * false\n */\nfunc checkMonthnumNumber(monthnum2 : Int) -> Bool {\n    if monthnum2 == 2 {\n        return true\n    } else if monthnum2 == 1 {\n        return false\n    } else {\n        return false\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month number contains 30 days or not.\n *\n * >>> checkMonthnumNumber(2)\n * true\n * >>> checkMonthnumNumber(1)\n * false\n * >>> checkMonthnumNumber(3)\n * false\n */\nfunc checkMonthnumNumber(monthnum3 : Int) -> Bool {\n    if monthnum3 == 2 {\n        return true\n    } else if monthnum3 == 1 {\n        return false\n    } else {\n        return false\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month number contains 31 days or not.\n *\n * >>> checkMonthnumNumber(2)\n * true\n * >>> checkMonthnumNumber(1)\n * false\n * >>> checkMonthnumNumber(3)\n * false\n */\nfunc checkMonthnumNumber(monthnum4 : Int) -> Bool {"}
{"task_id": "MBSWP/821", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to merge two dictionaries into a single expression.\n *\n * >>> mergeDictionaries([\"R\" : \"Red\", \"B\" : \"Black\", \"P\" : \"Pink\"], [\"G\" : \"Green\", \"W\" : \"White\"])\n * [\"B\" : \"Black\", \"R\" : \"Red\", \"P\" : \"Pink\", \"G\" : \"Green\", \"W\" : \"White\"]\n * >>> mergeDictionaries([\"R\" : \"Red\", \"B\" : \"Black\", \"P\" : \"Pink\"], [\"O\" : \"Orange\", \"W\" : \"White\", \"B\" : \"Black\"])\n * [\"O\" : \"Orange\", \"P\" : \"Pink\", \"B\" : \"Black\", \"W\" : \"White\", \"R\" : \"Red\"]\n * >>> mergeDictionaries([\"G\" : \"Green\", \"W\" : \"White\"], [\"O\" : \"Orange\", \"W\" : \"White\", \"B\" : \"Black\"])\n * [\"W\" : \"White\", \"O\" : \"Orange\", \"G\" : \"Green\", \"B\" : \"Black\"]\n */\nfunc mergeDictionaries(dict1 : [String: String], dict2 : [String: String]) -> [String: String] {\n    var dict = dict1\n    for (key, value) in dict2 {\n        if let oldValue = dict[key] {\n            dict[key] = oldValue + value\n        } else {\n            dict[key] = value\n        }\n    }\n    return dict\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to merge two dictionaries into a single expression.\n *\n * >>> mergeDictionaries([\"R\" : \"Red\", \"B\" : \"Black\", \"P\" : \"Pink\"], [\"G\" : \"Green\", \"W\" : \"White\"])\n * [\"B\" : \"Black\", \"R\" : \"Red\", \"P\" : \"Pink\", \"G\" : \"Green\", \"W\" : \"White\"]\n * >>> mergeDictionaries([\"R\" : \"Red\", \"B\" :"}
{"task_id": "MBSWP/822", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to return true if the password is valid.\n *\n * >>> passValidity(\"password\")\n * false\n * >>> passValidity(\"Password@10\")\n * true\n * >>> passValidity(\"password@10\")\n * false\n */\nfunc passValidity(p : String) -> Bool {\n    let password = p.trimmingCharacters(in: .whitespacesAndNewlines)\n    let passwordLength = password.characters.count\n    let passwordLengthIsValid = passwordLength >= 8 && passwordLength <= 16\n    let passwordContainsUppercase = password.characters.contains(\"A\")\n    let passwordContainsLowercase = password.characters.contains(\"a\")\n    let passwordContainsNumber = password.characters.contains(\"1\")\n    let passwordContainsSpecialCharacter = password.characters.contains(\"!\")\n    let passwordContainsUppercaseAndLowercase = passwordContainsUppercase && passwordContainsLowercase\n    let passwordContainsUppercaseAndNumber = passwordContainsUppercase && passwordContainsNumber\n    let passwordContainsLowercaseAndNumber = passwordContainsLowercase && passwordContainsNumber\n    let passwordContainsUppercaseAndSpecialCharacter = passwordContainsUppercase && passwordContainsSpecialCharacter\n    let passwordContainsLowercaseAndSpecialCharacter = passwordContainsLowercase && passwordContainsSpecialCharacter\n    let passwordContainsNumberAndSpecialCharacter = passwordContainsNumber && passwordContainsSpecialCharacter\n    let passwordContainsUppercaseAndLowercaseAndNumber = passwordContainsUppercaseAndLowercase && passwordContainsNumber\n    let passwordContainsUppercaseAndLowercaseAndSpecialCharacter = passwordContainsUppercaseAndLowercase && passwordContainsSpecialCharacter\n    let passwordContainsUppercaseAndNumberAndSpecialCharacter = passwordContainsUppercaseAndNumber && passwordContainsSpecialCharacter\n    let passwordContainsLowercaseAndNumberAndSpecialCharacter = passwordContainsLowercaseAndNumber && passwordContainsSpecialCharacter\n    let passwordContainsUppercaseAndLowercaseAndNumberAndSpecialCharacter = passwordContainsUppercaseAndLowercaseAndNumber && passwordContainsSpecialCharacter\n    let passwordContainsUpperc"}
{"task_id": "MBSWP/823", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given string starts with a substring using regex.\n *\n * >>> checkSubstring(\"dreams for dreams makes life fun\", \"makes\")\n * \"string doesnt start with the given substring\"\n * >>> checkSubstring(\"Hi there how are you Hi alex\", \"Hi\")\n * \"string starts with the given substring\"\n * >>> checkSubstring(\"Its been a long day\", \"been\")\n * \"string doesnt start with the given substring\"\n */\nfunc checkSubstring(string : String, sample : String) -> String {\n    if string.hasPrefix(sample) {\n        return \"string starts with the given substring\"\n    } else {\n        return \"string doesnt start with the given substring\"\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given string ends with a substring using regex.\n *\n * >>> checkSubstring(\"dreams for dreams makes life fun\", \"fun\")\n * \"string ends with the given substring\"\n * >>> checkSubstring(\"Hi there how are you Hi alex\", \"alex\")\n * \"string ends with the given substring\"\n * >>> checkSubstring(\"Its been a long day\", \"day\")\n * \"string doesnt end with the given substring\"\n */\nfunc checkSubstring(string : String, sample : String) -> String {\n    if string.hasSuffix(sample) {\n        return \"string ends with the given substring\"\n    } else {\n        return \"string doesnt end with the given substring\"\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given string contains a substring using regex.\n *\n * >>> checkSubstring(\"dreams for dreams makes life fun\", \"fun\")\n * \"string contains the given substring\"\n * >>> checkSubstring(\"Hi there how are you Hi alex\", \"alex\")\n * \"string contains the given substring\"\n * >>> checkSubstring(\"Its been a long day\", \"day\")\n * \"string doesnt contain the given substring\"\n"}
{"task_id": "MBSWP/824", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove even numbers from a given list.\n *\n * >>> removeEven([1, 3, 5, 2])\n * [1, 3, 5]\n * >>> removeEven([5, 6, 7])\n * [5, 7]\n * >>> removeEven([1, 2, 3, 4])\n * [1, 3]\n */\nfunc removeEven(l : [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove even numbers from a given list.\n *\n * >>> removeEven([1, 3, 5, 2])\n * [1, 3, 5]\n * >>> removeEven([5, 6, 7])\n * [5, 7]\n * >>> removeEven([1, 2, 3, 4])\n * [1, 3]\n */\nfunc removeEven(l : [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove even numbers from a given list.\n *\n * >>> removeEven([1, 3, 5, 2])\n * [1, 3, 5]\n * >>> removeEven([5, 6, 7])\n * [5, 7]\n * >>> removeEven([1, 2, 3, 4])\n * [1, 3]\n */\nfunc removeEven(l : [Int]) -> [Int] {\n    var result = [Int]()\n    for i in l {\n        if i % 2 == 0 {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove even numbers from a"}
{"task_id": "MBSWP/825", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to access multiple elements of specified index from a given list.\n *\n * >>> accessElements([2, 3, 8, 4, 7, 9], [0, 3, 5])\n * [2, 4, 9]\n * >>> accessElements([1, 2, 3, 4, 5], [1, 2])\n * [2, 3]\n * >>> accessElements([1, 0, 2, 3], [0, 1])\n * [1, 0]\n */\nfunc accessElements(nums : [Int], listIndex : [Int]) -> [Int] {\n    var result = [Int]()\n    for i in listIndex {\n        result.append(nums[i])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if a given number is a prime number.\n *\n * >>> isPrime(1)\n * false\n * >>> isPrime(2)\n * true\n * >>> isPrime(3)\n * true\n * >>> isPrime(4)\n * false\n * >>> isPrime(5)\n * true\n * >>> isPrime(6)\n * false\n * >>> isPrime(7)\n * true\n * >>> isPrime(8)\n * false\n * >>> isPrime(9)\n * false\n * >>> isPrime(10)\n * false\n * >>> isPrime(11)\n * true\n * >>> isPrime(12)\n * false\n * >>> isPrime(13)\n * true\n * >>> isPrime(14)\n * false\n * >>> isPrime(15)\n * false\n * >>> isPrime(16)\n * false\n * >>> isPrime(17)\n * true\n * >>> isPrime(18)\n * false\n * >>> isPrime(19)\n * false\n * >>> isPrime(20)\n * false\n * >>> isPrime(21)\n * true\n * >>> isPrime(22)\n * false\n * >>> isPrime(23)\n * true\n * >>> isPrime(24)\n * false\n * >>> isPrime(25)\n * false\n * >>> isPrime(26)\n"}
{"task_id": "MBSWP/826", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the type of triangle from the given sides.\n *\n * >>> checkTypeOfTriangle(1, 2, 3)\n * \"Obtuse-angled Triangle\"\n * >>> checkTypeOfTriangle(2, 2, 2)\n * \"Acute-angled Triangle\"\n * >>> checkTypeOfTriangle(1, 0, 1)\n * \"Right-angled Triangle\"\n */\nfunc checkTypeOfTriangle(a : Int, b : Int, c : Int) -> String {\n    if a == b && b == c {\n        return \"Equilateral Triangle\"\n    } else if a == b || b == c || a == c {\n        return \"Isosceles Triangle\"\n    } else if a + b > c && a + c > b && b + c > a {\n        return \"Scalene Triangle\"\n    } else {\n        return \"Not a Triangle\"\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the area of a triangle from the given sides.\n *\n * >>> areaOfTriangle(1, 2, 3)\n * 3.0\n * >>> areaOfTriangle(2, 2, 2)\n * 1.0\n * >>> areaOfTriangle(1, 0, 1)\n * 0.0\n */\nfunc areaOfTriangle(a : Int, b : Int, c : Int) -> Double {\n    let p = (a + b + c) / 2.0\n    return math.sqrt(p * (p - a) * (p - b) * (p - c))\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the perimeter of a triangle from the given sides.\n *\n * >>> perimeterOfTriangle(1, 2, 3)\n * 6.0\n * >>> perimeterOfTriangle(2, 2, 2)\n * 4.0\n * >>> perimeterOfTriangle(1, 0, 1)\n * 2.0\n */\nfunc perimeterOfTriangle(a : Int, b : Int, c : Int) ->"}
{"task_id": "MBSWP/827", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sum a specific column of a list in a given list of lists.\n *\n * >>> sumColumn([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 0)\n * 12\n * >>> sumColumn([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 1)\n * 15\n * >>> sumColumn([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 3)\n * 9\n */\nfunc sumColumn(list1 : [[Int]], c : Int) -> Int {\n    var sum = 0\n    for i in 0..<list1.count {\n        sum += list1[i][c]\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sum a specific row of a list in a given list of lists.\n *\n * >>> sumRow([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 0)\n * 12\n * >>> sumRow([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 1)\n * 15\n * >>> sumRow([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 2)\n * 9\n */\nfunc sumRow(list1 : [[Int]], r : Int) -> Int {\n    var sum = 0\n    for i in 0..<list1[r].count {\n        sum += list1[r][i]\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sum a specific cell of a list in a given list of lists.\n *\n * >>> sumCell([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 0"}
{"task_id": "MBSWP/828", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count alphabets,digits and special charactes in a given string.\n *\n * >>> countAlphaDigSpl(\"abc!@#123\")\n * [3, 3, 3]\n * >>> countAlphaDigSpl(\"dgsuy@#\\$%&1255\")\n * [5, 4, 5]\n * >>> countAlphaDigSpl(\"fjdsif627348#%\\$^&\")\n * [6, 6, 5]\n */\nfunc countAlphaDigSpl(string : String) -> [Int] {\n    var countAlpha = 0\n    var countDig = 0\n    var countSpl = 0\n    for char in string {\n        if char.isLetter {\n            countAlpha += 1\n        } else if char.isNumber {\n            countDig += 1\n        } else {\n            countSpl += 1\n        }\n    }\n    return [countAlpha, countDig, countSpl]\n}\n"}
{"task_id": "MBSWP/829", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find out the second most repeated (or frequent) string in the given sequence.\n *\n * >>> secondFrequent([\"aaa\", \"bbb\", \"ccc\", \"bbb\", \"aaa\", \"aaa\"])\n * \"bbb\"\n * >>> secondFrequent([\"abc\", \"bcd\", \"abc\", \"bcd\", \"bcd\", \"bcd\"])\n * \"abc\"\n * >>> secondFrequent([\"cdma\", \"gsm\", \"hspa\", \"gsm\", \"cdma\", \"cdma\"])\n * \"gsm\"\n */\nfunc secondFrequent(input : [String]) -> String {\n    var map = [String: Int]()\n    for str in input {\n        if let count = map[str] {\n            map[str] = count + 1\n        } else {\n            map[str] = 1\n        }\n    }\n    var maxCount = 0\n    var maxStr = \"\"\n    for (str, count) in map {\n        if count > maxCount {\n            maxCount = count\n            maxStr = str\n        }\n    }\n    var secondMaxCount = 0\n    var secondMaxStr = \"\"\n    for (str, count) in map {\n        if count == maxCount && str != maxStr {\n            if count > secondMaxCount {\n                secondMaxCount = count\n                secondMaxStr = str\n            }\n        }\n    }\n    return secondMaxStr\n}\n\n// Test\nassert(secondFrequent([\"aaa\", \"bbb\", \"ccc\", \"bbb\", \"aaa\", \"aaa\"]) == \"bbb\")\nassert(secondFrequent([\"abc\", \"bcd\", \"abc\", \"bcd\", \"bcd\", \"bcd\"]) == \"abc\")\nassert(secondFrequent([\"cdma\", \"gsm\", \"hspa\", \"gsm\", \"cdma\", \"cdma\"]) == \"gsm\")\n"}
{"task_id": "MBSWP/830", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to round up a number to specific digits.\n *\n * >>> roundUp(123.01247, 0)\n * 124\n * >>> roundUp(123.01247, 1)\n * 123.1\n * >>> roundUp(123.01247, 2)\n * 123.02\n */\nfunc roundUp(a : Double, digits : Int) -> Double {\n    let factor = pow(10, digits)\n    return round(a * factor) / factor\n}\n"}
{"task_id": "MBSWP/831", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count equal element pairs from the given array.\n *\n * >>> countPairs([1, 1, 1, 1], 4)\n * 6\n * >>> countPairs([1, 5, 1], 3)\n * 1\n * >>> countPairs([3, 2, 1, 7, 8, 9], 6)\n * 0\n */\nfunc countPairs(arr : [Int], n : Int) -> Int {\n    var count = 0\n    for i in 0..<n {\n        for j in i+1..<n {\n            if arr[i] == arr[j] {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/832", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the maximum numeric value from a string by using regex.\n *\n * >>> extractMax(\"100klh564abc365bg\")\n * 564\n * >>> extractMax(\"hello300how546mer231\")\n * 546\n * >>> extractMax(\"its233beenalong343journey234\")\n * 343\n */\nfunc extractMax(input : String) -> Int {\n    let regex = \"\\\\d+\"\n    let matches = input.match(regex)\n    var max = 0\n    for match in matches {\n        if Int(match) > max {\n            max = Int(match)\n        }\n    }\n    return max\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the minimum numeric value from a string by using regex.\n *\n * >>> extractMin(\"100klh564abc365bg\")\n * 100\n * >>> extractMin(\"hello300how546mer231\")\n * 300\n * >>> extractMin(\"its233beenalong343journey234\")\n * 233\n */\nfunc extractMin(input : String) -> Int {\n    let regex = \"\\\\d+\"\n    let matches = input.match(regex)\n    var min = 0\n    for match in matches {\n        if Int(match) < min {\n            min = Int(match)\n        }\n    }\n    return min\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract the maximum numeric value from a string by using regex.\n *\n * >>> extractMax(\"100klh564abc365bg\")\n * 564\n * >>> extractMax(\"hello300how546mer231\")\n * 546\n * >>> extractMax(\"its233beenalong343journey234\")\n * 343\n */\nfunc extractMax(input : String) -> Int {\n    let regex = \"\\\\d+\"\n    let matches = input.match(regex)\n    var max = 0\n    for match in matches {\n        if Int(match) > max {\n            max = Int(match)\n        }\n    }\n    return max\n}"}
{"task_id": "MBSWP/833", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get dictionary keys as a list.\n *\n * >>> getKey([1 : \"python\", 2 : \"java\"])\n * [1, 2]\n * >>> getKey([10 : \"red\", 20 : \"blue\", 30 : \"black\"])\n * [10, 20, 30]\n * >>> getKey([27 : \"language\", 39 : \"java\", 44 : \"little\"])\n * [27, 39, 44]\n */\nfunc getKey(dict : [Int: String]) -> [Int] {\n    var keys : [Int] = []\n    for (key, _) in dict {\n        keys.append(key)\n    }\n    return keys\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get dictionary values as a list.\n *\n * >>> getValue([1 : \"python\", 2 : \"java\"])\n * [\"python\", \"java\"]\n * >>> getValue([10 : \"red\", 20 : \"blue\", 30 : \"black\"])\n * [\"red\", \"blue\", \"black\"]\n * >>> getValue([27 : \"language\", 39 : \"java\", 44 : \"little\"])\n * [\"language\", \"java\", \"little\"]\n */\nfunc getValue(dict : [Int: String]) -> [String] {\n    var values : [String] = []\n    for (_, value) in dict {\n        values.append(value)\n    }\n    return values\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get dictionary keys and values as a list.\n *\n * >>> getKeyValue([1 : \"python\", 2 : \"java\"])\n * [[1, \"python\"], [2, \"java\"]]\n * >>> getKeyValue([10 : \"red\", 20 : \"blue\", 30 : \"black\"])\n * [[10, \"red\"], [20, \"blue\"], [30, \"black\"]]\n * >>> getKeyValue([27 : \"language\", 39 : \"java\", 44 : \"little\"])\n * [[27, \"language\"], [39, \"java\"], [44, \"little\"]"}
{"task_id": "MBSWP/834", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\n *\n * >>> generateMatrix(3)\n * [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n * >>> generateMatrix(2)\n * [[1, 2], [4, 3]]\n * >>> generateMatrix(7)\n * [[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]\n */\nfunc generateMatrix(n : Int) -> [[Int]] {\n    var matrix = [[Int]]()\n    var row = 0\n    var col = 0\n    var count = 1\n    var direction = 0\n    var max = n * n\n    while count <= max {\n        if direction == 0 {\n            for i in 0..<n {\n                matrix.append([count])\n                count += 1\n            }\n            direction = 1\n            col += 1\n        } else if direction == 1 {\n            for i in 0..<n {\n                matrix[row][col] = count\n                count += 1\n                col += 1\n            }\n            direction = 2\n            row += 1\n        } else if direction == 2 {\n            for i in 0..<n {\n                matrix[row][col] = count\n                count += 1\n                row += 1\n            }\n            direction = 3\n            col -= 1\n        } else if direction == 3 {\n            for i in 0..<n {\n                matrix[row][col] = count\n                count += 1\n                col -= 1\n            }\n            direction = 0\n            row -= 1\n        }\n    }\n    return matrix\n}\n"}
{"task_id": "MBSWP/835", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the slope of a line.\n *\n * >>> slope(4, 2, 2, 5)\n * -1.5\n * >>> slope(2, 4, 4, 6)\n * 1\n * >>> slope(1, 2, 4, 2)\n * 0\n */\nfunc slope(x1 : Int, y1 : Int, x2 : Int, y2 : Int) -> Double {\n    return (y2 - y1) / (x2 - x1)\n}\n"}
{"task_id": "MBSWP/836", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find length of the subarray having maximum sum.\n *\n * >>> maxSubArraySum([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n * 5\n * >>> maxSubArraySum([1, -2, 1, 1, -2, 1], 6)\n * 2\n * >>> maxSubArraySum([-1, -2, 3, 4, 5], 5)\n * 3\n */\nfunc maxSubArraySum(a : [Int], size : Int) -> Int {\n    var maxSum = 0\n    var currSum = 0\n    var start = 0\n    var end = 0\n    for i in 0..<size {\n        currSum += a[i]\n        if currSum > maxSum {\n            maxSum = currSum\n            start = i - size + 1\n            end = i\n        }\n        if currSum < 0 {\n            currSum = 0\n        }\n    }\n    return maxSum\n}\n"}
{"task_id": "MBSWP/837", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the cube sum of first n odd natural numbers.\n *\n * >>> cubeSum(2)\n * 28\n * >>> cubeSum(3)\n * 153\n * >>> cubeSum(4)\n * 496\n */\nfunc cubeSum(n : Int) -> Int {\n    var sum = 0\n    for i in 1..<n {\n        sum += i * i * i\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/838", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find minimum number swaps required to make two binary strings equal.\n *\n * >>> minSwaps(\"0011\", \"1111\")\n * 1\n * >>> minSwaps(\"00011\", \"01001\")\n * 2\n * >>> minSwaps(\"111\", \"111\")\n * 0\n */\nfunc minSwaps(s1 : String, s2 : String) -> Int {\n    var s1 = s1\n    var s2 = s2\n    var count = 0\n    while s1 != s2 {\n        if s1.count > s2.count {\n            s1 = s1.dropFirst(1)\n        } else {\n            s2 = s2.dropFirst(1)\n        }\n        count += 1\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/839", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the tuples alphabetically by the first item of each tuple.\n *\n * >>> sortTuple([[\"Amana\", 28], [\"Zenat\", 30], [\"Abhishek\", 29], [\"Nikhil\", 21], [\"B\", \"C\"]])\n * [[\"Abhishek\", 29], [\"Amana\", 28], [\"B\", \"C\"], [\"Nikhil\", 21], [\"Zenat\", 30]]\n * >>> sortTuple([[\"aaaa\", 28], [\"aa\", 30], [\"bab\", 29], [\"bb\", 21], [\"csa\", \"C\"]])\n * [[\"aa\", 30], [\"aaaa\", 28], [\"bab\", 29], [\"bb\", 21], [\"csa\", \"C\"]]\n * >>> sortTuple([[\"Sarala\", 28], [\"Ayesha\", 30], [\"Suman\", 29], [\"Sai\", 21], [\"G\", \"H\"]])\n * [[\"Ayesha\", 30], [\"G\", \"H\"], [\"Sai\", 21], [\"Sarala\", 28], [\"Suman\", 29]]\n */\nfunc sortTuple(tup : [[AnyHashable]]) -> [[AnyHashable]] {\n    var sortedTup = tup\n    sortedTup.sort(by: { $0[0] < $1[0] })\n    return sortedTup\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the tuples alphabetically by the second item of each tuple.\n *\n * >>> sortTuple([[\"Amana\", 28], [\"Zenat\", 30], [\"Abhishek\", 29], [\"Nikhil\", 21], [\"B\", \"C\"]])\n * [[\"Amana\", 28], [\"Abhishek\", 29], [\"B\", \"C\"], [\"Zenat\", 30], [\"Nikhil\", 21]]\n * >>> sortTuple([[\"aaaa\", 28], [\"aa\", 30], [\"bab\", 29], [\"bb\", 21], [\"csa\", \"C\"]])\n * [[\"aa\", 30], [\"bab\", 29], [\"bb\", 21], [\"csa\", \"C\"], [\"aaaa\", 28]]"}
{"task_id": "MBSWP/840", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\n *\n * >>> checkSolution(2, 0, -1)\n * \"Yes\"\n * >>> checkSolution(1, -5, 6)\n * \"No\"\n * >>> checkSolution(2, 0, 2)\n * \"Yes\"\n */\nfunc checkSolution(a : Int, b : Int, c : Int) -> String {\n    let discriminant = b * b - 4 * a * c\n    if discriminant > 0 {\n        return \"Yes\"\n    } else if discriminant < 0 {\n        return \"No\"\n    } else {\n        return \"Yes\"\n    }\n}\n"}
{"task_id": "MBSWP/841", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the number of inversions in the given array.\n *\n * >>> getInvCount([1, 20, 6, 4, 5], 5)\n * 5\n * >>> getInvCount([8, 4, 2, 1], 4)\n * 6\n * >>> getInvCount([3, 1, 2], 3)\n * 2\n */\nfunc getInvCount(arr : [Int], n : Int) -> Int {\n    var invCount = 0\n    var temp = arr\n    for i in 0..<n {\n        temp[i] = arr[i]\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n            if temp[i] > temp[j] {\n                invCount += 1\n            }\n        }\n    }\n    return invCount\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the given array in ascending order.\n *\n * >>> sort([1, 20, 6, 4, 5], 5)\n * [1, 4, 5, 6, 20]\n * >>> sort([8, 4, 2, 1], 4)\n * [1, 2, 4, 8]\n * >>> sort([3, 1, 2], 3)\n * [1, 2, 3]\n */\nfunc sort(arr : [Int], n : Int) -> [Int] {\n    var temp = arr\n    for i in 0..<n {\n        temp[i] = arr[i]\n    }\n    for i in 0..<n {\n        for j in i+1..<n {\n            if temp[i] > temp[j] {\n                temp[i] = temp[i] + temp[j]\n                temp[j] = temp[i] - temp[j]\n                temp[i] = temp[i] - temp[j]\n            }\n        }\n    }\n    return temp\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum number in the given array.\n *\n * >>> getMax"}
{"task_id": "MBSWP/842", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the number which occurs for odd number of times in the given array.\n *\n * >>> getOddOccurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)\n * 5\n * >>> getOddOccurence([1, 2, 3, 2, 3, 1, 3], 7)\n * 3\n * >>> getOddOccurence([5, 7, 2, 7, 5, 2, 5], 7)\n * 5\n */\nfunc getOddOccurence(arr : [Int], arrSize : Int) -> Int {\n    var oddOccurence = 0\n    var oddOccurenceCount = 0\n    var evenOccurenceCount = 0\n    var evenOccurence = 0\n    var oddOccurenceFound = false\n    var evenOccurenceFound = false\n    for i in arr {\n        if oddOccurenceFound && evenOccurenceFound {\n            break\n        }\n        if oddOccurenceCount % 2 == 0 {\n            evenOccurence = i\n            evenOccurenceCount += 1\n            if evenOccurenceCount == arrSize {\n                evenOccurenceFound = true\n            }\n        } else {\n            oddOccurence = i\n            oddOccurenceCount += 1\n            if oddOccurenceCount == arrSize {\n                oddOccurenceFound = true\n            }\n        }\n    }\n    if oddOccurenceFound {\n        return oddOccurence\n    } else {\n        return evenOccurence\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the number which occurs for even number of times in the given array.\n *\n * >>> getEvenOccurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)\n * 4\n * >>> getEvenOccurence([1, 2, 3, 2, 3, 1, 3], 7)\n * 2\n * >>> getEvenOccurence([5, 7, 2"}
{"task_id": "MBSWP/843", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n *\n * >>> nthSuperUglyNumber(12, [2, 7, 13, 19])\n * 32\n * >>> nthSuperUglyNumber(10, [2, 7, 13, 19])\n * 26\n * >>> nthSuperUglyNumber(100, [2, 7, 13, 19])\n * 5408\n */\nfunc nthSuperUglyNumber(n : Int, primes : [Int]) -> Int {\n    var uglyNumbers = [Int](repeating: 1, count: n)\n    var index = 0\n    var uglyIndex = 0\n    var uglyNumbersIndex = 0\n    var uglyNumbersIndexes = [Int]()\n    var uglyNumbersIndexesCount = 0\n    var uglyNumbersIndexesCounts = [Int]()\n    var uglyNumbersIndexesCountsCount = 0\n    var uglyNumbersIndexesCountsCounts = [Int]()\n    var uglyNumbersIndexesCountsCountsCount = 0\n    var uglyNumbersIndexesCountsCountsCounts = [Int]()\n    var uglyNumbersIndexesCountsCountsCountsCount = 0\n    var uglyNumbersIndexesCountsCountsCountsCounts = [Int]()\n    var uglyNumbersIndexesCountsCountsCountsCountsCount = 0\n    var uglyNumbersIndexesCountsCountsCountsCountsCounts = [Int]()\n    var uglyNumbersIndexesCountsCountsCountsCountsCountsCount = 0\n    var uglyNumbersIndexesCountsCountsCountsCountsCountsCounts = [Int]()\n    var uglyNumbersIndexesCountsCountsCountsCountsCountsCountsCount = 0\n    var uglyNumbersIndexesCountsCountsCountsCountsCountsCountsCounts = [Int]()\n    var uglyNumbersIndexesCountsCountsCountsCountsCountsCountsCountsCount = 0\n    var uglyNumbersIndexesCountsCountsCountsCountsCountsCountsCountsCounts = [Int]()\n    var uglyNumbersIndexesCountsCountsCountsCounts"}
{"task_id": "MBSWP/844", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the kth element in an array containing odd elements first and then even elements.\n *\n * >>> getNumber(8, 5)\n * 2\n * >>> getNumber(7, 2)\n * 3\n * >>> getNumber(5, 2)\n * 3\n */\nfunc getNumber(n : Int, k : Int) -> Int {\n    var count = 0\n    var index = 0\n    var odd = 0\n    var even = 0\n    while index < n {\n        if index % 2 == 0 {\n            even += 1\n            if even == k {\n                return index\n            }\n        } else {\n            odd += 1\n            if odd == k {\n                return index\n            }\n        }\n        index += 1\n    }\n    return -1\n}\n"}
{"task_id": "MBSWP/845", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the number of digits in factorial of a given number.\n *\n * >>> findDigits(7)\n * 4\n * >>> findDigits(5)\n * 3\n * >>> findDigits(4)\n * 2\n */\nfunc findDigits(n : Int) -> Int {\n    var count = 0\n    var temp = n\n    while temp > 0 {\n        count += 1\n        temp = temp / 10\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/846", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum number of platforms required for a railway/bus station.\n *\n * >>> findPlatform([900, 940, 950, 1100, 1500, 1800], [910, 1200, 1120, 1130, 1900, 2000], 6)\n * 3\n * >>> findPlatform([100, 200, 300, 400], [700, 800, 900, 1000], 4)\n * 4\n * >>> findPlatform([5, 6, 7, 8], [4, 3, 2, 1], 4)\n * 1\n */\nfunc findPlatform(arr : [Int], dep : [Int], n : Int) -> Int {\n    var arr = arr\n    var dep = dep\n    var n = n\n    var arr.sort()\n    var dep.sort()\n    var i = 0\n    var j = 0\n    var count = 0\n    while i < arr.count && j < dep.count {\n        if arr[i] < dep[j] {\n            i += 1\n        } else if arr[i] > dep[j] {\n            j += 1\n        } else {\n            i += 1\n            j += 1\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/847", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to copy a list from a singleton tuple.\n *\n * >>> lcopy([1, 2, 3])\n * [1, 2, 3]\n * >>> lcopy([4, 8, 2, 10, 15, 18])\n * [4, 8, 2, 10, 15, 18]\n * >>> lcopy([4, 5, 6])\n * [4, 5, 6]\n */\nfunc lcopy(xs : [Int]) -> [Int] {\n    return xs\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to copy a list from a singleton tuple.\n *\n * >>> lcopy([1, 2, 3])\n * [1, 2, 3]\n * >>> lcopy([4, 8, 2, 10, 15, 18])\n * [4, 8, 2, 10, 15, 18]\n * >>> lcopy([4, 5, 6])\n * [4, 5, 6]\n */\nfunc lcopy(xs : [Int]) -> [Int] {\n    return xs\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to copy a list from a singleton tuple.\n *\n * >>> lcopy([1, 2, 3])\n * [1, 2, 3]\n * >>> lcopy([4, 8, 2, 10, 15, 18])\n * [4, 8, 2, 10, 15, 18]\n * >>> lcopy([4, 5, 6])\n * [4, 5, 6]\n */\nfunc lcopy(xs : [Int]) -> [Int] {\n    return xs\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to copy a list from a singleton tuple.\n *\n * >>> lcopy([1, 2, 3])\n * [1, 2, 3]\n * >>> lcopy([4, 8, 2, 10, 15, 18])\n * [4, 8, 2, 10, 15, 18]\n * >>> lcopy([4, 5, 6])\n * ["}
{"task_id": "MBSWP/848", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a trapezium.\n *\n * >>> areaTrapezium(6, 9, 4)\n * 30\n * >>> areaTrapezium(10, 20, 30)\n * 450\n * >>> areaTrapezium(15, 25, 35)\n * 700\n */\nfunc areaTrapezium(base1 : Int, base2 : Int, height : Int) -> Int {\n    return (base1 + base2) * height / 2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a parallelogram.\n *\n * >>> areaParallelogram(6, 9)\n * 54\n * >>> areaParallelogram(10, 20)\n * 200\n * >>> areaParallelogram(15, 25)\n * 450\n */\nfunc areaParallelogram(base1 : Int, base2 : Int) -> Int {\n    return base1 * base2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a rectangle.\n *\n * >>> areaRectangle(6, 9)\n * 54\n * >>> areaRectangle(10, 20)\n * 200\n * >>> areaRectangle(15, 25)\n * 450\n */\nfunc areaRectangle(base1 : Int, base2 : Int) -> Int {\n    return base1 * base2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a square.\n *\n * >>> areaSquare(6)\n * 36\n * >>> areaSquare(10)\n * 100\n * >>> areaSquare(15)\n * 225\n */\nfunc areaSquare(side : Int) -> Int {\n    return side * side\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the area of a circle.\n *\n * >>> areaCircle(6)\n * 50.26\n * >>> areaCircle(10)\n * 314.16\n * >>> areaCircle"}
{"task_id": "MBSWP/849", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of all prime divisors of a given number.\n *\n * >>> sum(60)\n * 10\n * >>> sum(39)\n * 16\n * >>> sum(40)\n * 7\n */\nfunc sum(n : Int) -> Int {\n    var sum = 0\n    var i = 1\n    while i * i <= n {\n        if n % i == 0 {\n            sum += i\n            n /= i\n            i = 1\n        } else {\n            i += 1\n        }\n    }\n    if n > 1 {\n        sum += n\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/850", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a triangle of positive area is possible with the given angles.\n *\n * >>> isTriangleexists(50, 60, 70)\n * true\n * >>> isTriangleexists(90, 45, 45)\n * true\n * >>> isTriangleexists(150, 30, 70)\n * false\n */\nfunc isTriangleexists(a : Int, b : Int, c : Int) -> Bool {\n    let s = (a + b + c) / 2\n    return (s * (s - a) * (s - b) * (s - c)) > 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a triangle of positive area is possible with the given angles.\n *\n * >>> isTriangleexists(50, 60, 70)\n * true\n * >>> isTriangleexists(90, 45, 45)\n * true\n * >>> isTriangleexists(150, 30, 70)\n * false\n */\nfunc isTriangleexists(a : Int, b : Int, c : Int) -> Bool {\n    let s = (a + b + c) / 2\n    return (s * (s - a) * (s - b) * (s - c)) > 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a triangle of positive area is possible with the given angles.\n *\n * >>> isTriangleexists(50, 60, 70)\n * true\n * >>> isTriangleexists(90, 45, 45)\n * true\n * >>> isTriangleexists(150, 30, 70)\n * false\n */\nfunc isTriangleexists(a : Int, b : Int, c : Int) -> Bool {\n    let s = (a + b + c) / 2\n    return (s * (s - a) * (s - b) * (s - c)) > 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a"}
{"task_id": "MBSWP/851", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of inverse of divisors.\n *\n * >>> sumOfInverseDivisors(6, 12)\n * 2\n * >>> sumOfInverseDivisors(9, 13)\n * 1.44\n * >>> sumOfInverseDivisors(1, 4)\n * 4\n */\nfunc sumOfInverseDivisors(n : Int, sum : Int) -> Double {\n    var sumOfInverseDivisors = 0.0\n    var sumOfDivisors = 0.0\n    var divisors = 0.0\n    var i = 1\n    while i <= n {\n        if n % i == 0 {\n            divisors += 1\n            sumOfDivisors += i\n        }\n        i += 1\n    }\n    sumOfInverseDivisors = sumOfDivisors / divisors\n    return sumOfInverseDivisors\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of divisors.\n *\n * >>> sumOfDivisors(6, 12)\n * 6\n * >>> sumOfDivisors(9, 13)\n * 10\n * >>> sumOfDivisors(1, 4)\n * 1\n */\nfunc sumOfDivisors(n : Int, sum : Int) -> Double {\n    var sumOfDivisors = 0.0\n    var sumOfInverseDivisors = 0.0\n    var divisors = 0.0\n    var i = 1\n    while i <= n {\n        if n % i == 0 {\n            divisors += 1\n            sumOfDivisors += i\n        }\n        i += 1\n    }\n    sumOfInverseDivisors = sumOfDivisors / divisors\n    return sumOfDivisors\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of divisors.\n *\n * >>> sumOfDivisors(6, 12)\n * 6\n * >>> sumOfDivisors(9, 13)"}
{"task_id": "MBSWP/852", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove negative numbers from a list.\n *\n * >>> removeNegs([1, -2, 3, -4])\n * [1, 3]\n * >>> removeNegs([1, 2, 3, -4])\n * [1, 2, 3]\n * >>> removeNegs([4, 5, -6, 7, -8])\n * [4, 5, 7]\n */\nfunc removeNegs(numList : [Int]) -> [Int] {\n    var result = [Int]()\n    for num in numList {\n        if num >= 0 {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove all the vowels from a string.\n *\n * >>> removeVowels(\"Hello World!\")\n * \"Hll Wrld!\"\n * >>> removeVowels(\"Hello World!\")\n * \"Hll Wrld!\"\n * >>> removeVowels(\"Hello World!\")\n * \"Hll Wrld!\"\n */\nfunc removeVowels(str : String) -> String {\n    var result = [String]()\n    for char in str {\n        if char != \"a\" && char != \"e\" && char != \"i\" && char != \"o\" && char != \"u\" {\n            result.append(char)\n        }\n    }\n    return result.joined(separator: \"\")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to remove all the vowels from a string.\n *\n * >>> removeVowels(\"Hello World!\")\n * \"Hll Wrld!\"\n * >>> removeVowels(\"Hello World!\")\n * \"Hll Wrld!\"\n * >>> removeVowels(\"Hello World!\")\n * \"Hll Wrld!\"\n */\nfunc removeVowels(str : String) -> String {\n    var result = [String]()\n    for char in str {\n        if char != \"a\" && char != \"e\" && char != \"i\""}
{"task_id": "MBSWP/853", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find sum of odd factors of a number.\n *\n * >>> sumOfOddFactors(30)\n * 24\n * >>> sumOfOddFactors(18)\n * 13\n * >>> sumOfOddFactors(2)\n * 1\n */\nfunc sumOfOddFactors(n : Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        if i % 2 == 1 {\n            sum += i\n        }\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/854", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n *\n * >>> rawHeap([25, 44, 68, 21, 39, 23, 89])\n * [21, 25, 23, 44, 39, 68, 89]\n * >>> rawHeap([25, 35, 22, 85, 14, 65, 75, 25, 58])\n * [14, 25, 22, 25, 35, 65, 75, 85, 58]\n * >>> rawHeap([4, 5, 6, 2])\n * [2, 4, 6, 5]\n */\nfunc rawHeap(rawheap : [Int]) -> [Int] {\n    var heap = rawheap\n    var i = (heap.count - 1) / 2\n    while i >= 0 {\n        heapify(heap, i)\n        i -= 1\n    }\n    return heap\n}\n\n/**\n * >>> heapify([25, 44, 68, 21, 39, 23, 89], 0)\n * [21, 25, 23, 44, 39, 68, 89]\n * >>> heapify([25, 35, 22, 85, 14, 65, 75, 25, 58], 0)\n * [14, 25, 22, 25, 35, 65, 75, 85, 58]\n * >>> heapify([4, 5, 6, 2], 0)\n * [2, 4, 6, 5]\n */\nfunc heapify(heap : [Int], i : Int) -> [Int] {\n    var largest = i\n    var left = 2 * i + 1\n    var right = 2 * i + 2\n    if left < heap.count && heap[left] > heap[largest] {\n        largest = left\n    }\n    if right < heap.count && heap[right] > heap[largest] {\n        largest = right\n    }\n    if largest != i {\n        swap(&heap[i], &heap[largest])\n        heapify(heap, largest)\n    }\n    return heap\n}\n\n/**\n * >>> swap(&[25, 44, 68, 21, 39, 23, 89], &[21, 25,"}
{"task_id": "MBSWP/855", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check for even parity of a given number.\n *\n * >>> checkEvenParity(10)\n * true\n * >>> checkEvenParity(11)\n * false\n * >>> checkEvenParity(18)\n * true\n */\nfunc checkEvenParity(x : Int) -> Bool {\n    var parity = false\n    var i = x\n    while i > 0 {\n        if i % 2 == 0 {\n            parity = !parity\n        }\n        i = i / 2\n    }\n    return parity\n}\n"}
{"task_id": "MBSWP/856", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find minimum adjacent swaps required to sort binary array.\n *\n * >>> findMinSwaps([1, 0, 1, 0], 4)\n * 3\n * >>> findMinSwaps([0, 1, 0], 3)\n * 1\n * >>> findMinSwaps([0, 0, 1, 1, 0], 5)\n * 2\n */\nfunc findMinSwaps(arr : [Int], n : Int) -> Int {\n    var arr = arr\n    var swaps = 0\n    var i = 0\n    while i < n {\n        if arr[i] == 0 {\n            var j = i + 1\n            while j < n && arr[j] == 0 {\n                j += 1\n            }\n            if j < n {\n                arr[i], arr[j] = arr[j], arr[i]\n                swaps += 1\n            }\n        }\n        i += 1\n    }\n    return swaps\n}\n"}
{"task_id": "MBSWP/857", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to list out the list of given strings individually using map function.\n *\n * >>> listifyList([\"Red\", \"Blue\", \"Black\", \"White\", \"Pink\"])\n * [[\"R\", \"e\", \"d\"], [\"B\", \"l\", \"u\", \"e\"], [\"B\", \"l\", \"a\", \"c\", \"k\"], [\"W\", \"h\", \"i\", \"t\", \"e\"], [\"P\", \"i\", \"n\", \"k\"]]\n * >>> listifyList([\"python\"])\n * [[\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"]]\n * >>> listifyList([\" red \", \"green\", \" black\", \"blue \", \" orange\", \"brown\"])\n * [[\" \", \"r\", \"e\", \"d\", \" \"], [\"g\", \"r\", \"e\", \"e\", \"n\"], [\" \", \"b\", \"l\", \"a\", \"c\", \"k\"], [\"b\", \"l\", \"u\", \"e\", \" \"], [\" \", \"o\", \"r\", \"a\", \"n\", \"g\", \"e\"], [\"b\", \"r\", \"o\", \"w\", \"n\"]]\n */\nfunc listifyList(list1 : [String]) -> [[String]] {\n    var list2 : [[String]] = []\n    for i in 0..<list1.count {\n        var list3 : [String] = []\n        for j in 0..<list1[i].count {\n            list3.append(list1[i][j])\n        }\n        list2.append(list3)\n    }\n    return list2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to list out the list of given strings individually using map function.\n *\n * >>> listifyList([\"Red\", \"Blue\", \"Black\", \"White\", \"Pink\"])\n * [[\"R\", \"e\", \"d\"], [\"B\", \"l\", \"u\", \"e\"], [\"B\", \"l\", \"a\", \"c\", \"k\"], [\"W\", \"h\", \"i\", \"t\", \"e\"], [\"P\", \""}
{"task_id": "MBSWP/858", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count number of lists in a given list of lists and square the count.\n *\n * >>> countList([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n * 25\n * >>> countList([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n * 16\n * >>> countList([[2, 4], [[6, 8], [4, 5, 8]], [10, 12, 14]])\n * 9\n */\nfunc countList(inputList : [[AnyHashable]]) -> Int {\n    var count = 0\n    for list in inputList {\n        count += list.count\n    }\n    return count * count\n}\n"}
{"task_id": "MBSWP/859", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to generate all sublists of a given list.\n *\n * >>> subLists([10, 20, 30, 40])\n * [[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\n * >>> subLists([\"X\", \"Y\", \"Z\"])\n * [[], [\"X\"], [\"Y\"], [\"Z\"], [\"X\", \"Y\"], [\"X\", \"Z\"], [\"Y\", \"Z\"], [\"X\", \"Y\", \"Z\"]]\n * >>> subLists([1, 2, 3])\n * [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n */\nfunc subLists(myList : [AnyHashable]) -> [[AnyHashable]] {\n    var result : [[AnyHashable]] = []\n    if myList.count == 0 {\n        return result\n    }\n    for i in 0..<myList.count {\n        let subList = myList[i..<myList.count]\n        result.append(subList)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to generate all permutations of a given list.\n *\n * >>> permutations([10, 20, 30, 40])\n * [[10, 20, 30, 40], [10, 20, 40, 30], [10, 30, 20, 40], [10, 30, 40, 20], [10, 40, 20, 30], [10, 40, 30, 20], [20, 10, 30, 40], [20, 10, 40, 30], [20, 30, 10, 40], [20, 30, 40, 10], [20, 40, 10, 30], [20, 40, 30, 10], [30, 10, 20, 40], [30, 10,"}
{"task_id": "MBSWP/860", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\n *\n * >>> checkAlphanumeric(\"dawood@\")\n * \"Discard\"\n * >>> checkAlphanumeric(\"skdmsam326\")\n * \"Accept\"\n * >>> checkAlphanumeric(\"cooltricks@\")\n * \"Discard\"\n */\nfunc checkAlphanumeric(string : String) -> String {\n    let alphanumeric = \"[a-zA-Z0-9]\"\n    let regex = NSRegularExpression(pattern: alphanumeric, options: [])\n    let range = NSMakeRange(string.characters.count - 1, 1)\n    let match = regex.firstMatchInString(string, options: [], range: range)\n    if match == nil {\n        return \"Discard\"\n    }\n    return \"Accept\"\n}\n"}
{"task_id": "MBSWP/861", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find all anagrams of a string in a given list of strings using lambda function.\n *\n * >>> anagramLambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"], \"abcd\")\n * [\"bcda\", \"cbda\", \"adcb\"]\n * >>> anagramLambda([\"recitals\", \" python\"], \"articles\")\n * [\"recitals\"]\n * >>> anagramLambda([\" keep\", \" abcdef\", \" xyz\"], \" peek\")\n * [\" keep\"]\n */\nfunc anagramLambda(texts : [String], str : String) -> [String] {\n    var result : [String] = []\n    for text in texts {\n        if text.count == str.count {\n            var count : [Int] = []\n            for ch in str {\n                if let index = text.index(text.startIndex, offsetBy: ch.unicodeScalarValue) {\n                    if let count = count.first(where: { $0 == ch.unicodeScalarValue }) {\n                        count[count.index(count.startIndex, offsetBy: index)] += 1\n                    } else {\n                        count.append(1)\n                        count.append(ch.unicodeScalarValue)\n                    }\n                }\n            }\n            if count.count == text.count {\n                var count2 : [Int] = []\n                for ch in text {\n                    if let index = count.first(where: { $0 == ch.unicodeScalarValue }) {\n                        if let count = count2.first(where: { $0 == ch.unicodeScalarValue }) {\n                            count[count.index(count.startIndex, offsetBy: index)] += 1\n                        } else {\n                            count2.append(1)\n                            count2.append(ch.unicodeScalarValue)\n                        }\n                    }\n                }\n                if count2.count == count.count {\n                    var count3 : [Int] = []\n                    for ch in count {\n                        if let index = count2.first(where: { $"}
{"task_id": "MBSWP/862", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the occurrences of n most common words in a given text.\n *\n * >>> nCommonWords(\"python is a programming language\", 1)\n * [[\"python\", 1]]\n * >>> nCommonWords(\"python is a programming language\", 1)\n * [[\"python\", 1]]\n * >>> nCommonWords(\"python is a programming language\", 5)\n * [[\"python\", 1], [\"is\", 1], [\"a\", 1], [\"programming\", 1], [\"language\", 1]]\n */\nfunc nCommonWords(text : String, n : Int) -> [[AnyHashable]] {\n    var words = text.components(separatedBy: .whitespacesAndNewlines)\n    var wordCounts = [String: Int]()\n    for word in words {\n        if let count = wordCounts[word] {\n            wordCounts[word] = count + 1\n        } else {\n            wordCounts[word] = 1\n        }\n    }\n    var sortedWords = wordCounts.sorted { $0.value > $1.value }\n    return sortedWords.prefix(n)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the occurrences of n most common words in a given text.\n *\n * >>> nCommonWords(\"python is a programming language\", 1)\n * [[\"python\", 1]]\n * >>> nCommonWords(\"python is a programming language\", 1)\n * [[\"python\", 1]]\n * >>> nCommonWords(\"python is a programming language\", 5)\n * [[\"python\", 1], [\"is\", 1], [\"a\", 1], [\"programming\", 1], [\"language\", 1]]\n */\nfunc nCommonWords(text : String, n : Int) -> [[AnyHashable]] {\n    var words = text.components(separatedBy: .whitespacesAndNewlines)\n    var wordCounts = [String: Int]()\n    for word in words {\n        if let count = wordCounts[word] {\n            wordCounts[word] = count + 1\n        } else {\n            wordCounts[word] = 1\n        }"}
{"task_id": "MBSWP/863", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\n *\n * >>> findLongestConseqSubseq([1, 2, 2, 3], 4)\n * 3\n * >>> findLongestConseqSubseq([1, 9, 3, 10, 4, 20, 2], 7)\n * 4\n * >>> findLongestConseqSubseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11)\n * 5\n */\nfunc findLongestConseqSubseq(arr : [Int], n : Int) -> Int {\n    var dp = Array(repeating: 0, count: n)\n    var max = 0\n    for i in arr {\n        dp[i-1] += 1\n        max = max(max, dp[i-1])\n    }\n    return max\n}\n"}
{"task_id": "MBSWP/864", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find palindromes in a given list of strings using lambda function.\n *\n * >>> palindromeLambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])\n * [\"php\", \"aaa\"]\n * >>> palindromeLambda([\"abcd\", \"Python\", \"abba\", \"aba\"])\n * [\"abba\", \"aba\"]\n * >>> palindromeLambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])\n * [\"abbccbba\", \"abba\", \"aba\"]\n */\nfunc palindromeLambda(texts : [String]) -> [String] {\n    return texts.filter {\n        let reversed = String(describing: $0).reversed()\n        return reversed == $0\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find palindromes in a given list of strings using filter.\n *\n * >>> palindromeFilter([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])\n * [\"php\", \"aaa\"]\n * >>> palindromeFilter([\"abcd\", \"Python\", \"abba\", \"aba\"])\n * [\"abba\", \"aba\"]\n * >>> palindromeFilter([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])\n * [\"abbccbba\", \"abba\", \"aba\"]\n */\nfunc palindromeFilter(texts : [String]) -> [String] {\n    return texts.filter {\n        let reversed = String(describing: $0).reversed()\n        return reversed == $0\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find palindromes in a given list of strings using map.\n *\n * >>> palindromeMap([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])\n * [\"php\", \"aaa\"]\n * >>> palindromeMap([\"abcd\", \"Python\", \"abba\", \"aba\"])\n *"}
{"task_id": "MBSWP/865", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print n-times a list using map function.\n *\n * >>> ntimesList([1, 2, 3, 4, 5, 6, 7], 3)\n * [3, 6, 9, 12, 15, 18, 21]\n * >>> ntimesList([1, 2, 3, 4, 5, 6, 7], 4)\n * [4, 8, 12, 16, 20, 24, 28]\n * >>> ntimesList([1, 2, 3, 4, 5, 6, 7], 10)\n * [10, 20, 30, 40, 50, 60, 70]\n */\nfunc ntimesList(nums : [Int], n : Int) -> [Int] {\n    return nums.map { $0 * n }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print n-times a string using map function.\n *\n * >>> ntimesString(\"Hello\", 3)\n * \"HelloHelloHello\"\n * >>> ntimesString(\"Hello\", 4)\n * \"HelloHelloHelloHello\"\n * >>> ntimesString(\"Hello\", 10)\n * \"HelloHelloHelloHelloHelloHelloHelloHelloHello\"\n */\nfunc ntimesString(str : String, n : Int) -> String {\n    return str.repeated(n)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print n-times a number using map function.\n *\n * >>> ntimesNumber(1, 3)\n * [3, 3, 3]\n * >>> ntimesNumber(1, 4)\n * [4, 4, 4, 4]\n * >>> ntimesNumber(1, 10)\n * [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n */\nfunc ntimesNumber(num : Int, n : Int) -> [Int] {\n    return Array(num...num).map { $0 * n }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print n-times a list using reduce function.\n *\n"}
{"task_id": "MBSWP/866", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month name contains 31 days or not.\n *\n * >>> checkMonthnumb(\"February\")\n * false\n * >>> checkMonthnumb(\"January\")\n * true\n * >>> checkMonthnumb(\"March\")\n * true\n */\nfunc checkMonthnumb(monthname2 : String) -> Bool {\n    let monthname = monthname2.lowercased()\n    let monthnumb = monthname.count\n    if monthnumb == 3 {\n        if monthname == \"january\" || monthname == \"february\" || monthname == \"march\" {\n            return true\n        }\n    }\n    return false\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month name contains 31 days or not.\n *\n * >>> checkMonthnumb(\"February\")\n * false\n * >>> checkMonthnumb(\"January\")\n * true\n * >>> checkMonthnumb(\"March\")\n * true\n */\nfunc checkMonthnumb(monthname2 : String) -> Bool {\n    let monthname = monthname2.lowercased()\n    let monthnumb = monthname.count\n    if monthnumb == 3 {\n        if monthname == \"january\" || monthname == \"february\" || monthname == \"march\" {\n            return true\n        }\n    }\n    return false\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check whether the given month name contains 31 days or not.\n *\n * >>> checkMonthnumb(\"February\")\n * false\n * >>> checkMonthnumb(\"January\")\n * true\n * >>> checkMonthnumb(\"March\")\n * true\n */\nfunc checkMonthnumb(monthname2 : String) -> Bool {\n    let monthname = monthname2.lowercased()\n    let monthnumb = monthname.count\n    if monthnumb == 3 {\n        if monthname == \"january\" || monthname == \"february\" || monthname == \"march\" {\n            return true\n"}
{"task_id": "MBSWP/867", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to add a minimum number such that the sum of array becomes even.\n *\n * >>> minNum([1, 2, 3, 4, 5, 6, 7, 8, 9], 9)\n * 1\n * >>> minNum([1, 2, 3, 4, 5, 6, 7, 8], 8)\n * 2\n * >>> minNum([1, 2, 3], 3)\n * 2\n */\nfunc minNum(arr : [Int], n : Int) -> Int {\n    var sum = 0\n    var min = 0\n    for i in arr {\n        sum += i\n    }\n    if sum % 2 == 0 {\n        return sum / 2\n    }\n    for i in arr {\n        if i % 2 == 1 {\n            min += i\n        }\n    }\n    return min\n}\n"}
{"task_id": "MBSWP/868", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the length of the last word in a given string.\n *\n * >>> lengthOfLastWord(\"python language\")\n * 8\n * >>> lengthOfLastWord(\"PHP\")\n * 3\n * >>> lengthOfLastWord(\"\")\n * 0\n */\nfunc lengthOfLastWord(a : String) -> Int {\n    var lastWordLength = 0\n    var lastWordStart = 0\n    for (index, character) in a.characters.enumerated() {\n        if character == \" \" {\n            lastWordLength = index - lastWordStart\n            lastWordStart = index + 1\n        }\n    }\n    return lastWordLength\n}\n\n// Test\nassert(lengthOfLastWord(\"python language\") == 8)\nassert(lengthOfLastWord(\"PHP\") == 3)\nassert(lengthOfLastWord(\"\") == 0)\n"}
{"task_id": "MBSWP/869", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove sublists from a given list of lists, which are outside a given range.\n *\n * >>> removeListRange([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 13, 17)\n * [[13, 14, 15, 17]]\n * >>> removeListRange([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 1, 3)\n * [[2], [1, 2, 3]]\n * >>> removeListRange([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 0, 7)\n * [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]\n */\nfunc removeListRange(list1 : [[Int]], leftrange : Int, rigthrange : Int) -> [[Int]] {\n    var list2 : [[Int]] = []\n    for i in list1 {\n        if i[0] >= leftrange && i[0] <= rigthrange {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove sublists from a given list of lists, which are outside a given range.\n *\n * >>> removeListRange([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 13, 17)\n * [[13, 14, 15, 17]]\n * >>> removeListRange([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 1, 3)\n * [[2], [1, 2, 3]]"}
{"task_id": "MBSWP/870", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\n *\n * >>> sumPositivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n * 48\n * >>> sumPositivenum([10, 15, -14, 13, -18, 12, -20])\n * 50\n * >>> sumPositivenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190])\n * 522\n */\nfunc sumPositivenum(nums : [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        if num > 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of the positive numbers of a given list of numbers using closure.\n *\n * >>> sumPositivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n * 48\n * >>> sumPositivenum([10, 15, -14, 13, -18, 12, -20])\n * 50\n * >>> sumPositivenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190])\n * 522\n */\nfunc sumPositivenum(nums : [Int]) -> Int {\n    var sum = 0\n    for num in nums {\n        if num > 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of the positive numbers of a given list of numbers using map.\n *\n * >>> sumPositivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n * 48\n * >>> sumPositivenum([10, 15, -14, 13, -18, 12, -20])\n * 50\n * >>> sumPositiven"}
{"task_id": "MBSWP/871", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given strings are rotations of each other or not.\n *\n * >>> areRotations(\"abc\", \"cba\")\n * false\n * >>> areRotations(\"abcd\", \"cdba\")\n * false\n * >>> areRotations(\"abacd\", \"cdaba\")\n * true\n */\nfunc areRotations(string1 : String, string2 : String) -> Bool {\n    if string1.count != string2.count {\n        return false\n    }\n    let string1Array = string1.characters.map { $0 }\n    let string2Array = string2.characters.map { $0 }\n    let string1ArrayCount = string1Array.count\n    let string2ArrayCount = string2Array.count\n    let string1ArrayCountHalf = string1ArrayCount / 2\n    let string2ArrayCountHalf = string2ArrayCount / 2\n    let string1ArrayHalf = string1Array[0..<string1ArrayCountHalf]\n    let string2ArrayHalf = string2Array[0..<string2ArrayCountHalf]\n    let string1ArrayHalfCount = string1ArrayHalf.count\n    let string2ArrayHalfCount = string2ArrayHalf.count\n    let string1ArrayHalfCountHalf = string1ArrayHalfCount / 2\n    let string2ArrayHalfCountHalf = string2ArrayHalfCount / 2\n    let string1ArrayHalfHalf = string1ArrayHalf[0..<string1ArrayHalfCountHalf]\n    let string2ArrayHalfHalf = string2ArrayHalf[0..<string2ArrayHalfCountHalf]\n    let string1ArrayHalfHalfCount = string1ArrayHalfHalf.count\n    let string2ArrayHalfHalfCount = string2ArrayHalfHalf.count\n    let string1ArrayHalfHalfCountHalf = string1ArrayHalfHalfCount / 2\n    let string2ArrayHalfHalfCountHalf = string2ArrayHalfHalfCount / 2\n    let string1ArrayHalfHalfHalf = string1ArrayHalfHalf[0..<string1ArrayHalfHalfCountHalf]\n    let string2ArrayHalfHalfHalf = string2ArrayHalfHalf[0..<string2ArrayHalfHalfCountHalf]\n    let string1ArrayHalf"}
{"task_id": "MBSWP/872", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if a nested list is a subset of another nested list.\n *\n * >>> checkSubset([[1, 3], [5, 7], [9, 11], [13, 15, 17]], [[1, 3], [13, 15, 17]])\n * true\n * >>> checkSubset([[1, 2], [2, 3], [3, 4], [5, 6]], [[3, 4], [5, 6]])\n * true\n * >>> checkSubset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]], [[[3, 4], [5, 6]]])\n * false\n */\nfunc checkSubset(list1 : [[AnyHashable]], list2 : [[AnyHashable]]) -> Bool {\n    var list1Copy = list1\n    var list2Copy = list2\n    var list1CopyIndex = 0\n    var list2CopyIndex = 0\n    var list1CopyLength = list1Copy.count\n    var list2CopyLength = list2Copy.count\n    var list1CopyElement : [AnyHashable]\n    var list2CopyElement : [AnyHashable]\n    var list1CopyElementLength : Int\n    var list2CopyElementLength : Int\n    var list1CopyElementIndex : Int\n    var list2CopyElementIndex : Int\n    var list1CopyElementElement : AnyHashable\n    var list2CopyElementElement : AnyHashable\n    var list1CopyElementElementLength : Int\n    var list2CopyElementElementLength : Int\n    var list1CopyElementElementIndex : Int\n    var list2CopyElementElementIndex : Int\n    var list1CopyElementElementElement : AnyHashable\n    var list2CopyElementElementElement : AnyHashable\n    var list1CopyElementElementElementLength : Int\n    var list2CopyElementElementElementLength : Int\n    var list1CopyElementElementElementIndex : Int\n    var list2CopyElementElementElementIndex : Int\n    var list1CopyElementElementElementElement : AnyHashable\n    var list2CopyElementElementElementElement : AnyHashable\n    var list1CopyElementElementElementElementLength : Int\n"}
{"task_id": "MBSWP/873", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to solve the fibonacci sequence using recursion.\n *\n * >>> fibonacci(7)\n * 13\n * >>> fibonacci(8)\n * 21\n * >>> fibonacci(9)\n * 34\n */\nfunc fibonacci(n : Int) -> Int {\n    if n <= 1 {\n        return n\n    }\n    return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to solve the fibonacci sequence using iteration.\n *\n * >>> fibonacciIteration(7)\n * 13\n * >>> fibonacciIteration(8)\n * 21\n * >>> fibonacciIteration(9)\n * 34\n */\nfunc fibonacciIteration(n : Int) -> Int {\n    var a = 0\n    var b = 1\n    var c = 0\n    for i in 1...n {\n        c = a + b\n        a = b\n        b = c\n    }\n    return c\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to solve the factorial sequence using recursion.\n *\n * >>> factorial(5)\n * 120\n * >>> factorial(6)\n * 720\n * >>> factorial(7)\n * 5040\n */\nfunc factorial(n : Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    return n * factorial(n - 1)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to solve the factorial sequence using iteration.\n *\n * >>> factorialIteration(5)\n * 120\n * >>> factorialIteration(6)\n * 720\n * >>> factorialIteration(7)\n * 5040\n */\nfunc factorialIteration(n : Int) -> Int {\n    var a = 1\n    var b = 1\n    var c = 0\n    for i in 1...n {\n        c = a * b\n        a = b"}
{"task_id": "MBSWP/874", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if the string is a concatenation of another string.\n *\n * >>> checkConcat(\"abcabcabc\", \"abc\")\n * true\n * >>> checkConcat(\"abcab\", \"abc\")\n * false\n * >>> checkConcat(\"aba\", \"ab\")\n * false\n */\nfunc checkConcat(str1 : String, str2 : String) -> Bool {\n    if str1.count < str2.count {\n        return false\n    }\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            return false\n        }\n        i += 1\n    }\n    return true\n}\n"}
{"task_id": "MBSWP/875", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum difference in the tuple pairs of given tuples.\n *\n * >>> minDifference([[3, 5], [1, 7], [10, 3], [1, 2]])\n * 1\n * >>> minDifference([[4, 6], [12, 8], [11, 4], [2, 13]])\n * 2\n * >>> minDifference([[5, 17], [3, 9], [12, 5], [3, 24]])\n * 6\n */\nfunc minDifference(testList : [[Int]]) -> Int {\n    var minDiff = Int.max\n    for i in 0..<testList.count {\n        for j in i+1..<testList.count {\n            let diff = abs(testList[i][0] - testList[j][0]) + abs(testList[i][1] - testList[j][1])\n            if diff < minDiff {\n                minDiff = diff\n            }\n        }\n    }\n    return minDiff\n}\n"}
{"task_id": "MBSWP/876", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find lcm of two positive integers.\n *\n * >>> lcm(4, 6)\n * 12\n * >>> lcm(15, 17)\n * 255\n * >>> lcm(2, 6)\n * 6\n */\nfunc lcm(x : Int, y : Int) -> Int {\n    return x * y / gcd(x, y)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find gcd of two positive integers.\n *\n * >>> gcd(4, 6)\n * 2\n * >>> gcd(15, 17)\n * 1\n * >>> gcd(2, 6)\n * 2\n */\nfunc gcd(x : Int, y : Int) -> Int {\n    if y == 0 {\n        return x\n    }\n    return gcd(y, x % y)\n}\n"}
{"task_id": "MBSWP/877", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to sort the given string.\n *\n * >>> sortString(\"cba\")\n * \"abc\"\n * >>> sortString(\"data\")\n * \"aadt\"\n * >>> sortString(\"zxy\")\n * \"xyz\"\n */\nfunc sortString(str : String) -> String {\n    var sorted = str\n    sorted.sort()\n    return sorted\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to sort the given array.\n *\n * >>> sortArray([3, 2, 1])\n * [1, 2, 3]\n * >>> sortArray([5, 4, 3, 2, 1])\n * [1, 2, 3, 4, 5]\n */\nfunc sortArray(arr : [Int]) -> [Int] {\n    var sorted = arr\n    sorted.sort()\n    return sorted\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to sort the given dictionary.\n *\n * >>> sortDict([\"a\": 1, \"b\": 2, \"c\": 3])\n * [\"a\": 1, \"b\": 2, \"c\": 3]\n * >>> sortDict([\"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7])\n * [\"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7]\n */\nfunc sortDict(dict : [String : Int]) -> [String : Int] {\n    var sorted = dict\n    sorted.sort()\n    return sorted\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to sort the given array of dictionaries.\n *\n * >>> sortArrayOfDicts([[\"a\": 1, \"b\": 2, \"c\": 3], [\"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7]])\n * [[\"a\": 1, \"b\": 2, \"c\": 3], [\"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7]]\n * >>> sortArrayOfD"}
{"task_id": "MBSWP/878", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if the given tuple contains only k elements.\n *\n * >>> checkTuples([3, 5, 6, 5, 3, 6], [3, 6, 5])\n * true\n * >>> checkTuples([4, 5, 6, 4, 6, 5], [4, 5, 6])\n * true\n * >>> checkTuples([9, 8, 7, 6, 8, 9], [9, 8, 1])\n * false\n */\nfunc checkTuples(testTuple : [Int], k : [Int]) -> Bool {\n    var count = 0\n    for i in k {\n        if testTuple.contains(i) {\n            count += 1\n        }\n    }\n    return count == k.count\n}\n"}
{"task_id": "MBSWP/879", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\n *\n * >>> textMatch(\"aabbbbd\")\n * \"Not matched!\"\n * >>> textMatch(\"aabAbbbc\")\n * \"Not matched!\"\n * >>> textMatch(\"accddbbjjjb\")\n * \"Found a match!\"\n */\nfunc textMatch(text : String) -> String {\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\"\n    let regex = \"a(.*)b\""}
{"task_id": "MBSWP/880", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find number of solutions in quadratic equation.\n *\n * >>> checkSolution(2, 5, 2)\n * \"2 solutions\"\n * >>> checkSolution(1, 1, 1)\n * \"No solutions\"\n * >>> checkSolution(1, 2, 1)\n * \"1 solution\"\n */\nfunc checkSolution(a : Int, b : Int, c : Int) -> String {\n    let discriminant = b * b - 4 * a * c\n    if discriminant > 0 {\n        return \"\\(discriminant) solutions\"\n    } else if discriminant == 0 {\n        return \"1 solution\"\n    } else {\n        return \"No solutions\"\n    }\n}\n"}
{"task_id": "MBSWP/881", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of first even and odd number of a given list.\n *\n * >>> sumEvenOdd([1, 3, 5, 7, 4, 1, 6, 8])\n * 5\n * >>> sumEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * 3\n * >>> sumEvenOdd([1, 5, 7, 9, 10])\n * 11\n */\nfunc sumEvenOdd(list1 : [Int]) -> Int {\n    var sum = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of first even and odd number of a given list.\n *\n * >>> sumEvenOdd([1, 3, 5, 7, 4, 1, 6, 8])\n * 5\n * >>> sumEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * 3\n * >>> sumEvenOdd([1, 5, 7, 9, 10])\n * 11\n */\nfunc sumEvenOdd(list1 : [Int]) -> Int {\n    var sum = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of first even and odd number of a given list.\n *\n * >>> sumEvenOdd([1, 3, 5, 7, 4, 1, 6, 8])\n * 5\n * >>> sumEvenOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n * 3\n * >>> sumEvenOdd([1, 5, 7, 9, 10])\n * 11\n */\nfunc sumEvenOdd(list1 : [Int]) -> Int {\n    var sum = 0\n    for i in list1 {\n        if i % 2"}
{"task_id": "MBSWP/882", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate perimeter of a parallelogram.\n *\n * >>> parallelogramPerimeter(10, 20)\n * 400\n * >>> parallelogramPerimeter(15, 20)\n * 600\n * >>> parallelogramPerimeter(8, 9)\n * 144\n */\nfunc parallelogramPerimeter(b : Int, h : Int) -> Int {\n    return 2 * (b + h)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate area of a parallelogram.\n *\n * >>> parallelogramArea(10, 20)\n * 200\n * >>> parallelogramArea(15, 20)\n * 300\n * >>> parallelogramArea(8, 9)\n * 72\n */\nfunc parallelogramArea(b : Int, h : Int) -> Int {\n    return b * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate perimeter of a triangle.\n *\n * >>> trianglePerimeter(10, 20)\n * 30\n * >>> trianglePerimeter(15, 20)\n * 60\n * >>> trianglePerimeter(8, 9)\n * 18\n */\nfunc trianglePerimeter(b : Int, h : Int) -> Int {\n    return 2 * (b + h)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate area of a triangle.\n *\n * >>> triangleArea(10, 20)\n * 200\n * >>> triangleArea(15, 20)\n * 300\n * >>> triangleArea(8, 9)\n * 72\n */\nfunc triangleArea(b : Int, h : Int) -> Int {\n    return b * h\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to caluclate perimeter of a circle.\n *\n * >>> circlePerimeter(10)\n * 314\n * >>> circlePerimeter(15)\n * 628\n * >>> circlePerimeter(8)\n * 314\n */\nfunc circlePer"}
{"task_id": "MBSWP/883", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\n *\n * >>> divOfNums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 2, 4)\n * [152, 44]\n * >>> divOfNums([1, 2, 3, 5, 7, 8, 10], 2, 5)\n * [10]\n * >>> divOfNums([10, 15, 14, 13, 18, 12, 20], 10, 5)\n * [10, 20]\n */\nfunc divOfNums(nums : [Int], m : Int, n : Int) -> [Int] {\n    return nums.filter({ (num) -> Bool in\n        return num % m == 0 && num % n == 0\n    })\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of all the numbers divisible by m and n from a list of numbers using lambda function.\n *\n * >>> divOfSum([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 2, 4)\n * 639\n * >>> divOfSum([1, 2, 3, 5, 7, 8, 10], 2, 5)\n * 10\n * >>> divOfSum([10, 15, 14, 13, 18, 12, 20], 10, 5)\n * 30\n */\nfunc divOfSum(nums : [Int], m : Int, n : Int) -> Int {\n    return nums.reduce(0, { (sum, num) -> Int in\n        return sum + num\n    }) / (m * n)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sum of all the numbers divisible by m and n from a list of numbers using lambda function.\n *\n * >>> divOfSum([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 2, 4)\n * 639\n * >>> divOfSum([1, 2, 3, 5, 7"}
{"task_id": "MBSWP/884", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether all the bits are within a given range or not.\n *\n * >>> allBitsSetInTheGivenRange(10, 2, 1)\n * true\n * >>> allBitsSetInTheGivenRange(5, 2, 4)\n * false\n * >>> allBitsSetInTheGivenRange(22, 2, 3)\n * true\n */\nfunc allBitsSetInTheGivenRange(n : Int, l : Int, r : Int) -> Bool {\n    var n = n\n    var l = l\n    var r = r\n    var count = 0\n    while n > 0 {\n        if n % 2 == 1 {\n            count += 1\n        }\n        n = n / 2\n    }\n    return count >= l && count <= r\n}\n"}
{"task_id": "MBSWP/885", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the two given strings are isomorphic to each other or not.\n *\n * >>> isIsomorphic(\"paper\", \"title\")\n * true\n * >>> isIsomorphic(\"ab\", \"ba\")\n * true\n * >>> isIsomorphic(\"ab\", \"aa\")\n * false\n */\nfunc isIsomorphic(str1 : String, str2 : String) -> Bool {\n    var map1 = [Character: Character]()\n    var map2 = [Character: Character]()\n    for (i, c1) in str1.characters.enumerated() {\n        let c2 = str2[i]\n        if map1[c1] != c2 || map2[c2] != c1 {\n            return false\n        }\n        map1[c1] = c2\n        map2[c2] = c1\n    }\n    return true\n}\n"}
{"task_id": "MBSWP/886", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to add all the numbers in a list and divide it with the length of the list.\n *\n * >>> sumNum([8, 2, 3, 0, 7])\n * 4.0\n * >>> sumNum([-10, -20, -30])\n * -20.0\n * >>> sumNum([19, 15, 18])\n * 17.333333333333332\n */\nfunc sumNum(numbers : [Int]) -> Double {\n    var sum = 0\n    for number in numbers {\n        sum += number\n    }\n    return sum / Double(numbers.count)\n}\n"}
{"task_id": "MBSWP/887", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given number is odd or not using bitwise operator.\n *\n * >>> isOdd(5)\n * true\n * >>> isOdd(6)\n * false\n * >>> isOdd(7)\n * true\n */\nfunc isOdd(n : Int) -> Bool {\n    return n & 1 == 1\n}\n"}
{"task_id": "MBSWP/888", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to substract the elements of the given nested tuples.\n *\n * >>> substractElements([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n * [[-5, -4], [1, -4], [1, 8], [-6, 7]]\n * >>> substractElements([[13, 4], [14, 6], [13, 10], [12, 11]], [[19, 8], [14, 10], [12, 2], [18, 4]])\n * [[-6, -4], [0, -4], [1, 8], [-6, 7]]\n * >>> substractElements([[19, 5], [18, 7], [19, 11], [17, 12]], [[12, 9], [17, 11], [13, 3], [19, 5]])\n * [[7, -4], [1, -4], [6, 8], [-2, 7]]\n */\nfunc substractElements(testTup1 : [[Int]], testTup2 : [[Int]]) -> [[Int]] {\n    var result : [[Int]] = []\n    for i in 0..<testTup1.count {\n        var temp : [Int] = []\n        for j in 0..<testTup1[i].count {\n            temp.append(testTup1[i][j] - testTup2[i][j])\n        }\n        result.append(temp)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to multiply the elements of the given nested tuples.\n *\n * >>> multiplyElements([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])\n * [[6, 21], [12, 35], [2, 81], [7, 27]]\n * >>> multiplyElements([[13, 4], [14,"}
{"task_id": "MBSWP/889", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reverse each list in a given list of lists.\n *\n * >>> reverseListLists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])\n * [[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\n * >>> reverseListLists([[1, 2], [2, 3], [3, 4]])\n * [[2, 1], [3, 2], [4, 3]]\n * >>> reverseListLists([[10, 20], [30, 40]])\n * [[20, 10], [40, 30]]\n */\nfunc reverseListLists(lists : [[Int]]) -> [[Int]] {\n    var reversedLists = lists\n    for list in lists {\n        reversedLists[lists.index(of: list)] = list.reverse()\n    }\n    return reversedLists\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reverse each string in a given list of strings.\n *\n * >>> reverseListStrings([\"hello\", \"world\", \"!\"])\n * [\"!dlrow\", \"olleh\", \"\"]\n * >>> reverseListStrings([\"hello\", \"world\", \"!\"])\n * [\"!dlrow\", \"olleh\", \"\"]\n * >>> reverseListStrings([\"hello\", \"world\", \"!\"])\n * [\"!dlrow\", \"olleh\", \"\"]\n */\nfunc reverseListStrings(strings : [String]) -> [String] {\n    var reversedStrings = strings\n    for string in strings {\n        reversedStrings[strings.index(of: string)] = string.reverse()\n    }\n    return reversedStrings\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to reverse each character in a given string.\n *\n * >>> reverseString(\"hello\")\n * \"olleh\"\n * >>> reverseString(\"hello\")\n * \"olle"}
{"task_id": "MBSWP/890", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the index of an extra element present in one sorted array.\n *\n * >>> findExtra([1, 2, 3, 4], [1, 2, 3], 3)\n * 3\n * >>> findExtra([2, 4, 6, 8, 10], [2, 4, 6, 8], 4)\n * 4\n * >>> findExtra([1, 3, 5, 7, 9, 11], [1, 3, 5, 7, 9], 5)\n * 5\n */\nfunc findExtra(arr1 : [Int], arr2 : [Int], n : Int) -> Int {\n    var arr1_sorted = arr1\n    var arr2_sorted = arr2\n    var arr1_sorted_index = 0\n    var arr2_sorted_index = 0\n    var arr1_sorted_index_extra = 0\n    var arr2_sorted_index_extra = 0\n    var arr1_sorted_index_extra_found = false\n    var arr2_sorted_index_extra_found = false\n    var arr1_sorted_index_extra_found_value = 0\n    var arr2_sorted_index_extra_found_value = 0\n    var arr1_sorted_index_extra_found_value_found = false\n    var arr2_sorted_index_extra_found_value_found = false\n    var arr1_sorted_index_extra_found_value_found_value = 0\n    var arr2_sorted_index_extra_found_value_found_value = 0\n    var arr1_sorted_index_extra_found_value_found_value_found = false\n    var arr2_sorted_index_extra_found_value_found_value_found = false\n    var arr1_sorted_index_extra_found_value_found_value_found_value = 0\n    var arr2_sorted_index_extra_found_value_found_value_found_value = 0\n    var arr1_sorted_index_extra_found_value_found_value_found_value_found = false\n    var"}
{"task_id": "MBSWP/891", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given two numbers have same number of digits or not.\n *\n * >>> sameLength(12, 1)\n * false\n * >>> sameLength(2, 2)\n * true\n * >>> sameLength(10, 20)\n * true\n */\nfunc sameLength(a : Int, b : Int) -> Bool {\n    let aString = String(a)\n    let bString = String(b)\n    return aString.count == bString.count\n}\n"}
{"task_id": "MBSWP/892", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove multiple spaces in a string.\n *\n * >>> removeSpaces(\"python  program\")\n * \"python program\"\n * >>> removeSpaces(\"python   programming    language\")\n * \"python programming language\"\n * >>> removeSpaces(\"python                     program\")\n * \"python program\"\n */\nfunc removeSpaces(text : String) -> String {\n    return text.replacingOccurrences(of: \"  \", with: \" \")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove multiple spaces in a string.\n *\n * >>> removeSpaces(\"python  program\")\n * \"python program\"\n * >>> removeSpaces(\"python   programming    language\")\n * \"python programming language\"\n * >>> removeSpaces(\"python                     program\")\n * \"python program\"\n */\nfunc removeSpaces(text : String) -> String {\n    return text.replacingOccurrences(of: \"  \", with: \" \")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove multiple spaces in a string.\n *\n * >>> removeSpaces(\"python  program\")\n * \"python program\"\n * >>> removeSpaces(\"python   programming    language\")\n * \"python programming language\"\n * >>> removeSpaces(\"python                     program\")\n * \"python program\"\n */\nfunc removeSpaces(text : String) -> String {\n    return text.replacingOccurrences(of: \"  \", with: \" \")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove multiple spaces in a string.\n *\n * >>> removeSpaces(\"python  program\")\n * \"python program\"\n * >>> removeSpaces(\"python   programming    language\")\n * \"python programming language\"\n * >>> removeSpaces(\"python                     program\")\n * \"python program\"\n */\nfunc removeSpaces(text : String) -> String {\n    return text.replacingOccurrences(of: \"  \", with: \" \")\n}\n\n/**\n * You are an expert Swift"}
{"task_id": "MBSWP/893", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to get the last element of each sublist.\n *\n * >>> extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]])\n * [3, 5, 9]\n * >>> extract([[\"x\", \"y\", \"z\"], [\"m\"], [\"a\", \"b\"], [\"u\", \"v\"]])\n * [\"z\", \"m\", \"b\", \"v\"]\n * >>> extract([[1, 2, 3], [4, 5]])\n * [3, 5]\n */\nfunc extract(lst : [[AnyHashable]]) -> [AnyHashable] {\n    var result = [AnyHashable]()\n    for sublist in lst {\n        result.append(sublist[sublist.count - 1])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to get the last element of each sublist.\n *\n * >>> extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]])\n * [3, 5, 9]\n * >>> extract([[\"x\", \"y\", \"z\"], [\"m\"], [\"a\", \"b\"], [\"u\", \"v\"]])\n * [\"z\", \"m\", \"b\", \"v\"]\n * >>> extract([[1, 2, 3], [4, 5]])\n * [3, 5]\n */\nfunc extract(lst : [[AnyHashable]]) -> [AnyHashable] {\n    var result = [AnyHashable]()\n    for sublist in lst {\n        result.append(sublist[sublist.count - 1])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to get the last element of each sublist.\n *\n * >>> extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]])\n * [3, 5, 9]\n * >>> extract([[\"x\", \"y\", \"z\"], [\"m\"], [\"a\", \"b\"],"}
{"task_id": "MBSWP/894", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given string of float type into tuple.\n *\n * >>> floatToTuple(\"1.2, 1.3, 2.3, 2.4, 6.5\")\n * [1.2, 1.3, 2.3, 2.4, 6.5]\n * >>> floatToTuple(\"2.3, 2.4, 5.6, 5.4, 8.9\")\n * [2.3, 2.4, 5.6, 5.4, 8.9]\n * >>> floatToTuple(\"0.3, 0.5, 7.8, 9.4\")\n * [0.3, 0.5, 7.8, 9.4]\n */\nfunc floatToTuple(testStr : String) -> [Double] {\n    var testArr = [Double]()\n    var testArr2 = [Double]()\n    var testArr3 = [Double]()\n    var testArr4 = [Double]()\n    var testArr5 = [Double]()\n    var testArr6 = [Double]()\n    var testArr7 = [Double]()\n    var testArr8 = [Double]()\n    var testArr9 = [Double]()\n    var testArr10 = [Double]()\n    var testArr11 = [Double]()\n    var testArr12 = [Double]()\n    var testArr13 = [Double]()\n    var testArr14 = [Double]()\n    var testArr15 = [Double]()\n    var testArr16 = [Double]()\n    var testArr17 = [Double]()\n    var testArr18 = [Double]()\n    var testArr19 = [Double]()\n    var testArr20 = [Double]()\n    var testArr21 = [Double]()\n    var testArr22 = [Double]()\n    var testArr23 = [Double]()\n    var testArr24 = [Double]()\n    var testArr25 = [Double]()\n    var testArr26 = [Double]()\n   "}
{"task_id": "MBSWP/895", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\n *\n * >>> maxSumSubseq([1, 2, 9, 4, 5, 0, 4, 11, 6])\n * 26\n * >>> maxSumSubseq([1, 2, 9, 5, 6, 0, 5, 12, 7])\n * 28\n * >>> maxSumSubseq([1, 3, 10, 5, 6, 0, 6, 14, 21])\n * 44\n */\nfunc maxSumSubseq(a : [Int]) -> Int {\n    var maxSum = 0\n    var sum = 0\n    for i in a {\n        sum += i\n        if sum > maxSum {\n            maxSum = sum\n        }\n        if sum < 0 {\n            sum = 0\n        }\n    }\n    return maxSum\n}\n"}
{"task_id": "MBSWP/896", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\n *\n * >>> sortListLast([[2, 5], [1, 2], [4, 4], [2, 3], [2, 1]])\n * [[2, 1], [1, 2], [2, 3], [4, 4], [2, 5]]\n * >>> sortListLast([[9, 8], [4, 7], [3, 5], [7, 9], [1, 2]])\n * [[1, 2], [3, 5], [4, 7], [9, 8], [7, 9]]\n * >>> sortListLast([[20, 50], [10, 20], [40, 40]])\n * [[10, 20], [40, 40], [20, 50]]\n */\nfunc sortListLast(tuples : [[Int]]) -> [[Int]] {\n    var sortedTuples = tuples\n    sortedTuples.sort(by: { (a, b) -> Bool in\n        return a[a.count - 1] < b[b.count - 1]\n    })\n    return sortedTuples\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list in increasing order by the first element in each tuple from a given list of non-empty tuples.\n *\n * >>> sortListFirst([[2, 5], [1, 2], [4, 4], [2, 3], [2, 1]])\n * [[1, 2], [2, 3], [2, 5], [4, 4], [2, 1]]\n * >>> sortListFirst([[9, 8], [4, 7], [3, 5], [7, 9], [1, 2]])\n * [[1, 2], [3, 5], [4, 7], [7, 9], [9, 8]]\n * >>> sortListFirst([[20, 50], [10, 20], [40, 40]])\n * [[10, 20], [20, 50], [40, 40]]\n */\nfunc sortListFirst(tuples : [["}
{"task_id": "MBSWP/897", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the word is present in a given sentence or not.\n *\n * >>> isWordPresent(\"machine learning\", \"machine\")\n * true\n * >>> isWordPresent(\"easy\", \"fun\")\n * false\n * >>> isWordPresent(\"python language\", \"code\")\n * false\n */\nfunc isWordPresent(sentence : String, word : String) -> Bool {\n    let words = sentence.components(separatedBy: \" \")\n    for w in words {\n        if w == word {\n            return true\n        }\n    }\n    return false\n}\n\n// Test\nprint(isWordPresent(\"machine learning\", \"machine\"))\nprint(isWordPresent(\"easy\", \"fun\"))\nprint(isWordPresent(\"python language\", \"code\"))\n"}
{"task_id": "MBSWP/898", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract specified number of elements from a given list, which follow each other continuously.\n *\n * >>> extractElements([1, 1, 3, 4, 4, 5, 6, 7], 2)\n * [1, 4]\n * >>> extractElements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7], 4)\n * [4]\n * >>> extractElements([0, 0, 0, 0, 0], 5)\n * [0]\n */\nfunc extractElements(numbers : [Int], n : Int) -> [Int] {\n    var result = [Int]()\n    var start = 0\n    var end = 0\n    var count = 0\n    while count < n {\n        end = start\n        while end < numbers.count && numbers[end] == numbers[start] {\n            end += 1\n        }\n        result.append(numbers[start])\n        count += 1\n        start = end\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/899", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether an array can be sorted or not by picking only the corner elements.\n *\n * >>> check([3, 2, 1, 2, 3, 4], 6)\n * true\n * >>> check([2, 1, 4, 5, 1], 5)\n * true\n * >>> check([1, 2, 2, 1, 2, 3], 6)\n * true\n */\nfunc check(arr : [Int], n : Int) -> Bool {\n    var arr = arr\n    var n = n\n    var i = 0\n    var j = n - 1\n    while i < j {\n        if arr[i] > arr[j] {\n            return false\n        }\n        i += 1\n        j -= 1\n    }\n    return true\n}\n"}
{"task_id": "MBSWP/900", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function where a string will start with a specific number.\n *\n * >>> matchNum(\"5-2345861\")\n * true\n * >>> matchNum(\"6-2345861\")\n * false\n * >>> matchNum(\"78910\")\n * false\n */\nfunc matchNum(string : String) -> Bool {\n    let regex = \"^[0-9]{3}-[0-9]{6}$\"\n    let regex = try! NSRegularExpression(pattern: regex, options: [])\n    let match = regex.firstMatch(in: string, options: [], range: NSMakeRange(0, string.count))\n    return match != nil\n}\n"}
{"task_id": "MBSWP/901", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the smallest multiple of the first n numbers.\n *\n * >>> smallestMultiple(13)\n * 360360\n * >>> smallestMultiple(2)\n * 2\n * >>> smallestMultiple(1)\n * 1\n */\nfunc smallestMultiple(n : Int) -> Int {\n    var i = 1\n    var j = 1\n    var k = 1\n    var l = 1\n    var m = 1\n    var n = 1\n    var o = 1\n    var p = 1\n    var q = 1\n    var r = 1\n    var s = 1\n    var t = 1\n    var u = 1\n    var v = 1\n    var w = 1\n    var x = 1\n    var y = 1\n    var z = 1\n    var a = 1\n    var b = 1\n    var c = 1\n    var d = 1\n    var e = 1\n    var f = 1\n    var g = 1\n    var h = 1\n    var i = 1\n    var j = 1\n    var k = 1\n    var l = 1\n    var m = 1\n    var n = 1\n    var o = 1\n    var p = 1\n    var q = 1\n    var r = 1\n    var s = 1\n    var t = 1\n    var u = 1\n    var v = 1\n    var w = 1\n    var x = 1\n    var y = 1\n    var z = 1\n    var a = 1\n    var b = 1\n    var c = 1\n    var d = 1\n    var e = 1\n    var f = 1\n    var g = 1\n    var h = 1\n    var i = 1\n    var j = 1\n    var k = 1\n    var l = 1\n    var m = 1\n    var n = 1\n    var o = 1\n    var p = 1\n    var q = 1\n    var r = 1\n    var s = 1\n    var t = 1\n    var u = 1\n    var v = 1\n    var w = 1\n    var x = 1\n    var y = 1\n    var z = 1\n    var a = 1\n    var"}
{"task_id": "MBSWP/902", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to combine two dictionaries by adding values for common keys.\n *\n * >>> addDict([\"a\" : 100, \"b\" : 200, \"c\" : 300], [\"a\" : 300, \"b\" : 200, \"d\" : 400])\n * [\"b\" : 400, \"d\" : 400, \"a\" : 400, \"c\" : 300]\n * >>> addDict([\"a\" : 500, \"b\" : 700, \"c\" : 900], [\"a\" : 500, \"b\" : 600, \"d\" : 900])\n * [\"b\" : 1300, \"d\" : 900, \"a\" : 1000, \"c\" : 900]\n * >>> addDict([\"a\" : 900, \"b\" : 900, \"d\" : 900], [\"a\" : 900, \"b\" : 900, \"d\" : 900])\n * [\"b\" : 1800, \"d\" : 1800, \"a\" : 1800]\n */\nfunc addDict(d1 : [String: Int], d2 : [String: Int]) -> [String: Int] {\n    var result = d1\n    for (key, value) in d2 {\n        if let oldValue = result[key] {\n            result[key] = oldValue + value\n        } else {\n            result[key] = value\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to combine two dictionaries by adding values for common keys.\n *\n * >>> addDict([\"a\" : 100, \"b\" : 200, \"c\" : 300], [\"a\" : 300, \"b\" : 200, \"d\" : 400])\n * [\"b\" : 400, \"d\" : 400, \"a\" : 400, \"c\" : 300]\n * >>> addDict([\"a\" : 500, \"b\" : 700, \"c\" : 900], [\"a\" : 500, \"b\" : 600, \"d\" : 900])\n * [\"b\" : 1300, \"d\" : 900, \"a\" : 1000, \"c\" : 900]\n"}
{"task_id": "MBSWP/903", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to count the total unset bits from 1 to n.\n *\n * >>> countUnsetBits(2)\n * 1\n * >>> countUnsetBits(5)\n * 4\n * >>> countUnsetBits(14)\n * 17\n */\nfunc countUnsetBits(n : Int) -> Int {\n    var count = 0\n    var i = 1\n    while i <= n {\n        if i & i - 1 == 0 {\n            count += 1\n        }\n        i = i << 1\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/904", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to return true if the given number is even else return false.\n *\n * >>> evenNum(13.5)\n * false\n * >>> evenNum(0)\n * true\n * >>> evenNum(-9)\n * false\n */\nfunc evenNum(x : Double) -> Bool {\n    return x % 2 == 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to return true if the given number is odd else return false.\n *\n * >>> oddNum(13.5)\n * true\n * >>> oddNum(0)\n * false\n * >>> oddNum(-9)\n * true\n */\nfunc oddNum(x : Double) -> Bool {\n    return x % 2 != 0\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to return true if the given number is prime else return false.\n *\n * >>> primeNum(13.5)\n * false\n * >>> primeNum(0)\n * false\n * >>> primeNum(-9)\n * false\n */\nfunc primeNum(x : Double) -> Bool {\n    if x < 2 {\n        return false\n    }\n    for i in 2...Int(sqrt(Double(x))) {\n        if x % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to return true if the given number is perfect square else return false.\n *\n * >>> perfectSquare(13.5)\n * false\n * >>> perfectSquare(0)\n * false\n * >>> perfectSquare(-9)\n * false\n */\nfunc perfectSquare(x : Double) -> Bool {\n    let sqrt = sqrt(x)\n    return sqrt == Int(sqrt)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to return true if the given number is a perfect square else return false.\n *\n * >>> perfectSquare(13.5)\n * false\n * >>>"}
{"task_id": "MBSWP/905", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of squares of binomial co-efficients.\n *\n * >>> sumOfSquare(4)\n * 70\n * >>> sumOfSquare(5)\n * 252\n * >>> sumOfSquare(2)\n * 6\n */\nfunc sumOfSquare(n : Int) -> Int {\n    var sum = 0\n    for i in 1...n {\n        sum += i * i\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/906", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to extract year, month and date from a url by using regex.\n *\n * >>> extractDate(\"https:\\/\\/www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\")\n * [[\"2016\", \"09\", \"02\"]]\n * >>> extractDate(\"https:\\/\\/www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\")\n * [[\"2020\", \"11\", \"03\"]]\n * >>> extractDate(\"https:\\/\\/economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\")\n * [[\"2020\", \"12\", \"29\"]]\n */\nfunc extractDate(url : String) -> [[String]] {\n    let regex = \"https:\\/\\/www.indiatoday.in\\/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\"\n    let regex = \"https:\\/\\/www.indiatoday.in\\/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\"\n    let regex = \"https:\\/\\/www.indiatoday.in\\/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death"}
{"task_id": "MBSWP/907", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to print the first n lucky numbers.\n *\n * >>> luckyNum(10)\n * [1, 3, 7, 9, 13, 15, 21, 25, 31, 33]\n * >>> luckyNum(5)\n * [1, 3, 7, 9, 13]\n * >>> luckyNum(8)\n * [1, 3, 7, 9, 13, 15, 21, 25]\n */\nfunc luckyNum(n : Int) -> [Int] {\n    var lucky = [Int]()\n    for i in 1...n {\n        lucky.append(i * i)\n    }\n    return lucky\n}\n"}
{"task_id": "MBSWP/908", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the fixed point in the given array.\n *\n * >>> findFixedPoint([-10, -1, 0, 3, 10, 11, 30, 50, 100], 9)\n * 3\n * >>> findFixedPoint([1, 2, 3, 4, 5, 6, 7, 8], 8)\n * -1\n * >>> findFixedPoint([0, 2, 5, 8, 17], 5)\n * 0\n */\nfunc findFixedPoint(arr : [Int], n : Int) -> Int {\n    var i = 0\n    while i < n {\n        if arr[i] == i {\n            return i\n        }\n        i += 1\n    }\n    return -1\n}\n"}
{"task_id": "MBSWP/909", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the previous palindrome of a specified number.\n *\n * >>> previousPalindrome(99)\n * 88\n * >>> previousPalindrome(1221)\n * 1111\n * >>> previousPalindrome(120)\n * 111\n */\nfunc previousPalindrome(num : Int) -> Int {\n    var num = num\n    var prev = 0\n    while num != prev {\n        prev = num\n        num = num.prevPalindrome()\n    }\n    return prev\n}\n\nextension Int {\n    func prevPalindrome() -> Int {\n        var num = self\n        var prev = 0\n        while num != prev {\n            prev = num\n            num = num.prevPalindrome()\n        }\n        return prev\n    }\n}\n"}
{"task_id": "MBSWP/910", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to validate a gregorian date.\n *\n * >>> checkDate(11, 11, 2002)\n * true\n * >>> checkDate(13, 11, 2002)\n * false\n * >>> checkDate(\"11\", \"11\", \"2002\")\n * true\n */\nfunc checkDate(m : AnyHashable, d : AnyHashable, y : AnyHashable) -> Bool {\n    let month = m as! Int\n    let day = d as! Int\n    let year = y as! Int\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if year < 1 {\n        return false\n    }\n    return true\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to validate a gregorian date.\n *\n * >>> checkDate(11, 11, 2002)\n * true\n * >>> checkDate(13, 11, 2002)\n * false\n * >>> checkDate(\"11\", \"11\", \"2002\")\n * true\n */\nfunc checkDate(m : AnyHashable, d : AnyHashable, y : AnyHashable) -> Bool {\n    let month = m as! Int\n    let day = d as! Int\n    let year = y as! Int\n    if month < 1 || month > 12 {\n        return false\n    }\n    if day < 1 || day > 31 {\n        return false\n    }\n    if year < 1 {\n        return false\n    }\n    return true\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to validate a gregorian date.\n *\n * >>> checkDate(11, 11, 2002)\n * true\n * >>> checkDate(13, 11, 2002)\n * false\n * >>> checkDate(\"11\", \"11\", \"2002\")\n * true\n */\nfunc checkDate(m : AnyHashable, d : AnyHashable, y : AnyHashable) -> Bool {\n    let month = m as! Int\n    let day = d as! Int"}
{"task_id": "MBSWP/911", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n *\n * >>> maximumProduct([12, 74, 9, 50, 61, 41])\n * 225700\n * >>> maximumProduct([25, 35, 22, 85, 14, 65, 75, 25, 58])\n * 414375\n * >>> maximumProduct([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])\n * 2520\n */\nfunc maximumProduct(nums : [Int]) -> Int {\n    var heap = Heap(nums)\n    var maxProduct = 0\n    while heap.size > 3 {\n        maxProduct = max(maxProduct, heap.pop()!)\n    }\n    return maxProduct * heap.pop()!\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n *\n * >>> maximumProduct([12, 74, 9, 50, 61, 41])\n * 225700\n * >>> maximumProduct([25, 35, 22, 85, 14, 65, 75, 25, 58])\n * 414375\n * >>> maximumProduct([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])\n * 2520\n */\nfunc maximumProduct(nums : [Int]) -> Int {\n    var heap = Heap(nums)\n    var maxProduct = 0\n    while heap.size > 3 {\n        maxProduct = max(maxProduct, heap.pop()!)\n    }\n    return maxProduct * heap.pop()!\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\n *\n * >>> maximumProduct([12, 74, 9, 50, 61, 41])\n * 225700\n * >>> maximumProduct([25, 35, 22, 85, 14, 65, 75, 25, 58])\n * 414375\n * >>> maximumProduct([18, 14, 10, 9, 8, 7"}
{"task_id": "MBSWP/912", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find ln, m lobb number.\n *\n * >>> lobbNum(5, 3)\n * 35\n * >>> lobbNum(3, 2)\n * 5\n * >>> lobbNum(4, 2)\n * 20\n */\nfunc lobbNum(n : Int, m : Int) -> Int {\n    var result = 1\n    for i in 1...m {\n        result *= n\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find ln, m lobb number.\n *\n * >>> lobbNum(5, 3)\n * 35\n * >>> lobbNum(3, 2)\n * 5\n * >>> lobbNum(4, 2)\n * 20\n */\nfunc lobbNum(n : Int, m : Int) -> Int {\n    var result = 1\n    for i in 1...m {\n        result *= n\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find ln, m lobb number.\n *\n * >>> lobbNum(5, 3)\n * 35\n * >>> lobbNum(3, 2)\n * 5\n * >>> lobbNum(4, 2)\n * 20\n */\nfunc lobbNum(n : Int, m : Int) -> Int {\n    var result = 1\n    for i in 1...m {\n        result *= n\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find ln, m lobb number.\n *\n * >>> lobbNum(5, 3)\n * 35\n * >>> lobbNum(3, 2)\n * 5\n * >>> lobbNum(4, 2)\n * 20\n */\nfunc lobbNum(n : Int, m : Int) -> Int {\n    var result = 1\n    for i in 1...m {\n        result *= n\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find"}
{"task_id": "MBSWP/913", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check for a number at the end of a string.\n *\n * >>> endNum(\"abcdef\")\n * false\n * >>> endNum(\"abcdef7\")\n * true\n * >>> endNum(\"abc\")\n * false\n */\nfunc endNum(string : String) -> Bool {\n    let lastChar = string.characters.last\n    let lastCharIsNumber = lastChar != nil && CharacterSet.decimalDigits.characterIsMember(lastChar!)\n    return lastCharIsNumber\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check for a number at the end of a string.\n *\n * >>> endNum(\"abcdef\")\n * false\n * >>> endNum(\"abcdef7\")\n * true\n * >>> endNum(\"abc\")\n * false\n */\nfunc endNum(string : String) -> Bool {\n    let lastChar = string.characters.last\n    let lastCharIsNumber = lastChar != nil && CharacterSet.decimalDigits.characterIsMember(lastChar!)\n    return lastCharIsNumber\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check for a number at the end of a string.\n *\n * >>> endNum(\"abcdef\")\n * false\n * >>> endNum(\"abcdef7\")\n * true\n * >>> endNum(\"abc\")\n * false\n */\nfunc endNum(string : String) -> Bool {\n    let lastChar = string.characters.last\n    let lastCharIsNumber = lastChar != nil && CharacterSet.decimalDigits.characterIsMember(lastChar!)\n    return lastCharIsNumber\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check for a number at the end of a string.\n *\n * >>> endNum(\"abcdef\")\n * false\n * >>> endNum(\"abcdef7\")\n * true\n * >>> endNum(\"abc\")\n * false\n */\nfunc endNum(string : String) -> Bool {\n    let lastChar = string.characters."}
{"task_id": "MBSWP/914", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given string is made up of two alternating characters or not.\n *\n * >>> isTwoAlter(\"abab\")\n * true\n * >>> isTwoAlter(\"aaaa\")\n * false\n * >>> isTwoAlter(\"xyz\")\n * false\n */\nfunc isTwoAlter(s : String) -> Bool {\n    var count = 0\n    var flag = false\n    for i in s {\n        if flag {\n            if i == s[count] {\n                count += 1\n            } else {\n                return false\n            }\n        } else {\n            if i == s[count] {\n                count += 1\n                flag = true\n            }\n        }\n    }\n    return count == s.count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given string is made up of two alternating characters or not.\n *\n * >>> isTwoAlter(\"abab\")\n * true\n * >>> isTwoAlter(\"aaaa\")\n * false\n * >>> isTwoAlter(\"xyz\")\n * false\n */\nfunc isTwoAlter(s : String) -> Bool {\n    var count = 0\n    var flag = false\n    for i in s {\n        if flag {\n            if i == s[count] {\n                count += 1\n            } else {\n                return false\n            }\n        } else {\n            if i == s[count] {\n                count += 1\n                flag = true\n            }\n        }\n    }\n    return count == s.count\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the given string is made up of two alternating characters or not.\n *\n * >>> isTwoAlter(\"abab\")\n * true\n * >>> isTwoAlter(\"aaaa\")\n * false\n * >>> isTwoAlter(\"xyz\")\n * false\n */\nfunc isTwoAlter(s : String) -> Bool {\n    var count = 0\n    var flag = false\n    for i in s {\n       "}
{"task_id": "MBSWP/915", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to rearrange positive and negative numbers in a given array using lambda function.\n *\n * >>> rearrangeNumbs([-1, 2, -3, 5, 7, 8, 9, -10])\n * [2, 5, 7, 8, 9, -10, -3, -1]\n * >>> rearrangeNumbs([10, 15, 14, 13, -18, 12, -20])\n * [10, 12, 13, 14, 15, -20, -18]\n * >>> rearrangeNumbs([-20, 20, -10, 10, -30, 30])\n * [10, 20, 30, -30, -20, -10]\n */\nfunc rearrangeNumbs(arrayNums : [Int]) -> [Int] {\n    var arrayNums = arrayNums\n    var arrayNumsSorted = arrayNums\n    var arrayNumsSortedNegative = arrayNums\n    var arrayNumsSortedPositive = arrayNums\n    var arrayNumsSortedNegativeAndPositive = arrayNums\n    var arrayNumsSortedNegativeAndPositiveSorted = arrayNums\n    var arrayNumsSortedNegativeAndPositiveSortedNegative = arrayNums\n    var arrayNumsSortedNegativeAndPositiveSortedPositive = arrayNums\n    var arrayNumsSortedNegativeAndPositiveSortedNegativeAndPositive = arrayNums\n    var arrayNumsSortedNegativeAndPositiveSortedNegativeAndPositiveSorted = arrayNums\n    var arrayNumsSortedNegativeAndPositiveSortedNegativeAndPositiveSortedNegative = arrayNums\n    var arrayNumsSortedNegativeAndPositiveSortedNegativeAndPositiveSortedPositive = arrayNums\n    var arrayNumsSortedNegativeAndPositiveSortedNegativeAndPositiveSortedNegativeAndPositive = arrayNums\n    var arrayNumsSortedNegativeAndPositiveSortedNegativeAndPositiveSortedNegativeAndPositiveSorted = arrayNums\n    var arrayNumsSortedNegativeAndPositiveSortedNegativeAndPositiveS"}
{"task_id": "MBSWP/916", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find if there is a triplet in the array whose sum is equal to a given value.\n *\n * >>> findTripletArray([1, 4, 45, 6, 10, 8], 6, 22)\n * [4, 10, 8]\n * >>> findTripletArray([12, 3, 5, 2, 6, 9], 6, 24)\n * [12, 3, 9]\n * >>> findTripletArray([1, 2, 3, 4, 5], 5, 9)\n * [1, 3, 5]\n */\nfunc findTripletArray(a : [Int], arrSize : Int, sum : Int) -> [Int] {\n    var triplet : [Int] = []\n    var i : Int = 0\n    var j : Int = 0\n    var k : Int = 0\n    var sum1 : Int = 0\n    var sum2 : Int = 0\n    var sum3 : Int = 0\n    var flag : Bool = false\n    var flag1 : Bool = false\n    var flag2 : Bool = false\n    var flag3 : Bool = false\n    var flag4 : Bool = false\n    var flag5 : Bool = false\n    var flag6 : Bool = false\n    var flag7 : Bool = false\n    var flag8 : Bool = false\n    var flag9 : Bool = false\n    var flag10 : Bool = false\n    var flag11 : Bool = false\n    var flag12 : Bool = false\n    var flag13 : Bool = false\n    var flag14 : Bool = false\n    var flag15 : Bool = false\n    var flag16 : Bool = false\n    var flag17 : Bool = false\n    var flag18 : Bool = false\n    var flag19 : Bool = false\n    var flag20 : Bool = false\n    var flag21 : Bool = false\n    var flag22 : Bool = false\n    var flag23 : Bool = false\n    var flag24 : Bool = false\n    var flag25 : Bool = false\n    var flag26 : Bool = false\n    var flag27 : Bool = false\n   "}
{"task_id": "MBSWP/917", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the sequences of one upper case letter followed by lower case letters.\n *\n * >>> textUppercaseLowercase(\"AaBbGg\")\n * \"Found a match!\"\n * >>> textUppercaseLowercase(\"aA\")\n * \"Not matched!\"\n * >>> textUppercaseLowercase(\"PYTHON\")\n * \"Not matched!\"\n */\nfunc textUppercaseLowercase(text : String) -> String {\n    var result = \"Not matched!\"\n    var match = false\n    var matchStart = 0\n    var matchEnd = 0\n    var matchCount = 0\n    var matchChar = \"\"\n    var matchCharCount = 0\n    var matchCharCountMax = 0\n    var matchCharCountMaxChar = \"\"\n    var matchCharCountMaxCharCount = 0\n    var matchCharCountMaxCharCountMax = 0\n    var matchCharCountMaxCharCountMaxChar = \"\"\n    var matchCharCountMaxCharCountMaxCharCount = 0\n    var matchCharCountMaxCharCountMaxCharCountMax = 0\n    var matchCharCountMaxCharCountMaxCharCountMaxChar = \"\"\n    var matchCharCountMaxCharCountMaxCharCountMaxCharCount = 0\n    var matchCharCountMaxCharCountMaxCharCountMaxCharCountMax = 0\n    var matchCharCountMaxCharCountMaxCharCountMaxCharCountMaxChar = \"\"\n    var matchCharCountMaxCharCountMaxCharCountMaxCharCountMaxCharCount = 0\n    var matchCharCountMaxCharCountMaxCharCountMaxCharCountMaxCharCountMax = 0\n    var matchCharCountMaxCharCountMaxCharCountMaxCharCountMaxCharCountMaxChar = \"\"\n    var matchCharCountMaxCharCountMaxCharCountMaxCharCountMaxCharCountMaxCharCount = 0\n    var matchCharCountMaxCharCountMaxCharCountMaxCharCountMaxCharCountMaxCharCountMax = 0\n    var matchCharCountMaxCharCountMaxCharCountMaxCharCountMaxCharCountMaxCharCountMaxChar = \"\"\n    var matchCharCountMaxCharCountMaxCharCountMaxCharCountMaxCharCountMaxCharCountMaxCharCount = 0\n    var matchCharCountMaxCharCountMaxCharCountMaxCharCountMaxCharCountMaxCharCountMaxCharCountMax"}
{"task_id": "MBSWP/918", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count coin change.\n *\n * >>> coinChange([1, 2, 3], 3, 4)\n * 4\n * >>> coinChange([4, 5, 6, 7, 8, 9], 6, 9)\n * 2\n * >>> coinChange([4, 5, 6, 7, 8, 9], 6, 4)\n * 1\n */\nfunc coinChange(s : [Int], m : Int, n : Int) -> Int {\n    var dp = [0 : [0 : Int]]\n    for i in 0..<m {\n        dp[i] = [0 : Int]\n        for j in 0..<n {\n            if j >= s[i] {\n                dp[i][j] = dp[i-1][j]\n                if j >= s[i] {\n                    dp[i][j] += dp[i-1][j-s[i]]\n                }\n            }\n        }\n    }\n    return dp[m-1][n]\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the number of ways to climb the stairs.\n *\n * >>> climbStairs(1, 1)\n * 1\n * >>> climbStairs(2, 1)\n * 2\n * >>> climbStairs(3, 1)\n * 3\n * >>> climbStairs(4, 1)\n * 5\n * >>> climbStairs(5, 1)\n * 8\n * >>> climbStairs(6, 1)\n * 13\n * >>> climbStairs(7, 1)\n * 21\n * >>> climbStairs(8, 1)\n * 34\n * >>> climbStairs(9, 1)\n * 55\n * >>> climbStairs(10, 1)\n * 89\n */\nfunc climbStairs(n : Int, k : Int) -> Int {\n    var dp = [0 : Int]\n    dp[0] = 1\n    dp[1] = k\n    for i in 2..<n+1 {\n        dp[i] = dp[i-1] + dp["}
{"task_id": "MBSWP/919", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to multiply all items in the list.\n *\n * >>> multiplyList([1, -2, 3])\n * -6\n * >>> multiplyList([1, 2, 3, 4])\n * 24\n * >>> multiplyList([3, 1, 2, 3])\n * 18\n */\nfunc multiplyList(items : [Int]) -> Int {\n    var result = 1\n    for item in items {\n        result *= item\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimum value in the list.\n *\n * >>> minList([1, 2, 3, 4])\n * 1\n * >>> minList([1, 2, 3, 4, 5])\n * 1\n * >>> minList([5, 4, 3, 2, 1])\n * 1\n */\nfunc minList(items : [Int]) -> Int {\n    var result = items[0]\n    for item in items {\n        if item < result {\n            result = item\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the maximum value in the list.\n *\n * >>> maxList([1, 2, 3, 4])\n * 4\n * >>> maxList([1, 2, 3, 4, 5])\n * 5\n * >>> maxList([5, 4, 3, 2, 1])\n * 5\n */\nfunc maxList(items : [Int]) -> Int {\n    var result = items[0]\n    for item in items {\n        if item > result {\n            result = item\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all items in the list.\n *\n * >>> sumList([1, 2, 3, 4])\n * 10\n * >>> sumList([1, 2, 3, 4, 5])\n * 15\n * >>> sumList([5, 4, 3, 2, 1])\n * 15"}
{"task_id": "MBSWP/920", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all tuples with all none values in the given tuple list.\n *\n * >>> removeTuple([[\"none\", 2], [\"none\", \"none\"], [3, 4], [12, 3], [\"none\"]])\n * [[\"none\", 2], [3, 4], [12, 3]]\n * >>> removeTuple([[\"none\", \"none\"], [\"none\", \"none\"], [3, 6], [17, 3], [\"none\", 1]])\n * [[3, 6], [17, 3], [\"none\", 1]]\n * >>> removeTuple([[1, 2], [2, \"none\"], [3, \"none\"], [24, 3], [\"none\", \"none\"]])\n * [[1, 2], [2, \"none\"], [3, \"none\"], [24, 3]]\n */\nfunc removeTuple(testList : [[AnyHashable]]) -> [[AnyHashable]] {\n    var result = testList\n    for i in 0..<result.count {\n        for j in 0..<result[i].count {\n            if result[i][j] == \"none\" {\n                result[i].remove(at: j)\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove all tuples with all none values in the given tuple list.\n *\n * >>> removeTuple([[\"none\", 2], [\"none\", \"none\"], [3, 4], [12, 3], [\"none\"]])\n * [[\"none\", 2], [3, 4], [12, 3]]\n * >>> removeTuple([[\"none\", \"none\"], [\"none\", \"none\"], [3, 6], [17, 3], [\"none\", 1]])\n * [[3, 6], [17, 3], [\"none\", 1]]\n * >>> removeTuple([[1, 2], [2, \"none\"], [3, \"none\"], [24, 3], [\"none\", \"none\"]])\n * [[1, 2], [2, \"none\"], [3, \"none\"], [24, 3]]\n */\nfunc removeTuple(testList"}
{"task_id": "MBSWP/921", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform chunking of tuples each of size n.\n *\n * >>> chunkTuples([10, 4, 5, 6, 7, 6, 8, 3, 4], 3)\n * [[10, 4, 5], [6, 7, 6], [8, 3, 4]]\n * >>> chunkTuples([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)\n * [[1, 2], [3, 4], [5, 6], [7, 8], [9]]\n * >>> chunkTuples([11, 14, 16, 17, 19, 21, 22, 25], 4)\n * [[11, 14, 16, 17], [19, 21, 22, 25]]\n */\nfunc chunkTuples(testTup : [Int], n : Int) -> [[Int]] {\n    var result : [[Int]] = []\n    var i = 0\n    while i < testTup.count {\n        var temp : [Int] = []\n        for j in 0..<n {\n            if i < testTup.count {\n                temp.append(testTup[i])\n                i += 1\n            }\n        }\n        result.append(temp)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to perform chunking of arrays each of size n.\n *\n * >>> chunkArrays([10, 4, 5, 6, 7, 6, 8, 3, 4], 3)\n * [[10, 4, 5], [6, 7, 6], [8, 3, 4]]\n * >>> chunkArrays([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)\n * [[1, 2], [3, 4], [5, 6], [7, 8], [9]]\n * >>> chunkArrays([11, 14, 16, 17, 19, 21, 22, 25], 4)\n * [[11, 14, 16, 17], [19, 21, 22, 25]]\n */\nfunc chunkArrays(testArr : [Int], n : Int) -> [[Int]]"}
{"task_id": "MBSWP/922", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find a pair with the highest product from a given array of integers.\n *\n * >>> maxProduct([1, 2, 3, 4, 7, 0, 8, 4])\n * [7, 8]\n * >>> maxProduct([0, -1, -2, -4, 5, 0, -6])\n * [-4, -6]\n * >>> maxProduct([1, 3, 5, 6, 8, 9])\n * [8, 9]\n */\nfunc maxProduct(arr : [Int]) -> [Int] {\n    var maxProduct = [arr[0], arr[1]]\n    var maxProductProduct = arr[0] * arr[1]\n    var maxProductIndex = 0\n    var maxProductProductIndex = 0\n    for i in arr.indices.dropFirst() {\n        if arr[i] > maxProduct[0] {\n            maxProduct = [arr[i], maxProduct[1]]\n            maxProductIndex = i\n        } else if arr[i] < maxProduct[0] {\n            maxProduct = [maxProduct[0], arr[i]]\n            maxProductIndex = i\n        }\n        if arr[i] * maxProduct[0] > maxProductProduct {\n            maxProductProduct = arr[i] * maxProduct[0]\n            maxProductProductIndex = i\n        }\n    }\n    return [arr[maxProductIndex], arr[maxProductProductIndex]]\n}\n"}
{"task_id": "MBSWP/923", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\n *\n * >>> superSeq(\"AGGTAB\", \"GXTXAYB\", 6, 7)\n * 9\n * >>> superSeq(\"feek\", \"eke\", 4, 3)\n * 5\n * >>> superSeq(\"PARRT\", \"RTA\", 5, 3)\n * 6\n */\nfunc superSeq(x : String, y : String, m : Int, n : Int) -> Int {\n    var dp = Array(repeating: Array(repeating: 0, count: n + 1), count: m + 1)\n    for i in 0..<m {\n        for j in 0..<n {\n            if x[i] == y[j] {\n                dp[i + 1][j + 1] = dp[i][j] + 1\n            } else {\n                dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1])\n            }\n        }\n    }\n    return dp[m][n]\n}\n\n// test\nassert(superSeq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9)\nassert(superSeq(\"feek\", \"eke\", 4, 3) == 5)\nassert(superSeq(\"PARRT\", \"RTA\", 5, 3) == 6)\n"}
{"task_id": "MBSWP/924", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find maximum of two numbers.\n *\n * >>> maxOfTwo(10, 20)\n * 20\n * >>> maxOfTwo(19, 15)\n * 19\n * >>> maxOfTwo(-10, -20)\n * -10\n */\nfunc maxOfTwo(x : Int, y : Int) -> Int {\n    if x > y {\n        return x\n    } else {\n        return y\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find minimum of two numbers.\n *\n * >>> minOfTwo(10, 20)\n * 10\n * >>> minOfTwo(19, 15)\n * 15\n * >>> minOfTwo(-10, -20)\n * -20\n */\nfunc minOfTwo(x : Int, y : Int) -> Int {\n    if x < y {\n        return x\n    } else {\n        return y\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find maximum of three numbers.\n *\n * >>> maxOfThree(10, 20, 30)\n * 30\n * >>> maxOfThree(19, 15, 10)\n * 19\n * >>> maxOfThree(-10, -20, -30)\n * -10\n */\nfunc maxOfThree(x : Int, y : Int, z : Int) -> Int {\n    if x > y && x > z {\n        return x\n    } else if y > x && y > z {\n        return y\n    } else {\n        return z\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find minimum of three numbers.\n *\n * >>> minOfThree(10, 20, 30)\n * 10\n * >>> minOfThree(19, 15, 10)\n * 10\n * >>> minOfThree(-10, -20, -30)\n * -30\n */\nfunc minOfThree(x : Int, y : Int, z : Int) -> Int {\n    if x < y && x < z {\n"}
{"task_id": "MBSWP/925", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to calculate the product of all the numbers of a given tuple.\n *\n * >>> mutipleTuple([4, 3, 2, 2, -1, 18])\n * -864\n * >>> mutipleTuple([1, 2, 3])\n * 6\n * >>> mutipleTuple([-2, -4, -6])\n * -48\n */\nfunc mutipleTuple(nums : [Int]) -> Int {\n    var product = 1\n    for num in nums {\n        product *= num\n    }\n    return product\n}\n"}
{"task_id": "MBSWP/926", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find n-th rencontres number.\n *\n * >>> rencontresNumber(7, 2)\n * 924\n * >>> rencontresNumber(3, 0)\n * 2\n * >>> rencontresNumber(3, 1)\n * 3\n */\nfunc rencontresNumber(n : Int, m : Int) -> Int {\n    var n = n\n    var m = m\n    var result = 0\n    while n > 0 {\n        result += n\n        n -= m\n    }\n    return result\n}\n"}
{"task_id": "MBSWP/928", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n *\n * >>> changeDateFormat(\"2026-01-02\")\n * \"02-01-2026\"\n * >>> changeDateFormat(\"2021-01-04\")\n * \"04-01-2021\"\n * >>> changeDateFormat(\"2030-06-06\")\n * \"06-06-2030\"\n */\nfunc changeDateFormat(dt : String) -> String {\n    let date = Date(string: dt)!\n    let formatter = DateFormatter()\n    formatter.dateFormat = \"yyyy-MM-dd\"\n    let newDate = formatter.string(from: date)\n    let newFormatter = DateFormatter()\n    newFormatter.dateFormat = \"dd-MM-yyyy\"\n    return newFormatter.string(from: date)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a date of dd-mm-yyyy format to yyyy-mm-dd format.\n *\n * >>> changeDateFormat(\"02-01-2026\")\n * \"2026-01-02\"\n * >>> changeDateFormat(\"04-01-2021\")\n * \"2021-01-04\"\n * >>> changeDateFormat(\"06-06-2030\")\n * \"2030-06-06\"\n */\nfunc changeDateFormat(dt : String) -> String {\n    let date = Date(string: dt)!\n    let formatter = DateFormatter()\n    formatter.dateFormat = \"dd-MM-yyyy\"\n    let newDate = formatter.string(from: date)\n    let newFormatter = DateFormatter()\n    newFormatter.dateFormat = \"yyyy-MM-dd\"\n    return newFormatter.string(from: date)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a date of dd-mm-yyyy format to dd-mm-yyyy format.\n *\n * >>> changeDate"}
{"task_id": "MBSWP/929", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count repeated items of a tuple.\n *\n * >>> countTuplex([2, 4, 5, 6, 2, 3, 4, 4, 7], 4)\n * 3\n * >>> countTuplex([2, 4, 5, 6, 2, 3, 4, 4, 7], 2)\n * 2\n * >>> countTuplex([2, 4, 7, 7, 7, 3, 4, 4, 7], 7)\n * 4\n */\nfunc countTuplex(tuplex : [Int], value : Int) -> Int {\n    var count = 0\n    for i in tuplex {\n        if i == value {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/930", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that matches a string that has an a followed by zero or more b's by using regex.\n *\n * >>> textMatch(\"msb\")\n * \"Not matched!\"\n * >>> textMatch(\"a0c\")\n * \"Found a match!\"\n * >>> textMatch(\"abbc\")\n * \"Found a match!\"\n */\nfunc textMatch(text : String) -> String {\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\"\n    let regex = \"a(b)*\""}
{"task_id": "MBSWP/931", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n *\n * >>> sumSeries(7)\n * 784\n * >>> sumSeries(5)\n * 225\n * >>> sumSeries(15)\n * 14400\n */\nfunc sumSeries(number : Int) -> Int {\n    var sum = 0\n    for i in 1...number {\n        sum += i * i * i\n    }\n    return sum\n}\n"}
{"task_id": "MBSWP/932", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove duplicate words from a given list of strings.\n *\n * >>> removeDuplicList([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])\n * [\"Python\", \"Exercises\", \"Practice\", \"Solution\"]\n * >>> removeDuplicList([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\", \"Java\"])\n * [\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Java\"]\n * >>> removeDuplicList([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\", \"C++\", \"C\", \"C++\"])\n * [\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"C++\", \"C\"]\n */\nfunc removeDuplicList(l : [String]) -> [String] {\n    var result = [String]()\n    for i in l {\n        if !result.contains(i) {\n            result.append(i)\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove duplicate words from a given list of strings.\n *\n * >>> removeDuplicList([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])\n * [\"Python\", \"Exercises\", \"Practice\", \"Solution\"]\n * >>> removeDuplicList([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\", \"Java\"])\n * [\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Java\"]\n * >>> removeDuplicList([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\", \"C++\", \"C\", \"C++\"])\n * [\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"C++\", \"C\"]\n */\nfunc removeDuplicList(l : [String]) -> [String] {\n    var result = [String]()\n    for i in l {\n        if !result."}
{"task_id": "MBSWP/933", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert camel case string to snake case string by using regex.\n *\n * >>> camelToSnake(\"GoogleAssistant\")\n * \"google_assistant\"\n * >>> camelToSnake(\"ChromeCast\")\n * \"chrome_cast\"\n * >>> camelToSnake(\"QuadCore\")\n * \"quad_core\"\n */\nfunc camelToSnake(text : String) -> String {\n    let regex = try! NSRegularExpression(pattern: \"([A-Z])\", options: [])\n    let matches = regex.matchesInString(text, options: [], range: NSMakeRange(0, text.length))\n    let result = matches.map { match in\n        let range = match.range\n        let text = text[range.lowerBound..<range.upperBound]\n        return text.lowercased()\n    }\n    return result.joined(separator: \"_\")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert snake case string to camel case string by using regex.\n *\n * >>> snakeToCamel(\"google_assistant\")\n * \"googleAssistant\"\n * >>> snakeToCamel(\"chrome_cast\")\n * \"chromeCast\"\n * >>> snakeToCamel(\"quad_core\")\n * \"quadCore\"\n */\nfunc snakeToCamel(text : String) -> String {\n    let regex = try! NSRegularExpression(pattern: \"_([a-z])\", options: [])\n    let matches = regex.matchesInString(text, options: [], range: NSMakeRange(0, text.length))\n    let result = matches.map { match in\n        let range = match.range\n        let text = text[range.lowerBound..<range.upperBound]\n        return text.uppercased()\n    }\n    return result.joined(separator: \"\")\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert camel case string to kebab case string by using regex.\n *\n * >>> camelToKebab(\"GoogleAssistant\")\n * \"google-assistant"}
{"task_id": "MBSWP/934", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the nth delannoy number.\n *\n * >>> dealnnoyNum(3, 4)\n * 129\n * >>> dealnnoyNum(3, 3)\n * 63\n * >>> dealnnoyNum(4, 5)\n * 681\n */\nfunc dealnnoyNum(n : Int, m : Int) -> Int {\n    var nthDelannoyNum = 0\n    var nthDelannoyNumArray = [Int]()\n    var nthDelannoyNumArrayTemp = [Int]()\n    var nthDelannoyNumArrayTemp2 = [Int]()\n    var nthDelannoyNumArrayTemp3 = [Int]()\n    var nthDelannoyNumArrayTemp4 = [Int]()\n    var nthDelannoyNumArrayTemp5 = [Int]()\n    var nthDelannoyNumArrayTemp6 = [Int]()\n    var nthDelannoyNumArrayTemp7 = [Int]()\n    var nthDelannoyNumArrayTemp8 = [Int]()\n    var nthDelannoyNumArrayTemp9 = [Int]()\n    var nthDelannoyNumArrayTemp10 = [Int]()\n    var nthDelannoyNumArrayTemp11 = [Int]()\n    var nthDelannoyNumArrayTemp12 = [Int]()\n    var nthDelannoyNumArrayTemp13 = [Int]()\n    var nthDelannoyNumArrayTemp14 = [Int]()\n    var nthDelannoyNumArrayTemp15 = [Int]()\n    var nthDelannoyNumArrayTemp16 = [Int]()\n    var nthDelannoyNumArrayTemp17 = [Int]()\n    var nthDelannoyNumArrayTemp18 = [Int]()\n    var nthDelannoyNumArrayTemp19 = [Int]()\n    var nthDelannoyNumArrayTemp20 = [Int]()\n    var nthDelannoyNumArrayTemp21 = [Int]()\n    var nthDelannoyNumArrayTemp22 = [Int]()\n    var nthDelannoyNumArrayTemp23 ="}
{"task_id": "MBSWP/935", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\n *\n * >>> seriesSum(6)\n * 91\n * >>> seriesSum(7)\n * 140\n * >>> seriesSum(12)\n * 650\n */\nfunc seriesSum(number : Int) -> Int {\n    var sum = 0\n    for i in 1...number {\n        sum += i * i\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of series 1+2+3+\u2026.+n.\n *\n * >>> seriesSum(6)\n * 21\n * >>> seriesSum(7)\n * 28\n * >>> seriesSum(12)\n * 60\n */\nfunc seriesSum(number : Int) -> Int {\n    var sum = 0\n    for i in 1...number {\n        sum += i\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\n *\n * >>> seriesSum(6)\n * 91\n * >>> seriesSum(7)\n * 140\n * >>> seriesSum(12)\n * 650\n */\nfunc seriesSum(number : Int) -> Int {\n    var sum = 0\n    for i in 1...number {\n        sum += i * i * i\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the sum of series 1\u2074+2\u2074+3\u2074+\u2026.+n\u2074.\n *\n * >>> seriesSum(6)\n * 91\n * >>> seriesSum(7)\n * 140\n * >>> seriesSum(12)\n * 650\n */\nfunc seriesSum(number : Int) -> Int {\n    var sum = 0\n    for i in 1...number {\n        sum += i * i * i * i\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift"}
{"task_id": "MBSWP/936", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to re-arrange the given tuples based on the given ordered list.\n *\n * >>> reArrangeTuples([[4, 3], [1, 9], [2, 10], [3, 2]], [1, 4, 2, 3])\n * [[1, 9], [4, 3], [2, 10], [3, 2]]\n * >>> reArrangeTuples([[5, 4], [2, 10], [3, 11], [4, 3]], [3, 4, 2, 3])\n * [[3, 11], [4, 3], [2, 10], [3, 11]]\n * >>> reArrangeTuples([[6, 3], [3, 8], [5, 7], [2, 4]], [2, 5, 3, 6])\n * [[2, 4], [5, 7], [3, 8], [6, 3]]\n */\nfunc reArrangeTuples(testList : [[Int]], ordList : [Int]) -> [[Int]] {\n    var result : [[Int]] = []\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var a = 0\n    var b = 0\n    var c = 0\n    var d = 0\n    var e = 0\n    var f = 0\n    var g = 0\n    var h = 0\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x ="}
{"task_id": "MBSWP/937", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the most common character in a given string.\n *\n * >>> maxChar(\"hello world\")\n * \"l\"\n * >>> maxChar(\"hello \")\n * \"l\"\n * >>> maxChar(\"python pr\")\n * \"p\"\n */\nfunc maxChar(str1 : String) -> String {\n    var str = str1\n    var maxChar = \"\"\n    var maxCount = 0\n    var count = 0\n    var char = \"\"\n    for i in 0..<str.count {\n        if str[i] == str[i].lowercased() {\n            char = str[i].lowercased()\n        } else {\n            char = str[i].uppercased()\n        }\n        if str[i] == char {\n            count += 1\n        } else {\n            if count > maxCount {\n                maxCount = count\n                maxChar = char\n            }\n            count = 1\n        }\n    }\n    if count > maxCount {\n        maxCount = count\n        maxChar = char\n    }\n    return maxChar\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the most common character in a given string.\n *\n * >>> maxChar(\"hello world\")\n * \"l\"\n * >>> maxChar(\"hello \")\n * \"l\"\n * >>> maxChar(\"python pr\")\n * \"p\"\n */\nfunc maxChar(str1 : String) -> String {\n    var str = str1\n    var maxChar = \"\"\n    var maxCount = 0\n    var count = 0\n    var char = \"\"\n    for i in 0..<str.count {\n        if str[i] == str[i].lowercased() {\n            char = str[i].lowercased()\n        } else {\n            char = str[i].uppercased()\n        }\n        if str[i] == char {\n            count += 1\n        } else {\n            if count > maxCount {\n                maxCount = count\n                maxChar = char\n            }\n            count = 1\n        }\n    }"}
{"task_id": "MBSWP/938", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find three closest elements from three sorted arrays.\n *\n * >>> findCloset([1, 4, 10], [2, 15, 20], [10, 12], 3, 3, 2)\n * [10, 15, 10]\n * >>> findCloset([20, 24, 100], [2, 19, 22, 79, 800], [10, 12, 23, 24, 119], 3, 5, 5)\n * [24, 22, 23]\n * >>> findCloset([2, 5, 11], [3, 16, 21], [11, 13], 3, 3, 2)\n * [11, 16, 11]\n */\nfunc findCloset(a : [Int], b : [Int], c : [Int], p : Int, q : Int, r : Int) -> [Int] {\n    var aClosest = [Int]()\n    var bClosest = [Int]()\n    var cClosest = [Int]()\n    var aClosestIndex = 0\n    var bClosestIndex = 0\n    var cClosestIndex = 0\n    var aClosestDistance = Int.max\n    var bClosestDistance = Int.max\n    var cClosestDistance = Int.max\n    var aClosestDistanceIndex = 0\n    var bClosestDistanceIndex = 0\n    var cClosestDistanceIndex = 0\n    var aClosestDistanceDistance = Int.max\n    var bClosestDistanceDistance = Int.max\n    var cClosestDistanceDistance = Int.max\n    var aClosestDistanceDistanceIndex = 0\n    var bClosestDistanceDistanceIndex = 0\n    var cClosestDistanceDistanceIndex = 0\n    var aClosestDistanceDistanceDistance = Int.max\n    var bClosestDistanceDistanceDistance = Int.max\n    var cClosestDistanceDistanceDistance = Int.max\n    var aClosestDistanceDistanceDistanceIndex = 0\n    var bClosestDistanceDistanceDistanceIndex = 0\n    var cClosestDistanceDistanceDistanceIndex = 0\n    var aClosestDistanceDistanceDistanceDistance = Int"}
{"task_id": "MBSWP/939", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of dictionaries using lambda function.\n *\n * >>> sortedModels([[\"make\" : \"Nokia\", \"model\" : 216, \"color\" : \"Black\"], [\"make\" : \"Mi Max\", \"model\" : 2, \"color\" : \"Gold\"], [\"make\" : \"Samsung\", \"model\" : 7, \"color\" : \"Blue\"]])\n * [[\"make\" : \"Nokia\", \"model\" : 216, \"color\" : \"Black\"], [\"make\" : \"Samsung\", \"model\" : 7, \"color\" : \"Blue\"], [\"make\" : \"Mi Max\", \"model\" : 2, \"color\" : \"Gold\"]]\n * >>> sortedModels([[\"make\" : \"Vivo\", \"model\" : 20, \"color\" : \"Blue\"], [\"make\" : \"oppo\", \"model\" : 17, \"color\" : \"Gold\"], [\"make\" : \"Apple\", \"model\" : 11, \"color\" : \"red\"]])\n * [[\"make\" : \"Vivo\", \"model\" : 20, \"color\" : \"Blue\"], [\"make\" : \"oppo\", \"model\" : 17, \"color\" : \"Gold\"], [\"make\" : \"Apple\", \"model\" : 11, \"color\" : \"red\"]]\n * >>> sortedModels([[\"make\" : \"micromax\", \"model\" : 40, \"color\" : \"grey\"], [\"make\" : \"poco\", \"model\" : 60, \"color\" : \"blue\"]])\n * [[\"make\" : \"poco\", \"model\" : 60, \"color\" : \"blue\"], [\"make\" : \"micromax\", \"model\" : 40, \"color\" : \"grey\"]]\n */\nfunc sortedModels(models : [[String: AnyHashable]]) -> [[String: AnyHashable]] {\n    return models.sorted(by: { $0[\"model\"] < $1[\"model\"] })\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort a list of dictionaries using lambda function.\n *\n * >>> sortedModels([[\"make\" : \"Nokia\", \"model\""}
{"task_id": "MBSWP/940", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the given array by using heap sort.\n *\n * >>> heapSort([12, 2, 4, 5, 2, 3])\n * [2, 2, 3, 4, 5, 12]\n * >>> heapSort([32, 14, 5, 6, 7, 19])\n * [5, 6, 7, 14, 19, 32]\n * >>> heapSort([21, 15, 29, 78, 65])\n * [15, 21, 29, 65, 78]\n */\nfunc heapSort(arr : [Int]) -> [Int] {\n    // Write your code here\n    return []\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the given array by using merge sort.\n *\n * >>> mergeSort([12, 2, 4, 5, 2, 3])\n * [2, 2, 3, 4, 5, 12]\n * >>> mergeSort([32, 14, 5, 6, 7, 19])\n * [5, 6, 7, 14, 19, 32]\n * >>> mergeSort([21, 15, 29, 78, 65])\n * [15, 21, 29, 65, 78]\n */\nfunc mergeSort(arr : [Int]) -> [Int] {\n    // Write your code here\n    return []\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the given array by using quick sort.\n *\n * >>> quickSort([12, 2, 4, 5, 2, 3])\n * [2, 2, 3, 4, 5, 12]\n * >>> quickSort([32, 14, 5, 6, 7, 19])\n * [5, 6, 7, 14, 19, 32]\n * >>> quickSort([21, 15, 29, 78, 65])\n * [15, 21, 29, 65, 78]\n */\nfunc quickSort(arr : [Int]) -> [Int] {\n    // Write your code here\n    return []\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the given array by using"}
{"task_id": "MBSWP/941", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to count the elements in a list until an element is a tuple.\n *\n * >>> countElim([10, 20, 30, [10, 20], 40])\n * 3\n * >>> countElim([10, [20, 30], [10, 20], 40])\n * 1\n * >>> countElim([[10, [20, 30, [10, 20], 40]]])\n * 0\n */\nfunc countElim(num : [AnyHashable]) -> Int {\n    var count = 0\n    for i in num {\n        if let i = i as? [AnyHashable] {\n            count += countElim(i)\n        } else {\n            count += 1\n        }\n    }\n    return count\n}\n"}
{"task_id": "MBSWP/942", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if any list element is present in the given list.\n *\n * >>> checkElement([4, 5, 7, 9, 3], [6, 7, 10, 11])\n * true\n * >>> checkElement([1, 2, 3, 4], [4, 6, 7, 8, 9])\n * true\n * >>> checkElement([3, 2, 1, 4, 5], [9, 8, 7, 6])\n * false\n */\nfunc checkElement(testTup : [Int], checkList : [Int]) -> Bool {\n    for i in checkList {\n        for j in testTup {\n            if i == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if any list element is present in the given list.\n *\n * >>> checkElement([4, 5, 7, 9, 3], [6, 7, 10, 11])\n * true\n * >>> checkElement([1, 2, 3, 4], [4, 6, 7, 8, 9])\n * true\n * >>> checkElement([3, 2, 1, 4, 5], [9, 8, 7, 6])\n * false\n */\nfunc checkElement(testTup : [Int], checkList : [Int]) -> Bool {\n    for i in checkList {\n        for j in testTup {\n            if i == j {\n                return true\n            }\n        }\n    }\n    return false\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to check if any list element is present in the given list.\n *\n * >>> checkElement([4, 5, 7, 9, 3], [6, 7, 10, 11])\n * true\n * >>> checkElement([1, 2, 3, 4], [4, 6, 7, 8, 9])\n * true\n * >>> checkElement([3, 2, 1, 4, 5], [9, 8, 7, 6])\n * false\n */\nfunc checkElement(testTup :"}
{"task_id": "MBSWP/943", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to combine two given sorted lists using heapq module.\n *\n * >>> combineLists([1, 3, 5, 7, 9, 11], [0, 2, 4, 6, 8, 10])\n * [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n * >>> combineLists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])\n * [1, 2, 3, 5, 5, 6, 7, 8, 9, 11]\n * >>> combineLists([1, 3, 7], [2, 4, 6])\n * [1, 2, 3, 4, 6, 7]\n */\nfunc combineLists(num1 : [Int], num2 : [Int]) -> [Int] {\n    var num1 = num1\n    var num2 = num2\n    var result = [Int]()\n    while num1.count > 0 && num2.count > 0 {\n        if num1[0] < num2[0] {\n            result.append(num1.removeFirst())\n        } else {\n            result.append(num2.removeFirst())\n        }\n    }\n    if num1.count > 0 {\n        result.append(num1...)\n    }\n    if num2.count > 0 {\n        result.append(num2...)\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to combine two given sorted lists using heapq module.\n *\n * >>> combineLists([1, 3, 5, 7, 9, 11], [0, 2, 4, 6, 8, 10])\n * [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n * >>> combineLists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])\n * [1, 2, 3, 5, 5, 6, 7, 8, 9, 11]\n * >>> combineLists([1, 3, 7], [2, 4,"}
{"task_id": "MBSWP/944", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to separate and print the numbers and their position of a given string.\n *\n * >>> numPosition(\"there are 70 flats in this apartment\")\n * 10\n * >>> numPosition(\"every adult have 32 teeth\")\n * 17\n * >>> numPosition(\"isha has 79 chocolates in her bag\")\n * 9\n */\nfunc numPosition(text : String) -> Int {\n    var count = 0\n    var position = 0\n    for i in 0..<text.count {\n        if text[i] == \" \" {\n            count += 1\n        }\n        if text[i] == \"0\" || text[i] == \"1\" || text[i] == \"2\" || text[i] == \"3\" || text[i] == \"4\" || text[i] == \"5\" || text[i] == \"6\" || text[i] == \"7\" || text[i] == \"8\" || text[i] == \"9\" {\n            position = i\n        }\n    }\n    return position\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to separate and print the numbers and their position of a given string.\n *\n * >>> numPosition(\"there are 70 flats in this apartment\")\n * 10\n * >>> numPosition(\"every adult have 32 teeth\")\n * 17\n * >>> numPosition(\"isha has 79 chocolates in her bag\")\n * 9\n */\nfunc numPosition(text : String) -> Int {\n    var count = 0\n    var position = 0\n    for i in 0..<text.count {\n        if text[i] == \" \" {\n            count += 1\n        }\n        if text[i] == \"0\" || text[i] == \"1\" || text[i] == \"2\" || text[i] == \"3\" || text[i] == \"4\" || text[i] == \"5\" || text[i] == \"6\" || text[i] == \"7\" || text[i] == \"8\" || text[i] == \"9\" {\n            position = i\n        }\n    }\n    return position"}
{"task_id": "MBSWP/945", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given tuples into set.\n *\n * >>> tupleToSet([\"x\", \"y\", \"z\"])\n * {\"y\", \"x\", \"z\"}\n * >>> tupleToSet([\"a\", \"b\", \"c\"])\n * {\"a\", \"b\", \"c\"}\n * >>> tupleToSet([\"z\", \"d\", \"e\"])\n * {\"z\", \"d\", \"e\"}\n */\nfunc tupleToSet(t : [String]) -> Set<String> {\n    var s : Set<String> = Set()\n    for i in t {\n        s.insert(i)\n    }\n    return s\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given tuples into set.\n *\n * >>> tupleToSet([\"x\", \"y\", \"z\"])\n * {\"y\", \"x\", \"z\"}\n * >>> tupleToSet([\"a\", \"b\", \"c\"])\n * {\"a\", \"b\", \"c\"}\n * >>> tupleToSet([\"z\", \"d\", \"e\"])\n * {\"z\", \"d\", \"e\"}\n */\nfunc tupleToSet(t : [String]) -> Set<String> {\n    var s : Set<String> = Set()\n    for i in t {\n        s.insert(i)\n    }\n    return s\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert the given tuples into set.\n *\n * >>> tupleToSet([\"x\", \"y\", \"z\"])\n * {\"y\", \"x\", \"z\"}\n * >>> tupleToSet([\"a\", \"b\", \"c\"])\n * {\"a\", \"b\", \"c\"}\n * >>> tupleToSet([\"z\", \"d\", \"e\"])\n * {\"z\", \"d\", \"e\"}\n */\nfunc tupleToSet(t : [String]) -> Set<String> {\n    var s : Set<String> = Set()\n    for i in t {\n        s.insert(i)\n"}
{"task_id": "MBSWP/946", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the most common elements and their counts of a specified text.\n *\n * >>> mostCommonElem(\"lkseropewdssafsdfafkpwe\", 3)\n * [[\"s\", 4], [\"e\", 3], [\"f\", 3]]\n * >>> mostCommonElem(\"lkseropewdssafsdfafkpwe\", 2)\n * [[\"s\", 4], [\"e\", 3]]\n * >>> mostCommonElem(\"lkseropewdssafsdfafkpwe\", 7)\n * [[\"s\", 4], [\"e\", 3], [\"f\", 3], [\"k\", 2], [\"p\", 2], [\"w\", 2], [\"d\", 2]]\n */\nfunc mostCommonElem(s : String, a : Int) -> [[AnyHashable]] {\n    var result = [[AnyHashable]]()\n    var map = [AnyHashable: Int]()\n    for c in s {\n        if let count = map[c] {\n            map[c] = count + 1\n        } else {\n            map[c] = 1\n        }\n    }\n    for (key, value) in map {\n        if result.count < a {\n            result.append([key, value])\n        } else {\n            if value > result[result.count - 1][1] {\n                result[result.count - 1] = [key, value]\n            }\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the most common elements and their counts of a specified text.\n *\n * >>> mostCommonElem(\"lkseropewdssafsdfafkpwe\", 3)\n * [[\"s\", 4], [\"e\", 3], [\"f\", 3]]\n * >>> mostCommonElem(\"lkseropewdssafsdfafkpwe\", 2)\n * [[\"s\", 4], [\"e\", 3]]\n * >>> mostCommonElem(\"lkseropewdssafsdfafkpwe\", 7)\n * [[\"s\", 4"}
{"task_id": "MBSWP/947", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the length of the shortest word.\n *\n * >>> lenLog([\"win\", \"lose\", \"great\"])\n * 3\n * >>> lenLog([\"a\", \"ab\", \"abc\"])\n * 1\n * >>> lenLog([\"12\", \"12\", \"1234\"])\n * 2\n */\nfunc lenLog(list1 : [String]) -> Int {\n    var min = Int.max\n    for i in list1 {\n        if i.count < min {\n            min = i.count\n        }\n    }\n    return min\n}\n"}
{"task_id": "MBSWP/948", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get an item of a tuple.\n *\n * >>> getItem([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], 3)\n * \"e\"\n * >>> getItem([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], -4)\n * \"u\"\n * >>> getItem([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], -3)\n * \"r\"\n */\nfunc getItem(tup1 : [AnyHashable], index : Int) -> String {\n    return tup1[index] as! String\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get an item of a dictionary.\n *\n * >>> getItem([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"r\")\n * \"e\"\n * >>> getItem([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"u\")\n * \"o\"\n * >>> getItem([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"c\")\n * \"o\"\n */\nfunc getItem(dict1 : [String : Any], key : String) -> String {\n    return dict1[key] as! String\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to get an item of a dictionary.\n *\n * >>> getItem([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"r\")\n * \"e\"\n * >>> getItem([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], \"u\")\n *"}
{"task_id": "MBSWP/949", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to sort the given tuple list basis the total digits in tuple.\n *\n * >>> sortList([[3, 4, 6, 723], [1, 2], [12345], [134, 234, 34]])\n * \"[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]\"\n * >>> sortList([[3, 4, 8], [1, 2], [1234335], [1345, 234, 334]])\n * \"[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]\"\n * >>> sortList([[34, 4, 61, 723], [1, 2], [145], [134, 23]])\n * \"[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]\"\n */\nfunc sortList(testList : [[Int]]) -> String {\n    var sortedList = testList\n    sortedList.sort(by: { $0.count < $1.count })\n    return \"\\(sortedList)\"\n}\n\n// Test cases\nassert(sortList([[3, 4, 6, 723], [1, 2], [12345], [134, 234, 34]]) == \"[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]\")\nassert(sortList([[3, 4, 8], [1, 2], [1234335], [1345, 234, 334]]) == \"[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]\")\nassert(sortList([[34, 4, 61, 723], [1, 2], [145], [134, 23]]) == \"[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]\")\n"}
{"task_id": "MBSWP/950", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to display sign of the chinese zodiac for given year.\n *\n * >>> chineseZodiac(1997)\n * \"Ox\"\n * >>> chineseZodiac(1998)\n * \"Tiger\"\n * >>> chineseZodiac(1994)\n * \"Dog\"\n */\nfunc chineseZodiac(year : Int) -> String {\n    let sign = year % 12\n    switch sign {\n    case 0:\n        return \"Monkey\"\n    case 1:\n        return \"Rooster\"\n    case 2:\n        return \"Dog\"\n    case 3:\n        return \"Pig\"\n    case 4:\n        return \"Rat\"\n    case 5:\n        return \"Ox\"\n    case 6:\n        return \"Tiger\"\n    case 7:\n        return \"Rabbit\"\n    case 8:\n        return \"Dragon\"\n    case 9:\n        return \"Snake\"\n    case 10:\n        return \"Horse\"\n    case 11:\n        return \"Goat\"\n    default:\n        return \"Unknown\"\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to display sign of the zodiac for given year.\n *\n * >>> zodiac(1997)\n * \"Aquarius\"\n * >>> zodiac(1998)\n * \"Pisces\"\n * >>> zodiac(1994)\n * \"Aquarius\"\n */\nfunc zodiac(year : Int) -> String {\n    let sign = year % 12\n    switch sign {\n    case 0:\n        return \"Aquarius\"\n    case 1:\n        return \"Pisces\"\n    case 2:\n        return \"Aquarius\"\n    case 3:\n        return \"Aquarius\"\n    case 4:\n        return \"Aquarius\"\n    case 5:\n        return \"Aquarius\"\n    case 6:\n        return \"Aquarius\"\n    case 7:\n        return \"Aquarius\"\n    case 8:\n        return \"Aquarius\"\n    case 9:\n        return \"Aquarius\"\n    case 10:\n       "}
{"task_id": "MBSWP/951", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum of similar indices in two lists of tuples.\n *\n * >>> maxSimilarIndices([[2, 4], [6, 7], [5, 1]], [[5, 4], [8, 10], [8, 14]])\n * [[5, 4], [8, 10], [8, 14]]\n * >>> maxSimilarIndices([[3, 5], [7, 8], [6, 2]], [[6, 5], [9, 11], [9, 15]])\n * [[6, 5], [9, 11], [9, 15]]\n * >>> maxSimilarIndices([[4, 6], [8, 9], [7, 3]], [[7, 6], [10, 12], [10, 16]])\n * [[7, 6], [10, 12], [10, 16]]\n */\nfunc maxSimilarIndices(testList1 : [[Int]], testList2 : [[Int]]) -> [[Int]] {\n    var maxSimilarIndices = [[Int]]()\n    var maxSimilarIndicesLength = 0\n    var maxSimilarIndicesLengthIndex = 0\n    var maxSimilarIndicesLengthValue = 0\n    var maxSimilarIndicesLengthValueIndex = 0\n    var maxSimilarIndicesLengthValueValue = 0\n    var maxSimilarIndicesLengthValueValueIndex = 0\n    var maxSimilarIndicesLengthValueValueValue = 0\n    var maxSimilarIndicesLengthValueValueValueIndex = 0\n    var maxSimilarIndicesLengthValueValueValueValue = 0\n    var maxSimilarIndicesLengthValueValueValueValueIndex = 0\n    var maxSimilarIndicesLengthValueValueValueValueValue = 0\n    var maxSimilarIndicesLengthValueValueValueValueValueIndex = 0\n    var maxSimilarIndicesLengthValueValueValueValueValueValue = 0\n    var maxSimilarIndicesLengthValueValueValueValueValueValueIndex = 0\n    var maxSimilarIndicesLengthValueValueValueValueValueValueValue = 0\n    var maxSimilarIndicesLengthValueValueValueValueValueValueValueIndex = 0\n    var maxSimilarIndicesLengthValueValueValueValueValueValueValueValue = 0\n    var maxSimilarIndicesLengthValueValueValueValueValueValueValueValueIndex = 0"}
{"task_id": "MBSWP/952", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to compute the value of ncr mod p.\n *\n * >>> ncrModP(10, 2, 13)\n * 6\n * >>> ncrModP(11, 3, 14)\n * 11\n * >>> ncrModP(18, 14, 19)\n * 1\n */\nfunc ncrModP(n : Int, r : Int, p : Int) -> Int {\n    var ncr = 1\n    var rcr = 1\n    var i = 1\n    while i <= r {\n        ncr = ncr * i % p\n        rcr = rcr * (n - i + 1) % p\n        i += 1\n    }\n    return ncr * rcr % p\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to compute the value of ncr mod p.\n *\n * >>> ncrModP(10, 2, 13)\n * 6\n * >>> ncrModP(11, 3, 14)\n * 11\n * >>> ncrModP(18, 14, 19)\n * 1\n */\nfunc ncrModP(n : Int, r : Int, p : Int) -> Int {\n    var ncr = 1\n    var rcr = 1\n    var i = 1\n    while i <= r {\n        ncr = ncr * i % p\n        rcr = rcr * (n - i + 1) % p\n        i += 1\n    }\n    return ncr * rcr % p\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to compute the value of ncr mod p.\n *\n * >>> ncrModP(10, 2, 13)\n * 6\n * >>> ncrModP(11, 3, 14)\n * 11\n * >>> ncrModP(18, 14, 19)\n * 1\n */\nfunc ncrModP(n : Int, r : Int, p : Int) -> Int {\n    var ncr = 1\n    var rcr = 1\n    var i = 1\n    while i <= r {\n        ncr"}
{"task_id": "MBSWP/953", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the minimun number of subsets with distinct elements.\n *\n * >>> subset([1, 2, 3, 4], 4)\n * 1\n * >>> subset([5, 6, 9, 3, 4, 3, 4], 7)\n * 2\n * >>> subset([1, 2, 3], 3)\n * 1\n */\nfunc subset(ar : [Int], n : Int) -> Int {\n    var count = 0\n    var temp = 0\n    var temp2 = 0\n    var temp3 = 0\n    var temp4 = 0\n    var temp5 = 0\n    var temp6 = 0\n    var temp7 = 0\n    var temp8 = 0\n    var temp9 = 0\n    var temp10 = 0\n    var temp11 = 0\n    var temp12 = 0\n    var temp13 = 0\n    var temp14 = 0\n    var temp15 = 0\n    var temp16 = 0\n    var temp17 = 0\n    var temp18 = 0\n    var temp19 = 0\n    var temp20 = 0\n    var temp21 = 0\n    var temp22 = 0\n    var temp23 = 0\n    var temp24 = 0\n    var temp25 = 0\n    var temp26 = 0\n    var temp27 = 0\n    var temp28 = 0\n    var temp29 = 0\n    var temp30 = 0\n    var temp31 = 0\n    var temp32 = 0\n    var temp33 = 0\n    var temp34 = 0\n    var temp35 = 0\n    var temp36 = 0\n    var temp37 = 0\n    var temp38 = 0\n    var temp39 = 0\n    var temp40 = 0\n    var temp41 = 0\n    var temp42 = 0\n    var temp43 = 0\n    var temp44 = 0\n    var temp45 = 0\n    var temp46 = 0\n    var temp47 = 0\n    var temp48 = 0\n    var temp49 = 0\n    var temp50 = 0\n    var temp51 = 0\n    var temp52 = 0\n    var temp53 = 0\n    var temp54 = 0\n    var temp55 = 0\n    var temp56 = 0\n"}
{"task_id": "MBSWP/954", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that gives profit amount if the given amount has profit else return none.\n *\n * >>> profitAmount(1500, 1200)\n * 300\n * >>> profitAmount(100, 200)\n * \"none\"\n * >>> profitAmount(2000, 5000)\n * \"none\"\n */\nfunc profitAmount(actualCost : Int, saleAmount : Int) -> AnyHashable {\n    if actualCost > saleAmount {\n        return actualCost - saleAmount\n    }\n    return \"none\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that gives profit amount if the given amount has profit else return none.\n *\n * >>> profitAmount(1500, 1200)\n * 300\n * >>> profitAmount(100, 200)\n * \"none\"\n * >>> profitAmount(2000, 5000)\n * \"none\"\n */\nfunc profitAmount(actualCost : Int, saleAmount : Int) -> AnyHashable {\n    if actualCost > saleAmount {\n        return actualCost - saleAmount\n    }\n    return \"none\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that gives profit amount if the given amount has profit else return none.\n *\n * >>> profitAmount(1500, 1200)\n * 300\n * >>> profitAmount(100, 200)\n * \"none\"\n * >>> profitAmount(2000, 5000)\n * \"none\"\n */\nfunc profitAmount(actualCost : Int, saleAmount : Int) -> AnyHashable {\n    if actualCost > saleAmount {\n        return actualCost - saleAmount\n    }\n    return \"none\"\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function that gives profit amount if the given amount has profit else return none.\n *\n * >>> profitAmount(1500, 1200)\n * 300\n * >>> profitAmount(100, 200)\n * \"none\"\n * >>> profitAmount(2000, 5000)\n * \"none\"\n */\nfunc profitAmount(actualCost : Int, saleAmount : Int) -> AnyHashable {\n    if actualCost > saleAmount {\n"}
{"task_id": "MBSWP/955", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find out, if the given number is abundant.\n *\n * >>> isAbundant(12)\n * true\n * >>> isAbundant(13)\n * false\n * >>> isAbundant(9)\n * false\n */\nfunc isAbundant(n : Int) -> Bool {\n    var sum : Int = 0\n    for i in 1..<n {\n        if n % i == 0 {\n            sum += i\n        }\n    }\n    return sum > n\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find out, if the given number is deficient.\n *\n * >>> isDeficient(12)\n * false\n * >>> isDeficient(13)\n * true\n * >>> isDeficient(9)\n * false\n */\nfunc isDeficient(n : Int) -> Bool {\n    var sum : Int = 0\n    for i in 1..<n {\n        if n % i == 0 {\n            sum += i\n        }\n    }\n    return sum < n\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find out, if the given number is perfect.\n *\n * >>> isPerfect(12)\n * false\n * >>> isPerfect(13)\n * false\n * >>> isPerfect(9)\n * true\n */\nfunc isPerfect(n : Int) -> Bool {\n    var sum : Int = 0\n    for i in 1..<n {\n        if n % i == 0 {\n            sum += i\n        }\n    }\n    return sum == n\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find out, if the given number is a perfect square.\n *\n * >>> isPerfectSquare(12)\n * false\n * >>> isPerfectSquare(13)\n * false\n * >>> isPerfectSquare(9)\n * true\n */\nfunc isPerfectSquare(n : Int) -> Bool {\n    var sum : Int = 0\n    for i in 1..<n {"}
{"task_id": "MBSWP/956", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to split the given string at uppercase letters by using regex.\n *\n * >>> splitList(\"LearnToBuildAnythingWithGoogle\")\n * [\"Learn\", \"To\", \"Build\", \"Anything\", \"With\", \"Google\"]\n * >>> splitList(\"ApmlifyingTheBlack+DeveloperCommunity\")\n * [\"Apmlifying\", \"The\", \"Black+\", \"Developer\", \"Community\"]\n * >>> splitList(\"UpdateInTheGoEcoSystem\")\n * [\"Update\", \"In\", \"The\", \"Go\", \"Eco\", \"System\"]\n */\nfunc splitList(text : String) -> [String] {\n    var result = [String]()\n    let regex = Regex(\"[A-Z]\")\n    let matches = regex.matches(text)\n    for match in matches {\n        result.append(text[0..<match.range.lowerBound])\n        text = text[match.range.upperBound..<text.endIndex]\n    }\n    result.append(text)\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to split the given string at uppercase letters by using regex.\n *\n * >>> splitList(\"LearnToBuildAnythingWithGoogle\")\n * [\"Learn\", \"To\", \"Build\", \"Anything\", \"With\", \"Google\"]\n * >>> splitList(\"ApmlifyingTheBlack+DeveloperCommunity\")\n * [\"Apmlifying\", \"The\", \"Black+\", \"Developer\", \"Community\"]\n * >>> splitList(\"UpdateInTheGoEcoSystem\")\n * [\"Update\", \"In\", \"The\", \"Go\", \"Eco\", \"System\"]\n */\nfunc splitList(text : String) -> [String] {\n    var result = [String]()\n    let regex = Regex(\"[A-Z]\")\n    let matches = regex.matches(text)\n    for match in matches {\n        result.append(text[0..<match.range.lowerBound])\n        text = text[match.range.upperBound..<text.endIndex]\n    }\n    result.append(text)\n    return result\n}\n\n/**\n"}
{"task_id": "MBSWP/957", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to get the position of rightmost set bit.\n *\n * >>> getFirstSetBitPos(12)\n * 3\n * >>> getFirstSetBitPos(18)\n * 2\n * >>> getFirstSetBitPos(16)\n * 5\n */\nfunc getFirstSetBitPos(n : Int) -> Int {\n    var i = 0\n    while n > 0 {\n        n = n >> 1\n        i += 1\n    }\n    return i\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to get the position of leftmost set bit.\n *\n * >>> getLastSetBitPos(12)\n * 3\n * >>> getLastSetBitPos(18)\n * 2\n * >>> getLastSetBitPos(16)\n * 5\n */\nfunc getLastSetBitPos(n : Int) -> Int {\n    var i = 0\n    while n > 0 {\n        n = n & (n - 1)\n        i += 1\n    }\n    return i\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to get the position of rightmost unset bit.\n *\n * >>> getFirstUnsetBitPos(12)\n * 4\n * >>> getFirstUnsetBitPos(18)\n * 3\n * >>> getFirstUnsetBitPos(16)\n * 6\n */\nfunc getFirstUnsetBitPos(n : Int) -> Int {\n    var i = 0\n    while n > 0 {\n        n = n >> 1\n        i += 1\n    }\n    return i\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to get the position of leftmost unset bit.\n *\n * >>> getLastUnsetBitPos(12)\n * 4\n * >>> getLastUnsetBitPos(18)\n * 3\n * >>> getLastUnsetBitPos(16)\n * 6\n */\nfunc getLastUnsetBitPos(n : Int) -> Int {\n    var i = 0\n    while n > 0 {\n"}
{"task_id": "MBSWP/958", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert an integer into a roman numeral.\n *\n * >>> intToRoman(1)\n * \"I\"\n * >>> intToRoman(50)\n * \"L\"\n * >>> intToRoman(4)\n * \"IV\"\n */\nfunc intToRoman(num : Int) -> String {\n    var result = \"\"\n    var num = num\n    var i = 0\n    while num > 0 {\n        let digit = num % 10\n        num = num / 10\n        switch digit {\n        case 1:\n            result = result + \"I\"\n        case 2:\n            result = result + \"II\"\n        case 3:\n            result = result + \"III\"\n        case 4:\n            result = result + \"IV\"\n        case 5:\n            result = result + \"V\"\n        case 6:\n            result = result + \"VI\"\n        case 7:\n            result = result + \"VII\"\n        case 8:\n            result = result + \"VIII\"\n        case 9:\n            result = result + \"IX\"\n        case 0:\n            result = result + \"X\"\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a roman numeral into an integer.\n *\n * >>> romanToInt(\"I\")\n * 1\n * >>> romanToInt(\"X\")\n * 10\n * >>> romanToInt(\"XIV\")\n * 14\n */\nfunc romanToInt(roman : String) -> Int {\n    var result = 0\n    var roman = roman\n    var i = 0\n    while roman.count > 0 {\n        let digit = roman[roman.count - 1]\n        roman = roman.dropLast(1)\n        switch digit {\n        case \"I\":\n            result = result + 1\n        case \"V\":\n            result = result + 5\n        case \"X\":\n            result = result + 10\n        case \"L\":\n            result = result + 50\n        case \"C\":\n            result = result + 100\n       "}
{"task_id": "MBSWP/959", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the average of a list.\n *\n * >>> average([15, 9, 55, 41, 35, 20, 62, 49])\n * 35.75\n * >>> average([4, 5, 1, 2, 9, 7, 10, 8])\n * 5.75\n * >>> average([1, 2, 3])\n * 2\n */\nfunc average(lst : [Int]) -> Double {\n    var sum = 0\n    for i in lst {\n        sum += i\n    }\n    return Double(sum) / Double(lst.count)\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the median of a list.\n *\n * >>> median([15, 9, 55, 41, 35, 20, 62, 49])\n * 41.0\n * >>> median([4, 5, 1, 2, 9, 7, 10, 8])\n * 7.5\n * >>> median([1, 2, 3])\n * 2.5\n */\nfunc median(lst : [Int]) -> Double {\n    var sorted = lst.sorted()\n    var mid = Double(sorted.count) / 2\n    if sorted.count % 2 == 0 {\n        return (sorted[Int(mid)] + sorted[Int(mid) + 1]) / 2\n    } else {\n        return sorted[Int(mid)]\n    }\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the mode of a list.\n *\n * >>> mode([15, 9, 55, 41, 35, 20, 62, 49])\n * [55]\n * >>> mode([4, 5, 1, 2, 9, 7, 10, 8])\n * [9, 7]\n * >>> mode([1, 2, 3])\n * [1, 2, 3]\n */\nfunc mode(lst : [Int]) -> [Int] {\n    var sorted = lst.sorted()\n    var counts = [Int](repeating: 0, count: sorted.count)\n    for i in sorted {"}
{"task_id": "MBSWP/960", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to solve tiling problem.\n *\n * >>> getNoofways(4)\n * 3\n * >>> getNoofways(3)\n * 2\n * >>> getNoofways(5)\n * 5\n */\nfunc getNoofways(n : Int) -> Int {\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 2\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 7\n    }\n    if n == 5 {\n        return 13\n    }\n    return 0\n}\n"}
{"task_id": "MBSWP/961", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert a roman numeral to an integer.\n *\n * >>> romanToInt(\"MMMCMLXXXVI\")\n * 3986\n * >>> romanToInt(\"MMMM\")\n * 4000\n * >>> romanToInt(\"C\")\n * 100\n */\nfunc romanToInt(s : String) -> Int {\n    var result = 0\n    var i = 0\n    while i < s.length {\n        let current = s[i]\n        let next = s[i+1]\n        let nextNext = s[i+2]\n        let nextNextNext = s[i+3]\n        let nextNextNextNext = s[i+4]\n        let nextNextNextNextNext = s[i+5]\n        let nextNextNextNextNextNext = s[i+6]\n        let nextNextNextNextNextNextNext = s[i+7]\n        let nextNextNextNextNextNextNextNext = s[i+8]\n        let nextNextNextNextNextNextNextNextNext = s[i+9]\n        let nextNextNextNextNextNextNextNextNextNext = s[i+10]\n        let nextNextNextNextNextNextNextNextNextNextNext = s[i+11]\n        let nextNextNextNextNextNextNextNextNextNextNextNext = s[i+12]\n        let nextNextNextNextNextNextNextNextNextNextNextNextNext = s[i+13]\n        let nextNextNextNextNextNextNextNextNextNextNextNextNextNext = s[i+14]\n        let nextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = s[i+15]\n        let nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = s[i+16]\n        let nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = s[i+17]\n        let nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = s[i+18]\n        let nextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNextNext = s[i+19]\n        let nextNextNext"}
{"task_id": "MBSWP/962", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all even natural numbers within the range l and r.\n *\n * >>> sumEven(2, 5)\n * 6\n * >>> sumEven(3, 8)\n * 18\n * >>> sumEven(4, 6)\n * 10\n */\nfunc sumEven(l : Int, r : Int) -> Int {\n    var sum = 0\n    for i in l...r {\n        if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all odd natural numbers within the range l and r.\n *\n * >>> sumOdd(2, 5)\n * 3\n * >>> sumOdd(3, 8)\n * 15\n * >>> sumOdd(4, 6)\n * 5\n */\nfunc sumOdd(l : Int, r : Int) -> Int {\n    var sum = 0\n    for i in l...r {\n        if i % 2 != 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all even natural numbers within the range l and r.\n *\n * >>> sumEven(2, 5)\n * 6\n * >>> sumEven(3, 8)\n * 18\n * >>> sumEven(4, 6)\n * 10\n */\nfunc sumEven(l : Int, r : Int) -> Int {\n    var sum = 0\n    for i in l...r {\n        if i % 2 == 0 {\n            sum += i\n        }\n    }\n    return sum\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find the sum of all odd natural numbers within the range l and r.\n *\n * >>> sumOdd(2, 5)\n * 3\n * >>> sumOdd(3, 8)\n * 15\n * >>> sumOdd(4, 6)\n * 5\n */"}
{"task_id": "MBSWP/963", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to calculate the discriminant value.\n *\n * >>> discriminantValue(4, 8, 2)\n * [\"Two solutions\", 32]\n * >>> discriminantValue(5, 7, 9)\n * [\"no real solution\", -131]\n * >>> discriminantValue(0, 0, 9)\n * [\"one solution\", 0]\n */\nfunc discriminantValue(x : Int, y : Int, z : Int) -> [AnyHashable] {\n    let a = x\n    let b = y\n    let c = z\n    let discriminant = b * b - 4 * a * c\n    if discriminant > 0 {\n        let x1 = (-b + sqrt(discriminant)) / (2 * a)\n        let x2 = (-b - sqrt(discriminant)) / (2 * a)\n        return [\"Two solutions\", x1, x2]\n    } else if discriminant == 0 {\n        return [\"one solution\", -b / (2 * a)]\n    } else {\n        return [\"no real solution\", -b / (2 * a)]\n    }\n}\n"}
{"task_id": "MBSWP/964", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check whether the length of the word is even or not.\n *\n * >>> wordLen(\"program\")\n * false\n * >>> wordLen(\"solution\")\n * true\n * >>> wordLen(\"data\")\n * true\n */\nfunc wordLen(s : String) -> Bool {\n    return s.count % 2 == 0\n}\n"}
{"task_id": "MBSWP/965", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert camel case string to snake case string.\n *\n * >>> camelToSnake(\"PythonProgram\")\n * \"python_program\"\n * >>> camelToSnake(\"pythonLanguage\")\n * \"python_language\"\n * >>> camelToSnake(\"ProgrammingLanguage\")\n * \"programming_language\"\n */\nfunc camelToSnake(text : String) -> String {\n    var result = \"\"\n    var prevChar = \"\"\n    for char in text {\n        if char.isUpperCase() && prevChar.isLowerCase() {\n            result += \"_\"\n        }\n        result += char.toLowerCase()\n        prevChar = char\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert snake case string to camel case string.\n *\n * >>> snakeToCamel(\"python_program\")\n * \"pythonProgram\"\n * >>> snakeToCamel(\"python_language\")\n * \"pythonLanguage\"\n * >>> snakeToCamel(\"programming_language\")\n * \"programmingLanguage\"\n */\nfunc snakeToCamel(text : String) -> String {\n    var result = \"\"\n    var prevChar = \"\"\n    for char in text {\n        if char == \"_\" && prevChar.isUpperCase() {\n            result += char.toUpperCase()\n        } else {\n            result += char\n        }\n        prevChar = char\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to convert camel case string to kebab case string.\n *\n * >>> camelToKebab(\"PythonProgram\")\n * \"python-program\"\n * >>> camelToKebab(\"pythonLanguage\")\n * \"python-language\"\n * >>> camelToKebab(\"ProgrammingLanguage\")\n * \"programming-language\"\n */\nfunc camelToKebab(text : String) -> String {\n    var result = \"\"\n    var prevChar = \"\"\n    for char in text {\n        if char.isUpperCase() && prevChar.isLowerCase() {"}
{"task_id": "MBSWP/966", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove an empty tuple from a list of tuples.\n *\n * >>> removeEmpty([[], [], [\"\"], [\"a\", \"b\"], [\"a\", \"b\", \"c\"], \"d\"])\n * [[\"\"], [\"a\", \"b\"], [\"a\", \"b\", \"c\"], \"d\"]\n * >>> removeEmpty([[], [], [\"\"], \"python\", \"program\"])\n * [[\"\"], \"python\", \"program\"]\n * >>> removeEmpty([[], [], [\"\"], \"java\"])\n * [[\"\"], \"java\"]\n */\nfunc removeEmpty(tuple1 : [AnyHashable]) -> [AnyHashable] {\n    var tuple2 = tuple1\n    for i in 0..<tuple1.count {\n        if tuple1[i] == [] {\n            tuple2.remove(at: i)\n        }\n    }\n    return tuple2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove an empty tuple from a list of tuples.\n *\n * >>> removeEmpty([[], [], [\"\"], [\"a\", \"b\"], [\"a\", \"b\", \"c\"], \"d\"])\n * [[\"\"], [\"a\", \"b\"], [\"a\", \"b\", \"c\"], \"d\"]\n * >>> removeEmpty([[], [], [\"\"], \"python\", \"program\"])\n * [[\"\"], \"python\", \"program\"]\n * >>> removeEmpty([[], [], [\"\"], \"java\"])\n * [[\"\"], \"java\"]\n */\nfunc removeEmpty(tuple1 : [AnyHashable]) -> [AnyHashable] {\n    var tuple2 = tuple1\n    for i in 0..<tuple1.count {\n        if tuple1[i] == [] {\n            tuple2.remove(at: i)\n        }\n    }\n    return tuple2\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to remove an empty tuple from a list of tuples.\n *\n * >>> removeEmpty([[], [], [\"\"], [\"a\", \"b\"], [\"a\", \"b\","}
{"task_id": "MBSWP/967", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to accept the strings which contains all vowels.\n *\n * >>> check(\"SEEquoiaL\")\n * \"accepted\"\n * >>> check(\"program\")\n * \"not accepted\"\n * >>> check(\"fine\")\n * \"not accepted\"\n */\nfunc check(string : String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var count = 0\n    for char in string {\n        if vowels.contains(char) {\n            count += 1\n        }\n    }\n    if count == string.count {\n        return \"accepted\"\n    } else {\n        return \"not accepted\"\n    }\n}\n"}
{"task_id": "MBSWP/968", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to find maximum possible value for the given periodic function.\n *\n * >>> floorMax(11, 10, 9)\n * 9\n * >>> floorMax(5, 7, 4)\n * 2\n * >>> floorMax(2, 2, 1)\n * 1\n */\nfunc floorMax(a : Int, b : Int, n : Int) -> Int {\n    var max = 0\n    for i in 0..<n {\n        max = max(max, a * i + b)\n    }\n    return max\n}\n"}
{"task_id": "MBSWP/969", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to join the tuples if they have similar initial elements.\n *\n * >>> joinTuples([[5, 6], [5, 7], [6, 8], [6, 10], [7, 13]])\n * [[5, 6, 7], [6, 8, 10], [7, 13]]\n * >>> joinTuples([[6, 7], [6, 8], [7, 9], [7, 11], [8, 14]])\n * [[6, 7, 8], [7, 9, 11], [8, 14]]\n * >>> joinTuples([[7, 8], [7, 9], [8, 10], [8, 12], [9, 15]])\n * [[7, 8, 9], [8, 10, 12], [9, 15]]\n */\nfunc joinTuples(testList : [[Int]]) -> [[Int]] {\n    var result : [[Int]] = []\n    var temp : [Int] = []\n    for i in 0..<testList.count {\n        if testList[i].count == 0 {\n            continue\n        }\n        if temp.count == 0 {\n            temp = testList[i]\n            continue\n        }\n        if testList[i][0] == temp[0] {\n            temp.append(testList[i][1])\n        } else {\n            result.append(temp)\n            temp = testList[i]\n        }\n    }\n    result.append(temp)\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to join the tuples if they have similar initial elements.\n *\n * >>> joinTuples([[5, 6], [5, 7], [6, 8], [6, 10], [7, 13]])\n * [[5, 6, 7], [6, 8, 10], [7, 13]]\n * >>> joinTuples([[6, 7], [6, 8], [7, 9], [7, 11], [8, 14]])\n * [[6, 7, 8], [7, 9, 11], [8, 14]]\n *"}
{"task_id": "MBSWP/970", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find minimum of two numbers.\n *\n * >>> minOfTwo(10, 20)\n * 10\n * >>> minOfTwo(19, 15)\n * 15\n * >>> minOfTwo(-10, -20)\n * -20\n */\nfunc minOfTwo(x : Int, y : Int) -> Int {\n    if x < y {\n        return x\n    }\n    return y\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find maximum of two numbers.\n *\n * >>> maxOfTwo(10, 20)\n * 20\n * >>> maxOfTwo(19, 15)\n * 19\n * >>> maxOfTwo(-10, -20)\n * -10\n */\nfunc maxOfTwo(x : Int, y : Int) -> Int {\n    if x > y {\n        return x\n    }\n    return y\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find minimum of three numbers.\n *\n * >>> minOfThree(10, 20, 30)\n * 10\n * >>> minOfThree(19, 15, 10)\n * 10\n * >>> minOfThree(-10, -20, -30)\n * -30\n */\nfunc minOfThree(x : Int, y : Int, z : Int) -> Int {\n    if x < y && x < z {\n        return x\n    }\n    if y < x && y < z {\n        return y\n    }\n    return z\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find maximum of three numbers.\n *\n * >>> maxOfThree(10, 20, 30)\n * 30\n * >>> maxOfThree(19, 15, 10)\n * 19\n * >>> maxOfThree(-10, -20, -30)\n * -10\n */\nfunc maxOfThree(x : Int, y : Int, z : Int) -> Int {\n    if x > y && x > z {\n        return x\n    }\n    if y > x && y"}
{"task_id": "MBSWP/971", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\n *\n * >>> maximumSegments(7, 5, 2, 5)\n * 2\n * >>> maximumSegments(17, 2, 1, 3)\n * 17\n * >>> maximumSegments(18, 16, 3, 6)\n * 6\n */\nfunc maximumSegments(n : Int, a : Int, b : Int, c : Int) -> Int {\n    var max = 0\n    for i in 0..<n {\n        let a1 = i / a\n        let b1 = (i - a1 * a) / b\n        let c1 = i - a1 * a - b1 * b\n        max = max(max, a1 + b1 + c1)\n    }\n    return max\n}\n"}
{"task_id": "MBSWP/972", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to concatenate the given two tuples to a nested tuple.\n *\n * >>> concatenateNested([3, 4], [5, 6])\n * [3, 4, 5, 6]\n * >>> concatenateNested([1, 2], [3, 4])\n * [1, 2, 3, 4]\n * >>> concatenateNested([4, 5], [6, 8])\n * [4, 5, 6, 8]\n */\nfunc concatenateNested(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<testTup1.count {\n        result.append(testTup1[i])\n        result.append(testTup2[i])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to concatenate the given two tuples to a nested tuple.\n *\n * >>> concatenateNested([3, 4], [5, 6])\n * [3, 4, 5, 6]\n * >>> concatenateNested([1, 2], [3, 4])\n * [1, 2, 3, 4]\n * >>> concatenateNested([4, 5], [6, 8])\n * [4, 5, 6, 8]\n */\nfunc concatenateNested(testTup1 : [Int], testTup2 : [Int]) -> [Int] {\n    var result : [Int] = []\n    for i in 0..<testTup1.count {\n        result.append(testTup1[i])\n        result.append(testTup2[i])\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to concatenate the given two tuples to a nested tuple.\n *\n * >>> concatenateNested([3, 4], [5, 6])\n * [3, 4, 5, 6]\n * >>> concatenateNested(["}
{"task_id": "MBSWP/973", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to left rotate the string.\n *\n * >>> leftRotate(\"python\", 2)\n * \"thonpy\"\n * >>> leftRotate(\"bigdata\", 3)\n * \"databig\"\n * >>> leftRotate(\"hadoop\", 1)\n * \"adooph\"\n */\nfunc leftRotate(s : String, d : Int) -> String {\n    var result = \"\"\n    for i in 0..<s.count {\n        result += s[i]\n        if i >= d {\n            result += s[i - d]\n        }\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to right rotate the string.\n *\n * >>> rightRotate(\"python\", 2)\n * \"nthypo\"\n * >>> rightRotate(\"bigdata\", 3)\n * \"adatbig\"\n * >>> rightRotate(\"hadoop\", 1)\n * \"hadoopo\"\n */\nfunc rightRotate(s : String, d : Int) -> String {\n    var result = \"\"\n    for i in 0..<s.count {\n        if i >= d {\n            result += s[i - d]\n        }\n        result += s[i]\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to reverse the string.\n *\n * >>> reverse(\"python\")\n * \"nohtyp\"\n * >>> reverse(\"bigdata\")\n * \"adatibg\"\n * >>> reverse(\"hadoop\")\n * \"popahdo\"\n */\nfunc reverse(s : String) -> String {\n    var result = \"\"\n    for i in 0..<s.count {\n        result += s[s.count - i - 1]\n    }\n    return result\n}\n\n/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a Swift function to check if the string is palindrome.\n *\n * >>> isPalindrome(\"python\")\n * true\n * >>>"}
{"task_id": "MBSWP/974", "language": "swift", "completion": "/**\n * You are an expert Swift programmer, and here is your task.\n * * Write a function to find the minimum total path sum in the given triangle.\n *\n * >>> minSumPath([[2], [3, 9], [1, 6, 7]])\n * 6\n * >>> minSumPath([[2], [3, 7], [8, 5, 6]])\n * 10\n * >>> minSumPath([[3], [6, 4], [5, 2, 7]])\n * 9\n */\nfunc minSumPath(a : [[Int]]) -> Int {\n    var minSum = Int.max\n    var minSumPath = [[Int]]()\n    var minSumPathIndex = 0\n    var minSumPathIndex2 = 0\n    var minSumPathIndex3 = 0\n    var minSumPathIndex4 = 0\n    var minSumPathIndex5 = 0\n    var minSumPathIndex6 = 0\n    var minSumPathIndex7 = 0\n    var minSumPathIndex8 = 0\n    var minSumPathIndex9 = 0\n    var minSumPathIndex10 = 0\n    var minSumPathIndex11 = 0\n    var minSumPathIndex12 = 0\n    var minSumPathIndex13 = 0\n    var minSumPathIndex14 = 0\n    var minSumPathIndex15 = 0\n    var minSumPathIndex16 = 0\n    var minSumPathIndex17 = 0\n    var minSumPathIndex18 = 0\n    var minSumPathIndex19 = 0\n    var minSumPathIndex20 = 0\n    var minSumPathIndex21 = 0\n    var minSumPathIndex22 = 0\n    var minSumPathIndex23 = 0\n    var minSumPathIndex24 = 0\n    var minSumPathIndex25 = 0\n    var minSumPathIndex26 = 0\n    var minSumPathIndex27 = 0\n    var minSumPathIndex28 = 0\n    var minSumPathIndex29 = 0\n    var minSumPathIndex30 = 0\n    var minSumPathIndex31 = 0\n    var minSumPathIndex32 = 0\n    var minSumPathIndex33 = 0\n    var minSumPathIndex34 = 0\n    var minSumPathIndex35 = 0\n    var minSumPathIndex36 = 0\n   "}
