{"id":"swift_task_1","name":"code_todo","instruction":"Using the comment as a guide, complete the following code. The provided code is in Swift languange.","instances":[{"input":"func checkIsEven(_ number: Int) -> Bool {\n    // TODO: Add your code here\n}","output":"func checkIsEven(_ number: Int) -> Bool {\n    return number % 2 == 0\n}"}],"is_classification":false}
{"id":"swift_task_2","name":"code_todo","instruction":"Using the comment as a guide, complete the following code. The provided code is in Swift languange.","instances":[{"input":"func sumOfArray(_ array: [Int]) -> Int {\n    // TODO: Add your code here\n}","output":"func sumOfArray(_ array: [Int]) -> Int {\n    var sum = 0\n    for num in array {\n        sum += num\n    }\n    return sum\n}"}],"is_classification":false}
{"id":"swift_task_3","name":"complete_swift_code","instruction":"Suggest a completion for the following code. The provided code is in Swift languange.","instances":[{"input":"func fibonacci(n: Int) -> Int {\n    if n <= 1 {\n        return n\n    }\n    return fibonacci(n: n-1) + fibonacci(n: n-2)\n}","output":"func fibonacci(n: Int) -> Int {\n    if n <= 1 {\n        return n\n    }\n    return fibonacci(n: n-1) + fibonacci(n: n-2)\n}\n\nlet result = fibonacci(n: 10)\nprint(result)\n"}],"is_classification":false}
{"id":"swift_task_4","name":"sort_swift_array","instruction":"Write a function in Swift language that sorts an array of integers in ascending order.","instances":[{"input":"var numbers = [5, 2, 8, 4, 0, 1]\n","output":"func sortArray(numbers: [Int]) -> [Int] {\n    return numbers.sorted()\n}\n\nlet numbers = [5, 2, 8, 4, 0, 1]\nlet sortedNumbers = sortArray(numbers: numbers)\nprint(sortedNumbers)\n"}],"is_classification":false}
{"id":"swift_task_5","name":"find_primes","instruction":"Write a function in swift language to find all prime numbers between 2 and n (inclusive). The function should take an integer n as input and return a list of primes. ","instances":[{"input":"10","output":"func findPrimes(_ n: Int) -> [Int] {\n    if n < 2 {\n        return []\n    }\n    var primes = [2]\n    if n == 2 {\n        return primes\n    }\n    for i in stride(from: 3, through: n, by: 2) {\n        var isPrime = true\n        let sqrtI = Int(sqrt(Double(i)))\n        for j in 0..<primes.count {\n            let p = primes[j]\n            if p > sqrtI {\n                break\n            }\n            if i % p == 0 {\n                isPrime = false\n                break\n            }\n        }\n        if isPrime {\n            primes.append(i)\n        }\n    }\n    return primes\n}\nprint(findPrimes(10))\n"}],"is_classification":false}
{"id":"swift_task_6","name":"find_missing_number","instruction":"Write a function in swift language to find the missing number in an array of integers from 1 to n (inclusive). The function should take an array of integers as input and return the missing number.","instances":[{"input":"[1, 2, 4, 5, 6]","output":"func findMissingNumber(_ arr: [Int]) -> Int {\n    var sum = 0\n    for i in 1...arr.count+1 {\n        sum += i\n    }\n    for num in arr {\n        sum -= num\n    }\n    return sum\n}\nprint(findMissingNumber([1, 2, 4, 5, 6]))\n"}],"is_classification":false}
{"id":"seed_task_7","name":"swift_class_creation","instruction":"Create a Swift class named Person that has two properties: name (a string) and age (an integer). The class should have a constructor that sets the name and age properties. ","instances":[{"input":"","output":"class Person {\n   var name: String\n    var age: Int\n    \n    init(name: String, age: Int) {\n        self.name = name\n        self.age = age\n            }\n}\n\nlet person = Person(name: \"John Doe\", age: 30)\nprint(person.name)\n// Output: \"John Doe\"\nprint(person.age)\n// Output: 30\n"}],"is_classification":false}
{"id":"seed_task_8","name":"swift_code_generation","instruction":"Generate a Swift function that takes two parameters: a string and an integer. The function should return the input string repeated n times, where n is the integer parameter. ","instances":[{"input":"","output":"func repeatString(string: String, times: Int) -> String {    \n    return String(repeating: string, count: times)\n    }\nprint(repeatString(string: 'hello', times: 3))\n// Output: hellohellohello \n"}],"is_classification":false}
{"id":"seed_task_9","name":"swift_code_generation","instruction":"Generate a Swift ViewController that has a tableView with constraint","instances":[{"input":"","output":"class ViewController: UIViewController {\n    private lazy var tableView: UITableView = {\n        let tableView = UITableView()\n        tableView.translatesAutoresizingMaskIntoConstraints = false\n        tableView.separatorColor = .clear\\        return tableView\n    }()\n        override func loadView() {\n        super.loadView()\n        NSLayoutConstraint.activate([\n            tableView.topAnchor.constraint(equalTo: view.topAnchor),\n            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            ])\n    }\n}\n"}],"is_classification":false}
{"id":"seed_task_10","name":"swift_code_generation","instruction":"Generate an extension of the ViewController class that handle  UITableViewDataSource","instances":[{"input":"","output":"\n// MARK: - UITableViewDataSource\nextension ViewController: UITableViewDataSource {\n//make sure to set the delegate and datasource in viewDidLoad\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return dataSource.count // your number of cell here\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath)\n        -> UITableViewCell {\n            return UITableViewCell()\n    }\n\n    }\n"}],"is_classification":false}
{"id":"seed_task_11","name":"swift_code_generation","instruction":"Write a swift function that add a button","instances":[{"input":"","output":"import UIKit\n\nclass ViewController: UIViewController {\n    \n    // Step 1: Define a lazy closure to create a UIButton\n    lazy var button: UIButton = {\n        let button = UIButton(type: .system)\n        button.setTitle(\"Button\", for: .normal)\n        return button\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        // Step 2: Add the button as a subview\n        view.addSubview(button)\n        \n        // Step 3: Set up constraints for the button\n        button.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            button.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            button.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n    \n}\n"}],"is_classification":false}
{"id":"seed_task_12","name":"swift_code_generation","instruction":"Write a swift function that when the button is tapped a UIViewController is pushed","instances":[{"input":"","output":"\n    \n    @objc func buttonTapped() {\n        let newViewController = UIViewController()\n        newViewController.view.backgroundColor = .white\n        self.navigationController?.pushViewController(newViewController, animated: true)\n    }\n//make sure to add the button to the view\n//make sure to add the target to the button with the following function \n//button.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside) \n"}],"is_classification":false}
{"id":"seed_task_13","name":"swift_code_generation","instruction":"Write a swift function that selected a cell of a tableView changes the selected background view of the cell to clear","instances":[{"input":"","output":"\n// MARK: - UITableViewDataSource\nextension MyViewController: UITableViewDataSource {\n//make sure to set the delegate and datasource in viewDidLoad\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return dataSource.count // your number of cell here\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath)\n        -> UITableViewCell {\n            return UITableViewCell()\n    }\n\n    }\n"}],"is_classification":false}
{"id":"seed_task_14","name":"swift_code_generation","instruction":"Write the code to creates a label and adds it to the view with constraints.","instances":[{"input":"\nPrivate lazy initialization is used to define the label, setting properties like removing intrinsic content size and setting initial text.\nIn viewDidLoad(), the label is added as a subview of the view controller's main view, making it appear on screen.\nIn loadView(), auto layout constraints are activated to constrain the label to all four edges of the view controller's view. Specifically:\nA top anchor constraint equal to the view's top anchor, pinning the label to the top of the view\nA bottom anchor constraint equal to the view's bottom anchor, pinning the label to the bottom of the view\nA leading anchor constraint equal to the view's leading anchor, pinning the label to the left edge\nA trailing anchor constraint equal to the view's trailing anchor, pinning the label to the right edge\nSince the label is constrained to fill the full view, when the view resizes - such as when the device orientation changes - the label will also resize to fill the new view size, updating its frame accordingly.\n    ","output":"\n    private lazy var label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.text = \"This is a label\"\n        return label\n    }()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(label)\n    }\n\n    override func loadView() {\n        super.loadView()\n        NSLayoutConstraint.activate([\n            label.topAnchor.constraint(equalTo: view.topAnchor),\n            label.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            label.leadingAnchor.constraint(equalTo: view.leadingAnchor),            \n            label.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            ])\n    }\n"}],"is_classification":false}
{"id":"seed_task_15","name":"code_todo","instruction":"Using the comment as a guide, complete the following code.","instances":[{"input":"\n    func add(transaction: Transaction, completion: @escaping () -> ()) -> DataSource {\n        // TODO: Add your code here\n\n    }\n    ","output":"\n    func add(transaction: Transaction, completion: @escaping () -> ()) -> DataSource {\n        dataSource.listaMovimenti.append(transaction)\n        completion()\n        \n        return dataSource\n    }\n"}],"is_classification":false}
{"id":"seed_task_16","name":"swift_code_generation","instruction":"Write the DataSource structure with three properties: infoPrincipali, listaCarte, and listaMovimenti, which are of objects type Account, [Card], and [Transaction], respectively.","instances":[{"input":"","output":"\nimport Foundation\n\npublic struct DataSource: Codable, Equatable {\n    var infoPrincipali: Account\n    var listaCarte: [Card]\n    var listaMovimenti: [Transaction]\n    \n    public init(infoPrincipali: Account, listaCarte: [Card], listaMovimenti: [Transaction]) {\n        self.infoPrincipali = infoPrincipali\n        self.listaCarte = listaCarte\n        self.listaMovimenti = listaMovimenti\n    }\n}\n"}],"is_classification":false}
{"id":"seed_task_17","name":"code_todo","instruction":"Using the comment as a guide, complete the following code.","instances":[{"input":"\n    func showAllTransacionAllTransactionViewController(_ mainViewController: MainViewController) {\n        // TODO: Add your code here\n\n    }\n    ","output":"\n    func showAllTransacionAllTransactionViewController(_ mainViewController: MainViewController) {\n        let allTransactionViewController: AllTransactionViewController = buildAllTransactionViewController()\n        allTransactionViewController.configure(with: manager.transactions)\n        \n        navigationController.pushViewController(allTransactionViewController, animated: true)\n    }\n"}],"is_classification":false}
{"id":"seed_task_18","name":"swift_code_generation","instruction":"Write a swift function that dismisses the AddTransactionViewController when executed.","instances":[{"input":"","output":"\nimport Foundation\n\npublic struct DataSource: Codable, Equatable {\n    var infoPrincipali: Account\n    var listaCarte: [Card]\n    var listaMovimenti: [Transaction]\n    \n    public init(infoPrincipali: Account, listaCarte: [Card], listaMovimenti: [Transaction]) {\n        self.infoPrincipali = infoPrincipali\n        self.listaCarte = listaCarte\n        self.listaMovimenti = listaMovimenti\n    }\n}\n"}],"is_classification":false}
{"id":"seed_task_19","name":"code_todo","instruction":"Using the comment as a guide, complete the following code.","instances":[{"input":"\nclass Presenter {\n    // previous code\n    func buildMainViewController() -> MainViewController {\n        let mainViewController = storyboard.instantiateViewController(identifier: \"mainViewController\") as! MainViewController\n        self.mainViewController = mainViewController\n        mainViewController.delegate = self\n        return mainViewController\n    }\n    \n    func buildAddTransactionViewController() -> AddTransactionViewController {\n        let addTransactionViewController = storyboard.instantiateViewController(identifier: \"AddTransactionViewController\") as! AddTransactionViewController\n        // TODO: Add your code here\n\n    }\n}\n    ","output":"\nclass Presenter {\n    // previous code\n    func buildMainViewController() -> MainViewController {\n        let mainViewController = storyboard.instantiateViewController(identifier: \"mainViewController\") as! MainViewController\n        self.mainViewController = mainViewController\n        mainViewController.delegate = self\n        return mainViewController\n    }\n    \n    func buildAddTransactionViewController() -> AddTransactionViewController {\n        let addTransactionViewController = storyboard.instantiateViewController(identifier: \"AddTransactionViewController\") as! AddTransactionViewController\n        self.addTransactionViewController = addTransactionViewController\n        addTransactionViewController.delegate = self\n        return addTransactionViewController\n    }\n}\n"}],"is_classification":false}
{"id":"seed_task_20","name":"code_todo","instruction":"Write a swift function called instantiateDataSource that insert the elements, from transactions and cards arrays, in the rigth data source with the correct type on the enum TableViewDataSourceType. If there are more than 10 elemets in transations array, the function should insert only the first 10 elements and then insert a visualizzaTutte element.","instances":[{"input":"\nprotocol MainViewControllerDelegate {\n    func mainViewControllerDidTapOnAddTransaction(_ mainViewController: MainViewController)\n    func showAllTransacionAllTransactionViewController(_ mainViewController: MainViewController)\n}\n\nclass MainViewController: UIViewController {\n    private enum TableViewDataSourceType {\n        case transaction(object: Transaction)\n        case visualizzaTutte\n    }\n    \n    public var delegate: MainViewControllerDelegate?\n    private var tableViewDataSource: [TableViewDataSourceType] = []\n    private var collectionViewDataSource: [CollectionViewDataSourceType] = []\n\n    private var transactions: [Transaction] = []\n    private var cards: [Card] = []\n    private var account: Account!\n    \n    public func configure(with transactions: [Transaction], cards: [Card], account: Account) {\n        self.transactions = transactions\n        self.cards = cards\n        self.account = account\n        instantiateDataSource()\n    }\n    // other code\n    \n}","output":"    \n    private func instantiateDataSource() {\n        \n        switch areMoreThan10() {\n        case true:\n            for transaction in self.transactions[0..<10] {\n                tableViewDataSource.append(.transaction(object: transaction))\n            }\n            tableViewDataSource.append(.visualizzaTutte)\n        case false:\n            for transaction in self.transactions {\n                tableViewDataSource.append(.transaction(object: transaction))\n            }\n        }\n        \n        for card in cards {\n            collectionViewDataSource.append(.card(object: card))\n        }\n    }"}],"is_classification":false}
{"id":"seed_task_21","name":"swift_code_generation","instruction":"Write a Swift function that adds a UITextField with a specified placeholder to a UIView.","instances":[{"input":"","output":"\nimport UIKit\n\nclass MyViewController: UIViewController {\n    \n    private lazy var textField: UITextField = {\n        let textField = UITextField()\n        textField.translatesAutoresizingMaskIntoConstraints = false\n        textField.placeholder = \"Enter text: \"\n        return textField\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(textField)\n        \n        NSLayoutConstraint.activate([\n            textField.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            textField.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n        ])\n    }\n    \n}\n"}],"is_classification":false}
{"id":"seed_task_22","name":"swift_code_generation","instruction":"Write a Swift function that toggles the visibility of a UIView.","instances":[{"input":"","output":"\nfunc toggleVisibility(_ view: UIView) {\n    view.isHidden = !view.isHidden\n}\n"}],"is_classification":false}
{"id":"seed_task_23","name":"swift_code_generation","instruction":"Write a Swift function that rotates a UIView by a specified angle in degrees.","instances":[{"input":"","output":"\nimport UIKit\n\nfunc rotate(_ view: UIView, by angle: CGFloat) {\n    let radians = angle * .pi / 180\n    view.transform = view.transform.rotated(by: radians)\n}\n"}],"is_classification":false}
{"id":"seed_task_24","name":"swift_code_generation","instruction":"Write a Swift function that scales a UIView by a specified factor.","instances":[{"input":"","output":"\nimport UIKit\n\nfunc scale(_ view: UIView, by factor: CGFloat) {\n    view.transform = view.transform.scaledBy(x: factor, y: factor)\n}\n"}],"is_classification":false}
{"id":"seed_task_25","name":"swift_code_generation","instruction":"Generate a Swift function to display an UIAlertController with a title, message and an OK action button","instances":[{"input":"","output":"\nfunc showAlert(title: String, message: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let okAction = UIAlertAction(title: \"OK\", style: .default, handler: nil)\n    alertController.addAction(okAction)\n    self.present(alertController, animated: true, completion: nil)\n}\n"}],"is_classification":false}
{"id":"seed_task_26","name":"swift_code_generation","instruction":"Write a Swift function to create and present a UIImagePickerController with the photo library as its source type","instances":[{"input":"","output":"\nfunc presentImagePickerController() {\n    let imagePickerController = UIImagePickerController()\n    imagePickerController.delegate = self\n    imagePickerController.sourceType = .photoLibrary\n    self.present(imagePickerController, animated: true, completion: nil)\n}\n\n// Make sure to conform to UIImagePickerControllerDelegate & UINavigationControllerDelegate\n// extension ViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n// func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {\n// // Handle selected image\n// }\n// }\n"}],"is_classification":false}
{"id":"seed_task_27","name":"swift_code_generation","instruction":"Write a Swift function to programmatically create a UISegmentedControl with an array of strings as the segment titles","instances":[{"input":"","output":"\nfunc createSegmentedControl(titles: [String]) -> UISegmentedControl {\n    let segmentedControl = UISegmentedControl(items: titles)\n    segmentedControl.translatesAutoresizingMaskIntoConstraints = false\n    return segmentedControl\n}\n"}],"is_classification":false}
{"id":"seed_task_28","name":"swift_code_generation","instruction":"Write a Swift function that initializes a UIPickerView and sets up its delegate and dataSource","instances":[{"input":"","output":"\nfunc setupPickerView() -> UIPickerView {\n    let pickerView = UIPickerView()\n    pickerView.translatesAutoresizingMaskIntoConstraints = false\n    pickerView.delegate = self\n    pickerView.dataSource = self\n    return pickerView\n}\n\n// Make sure to conform to UIPickerViewDelegate & UIPickerViewDataSource\n// extension ViewController: UIPickerViewDelegate, UIPickerViewDataSource {\n// func numberOfComponents(in pickerView: UIPickerView) -> Int { return 1 }\n// func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int { return dataSource.count }\n// func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? { return dataSource[row] }\n// }\n"}],"is_classification":false}
{"id":"seed_task_29","name":"swift_code_generation","instruction":"Write a Swift function that registers a UITableViewCell subclass for use in a UITableView","instances":[{"input":"","output":"\nfunc registerTableViewCell(tableView: UITableView) {\n    tableView.register(MyTableViewCell.self, forCellReuseIdentifier: \"MyTableViewCell\")\n}\n    \n// Make sure to create a UITableViewCell subclass called MyTableViewCell\n// class MyTableViewCell: UITableViewCell {\n// // Custom cell implementation\n// }\n"}],"is_classification":false}
{"id":"seed_task_30","name":"swift_code_generation","instruction":"Write a Swift function to dequeue a reusable UITableViewCell with an identifier in cellForRowAt indexPath function","instances":[{"input":"","output":"\nfunc tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n    let cell = tableView.dequeueReusableCell(withIdentifier: \"MyTableViewCell\", for: indexPath) as! MyTableViewCell\n    // Configure cell\n    return cell\n}\n"}],"is_classification":false}
{"id":"seed_task_31","name":"swift_code_generation","instruction":"Write a Swift function that calculates and returns the height of a UILabel with a given text, font, and width","instances":[{"input":"","output":"\nfunc heightForLabel(text: String, font: UIFont, width: CGFloat) -> CGFloat {\n    let constraintRect = CGSize(width: width, height: .greatestFiniteMagnitude)\n    let boundingBox = text.boundingRect(with: constraintRect, options: .usesLineFragmentOrigin, attributes: [NSAttributedString.Key.font: font], context: nil)\n    return ceil(boundingBox.height)\n}\n"}],"is_classification":false}
{"id":"seed_task_32","name":"swift_code_generation","instruction":"Write a Swift function that loads a URL in a WKWebView","instances":[{"input":"","output":"\nimport WebKit\n\nclass ViewController: UIViewController {\n    \n    private lazy var webView: WKWebView = {\n        let webView = WKWebView()\n        webView.translatesAutoresizingMaskIntoConstraints = false\n        return webView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(webView)\n        setupConstraints()\n        loadURL(urlString: \"https://www.example.com\")\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            webView.topAnchor.constraint(equalTo: view.topAnchor),\n            webView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            webView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            webView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    func loadURL(urlString: String) {\n        if let url = URL(string: urlString) {\n            let request = URLRequest(url: url)\n            webView.load(request)\n        }\n    }\n    \n}\n\n"}],"is_classification":false}
{"id":"seed_task_33","name":"swift_code_generation","instruction":"Write a Swift function to create a custom UIView with rounded corners and a specified background color","instances":[{"input":"","output":"\nfunc createRoundedView(backgroundColor: UIColor, cornerRadius: CGFloat) -> UIView {\n    let view = UIView()\n    view.backgroundColor = backgroundColor\n    view.layer.cornerRadius = cornerRadius\n    view.clipsToBounds = true\n    view.translatesAutoresizingMaskIntoConstraints = false\n    return view\n}\n"}],"is_classification":false}
{"id":"seed_task_34","name":"swift_code_generation","instruction":"Write a Swift function to create and configure a UITextField with a placeholder text and keyboardType","instances":[{"input":"","output":"\nfunc createTextField(placeholder: String, keyboardType: UIKeyboardType) -> UITextField {\n    let textField = UITextField()\n    textField.placeholder = placeholder\n    textField.keyboardType = keyboardType\n    textField.translatesAutoresizingMaskIntoConstraints = false\n    return textField\n}\n"}],"is_classification":false}
{"id":"seed_task_35","name":"swift_code_generation","instruction":"Write a Swift function that adds a target to a UIControl with a specified selector and control event","instances":[{"input":"","output":"\nfunc addTarget(control: UIControl, target: Any?, action: Selector, for controlEvents: UIControl.Event) {\n    control.addTarget(target, action: action, for: controlEvents)\n}\n"}],"is_classification":false}
{"id":"seed_task_36","name":"swift_code_generation","instruction":"Write a Swift function that animates the change in the alpha value of a UIView","instances":[{"input":"","output":"\nfunc animateAlpha(view: UIView, alpha: CGFloat, duration: TimeInterval) {\n    UIView.animate(withDuration: duration) {\n        view.alpha = alpha\n    }\n}\n"}],"is_classification":false}
{"id":"seed_task_37","name":"swift_code_generation","instruction":"Write a Swift function that returns a DateFormatter with a specified date format and locale","instances":[{"input":"","output":"\nfunc createDateFormatter(format: String, locale: Locale) -> DateFormatter {\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = format\n    dateFormatter.locale = locale\n    return dateFormatter\n}\n"}],"is_classification":false}
{"id":"seed_task_38","name":"swift_code_generation","instruction":"Write a Swift function that generates and returns a random UIColor","instances":[{"input":"","output":"\nfunc randomColor() -> UIColor {\n    let red = CGFloat(arc4random_uniform(256)) / 255.0\n    let green = CGFloat(arc4random_uniform(256)) / 255.0\n    let blue = CGFloat(arc4random_uniform(256)) / 255.0\n    return UIColor(red: red, green: green, blue: blue, alpha: 1.0)\n}\n"}],"is_classification":false}
{"id": "seed_task_39", "name": "code_todo", "instruction": "Create a custom collection view cell with an image view and title label, and a custom collection view controller that uses the custom cell", "instances": [{"input": "", "output": "    \nimport UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n    \n    func configure(with image: UIImage, title: String) {\n        imageView.image = image\n        titleLabel.text = title\n    }\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCollectionViewCell\", for: indexPath) as! CustomCollectionViewCell\n        let item = items[indexPath.item]\n        cell.configure(with: item.image, title: item.title)\n        return cell\n    }\n}\n"}], "is_classification": false}
{"id": "seed_task_40", "name": "code_todo", "instruction": "Create a UserManager class that can add, get, and remove users based on their ID.", "instances": [{"input": "", "output": "    \nimport Foundation\n\nstruct User {\n    let id: Int\n    let name: String\n    let email: String\n    let phoneNumber: String\n}\n\nclass UserManager {\n    private var users: [Int: User] = [:]\n\n    func addUser(_ user: User) {\n        users[user.id] = user\n    }\n\n    func getUser(withId id: Int) -> User? {\n        return users[id]\n    }\n\n    func removeUser(withId id: Int) {\n        users.removeValue(forKey: id)\n    }\n}\n"}], "is_classification": false}
{"id": "seed_task_41", "name": "code_todo", "instruction": "Create a Vehicle protocol and a Car class that conforms to the protocol.", "instances": [{"input": "", "output": "    \nimport UIKit\n\nprotocol Vehicle {\n    var make: String { get }\n    var model: String { get }\n    var year: Int { get }\n    var numberOfWheels: Int { get }\n    \n    func startEngine()\n    func stopEngine()\n}\n\nextension Vehicle {\n    func description() -> String {\n        return \"\\(year) \\(make) \\(model)\"\n    }\n}\n\nclass Car: Vehicle {\n    let make: String\n    let model: String\n    let year: Int\n    let numberOfWheels: Int = 4\n    \n    init(make: String, model: String, year: Int) {\n        self.make = make\n        self.model = model\n        self.year = year\n    }\n    \n    func startEngine() {\n        print(\"Starting the engine of the \\(description())\")\n    }\n    \n    func stopEngine() {\n        print(\"Stopping the engine of the \\(description())\")\n    }\n}\n"}], "is_classification": false}
