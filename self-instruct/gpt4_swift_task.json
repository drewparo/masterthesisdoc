[
    {
      "instruction": "Write a Swift function that fetches a list of users from a JSON API and decodes it into an array of User objects.",
      "input": "",
      "output": "\nimport Foundation\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let email: String\n}\n\nclass APIManager {\n    static let shared = APIManager()\n    \n    func fetchUsers(completion: @escaping ([User]?) -> Void) {\n        let url = URL(string: \"https://api.example.com/users\")!\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            guard let data = data, error == nil else {\n                completion(nil)\n                return\n            }\n            \n            do {\n                let users = try JSONDecoder().decode([User].self, from: data)\n                completion(users)\n            } catch {\n                print(\"Error decoding JSON: \\(error)\")\n                completion(nil)\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a UIBarButtonItem to the navigation bar and triggers a segue when tapped.",
      "input": "",
      "output": "import UIKit\n\nclass MyViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let barButtonItem = UIBarButtonItem(title: \"Next\", style: .plain, target: self, action: #selector(barButtonTapped))\n        navigationItem.rightBarButtonItem = barButtonItem\n    }\n    \n    @objc func barButtonTapped() {\n        performSegue(withIdentifier: \"showNextViewController\", sender: self)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that handles user location updates using CoreLocation.",
      "input": "",
      "output": "import UIKit\nimport CoreLocation\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            print(\"User location updated: \\(location)\")\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Failed to get user location: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a UIImage, resizes it, and returns the resized image.",
      "input": "",
      "output": "import UIKit\n\nfunc resizeImage(image: UIImage, targetSize: CGSize) -> UIImage {\n    let originalSize = image.size\n    let widthRatio  = targetSize.width / originalSize.width\n    let heightRatio = targetSize.height / originalSize.height\n    \n    let newSize: CGSize\n    if widthRatio > heightRatio {\n        newSize = CGSize(width: originalSize.width * heightRatio, height: originalSize.height * heightRatio)\n    } else {\n        newSize = CGSize(width: originalSize.width * widthRatio, height: originalSize.height * widthRatio)\n    }\n    \n    let rect = CGRect(x: 0, y: 0, width: newSize.width, height: newSize.height)\n    \n    UIGraphicsBeginImageContextWithOptions(newSize, false, 1.0)\n    image.draw(in: rect)\n    let newImage = UIGraphicsGetImageFromCurrentImageContext()\n    UIGraphicsEndImageContext()\n    \n    return newImage!\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UIAlertController with a text field and an action button to submit the input.",
      "input": "",
      "output": "import UIKit\n\nclass MyViewController: UIViewController {\n\n    func presentTextInputAlert() {\n        let alertController = UIAlertController(title: \"Enter Text\", message: \"Please enter some text:\", preferredStyle: .alert)\n        \n        alertController.addTextField()\n        \n        let submitAction = UIAlertAction(title: \"Submit\", style: .default) { [unowned alertController] _ in\n            let textField = alertController.textFields![0]\n            print(\"Text submitted: \\(textField.text ?? \"\")\")\n        }\n        \n        alertController.addAction(submitAction)\n        \n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that fetches the user's contacts using CNContactStore and prints them.",
      "input": "",
      "output": "import Contacts\n\nfunc fetchContacts() {\n    let contactStore = CNContactStore()\n    let keysToFetch = [CNContactGivenNameKey, CNContactFamilyNameKey, CNContactPhoneNumbersKey] as [CNKeyDescriptor]\n    var contacts = [CNContact]()\n    let request = CNContactFetchRequest(keysToFetch: keysToFetch)\n\n    do {\n        try contactStore.enumerateContacts(with: request) { (contact, stop) in\n            contacts.append(contact)\n        }\n    } catch {\n        print(\"Failed to fetch contacts: \\(error.localizedDescription)\")\n    }\n    \n    for contact in contacts {\n        print(\"Name: \\(contact.givenName) \\(contact.familyName)\")\n        for phoneNumber in contact.phoneNumbers {\n            print(\"Phone number: \\(phoneNumber.value.stringValue)\")\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that creates a UICollectionView with a custom UICollectionViewCell and displays images in a grid.",
      "input": "",
      "output": "import UIKit\n\nclass ImageGridViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    private let images = [UIImage(named: \"image1\"), UIImage(named: \"image2\"), UIImage(named: \"image3\")]\n    private let reuseIdentifier = \"imageCell\"\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let collectionView = UICollectionView(frame: view.bounds, collectionViewLayout: createFlowLayout())\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(ImageCollectionViewCell.self, forCellWithReuseIdentifier: reuseIdentifier)\n        collectionView.backgroundColor = .white\n        view.addSubview(collectionView)\n    }\n    \n    func createFlowLayout() -> UICollectionViewFlowLayout {\n        let layout = UICollectionViewFlowLayout()\n        layout.itemSize = CGSize(width: view.bounds.width / 3 - 10, height: view.bounds.width / 3 - 10)\n        layout.minimumLineSpacing = 10\n        layout.minimumInteritemSpacing = 10\n        return layout\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return images.count\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! ImageCollectionViewCell\n        cell.imageView.image = images[indexPath.item]\n        return cell\n    }\n}\n\nclass ImageCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(imageView)\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that plays an audio file using AVFoundation.",
      "input": "",
      "output": "import AVFoundation\n\nclass AudioPlayerController: UIViewController {\n    var audioPlayer: AVAudioPlayer?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        if let url = Bundle.main.url(forResource: \"audiofile\", withExtension: \"mp3\") {\n            do {\n                audioPlayer = try AVAudioPlayer(contentsOf: url)\n                audioPlayer?.prepareToPlay()\n            } catch {\n                print(\"Error loading audio file: \\(error)\")\n            }\n        }\n    }\n    \n    func playAudio() {\n        audioPlayer?.play()\n    }\n    \n    func pauseAudio() {\n        audioPlayer?.pause()\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to create a custom UIAlertController with a title, message, and actions",
      "input": "",
      "output": "func createCustomAlertController(title: String, message: String, actions: [UIAlertAction]) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n\n    for action in actions {\n        alertController.addAction(action)\n    }\n\n    return alertController\n}"
    },
    {
      "instruction": "Write a Swift function to create a URLSession data task to fetch data from a URL and decode it to a specified model",
      "input": "",
      "output": "func fetchData<T: Decodable>(url: URL, model: T.Type, completion: @escaping (T?, Error?) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil else {\n            completion(nil, error)\n            return\n        }\n\n        do {\n            let decodedData = try JSONDecoder().decode(T.self, from: data)\n            completion(decodedData, nil)\n        } catch let decodingError {\n            completion(nil, decodingError)\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": "Write a SwiftUI View that displays an image with a circular shape and a border",
      "input": "",
      "output": "import SwiftUI\n\nstruct CircularImageView: View {\n    let image: Image\n    \n    var body: some View {\n        image\n            .resizable()\n            .aspectRatio(contentMode: .fill)\n            .frame(width: 100, height: 100)\n            .clipShape(Circle())\n            .overlay(Circle().stroke(Color.white, lineWidth: 4))\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to create and present a UIActivityViewController to share content",
      "input": "",
      "output": "func presentActivityViewController(viewController: UIViewController, items: [Any]) {\n    let activityViewController = UIActivityViewController(activityItems: items, applicationActivities: nil)\n    viewController.present(activityViewController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": "Write a Swift function to create and configure a UICollectionView with a compositional layout",
      "input": "",
      "output": "func createConfiguredCollectionView() -> UICollectionView {\n    let layout = UICollectionViewCompositionalLayout { (sectionIndex, layoutEnvironment) -> NSCollectionLayoutSection? in\n        let itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1.0), heightDimension: .fractionalHeight(1.0))\n        let item = NSCollectionLayoutItem(layoutSize: itemSize)\n        let groupSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1.0), heightDimension: .absolute(100))\n        let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitems: [item])\n        let section = NSCollectionLayoutSection(group: group)\n        return section\n    }\n\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    collectionView.backgroundColor = .systemBackground\n\n    return collectionView\n}"
    },
    {
      "instruction": "Write a Swift function to register a UITableViewCell subclass using a UITableView object",
      "input": "",
      "output": "func registerTableViewCell(tableView: UITableView, cellClass: UITableViewCell.Type, reuseIdentifier: String) {\n    tableView.register(cellClass, forCellReuseIdentifier: reuseIdentifier)\n}"
    },
    {
      "instruction": "Write a Swift function to asynchronously download an image from a URL and update a UIImageView",
      "input": "",
      "output": "func downloadImage(url: URL, imageView: UIImageView) {\n    DispatchQueue.global().async {\n        if let data = try? Data(contentsOf: url) {\n            DispatchQueue.main.async {\n                imageView.image = UIImage(data: data)\n            }\n        }\n    }\n}"
    },
    {
      "instruction": "Write a SwiftUI View Modifier to apply a custom font, color, and padding to text",
      "input": "",
      "output": "import SwiftUI\n\nstruct CustomTextModifier: ViewModifier {\n    let font: Font\n    let color: Color\n    let padding: EdgeInsets\n\n    func body(content: Content) -> some View {\n        content\n            .font(font)\n            .foregroundColor(color)\n            .padding(padding)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that retrieves an image from a specified URL and sets it to a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc loadImage(from url: URL, into imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { data, _, _ in\n        guard let data = data, let image = UIImage(data: data) else { return }\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift code snippet that demonstrates how to use the Core Location framework to get the user's current location",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n\n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            print(\"Current location: \\(location)\")\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error getting location: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that saves a given text to a file in the app's Documents directory",
      "input": "",
      "output": "import Foundation\n\nfunc saveTextToFile(_ text: String, fileName: String) {\n    let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!\n    let fileURL = documentsDirectory.appendingPathComponent(fileName)\n\n    do {\n        try text.write(to: fileURL, atomically: true, encoding: .utf8)\n    } catch {\n        print(\"Error writing to file: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift code snippet that demonstrates how to use the PusherSwift framework to subscribe to a channel and bind to an event",
      "input": "",
      "output": "import PusherSwift\n\nclass PusherManager {\n    let pusher: Pusher\n\n    init() {\n        let options = PusherClientOptions(\n            host: .cluster(\"eu\")\n        )\n        pusher = Pusher(key: \"YOUR_APP_KEY\", options: options)\n        pusher.connect()\n\n        let channel = pusher.subscribe(\"my-channel\")\n        channel.bind(eventName: \"my-event\") { eventData in\n            if let data = eventData.data {\n                print(\"Received data: \\(data)\")\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UIAlertController with a title, message, and action buttons",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomAlertController(title: String, message: String, actions: [UIAlertAction]) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    for action in actions {\n        alertController.addAction(action)\n    }\n    \n    return alertController\n}"
    },
    {
      "instruction": " \nWrite a Swift function that demonstrates how to use the Firebase Realtime Database to save data",
      "input": "",
      "output": "import FirebaseDatabase\n\nfunc saveDataToFirebaseDatabase(data: [String: Any], path: String) {\n    let databaseReference = Database.database().reference()\n    let dataReference = databaseReference.child(path)\n    \n    dataReference.setValue(data) { error, _ in\n        if let error = error {\n            print(\"Error saving data: \\(error)\")\n        } else {\n            print(\"Data saved successfully\")\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that demonstrates how to use the Alamofire framework to make a GET request",
      "input": "",
      "output": "import Alamofire\n\nfunc makeGetRequest(url: String, parameters: [String: Any], completionHandler: @escaping (Result<Data, AFError>) -> Void) {\n    AF.request(url, parameters: parameters).responseData { response in\n        completionHandler(response.result)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that demonstrates how to use the RealmSwift framework to add and retrieve objects",
      "input": "",
      "output": "import RealmSwift\n\nclass MyObject: Object {\n    @objc dynamic var id = 0\n    @objc dynamic var name = \"\"\n}\n\nfunc addAndRetrieveObjects() {\n    let realm = try! Realm()\n\n    // Adding an object\n    let newObject = MyObject()\n    newObject.id = 1\n    newObject.name = \"Example\"\n\n    try! realm.write {\n        realm.add(newObject)\n    }\n\n    // Retrieving objects\n    let results = realm.objects(MyObject.self)\n    for object in results {\n        print(\"ID: \\(object.id), Name: \\(object.name)\")\n   }"
    },
    {
      "instruction": "Write the code to create a UITableView with a custom UITableViewCell, register the cell, and implement UITableViewDataSource methods.",
      "input": "A UITableView object is created and added to the view controller's main view.\nCustom UITableViewCell is defined as a separate class and is registered with the UITableView.\nUITableViewDataSource protocol is adopted by the view controller, and the required methods are implemented to display the custom cells in the table view.\nIn viewDidLoad(), the table view is added as a subview and the cell is registered.\nIn loadView(), auto layout constraints are used to place the table view within the view controller's main view.",
      "output": "class CustomTableViewCell: UITableViewCell {\n    // Custom cell implementation\n}\n\nclass TableViewController: UIViewController, UITableViewDataSource {\n    private let cellReuseIdentifier = \"CustomTableViewCell\"\n\n    private lazy var tableView: UITableView = {\n        let tableView = UITableView()\n        tableView.translatesAutoresizingMaskIntoConstraints = false\n        tableView.dataSource = self\n        return tableView\n    }()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(tableView)\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)\n    }\n\n    override func loadView() {\n        super.loadView()\n        NSLayoutConstraint.activate([\n            tableView.topAnchor.constraint(equalTo: view.topAnchor),\n            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n        ])\n    }\n\n    // UITableViewDataSource methods\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        // Return the number of rows in the section\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier, for: indexPath) as! CustomTableViewCell\n        // Configure the cell with data\n        return cell\n    }\n}"
    },
    {
      "instruction": "Write the code to create a custom UIView with a UIImageView and UILabel, with auto layout constraints to position them.",
      "input": "A custom UIView subclass is created with a UIImageView and UILabel as subviews.\nAuto layout constraints are used to position the UIImageView and UILabel within the custom view.\nThe UIImageView is centered horizontally and vertically within the custom view.\nThe UILabel is positioned below the UIImageView with a small margin.",
      "output": "class CustomView: UIView {\n    private lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n\n    private lazy var label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupSubviews()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupSubviews()\n    }\n\n    private func setupSubviews() {\n        addSubview(imageView)\n        addSubview(label)\n\n        NSLayoutConstraint.activate([\n            imageView.centerXAnchor.constraint(equalTo: centerXAnchor),\n            imageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n\n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n            label.centerXAnchor.constraint(equalTo: centerXAnchor),\n        ])\n    }\n}"
    },
    {
      "instruction": "Write the code to create a UICollectionView with a custom UICollectionViewCell, register the cell, and implement UICollectionViewDataSource and UICollectionViewDelegateFlowLayout methods.",
      "input": "A UICollectionView object is created and added to the view controller's main view.\nCustom UICollectionViewCell is defined as a separate class and is registered with the UICollectionView.\nUICollectionViewDataSource and UICollectionViewDelegateFlowLayout protocols are adopted by the view controller, and the required methods are implemented to display the custom cells in the collection view and set their size.\nIn viewDidLoad(), the collection view is added as a subview and the cell is registered.\nIn loadView(), auto layout constraints are used to place the collection view within the view controller's main view.",
      "output": "class CustomCollectionViewCell: UICollectionViewCell {\n    // Custom cell implementation\n}\n\nclass CollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    private let cellReuseIdentifier = \"CustomCollectionViewCell\"\n\n    private lazy var collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        return collectionView\n    }()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(collectionView)\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: cellReuseIdentifier)\n    }\n\n    override func loadView() {\n        super.loadView()\n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n        ])\n    }\n\n    // UICollectionViewDataSource methods\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        // Return thenumber of items in the section\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellReuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        // Configure the cell with data\n        return cell\n    }\n\n    // UICollectionViewDelegateFlowLayout methods\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        // Return the size of the cell\n    }\n}"
    },
    {
      "instruction": "Write the code to create a UISearchBar and implement UISearchBarDelegate methods to handle search bar text changes and search button taps.",
      "input": "A UISearchBar object is created and added to the view controller's main view.\nUISearchBarDelegate protocol is adopted by the view controller, and the required methods are implemented to handle text changes and search button taps in the search bar.\nIn viewDidLoad(), the search bar is added as a subview and its delegate is set.\nIn loadView(), auto layout constraints are used to place the search bar within the view controller's main view.",
      "output": "class SearchViewController: UIViewController, UISearchBarDelegate {\n    private lazy var searchBar: UISearchBar = {\n        let searchBar = UISearchBar()\n        searchBar.translatesAutoresizingMaskIntoConstraints = false\n        searchBar.delegate = self\n        return searchBar\n    }()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(searchBar)\n    }\n\n    override func loadView() {\n        super.loadView()\n        NSLayoutConstraint.activate([\n            searchBar.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            searchBar.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            searchBar.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n        ])\n    }\n\n    // UISearchBarDelegate methods\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        // Handle text changes in the search bar\n    }\n\n    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {\n        // Handle search button tap\n    }\n}"
    },
    {
      "instruction": "Write the code to create a UISlider and implement its target-action method to handle slider value changes.",
      "input": "A UISlider object is created and added to the view controller's main view.\nA target-action method is implemented to handle value changes in the slider.\nIn viewDidLoad(), the slider is added as a subview and the target-action method is added for the value changed event.\nIn loadView(), auto layout constraints are used to place the slider within the view controller's main view.",
      "output": "class SliderViewController: UIViewController {\n    private lazy var slider: UISlider = {\n        let slider = UISlider()\n        slider.translatesAutoresizingMaskIntoConstraints = false\n        slider.addTarget(self, action: #selector(sliderValueChanged(_:)), for: .valueChanged)\n        return slider\n    }()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(slider)\n    }\n\n    override func loadView() {\n        super.loadView()\n        NSLayoutConstraint.activate([\n            slider.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            slider.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n        ])\n    }\n\n    @objc private func sliderValueChanged(_ sender: UISlider) {\n        // Handle slider value changes\n    }\n}"
    },
    {
      "instruction": "Write the code to create a UIStackView with multiple arranged subviews and configure its properties, such as axis, distribution, and spacing.",
      "input": "A UIStackView object is created and added to the view controller's main view.\nSubviews are added to the UIStackView as arranged subviews.\nProperties of the UIStackView, such as axis, distribution, and spacing, are configured as needed.\nIn viewDidLoad(), the stack view is added as a subview.\nIn loadView(), auto layout constraints are used to place the stack view within the view controller's main view.",
      "output": "class StackViewController: UIViewController {\n    private lazy var stackView: UIStackView = {\n        let stackView = UIStackView()\n        stackView.translatesAutoresizingMaskIntoConstraints = false\n        stackView.axis = .vertical\n        stackView.distribution = .fillEqually\n        stackView.spacing = 8\n        return stackView\n    }()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(stackView)\n\n        // Add subviews to the stack view\n        let view1 = UIView()\n        let view2 = UIView()\n        let view3 = UIView()\n        stackView.addArrangedSubview(view1)\n        stackView.addArrangedSubview(view2)\n        stackView.addArrangedSubview(view3)\n    }\n\n    override func loadView() {\n        super.loadView()\n        NSLayoutConstraint.activate([\n            stackView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            stackView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n        ])\n    }\n}"
    },
    {
      "instruction": "Create a Swift function that asynchronously downloads an image from a URL and sets it to a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, to imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            print(\"Error downloading image: \\(error?.localizedDescription ?? \"Unknown error\")\")\n            return\n        }\n        \n        DispatchQueue.main.async {\n            imageView.image = UIImage(data: data)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nImplement a Swift function that saves data to UserDefaults.",
      "input": "",
      "output": "import Foundation\n\nfunc saveData(_ data: Any, forKey key: String) {\n    let userDefaults = UserDefaults.standard\n    userDefaults.set(data, forKey: key)\n    userDefaults.synchronize()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that retrieves data from UserDefaults.",
      "input": "",
      "output": "import Foundation\n\nfunc retrieveData(forKey key: String) -> Any? {\n    let userDefaults = UserDefaults.standard\n    return userDefaults.object(forKey: key)\n}"
    },
    {
      "instruction": " \nCreate a Swift function that takes an array of CLLocation objects and returns the center coordinate.",
      "input": "",
      "output": "import CoreLocation\n\nfunc centerCoordinate(of locations: [CLLocation]) -> CLLocationCoordinate2D {\n    var latitudeSum: Double = 0.0\n    var longitudeSum: Double = 0.0\n    let count = Double(locations.count)\n\n    for location in locations {\n        latitudeSum += location.coordinate.latitude\n        longitudeSum += location.coordinate.longitude\n    }\n    \n    return CLLocationCoordinate2D(latitude: latitudeSum / count, longitude: longitudeSum / count)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to display a UIAlertController with a title, message, and a single \"OK\" button.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(in viewController: UIViewController, title: String, message: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let okAction = UIAlertAction(title: \"OK\", style: .default)\n    alertController.addAction(okAction)\n    viewController.present(alertController, animated: true)\n}"
    },
    {
      "instruction": " \nCreate a Swift function that adds a gradient background to a UIView.",
      "input": "",
      "output": "import UIKit\n\nfunc addGradientBackground(to view: UIView, colors: [CGColor]) {\n    let gradientLayer = CAGradientLayer()\n    gradientLayer.frame = view.bounds\n    gradientLayer.colors = colors\n    gradientLayer.locations = [0.0, 1.0]\n    view.layer.insertSublayer(gradientLayer, at: 0)\n}"
    },
    {
      "instruction": " \nImplement a Swift function that sets the height constraint of a UIView to a specific value.",
      "input": "",
      "output": "import UIKit\n\nfunc setHeight(_ height: CGFloat, for view: UIView) {\n    view.translatesAutoresizingMaskIntoConstraints = false\n    NSLayoutConstraint.activate([\n        view.heightAnchor.constraint(equalToConstant: height)\n    ])\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a JSON string and decodes it into a Codable object.",
      "input": "",
      "output": "import Foundation\n\nfunc decodeJSON<T: Codable>(jsonString: String, to type: T.Type) -> T? {\n    guard let jsonData = jsonString.data(using: .utf8) else { return nil }\n    let decoder = JSONDecoder()\n\n    do {\n        let decodedObject = try decoder.decode(T.self, from: jsonData)\n        return decodedObject\n    } catch {\n        print(\"Error decoding JSON: \\(error.localizedDescription)\")\n        return nil\n    }\n}"
    },
    {
      "instruction": "Create a custom UIView subclass with a rounded corner, shadow, and custom border color.",
      "input": "",
      "output": "import UIKit\n\nclass CustomView: UIView {\n    var borderColor: UIColor = .black {\n        didSet {\n            layer.borderColor = borderColor.cgColor\n        }\n    }\n\n    var borderWidth: CGFloat = 1.0 {\n        didSet {\n            layer.borderWidth = borderWidth\n        }\n    }\n    \n    var cornerRadius: CGFloat = 5.0 {\n        didSet {\n            layer.cornerRadius = cornerRadius\n        }\n    }\n\n    var shadowColor: UIColor = .black {\n        didSet {\n            layer.shadowColor = shadowColor.cgColor\n        }\n    }\n\n    var shadowOffset: CGSize = CGSize(width: 0, height: 2) {\n        didSet {\n            layer.shadowOffset = shadowOffset\n        }\n    }\n\n    var shadowOpacity: Float = 0.5 {\n        didSet {\n            layer.shadowOpacity = shadowOpacity\n        }\n    }\n\n    var shadowRadius: CGFloat = 5.0 {\n        didSet {\n            layer.shadowRadius = shadowRadius\n        }\n    }\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        setupView()\n    }\n\n    private func setupView() {\n        layer.borderColor = borderColor.cgColor\n        layer.borderWidth = borderWidth\n        layer.cornerRadius = cornerRadius\n        layer.shadowColor = shadowColor.cgColor\n        layer.shadowOffset = shadowOffset\n        layer.shadowOpacity = shadowOpacity\n        layer.shadowRadius = shadowRadius\n    }\n}"
    },
    {
      "instruction": "Create a URLSessionDataTask that fetches JSON data from a given API URL and parses it into a custom Swift object.",
      "input": "",
      "output": "import Foundation\n\nstruct APIResponse: Codable {\n    let status: String\n    let data: [String: Any]\n}\n\nclass APIManager {\n    func fetchData(completion: @escaping (Result<APIResponse, Error>) -> Void) {\n        let url = URL(string: \"https://api.example.com/data\")!\n        let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let error = error {\n                completion(.failure(error))\n                return\n            }\n            \n            guard let data = data else {\n                completion(.failure(NSError(domain: \"No data\", code: -1, userInfo: nil)))\n                return\n            }\n            \n            do {\n                let apiResponse = try JSONDecoder().decode(APIResponse.self, from: data)\n                completion(.success(apiResponse))\n            } catch {\n                completion(.failure(error))\n            }\n        }\n        task.resume()\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that retrieves currency exchange rates from an API and updates a label with the converted amount.",
      "input": "import UIKit\n\nclass CurrencyConversionViewController: UIViewController {\n    @IBOutlet weak var amountLabel: UILabel!\n    @IBOutlet weak var baseCurrencyTextField: UITextField!\n    @IBOutlet weak var targetCurrencyTextField: UITextField!\n    \n    private let currencyExchangeAPI = \"https://api.example.com/exchangeRates\"\n    \n    // other code\n}",
      "output": "import Foundation\n\nprivate extension CurrencyConversionViewController {\n    func fetchExchangeRate(baseCurrency: String, targetCurrency: String, completion: @escaping (Double?) -> Void) {\n        let urlString = \"\\(currencyExchangeAPI)?base=\\(baseCurrency)&target=\\(targetCurrency)\"\n        guard let url = URL(string: urlString) else {\n            completion(nil)\n            return\n        }\n        \n        let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n            guard let data = data, error == nil else {\n                completion(nil)\n                return\n            }\n            \n            do {\n                let json = try JSONSerialization.jsonObject(with: data, options: []) as? [String: AnyObject]\n                if let rate = json?[\"rate\"] as? Double {\n                    completion(rate)\n                } else {\n                    completion(nil)\n                }\n            } catch {\n                completion(nil)\n            }\n        }\n        \n        task.resume()\n    }\n    \n    @IBAction func convertAmount() {\n        guard let baseCurrency = baseCurrencyTextField.text,\n              let targetCurrency = targetCurrencyTextField.text,\n              let amount = Double(amountLabel.text ?? \"0\") else {\n            return\n        }\n        \n        fetchExchangeRate(baseCurrency: baseCurrency, targetCurrency: targetCurrency) { [weak self] rate in\n            guard let rate = rate else { return }\n            \n            DispatchQueue.main.async {\n                let convertedAmount ="
    },
    {
      "instruction": "Create a custom UICollectionViewCell with an image and label:",
      "input": "",
      "output": "class CustomCollectionViewCell: UICollectionViewCell {\n    private lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFill\n        return imageView\n    }()\n    \n    private lazy var titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textColor = .black\n        label.numberOfLines = 0\n        label.textAlignment = .center\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        addSubview(imageView)\n        addSubview(titleLabel)\n        \n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n            \n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": "Create a custom UITextField with a search icon:",
      "input": "",
      "output": "class SearchTextField: UITextField {\n    private lazy var searchIcon: UIImageView = {\n        let imageView = UIImageView()\n        imageView.image = UIImage(systemName: \"magnifyingglass\")\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.tintColor = .gray\n        imageView.contentMode = .scaleAspectFit\n        return imageView\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        addSubview(searchIcon)\n        \n        NSLayoutConstraint.activate([\n            searchIcon.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 8),\n            searchIcon.centerYAnchor.constraint(equalTo: centerYAnchor),\n            searchIcon.widthAnchor.constraint(equalToConstant: 24),\n            searchIcon.heightAnchor.constraint(equalToConstant: 24)\n        ])\n        \n        leftViewMode = .always\n        leftView = UIView(frame: CGRect(x: 0, y: 0, width: 40, height: 0))\n    }\n}"
    },
    {
      "instruction": "Create a custom UICollectionViewCell with a round image and title:",
      "input": "",
      "output": "class RoundImageCollectionViewCell: UICollectionViewCell {\n    private lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.layer.cornerRadius = 40\n        imageView.layer.masksToBounds = true\n        imageView.contentMode = .scaleAspectFill\n        return imageView\n    }()\n    \n    private lazy var titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textColor = .black\n        label.numberOfLines = 0\n        label.textAlignment = .center\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        addSubview(imageView)\n        addSubview(titleLabel)\n        \n        NSLayoutConstraint.activate([\n            imageView.centerXAnchor.constraint(equalTo: centerXAnchor),\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.widthAnchor.constraint(equalToConstant: 80),\n            imageView.heightAnchor.constraint(equalToConstant: 80),\n            \n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": "Create a custom UISwitch with a label:",
      "input": "",
      "output": "class LabeledSwitch: UIControl {\n    private lazy var titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textColor = .black\n        label.numberOfLines = 0\n        label.textAlignment = .left\n        return label\n    }()\n    \n    private lazy var switchControl: UISwitch = {\n        let switchControl = UISwitch()\n        switchControl.translatesAutoresizingMaskIntoConstraints = false\n        return switchControl\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        addSubview(titleLabel)\n        addSubview(switchControl)\n        \n        NSLayoutConstraint.activate([\n            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor),\n            titleLabel.centerYAnchor.constraint(equalTo: centerYAnchor),\n            \n            switchControl.leadingAnchor.constraint(equalTo: titleLabel.trailingAnchor, constant: 8),\n            switchControl.trailingAnchor.constraint(equalTo: trailingAnchor),\n            switchControl.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": "Create a custom UIButton with an image andlabel:",
      "input": "",
      "output": "class ImageLabelButton: UIButton {\n    private lazy var buttonImage: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFit\n        return imageView\n    }()\n    \n    private lazy var buttonLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textColor = .black\n        label.textAlignment = .center\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        addSubview(buttonImage)\n        addSubview(buttonLabel)\n        \n        NSLayoutConstraint.activate([\n            buttonImage.centerXAnchor.constraint(equalTo: centerXAnchor),\n            buttonImage.topAnchor.constraint(equalTo: topAnchor),\n            buttonImage.widthAnchor.constraint(equalToConstant: 40),\n            buttonImage.heightAnchor.constraint(equalToConstant: 40),\n            \n            buttonLabel.topAnchor.constraint(equalTo: buttonImage.bottomAnchor, constant: 4),\n            buttonLabel.leadingAnchor.constraint(equalTo: leadingAnchor),\n            buttonLabel.trailingAnchor.constraint(equalTo: trailingAnchor),\n            buttonLabel.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": "Create a UIPageControl with custom dot images:",
      "input": "",
      "output": "class CustomPageControl: UIPageControl {\n    var activeImage: UIImage?\n    var inactiveImage: UIImage?\n    \n    override func awakeFromNib() {\n        super.awakeFromNib()\n        updateDots()\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        updateDots()\n    }\n    \n    func updateDots() {\n        if let activeImage = activeImage, let inactiveImage = inactiveImage {\n            for (index, subview) in subviews.enumerated() {\n                if let imageView = findImageView(in: subview) {\n                    imageView.image = (index == currentPage) ? activeImage : inactiveImage\n                } else {\n                    let imageView = UIImageView(image: (index == currentPage) ? activeImage : inactiveImage)\n                    imageView.frame = subview.bounds\n                    subview.addSubview(imageView)\n                }\n            }\n        }\n    }\n    \n    private func findImageView(in view: UIView) -> UIImageView? {\n        if view is UIImageView {\n            return view as? UIImageView\n        } else {\n            for subview in view.subviews {\n                if let imageView = findImageView(in: subview) {\n                    return imageView\n                }\n            }\n        }\n        return nil\n    }\n}"
    },
    {
      "instruction": "Create a custom UISlider with a bubble displaying the slider value above the thumb:",
      "input": "",
      "output": "class BubbleSlider: UISlider {\n    private lazy var valueBubble: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.backgroundColor = .white\n        label.alpha = 0\n        label.layer.cornerRadius = 25\n        label.layer.masksToBounds = true\n        label.textAlignment = .center\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n        addTarget(self, action: #selector(showBubble), for: [.touchDown, .valueChanged])\n        addTarget(self, action: #selector(hideBubble), for: [.touchUpInside, .touchUpOutside])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        addSubview(valueBubble)\n        \n        NSLayoutConstraint.activate([\n            valueBubble.bottomAnchor.constraint(equalTo: topAnchor, constant: -8),\n            valueBubble.centerXAnchor.constraint(equalTo: thumbCenterXAnchor),\n            valueBubble.widthAnchor.constraint(equalToConstant: 50),\n            valueBubble.heightAnchor.constraint(equalToConstant: 50)\n        ])\n    }\n    \n    @objc private func showBubble() {\n        valueBubble.text = \"\\(Int(value))\"\n        valueBubble.alpha = 1\n    }\n    \n    @objc private func hideBubble() {\n        valueBubble.alpha = 0\n    }\n}"
    },
    {
      "instruction": "Create a custom UIView with a gradient background:",
      "input": "",
      "output": "class GradientView: UIView {\n    var startColor: UIColor = .white\n    var endColor: UIColor = .black\n    \n    override class var layerClass: AnyClass {\n        return CAGradientLayer.self\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        updateGradient()\n    }\n    \n    private func updateGradient() {\n        if let gradientLayer = layer as? CAGradientLayer {\n            gradientLayer.colors = [startColor.cgColor, endColor.cgColor]\n            gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n            gradientLayer.endPoint = CGPoint(x: 1, y: 1)\n        }\n    }\n}"
    },
    {
      "instruction": "Create a custom UICollectionViewCell that has an image and a label, then register and dequeue it in a UICollectionView.",
      "input": "",
      "output": "// Custom UICollectionViewCell\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCell\"\n    \n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(imageView)\n        contentView.addSubview(label)\n\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n            \n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            label.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n\n// Register and dequeue the cell in a UICollectionView\nextension ViewController: UICollectionViewDataSource {\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return dataSource.count\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        \n        cell.imageView.image = UIImage(named: \"your_image_name\")\n        cell.label.text = dataSource[indexPath.row]\n        \n        return cell\n    }\n}"
    },
    {
      "instruction": " \n\nImplement a Swift class that manages the user location and notifies a delegate when the location is updated.",
      "input": "",
      "output": "import CoreLocation\n\nprotocol LocationManagerDelegate: AnyObject {\n    func didUpdateLocation(_ location: CLLocation)\n}\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    static let shared = LocationManager()\n    private let locationManager = CLLocationManager()\n    weak var delegate: LocationManagerDelegate?\n\n    private override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    func startUpdatingLocation() {\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        guard let location = locations.last else { return }\n        delegate?.didUpdateLocation(location)\n    }\n}\n\n// Usage\nclass ViewController: UIViewController, LocationManagerDelegate {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        LocationManager.shared.delegate = self\n        LocationManager.shared.startUpdatingLocation()\n    }\n\n    func didUpdateLocation(_ location: CLLocation) {\n        print(\"Location updated: \\(location)\")\n    }\n}"
    },
    {
      "instruction": " \n\nCreate a Swift function that performs a network request using URLSession to fetch data from a REST API and returns the result in a completion block.",
      "input": "",
      "output": "import Foundation\n\nenum NetworkError: Error {\n    case invalidURL\n    case dataFetchError\n}\n\nfunc fetchData(from urlString: String, completion: @escaping (Result<Data, NetworkError>) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(.failure(.invalidURL))\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let data = data {\n            completion(.success(data))\n        } else {\n            completion(.failure(.dataFetchError))\n        }\n    }\n    \n    task.resume()\n}\n\n// Usage\nfetchData(from: \"https://api.example.com/data\") { result in\n    switch result {\n    case .success(let data):\n        print(\"Fetched data: \\(data)\")\n    case .failure(let error):\n        print(\"Error fetching data: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " \n\nImplement a Swift function that asynchronously downloads an image from a URL and sets it to a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (Result<UIImage, Error>) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data, let image = UIImage(data: data) else {\n            let error = NSError(domain: \"ImageDownload\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"Invalid image data\"])\n            completion(.failure(error))\n            return\n        }\n\n        completion(.success(image))\n    }\n    \n    task.resume()\n}\n\nextension UIImageView {\n    func setImage(from url: URL) {\n        downloadImage(from: url) { [weak self] result in\n            DispatchQueue.main.async {\n                switch result {\n                case .success(let image):\n                    self?.image = image\n                case .failure(let error):\n                    print(\"Error downloading image: \\(error)\")\n                }\n            }\n        }\n    }\n}\n\n// Usage\nlet imageView = UIImageView()\nif let url = URL(string: \"https://example.com/image.jpg\") {\n    imageView.setImage(from: url)\n}"
    },
    {
      "instruction": " \n\nCreate a custom UIView with a gradient background.",
      "input": "",
      "output": "import UIKit\n\nclass GradientView: UIView {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupGradient()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupGradient()\n    }\n    \n    private func setupGradient() {\n        let gradientLayer = CAGradientLayer()\n        gradientLayer.frame = bounds\n        gradientLayer.colors = [UIColor.red.cgColor, UIColor.blue.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 1)\n        layer.insertSublayer(gradientLayer, at: 0)\n    }\n}\n\n// Usage\nlet gradientView = GradientView(frame: CGRect(x: 0, y: 0, width: 200, height: 200))"
    },
    {
      "instruction": " \n\nImplement UIAlertController with a text field and handle the user input.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    @objc func showAlert() {\n        let alertController = UIAlertController(title: \"Enter text\", message: nil, preferredStyle: .alert)\n        alertController.addTextField { textField in\n            textField.placeholder = \"Type here...\"\n        }\n        \n        let submitAction = UIAlertAction(title: \"Submit\", style: .default) { [unowned alertController] _ in\n            if let textField = alertController.textFields?.first, let text = textField.text {\n                print(\"User entered: \\(text)\")\n            }\n        }\n        \n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n        \n        alertController.addAction(submitAction)\n        alertController.addAction(cancelAction)\n        \n        present(alertController, animated: true)\n    }\n}\n\n// Usage\nlet viewController = ViewController()\nviewController.showAlert()"
    },
    {
      "instruction": " \n\nCreate a Swift class that acts as a wrapper for UserDefaults to store and retrieve different data types.",
      "input": "",
      "output": "import Foundation\n\nclass UserDefaultsWrapper {\n    private let defaults = UserDefaults.standard\n\n    func set(value: Any?, forKey key: String) {\n        defaults.set(value, forKey: key)\n    }\n\n    func value(forKey key: String) -> Any? {\n        return defaults.value(forKey: key)\n    }\n\n    func string(forKey key: String) -> String? {\n        return defaults.string(forKey: key)\n    }\n\n    func integer(forKey key: String) -> Int {\n        return defaults.integer(forKey: key)\n    }\n\n    func bool(forKey key: String) -> Bool {\n        return defaults.bool(forKey: key)\n    }\n\n    func double(forKey key: String) -> Double {\n        return defaults.double(forKey: key)\n    }\n\n    func array(forKey key: String) -> [Any]? {\n        return defaults.array(forKey: key)\n    }\n\n    func dictionary(forKey key: String) -> [String: Any]? {\n        return defaults.dictionary(forKey: key)\n    }\n}\n\n// Usage\nlet userDefaults = UserDefaultsWrapper()\nuserDefaults.set(value: \"John Doe\", forKey: \"username\")\nprint(userDefaults.string(forKey: \"username\") ?? \"\")"
    },
    {
      "instruction": " \n\nImplement a custom UIButton that has a loading indicator and toggles between loading and normal states.",
      "input": "",
      "output": "import UIKit\n\nclass LoadingButton: UIButton {\n    private let activityIndicator = UIActivityIndicatorView(style: .medium)\n\n    var isLoading: Bool = false {\n        didSet {\n            updateButtonState()\n        }\n    }\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupActivityIndicator()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupActivityIndicator()\n    }\n\n    private func setupActivityIndicator() {\n        activityIndicator.translatesAutoresizingMaskIntoConstraints = false\n        addSubview(activityIndicator)\n\n        NSLayoutConstraint.activate([\n            activityIndicator.centerXAnchor.constraint(equalTo: centerXAnchor),\n            activityIndicator.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n\n    private func updateButtonState() {\n        if isLoading {\n            setTitle(nil, for: .normal)\n            activityIndicator.startAnimating()\n        } else {\n            setTitle(\"Submit\", for: .normal)\n            activityIndicator.stopAnimating()\n        }\n    }\n}\n\n// Usage\nlet loadingButton = LoadingButton()\nloadingButton.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n\n@objc func button"
    },
    {
      "instruction": "Create a Swift function to download an image from a URL and display it in a UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass ImageViewController: UIViewController {\n    private lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(imageView)\n        NSLayoutConstraint.activate([\n            imageView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            imageView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n\n    func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            guard let data = data, error == nil else {\n                print(\"Error downloading image: \\(String(describing: error))\")\n                DispatchQueue.main.async { completion(nil) }\n                return\n            }\n            DispatchQueue.main.async {\n                completion(UIImage(data: data))\n            }\n        }.resume()\n    }\n\n    func updateImageView(with url: URL) {\n        downloadImage(from: url) { [weak self] image in\n            self?.imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": "Create a Swift function that retrieves JSON data from a given URL and maps it to a Codable model",
      "input": "",
      "output": "import Foundation\n\nstruct ExampleModel: Codable {\n    let id: Int\n    let name: String\n}\n\nfunc fetchJSONData(from url: URL, completion: @escaping (ExampleModel?, Error?) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil else {\n            DispatchQueue.main.async { completion(nil, error) }\n            return\n        }\n\n        do {\n            let decoder = JSONDecoder()\n            let jsonData = try decoder.decode(ExampleModel.self, from: data)\n            DispatchQueue.main.async { completion(jsonData, nil) }\n        } catch {\n            DispatchQueue.main.async { completion(nil, error) }\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nCreate a Swift function that saves a file to the device's local storage",
      "input": "",
      "output": "import Foundation\n\nfunc saveFileToLocalStorage(data: Data, fileName: String) -> Bool {\n    guard let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first else {\n        return false\n    }\n\n    let fileURL = documentsDirectory.appendingPathComponent(fileName)\n\n    do {\n        try data.write(to: fileURL)\n        return true\n    } catch {\n        print(\"Error saving file: \\(error)\")\n        return false\n    }\n}"
    },
    {
      "instruction": "Create a Swift function that retrieves a file from the device's local storage",
      "input": "",
      "output": "import Foundation\n\nfunc retrieveFileFromLocalStorage(fileName: String) -> Data? {\n    guard let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first else {\n        return nil\n    }\n\n    let fileURL = documentsDirectory.appendingPathComponent(fileName)\n\n    do {\n        let data = try Data(contentsOf: fileURL)\n        return data\n    } catch {\n        print(\"Error retrieving file: \\(error)\")\n        return nil\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function that deletes a file from the device's local storage",
      "input": "",
      "output": "import Foundation\n\nfunc deleteFileFromLocalStorage(fileName: String) -> Bool {\n    let fileManager = FileManager.default\n    guard let documentsDirectory = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first else {\n        return false\n    }\n\n    let fileURL = documentsDirectory.appendingPathComponent(fileName)\n\n    do {\n        try fileManager.removeItem(at: fileURL)\n        return true\n    } catch {\n        print(\"Error deleting file: \\(error)\")\n        return false\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function that retrieves the user's current location using CLLocationManager",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    private let locationManager = CLLocationManager()\n\n    var currentLocation: CLLocation?\n\n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    func startUpdatingLocation() {\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        guard let location = locations.last else { return }\n        currentLocation = location\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error retrieving location: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function that plays a sound using AVAudioPlayer",
      "input": "",
      "output": "import AVFoundation\n\nclass SoundPlayer {\n    private var audioPlayer: AVAudioPlayer?\n\n    func playSound(resourceName: String, fileType: String) {\n        guard let url = Bundle.main.url(forResource: resourceName, withExtension: fileType) else { return }\n\n        do {\n            audioPlayer = try AVAudioPlayer(contentsOf: url)\n            audioPlayer?.prepareToPlay()\n            audioPlayer?.play()\n        } catch {\n            print(\"Error playing sound: \\(error)\")\n        }\n    }\n\n    func stopPlaying() {\n        audioPlayer?.stop()\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function that sends a push notification using UserNotifications framework",
      "input": "",
      "output": "import UserNotifications\n\nfunc sendPushNotification(title: String, body: String, identifier: String, delay: TimeInterval) {\n    let content = UNMutableNotificationContent()\n    content.title = title\n    content.body = body\n\n    let trigger = UNTimeIntervalNotificationTrigger(timeInterval: delay, repeats: false)\n\n    let request = UNNotificationRequest(identifier: identifier, content: content, trigger: trigger)\n\n    UNUserNotificationCenter.current().add(request) { error in\n        if let error = error {\n            print(\"Error sending push notification: \\(error)\")\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that asynchronously fetches JSON data from a URL and decodes it to a specified Codable type.",
      "input": "",
      "output": "import Foundation\n\nfunc fetchJSON<T: Codable>(url: URL, completion: @escaping (Result<T, Error>) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let decodedData = try JSONDecoder().decode(T.self, from: data)\n            completion(.success(decodedData))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that adds a gradient layer to a UIView.",
      "input": "",
      "output": "import UIKit\n\nfunc addGradientLayer(to view: UIView, colors: [CGColor], startPoint: CGPoint, endPoint: CGPoint) {\n    let gradientLayer = CAGradientLayer()\n    gradientLayer.frame = view.bounds\n    gradientLayer.colors = colors\n    gradientLayer.startPoint = startPoint\n    gradientLayer.endPoint = endPoint\n    view.layer.insertSublayer(gradientLayer, at: 0)\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that programmatically creates a UICollectionView with a custom layout.",
      "input": "",
      "output": "import UIKit\n\nfunc createCollectionView(frame: CGRect, layout: UICollectionViewLayout) -> UICollectionView {\n    let collectionView = UICollectionView(frame: frame, collectionViewLayout: layout)\n    collectionView.backgroundColor = .clear\n    collectionView.showsVerticalScrollIndicator = false\n    collectionView.showsHorizontalScrollIndicator = false\n    return collectionView\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that sets up a UIButton with custom title, font, and color.",
      "input": "",
      "output": "import UIKit\n\nfunc setupButton(_ button: UIButton, title: String, font: UIFont, color: UIColor) {\n    button.setTitle(title, for: .normal)\n    button.setTitleColor(color, for: .normal)\n    button.titleLabel?.font = font\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that presents a UIAlertController with a specific title, message, and actions.",
      "input": "",
      "output": "import UIKit\n\nfunc presentAlertController(_ viewController: UIViewController, title: String, message: String, actions: [UIAlertAction]) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    for action in actions {\n        alertController.addAction(action)\n    }\n    \n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that adds a UITapGestureRecognizer to a UIView.",
      "input": "",
      "output": "import UIKit\n\nfunc addTapGestureRecognizer(to view: UIView, target: Any, action: Selector) {\n    let tapGestureRecognizer = UITapGestureRecognizer(target: target, action: action)\n    view.addGestureRecognizer(tapGestureRecognizer)\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that creates and configures a UILabel with a custom text, font, and text color.",
      "input": "",
      "output": "import UIKit\n\nfunc createLabel(text: String, font: UIFont, textColor: UIColor) -> UILabel {\n    let label = UILabel()\n    label.text = text\n    label.font = font\n    label.textColor = textColor\n    label.numberOfLines = 0\n    return label\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that creates and configures a UITextField with a custom placeholder, font, and text color.",
      "input": "",
      "output": "import UIKit\n\nfunc createTextField(placeholder: String, font: UIFont, textColor: UIColor) -> UITextField {\n    let textField = UITextField()\n    textField.placeholder = placeholder\n    textField.font = font\n    textField.textColor = textColor\n    return textField\n}"
    },
    {
      "instruction": "Write a function that makes an API call using URLSession and displays an alert based on the result",
      "input": "",
      "output": "import UIKit\n\nclass APIViewController: UIViewController {\n    private let apiUrl = \"https://api.example.com/data\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    func fetchData() {\n        guard let url = URL(string: apiUrl) else { return }\n\n        let task = URLSession.shared.dataTask(with: url) { [weak self] (data, response, error) in\n            if let error = error {\n                DispatchQueue.main.async {\n                    self?.displayAlert(title: \"Error\", message: error.localizedDescription)\n                }\n                return\n            }\n\n            if let data = data {\n                do {\n                    let result = try JSONDecoder().decode(ApiResult.self, from: data)\n                    DispatchQueue.main.async {\n                        self?.displayAlert(title: \"Success\", message: \"Fetched data: \\(result)\")\n                    }\n                } catch {\n                    DispatchQueue.main.async {\n                        self?.displayAlert(title: \"Error\", message: \"Failed to decode data\")\n                    }\n                }\n            }\n        }\n\n        task.resume()\n    }\n\n    func displayAlert(title: String, message: String) {\n        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n        present(alertController, animated: true, completion: nil)\n    }\n}\n\n// Replace ApiResult with the expected data model\nstruct ApiResult: Codable {\n    // Define properties here\n}"
    },
    {
      "instruction": " \nWrite a function that creates a horizontal UICollectionView with a custom UICollectionViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {\n    private let cellReuseIdentifier = \"CustomCell\"\n    private var collectionView: UICollectionView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .horizontal\n        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: cellReuseIdentifier)\n        collectionView.dataSource = self\n        collectionView.delegate = self\n\n        view.addSubview(collectionView)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            collectionView.topAnchor.constraint(equalTo: view.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor)\n        ])\n    }\n\n    // MARK: - UICollectionViewDataSource\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellReuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        // Configure cell\n        return cell\n    }\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // Customize your UICollectionViewCell implementation\n}"
    },
    {
      "instruction": " \nWrite a function that creates a UITableViewController with a custom UITableViewCell",
      "input": "",
      "output": "import UIKit\n\nclass TableViewController: UITableViewController {\n    private let cellReuseIdentifier = \"CustomCell\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)\n    }\n\n    // MARK: - UITableViewDataSource\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 10\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier, for: indexPath) as! CustomTableViewCell\n        // Configure cell\n        return cell\n    }\n}\n\nclass CustomTableViewCell: UITableViewCell {\n    // Customize your UITableViewCell implementation\n}"
    },
    {
      "instruction": " \nWrite a function that adds a UIPageControl to a UIScrollView",
      "input": "",
      "output": "import UIKit\n\nclass PageController: UIViewController, UIScrollViewDelegate {\n    private var scrollView: UIScrollView!\n    private var pageControl: UIPageControl!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        scrollView = UIScrollView()\n        scrollView.delegate = self\n        scrollView.isPagingEnabled = true\n        view.addSubview(scrollView)\n        scrollView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            scrollView.topAnchor.constraint(equalTo: view.topAnchor),\n            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor)\n        ])\n\n        pageControl = UIPageControl()\n        pageControl.numberOfPages = 3\n        view.addSubview(pageControl)\n        pageControl.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            pageControl.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            pageControl.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -10)\n        ])\n    }\n\n    // MARK: - UIScrollViewDelegate\n    func scrollViewDidScroll(_ scrollView: UIScrollView) {\n        let pageIndex = round(scrollView.contentOffset.x / view.frame.width)\n        pageControl.currentPage = Int(pageIndex)\n    }\n}"
    },
    {
      "instruction": " \nWrite a function that creates a custom UIView with a UIImageView and UILabel",
      "input": "",
      "output": "import UIKit\n\nclass CustomView: UIView {\n    private let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFit\n        return imageView\n    }()\n\n    private let label: UILabel = {\n        let label = UILabel()\n        label.textAlignment = .center\n        return label\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n\n    private func setupView() {\n        addSubview(imageView)\n        addSubview(label)\n\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        label.translatesAutoresizingMaskIntoConstraints = false\n\n        NSLayoutConstraint.activate([\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n\n            label.leadingAnchor.constraint(equalTo: leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: trailingAnchor),\n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            label.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n\n    func configure(image: UIImage, text: String) {\n        imageView.image = image\n        label.text = text\n    }\n}"
    },
    {
      "instruction": " \nWrite a function that creates a UITextField with a left and right UIView as padding",
      "input": "",
      "output": "import UIKit\n\nclass PaddedTextField: UITextField {\n    private let leftPaddingView: UIView = {\n        let view = UIView()\n        view.backgroundColor = .clear\n        return view\n    }()\n\n    private let rightPaddingView: UIView = {\n        let view = UIView()\n        view.backgroundColor = .clear\n        return view\n    }()\n\n    func configure(leftPadding: CGFloat, rightPadding: CGFloat) {\n        leftPaddingView.frame = CGRect(x: 0, y: 0, width: leftPadding, height: frame.height)\n        leftView = leftPaddingView\n        leftViewMode = .always\n\n        rightPaddingView.frame = CGRect(x: 0, y: 0, width: rightPadding, height: frame.height)\n        rightView = rightPaddingView\n        rightViewMode = .always\n    }\n}"
    },
    {
      "instruction": " \nWrite a function that creates a custom UISlider with a track image and a thumb image",
      "input": "",
      "output": "import UIKit\n\nclass CustomSlider: UISlider {\n\n    func configure(trackImage: UIImage, thumbImage: UIImage) {\n        setMinimumTrackImage(trackImage, for: .normal)\n        setMaximumTrackImage(trackImage, for: .normal)\n        setThumbImage(thumbImage, for: .normal)\n    }\n}"
    },
    {
      "instruction": " \nWrite a function that creates a custom loading indicator using a UIActivityIndicatorView",
      "input": "",
      "output": "import UIKit\n\nclass LoadingIndicatorView: UIView {\n    private let activityIndicator: UIActivityIndicatorView = {\n        let indicator = UIActivityIndicatorView(style: .large)\n        indicator.color = .white\n        indicator.hidesWhenStopped = true\n        return indicator\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n\n    private func setupView() {\n        backgroundColor = UIColor.black.withAlphaComponent(0.7)\n        addSubview(activityIndicator)\n        activityIndicator.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            activityIndicator.centerXAnchor.constraint(equalTo: centerXAnchor),\n            activityIndicator.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n\n    func startAnimating() {\n        activityIndicator.startAnimating()\n        isHidden = false\n    }\n\n    func stopAnimating() {\n        activityIndicator.stopAnimating()\n        isHidden = true\n    }\n}"
    },
    {
      "instruction": "Create a custom TableViewCell class that has a UIImageView and a UILabel as subviews, and set up their constraints using NSLayoutConstraint programmatically.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n\n    let customImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let customLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        \n        contentView.addSubview(customImageView)\n        contentView.addSubview(customLabel)\n        \n        NSLayoutConstraint.activate([\n            customImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 10),\n            customImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            customImageView.widthAnchor.constraint(equalToConstant: 40),\n            customImageView.heightAnchor.constraint(equalToConstant: 40),\n            \n            customLabel.leadingAnchor.constraint(equalTo: customImageView.trailingAnchor, constant: 10),\n            customLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -10),\n            customLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nImplement a UIViewController with a UICollectionView that displays images fetched from a remote API using URLSession and displays them in a grid layout.",
      "input": "",
      "output": "import UIKit\n\nclass ImageCollectionViewController: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    \n    private var collectionView: UICollectionView!\n    private var imageURLs: [URL] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        setupCollectionView()\n        fetchData()\n    }\n    \n    private func setupCollectionView() {\n        let layout = UICollectionViewFlowLayout()\n        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.delegate = self\n        collectionView.dataSource = self\n        collectionView.register(ImageCollectionViewCell.self, forCellWithReuseIdentifier: \"ImageCollectionViewCell\")\n        \n        view.addSubview(collectionView)\n        \n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor)\n        ])\n    }\n    \n    private func fetchData() {\n        // Fetch image URLs from remote API using URLSession and update the imageURLs array\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return imageURLs.count\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"ImageCollectionViewCell\", for: indexPath) as! ImageCollectionViewCell\n        cell.configure(with: imageURLs[indexPath.item])\n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        let width = (view.frame.width - 30) / 2\n        return CGSize(width: width, height: width)\n    }\n}"
    },
    {
      "instruction": " \nImplement a SwiftUI View that displays a list of contacts with their names and phone numbers using a custom SwiftUI row view.",
      "input": "",
      "output": "import SwiftUI\n\nstruct Contact: Identifiable {\n    var id = UUID()\n    var name: String\n    var phoneNumber: String\n}\n\nstruct ContactRow: View {\n    var contact: Contact\n\n    var body: some View {\n        HStack {\n            VStack(alignment: .leading) {\n                Text(contact.name)\n                    .font(.headline)\n                Text(contact.phoneNumber)\n                    .font(.subheadline)\n            }\n            Spacer()\n        }\n    }\n}\n\nstruct ContactsListView: View {\n    @State private var contacts = [\n        Contact(name: \"John Doe\", phoneNumber: \"123-456-7890\"),\n        Contact(name: \"Jane Smith\", phoneNumber: \"234-567-8901\"),\n        // Add more contacts\n    ]\n\n    var body: some View {\n        NavigationView {\n            List(contacts) { contact in\n                ContactRow(contact: contact)\n            }\n            .navigationTitle(\"Contacts\")\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a function that makes an HTTP POST request using URLSession with a JSON payload and handles the response.",
      "input": "",
      "output": "import Foundation\n\nfunc makePostRequest(url: URL, payload: [String: Any], completionHandler: @escaping (Result<Data, Error>) -> Void) {\n    var request = URLRequest(url: url)\n    request.httpMethod = \"POST\"\n    request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n    \n    do {\n        request.httpBody = try JSONSerialization.data(withJSONObject: payload, options: [])\n    } catch {\n        completionHandler(.failure(error))\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: request) { data, response, error in\n        if let error = error {\n            completionHandler(.failure(error))\n            return\n        }\n        \n        if let data = data {\n            completionHandler(.success(data))\n        }\n    }\n    \n    task.resume()\n}"
    },
    {
      "instruction": " \nImplement a custom UIPickerView that allows users to select a date in the format \"Month Day, Year\" with month and day as words.",
      "input": "",
      "output": "import UIKit\n\nclass CustomDatePickerView: UIPickerView, UIPickerViewDelegate, UIPickerViewDataSource {\n    \n    private let months = DateFormatter().monthSymbols!\n    private let days = Array(1...31)\n    private let years = Array(1950...2100)\n    \n    var selectedDate: Date {\n        let month = selectedRow(inComponent: 0) + 1\n        let day = selectedRow(inComponent: 1) + 1\n        let year = years[selectedRow(inComponent: 2)]\n        \n        let components = DateComponents(year: year, month: month, day: day)\n        let calendar = Calendar.current\n        \n        return calendar.date(from: components) ?? Date()\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup()\n    }\n    \n    private func setup() {\n        delegate = self\n        dataSource = self\n    }\n    \n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 3\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        switch component {\n        case 0:\n            return months.count\n        case 1:\n            return days.count\n        case 2:\n            return years.count\n        default:\n            return 0\n        }\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        switch component {\n        case 0:\n            return months[row]\n        case 1:\n            return String(days[row])\n        case 2:\n            return String(years[row])\n        default:\n            return nil\n        }\n    }\n}"
    },
    {
      "instruction": " \nCreate a SwiftUI view that displays a horizontal scroll view of image thumbnails and allows users to tap on a thumbnail to present a full-screen view of the image.",
      "input": "",
      "output": "import SwiftUI\n\nstruct ImageThumbnail: Identifiable {\n    var id = UUID()\n    var image: Image\n}\n\nstruct FullImageView: View {\n    @Environment(\\.presentationMode) var presentationMode\n    var image: Image\n\n    var body: some View {\n        VStack {\n            image\n                .resizable()\n                .aspectRatio(contentMode: .fit)\n        }\n        .onTapGesture {\n            presentationMode.wrappedValue.dismiss()\n        }\n    }\n}\n\nstruct ImageScrollView: View {\n    @State private var thumbnails = [\n        ImageThumbnail(image: Image(\"example1\")),\n        ImageThumbnail(image: Image(\"example2\")),\n        // Add more image thumbnails\n    ]\n    @State private var selectedImage: Image?\n    \n    var body: some View {\n        VStack {\n            ScrollView(.horizontal, showsIndicators: false) {\n                HStack(spacing: 10) {\n                    ForEach(thumbnails) { thumbnail in\n                        thumbnail.image\n                            .resizable()\n                            .frame(width: 100, height: 100)\n                            .onTapGesture {\n                                selectedImage = thumbnail.image\n                            }\n                    }\n                }\n                .padding()\n            }\n        }\n        .sheet(item: $selectedImage, content: { image in\n            FullImageView(image: image)\n        })\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to fetch user's current location using CoreLocation and display it in a UILabel",
      "input": "",
      "output": "import UIKit\nimport CoreLocation\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n    @IBOutlet weak var locationLabel: UILabel!\n    \n    let locationManager = CLLocationManager()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        locationManager.delegate = self\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.startUpdatingLocation()\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            locationLabel.text = \"Latitude: \\(location.coordinate.latitude), Longitude: \\(location.coordinate.longitude)\"\n            locationManager.stopUpdatingLocation()\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error fetching location: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": "Implement a Swift function to display an alert with a text field to input the user's name, and greet them with a \"Hello, {name}!\" message",
      "input": "",
      "output": "import UIKit\n\nclass GreetingViewController: UIViewController {\n    func showGreetingAlert() {\n        let alertController = UIAlertController(title: \"Enter your name\", message: nil, preferredStyle: .alert)\n        \n        alertController.addTextField { textField in\n            textField.placeholder = \"Your name\"\n        }\n        \n        let submitAction = UIAlertAction(title: \"Submit\", style: .default) { [weak alertController] _ in\n            if let alertController = alertController,\n               let textField = alertController.textFields?.first,\n               let name = textField.text {\n                self.showGreeting(name: name)\n            }\n        }\n        \n        alertController.addAction(submitAction)\n        present(alertController, animated: true, completion: nil)\n    }\n    \n    func showGreeting(name: String) {\n        let alertController = UIAlertController(title: \"Hello, \\(name)!\", message: nil, preferredStyle: .alert)\n        let okAction = UIAlertAction(title: \"OK\", style: .default, handler: nil)\n        alertController.addAction(okAction)\n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to display a custom UIAlertController with two buttons: \"Camera\" and \"Photo Library\", and handle the selection",
      "input": "",
      "output": "import UIKit\n\nclass PhotoSelectionViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n    \n    func showPhotoSelectionAlert() {\n        let alertController = UIAlertController(title: \"Select a photo source\", message: nil, preferredStyle: .actionSheet)\n        \n        let cameraAction = UIAlertAction(title: \"Camera\", style: .default) { _ in\n            self.showImagePicker(sourceType: .camera)\n        }\n        \n        let photoLibraryAction = UIAlertAction(title: \"Photo Library\", style: .default) { _ in\n            self.showImagePicker(sourceType: .photoLibrary)\n        }\n        \n        alertController.addAction(cameraAction)\n        alertController.addAction(photoLibraryAction)\n        present(alertController, animated: true, completion: nil)\n    }\n    \n    func showImagePicker(sourceType: UIImagePickerController.SourceType) {\n        let imagePickerController = UIImagePickerController()\n        imagePickerController.sourceType = sourceType\n        imagePickerController.delegate = self\n        present(imagePickerController, animated: true, completion: nil)\n    }\n    \n    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {\n        if let selectedImage = info[.originalImage] as? UIImage {\n            // Handle the selected image\n        }\n        picker.dismiss(animated: true, completion: nil)\n    }\n    \n    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {\n        picker.dismiss(animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": "Implement a UITableViewController with a search bar to filter the displayed data",
      "input": "",
      "output": "import UIKit\n\nclass SearchTableViewController: UITableViewController, UISearchBarDelegate {\n    \n    @IBOutlet weak var searchBar: UISearchBar!\n    \n    let data = [\"Apple\", \"Banana\", \"Cherry\", \"Grape\", \"Lemon\", \"Orange\", \"Strawberry\", \"Watermelon\"]\n    var filteredData: [String] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        searchBar.delegate = self\n        filteredData = data\n    }\n    \n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredData = data\n        } else {\n            filteredData = data.filter { $0.lowercased().contains(searchText.lowercased()) }\n        }\n        tableView.reloadData()\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredData.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n       let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        cell.textLabel?.text = filteredData[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": "Create a Swift function that plays a video from a local file using AVPlayerViewController",
      "input": "",
      "output": "import UIKit\nimport AVKit\nimport AVFoundation\n\nclass VideoPlayerViewController: UIViewController {\n    \n    func playLocalVideo() {\n        guard let path = Bundle.main.path(forResource: \"video\", ofType: \"mp4\") else {\n            print(\"Video file not found\")\n            return\n        }\n        \n        let videoURL = URL(fileURLWithPath: path)\n        let player = AVPlayer(url: videoURL)\n        let playerViewController = AVPlayerViewController()\n        playerViewController.player = player\n        present(playerViewController, animated: true) {\n            playerViewController.player?.play()\n        }\n    }\n}"
    },
    {
      "instruction": "Implement a UIViewController that has a UIScrollView and a UIPageControl to display multiple images in a horizontal paging scroll view",
      "input": "",
      "output": "import UIKit\n\nclass PagingScrollViewController: UIViewController, UIScrollViewDelegate {\n    \n    @IBOutlet weak var scrollView: UIScrollView!\n    @IBOutlet weak var pageControl: UIPageControl!\n    \n    let images: [UIImage] = [\n        UIImage(named: \"image1\")!,\n        UIImage(named: \"image2\")!,\n        UIImage(named: \"image3\")!\n    ]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        scrollView.delegate = self\n        setupScrollView()\n        pageControl.numberOfPages = images.count\n    }\n    \n    func setupScrollView() {\n        scrollView.contentSize.width = scrollView.frame.width * CGFloat(images.count)\n        \n        for i in 0..<images.count {\n            let imageView = UIImageView(frame: CGRect(x: scrollView.frame.width * CGFloat(i), y: 0, width: scrollView.frame.width, height: scrollView.frame.height))\n            imageView.image = images[i]\n            imageView.contentMode = .scaleAspectFit\n            scrollView.addSubview(imageView)\n        }\n    }\n    \n    func scrollViewDidScroll(_ scrollView: UIScrollView) {\n        let page = Int(round(scrollView.contentOffset.x / scrollView.frame.width))\n        pageControl.currentPage = page\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to animate a UIView's opacity from fully visible to fully transparent and back",
      "input": "",
      "output": "import UIKit\n\nclass FadeAnimationViewController: UIViewController {\n    \n    @IBOutlet weak var viewToAnimate: UIView!\n    \n    func animateViewOpacity() {\n        UIView.animate(withDuration: 1.0, animations: {\n            self.viewToAnimate.alpha = 0.0\n        }) { _ in\n            UIView.animate(withDuration: 1.0) {\n                self.viewToAnimate.alpha = 1.0\n            }\n        }\n    }\n}"
    },
    {
      "instruction": "Implement a UIViewController with a UITableView that displays a list of items grouped by sections",
      "input": "",
      "output": "import UIKit\n\nclass GroupedTableViewController: UITableViewController {\n    \n    let sections = [\"Fruits\", \"Vegetables\", \"Dairy\"]\n    let items = [\n        [\"Apple\", \"Banana\", \"Cherry\"],\n        [\"Broccoli\", \"Carrot\", \"Cucumber\"],\n        [\"Cheese\", \"Milk\", \"Yogurt\"]\n    ]\n    \n    override func numberOfSections(in tableView: UITableView) -> Int {\n        return sections.count\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items[section].count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        cell.textLabel?.text = items[indexPath.section][indexPath.row]\n        return cell\n    }\n    \n    override func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {\n        return sections[section]\n    }\n}"
    },
    {
      "instruction": "Create a Swift function that makes an API call using URLSession and returns the data as a dictionary",
      "input": "",
      "output": "import Foundation\n\nfunc fetchData(urlString: String, completion: @escaping (Result<[String: Any], Error>) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(.failure(NSError(domain: \"\", code: 404, userInfo: [NSLocalizedDescriptionKey: \"Invalid URL\"])))\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"\", code: 500, userInfo: [NSLocalizedDescriptionKey: \"No data received\"])))\n            return\n        }\n        \n        do {\n            if let json = try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any] {\n                completion(.success(json))\n            } else {\n                completion(.failure(NSError(domain: \"\", code: 500, userInfo: [NSLocalizedDescriptionKey: \"Failed to parse JSON\"])))\n            }\n        } catch let error {\n            completion(.failure(error))\n        }\n    }\n    \n    task.resume()\n}"
    },
    {
      "instruction": " \nCreate a Swift function that configures a UITableView with a custom cell using a UITableViewCell subclass",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    \n    @IBOutlet weak var titleLabel: UILabel!\n    @IBOutlet weak var descriptionLabel: UILabel!\n    \n    func configure(title: String, description: String) {\n        titleLabel.text = title\n        descriptionLabel.text = description\n    }\n}\n\nclass ViewController: UIViewController, UITableViewDataSource {\n    \n    @IBOutlet weak var tableView: UITableView!\n    \n    let data = [(\"Title 1\", \"Description 1\"), (\"Title 2\", \"Description 2\")]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        tableView.register(UINib(nibName: \"CustomTableViewCell\", bundle: nil), forCellReuseIdentifier: \"CustomCell\")\n    }\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomCell\", for: indexPath) as! CustomTableViewCell\n        let item = data[indexPath.row]\n        cell.configure(title: item.0, description: item.1)\n        return cell\n    }\n}"
    },
    {
      "instruction": "Create a Swift function that takes a URL string and makes an HTTP GET request using URLSession. The function should return the data and HTTP status code as a tuple.",
      "input": "",
      "output": "import Foundation\n\nfunc fetchData(from urlString: String, completion: @escaping (Data?, Int?) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(nil, nil)\n        return\n    }\n    \n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let httpResponse = response as? HTTPURLResponse {\n            completion(data, httpResponse.statusCode)\n        } else {\n            completion(nil, nil)\n        }\n    }.resume()\n}\n\nfetchData(from: \"https://api.example.com/data\") { (data, statusCode) in\n    print(\"Status code: \\(statusCode ?? -1)\")\n    print(\"Data: \\(data ?? Data())\")\n}"
    },
    {
      "instruction": "Write a Swift function that animates the transition between two UIViews using a cross dissolve effect.",
      "input": "",
      "output": "import UIKit\n\nfunc crossDissolveTransition(fromView: UIView, toView: UIView, duration: TimeInterval) {\n    UIView.transition(from: fromView, to: toView, duration: duration, options: [.transitionCrossDissolve], completion: nil)\n}"
    },
    {
      "instruction": "Write a Swift function that asynchronously downloads an image from a URL and sets it as the image of a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc loadImageAsync(urlString: String, imageView: UIImageView) {\n    guard let url = URL(string: urlString) else { return }\n    \n    DispatchQueue.global().async {\n        if let data = try? Data(contentsOf: url),\n           let image = UIImage(data: data) {\n            DispatchQueue.main.async {\n                imageView.image = image\n            }\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to create a reusable table view cell with a custom height and an image on the left side.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    static let identifier = \"CustomTableViewCell\"\n\n    private let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        contentView.addSubview(cellImageView)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        cellImageView.frame = CGRect(x: 10, y: 10, width: 50, height: 50)\n    }\n\n    func configure(image: UIImage) {\n        cellImageView.image = image\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that takes a UIColor and a UILabel, and animates the color change of the label's text.",
      "input": "",
      "output": "import UIKit\n\nfunc animateTextColorChange(label: UILabel, to color: UIColor, duration: TimeInterval) {\n    UIView.transition(with: label, duration: duration, options: .transitionCrossDissolve) {\n        label.textColor = color\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to create a UICollectionView with a custom UICollectionViewCell that contains an image and a label.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let identifier = \"CustomCollectionViewCell\"\n\n    private let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n\n    private let cellLabel: UILabel = {\n        let label = UILabel()\n        label.textAlignment = .center\n        return label\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(cellImageView)\n        contentView.addSubview(cellLabel)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        cellImageView.frame = CGRect(x: 0, y: 0, width: contentView.bounds.width, height: contentView.bounds.height - 20)\n        cellLabel.frame = CGRect(x: 0, y: contentView.bounds.height - 20, width: contentView.bounds.width, height: 20)\n    }\n\n    func configure(image: UIImage, text: String) {\n        cellImageView.image= image\n        cellLabel.text = text\n    }\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.identifier)\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10 // Change this based on your data source\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.identifier, for: indexPath) as! CustomCollectionViewCell\n        cell.configure(image: UIImage(named: \"exampleImage\")!, text: \"Example Text\")\n        return cell\n    }\n}\n\nextension CustomCollectionViewController: UICollectionViewDelegateFlowLayout {\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: collectionView.bounds.width / 2 - 10, height: collectionView.bounds.width / 2 - 10)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to create a UIStackView with an array of UIViews and a specified axis.",
      "input": "",
      "output": "import UIKit\n\nfunc createStackView(with views: [UIView], axis: NSLayoutConstraint.Axis, spacing: CGFloat) -> UIStackView {\n    let stackView = UIStackView(arrangedSubviews: views)\n    stackView.axis = axis\n    stackView.spacing = spacing\n    stackView.distribution = .fillEqually\n    return stackView\n}"
    },
    {
      "instruction": "Write a Swift function that makes an HTTP POST request with JSON payload using URLSession. The function should return the data and HTTP status code as a tuple.",
      "input": "",
      "output": "import Foundation\n\nfunc postRequest(urlString: String, payload: [String: Any], completion: @escaping (Data?, Int?) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(nil, nil)\n        return\n    }\n    \n    var request = URLRequest(url: url)\n    request.httpMethod = \"POST\"\n    request.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n    \n    do {\n        let jsonData = try JSONSerialization.data(withJSONObject: payload, options: [])\n        request.httpBody = jsonData\n    } catch {\n        completion(nil, nil)\n        return\n    }\n    \n    URLSession.shared.dataTask(with: request) { (data, response, error) in\n        if let httpResponse = response as? HTTPURLResponse {\n            completion(data, httpResponse.statusCode)\n        } else {\n            completion(nil, nil)\n        }\n    }.resume()\n}\n\nlet payload: [String: Any] = [\"key\": \"value\"]\npostRequest(urlString: \"https://api.example.com/post\", payload: payload) { (data, statusCode) in\n    print(\"Status code: \\(statusCode ?? -1)\")\n    print(\"Data: \\(data ?? Data())\")\n}"
    },
    {
      "instruction": "Write a Swift function that creates a UIAlertController with a title, message, and actions. The actions should include a \"Cancel\" button and any other specified UIAlertAction.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(title: String, message: String, actions: [UIAlertAction], viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    let cancelButton = UIAlertAction(title: \"Cancel\", style: .cancel)\n    alertController.addAction(cancelButton)\n    \n    for action in actions {\n        alertController.addAction(action)\n    }\n    \n    viewController.present(alertController, animated: true)\n}\n\nlet customAction = UIAlertAction(title: \"Custom Action\", style: .default) { (action) in\n    print(\"Custom action triggered\")\n}\nshowAlert(title: \"Example Alert\", message: \"This is an example alert.\", actions: [customAction], viewController: someViewController)"
    },
    {
      "instruction": "Write a Swift function that creates a UIActivityIndicatorView, adds it to the center of a view, and starts animating it.",
      "input": "",
      "output": "import UIKit\n\nfunc showActivityIndicator(in view: UIView) {\n    let activityIndicator = UIActivityIndicatorView(style: .medium)\n    activityIndicator.center = view.center\n    view.addSubview(activityIndicator)\n    activityIndicator.startAnimating()\n}"
    },
    {
      "instruction": "Implement a function that takes a list of string URLs, downloads the images asynchronously, and returns an array of UIImages.",
      "input": "",
      "output": "import UIKit\n\nclass ImageDownloader {\n    func downloadImages(from urls: [String], completion: @escaping ([UIImage]) -> Void) {\n        let dispatchGroup = DispatchGroup()\n        var images: [UIImage] = []\n\n        for url in urls {\n            dispatchGroup.enter()\n            guard let imageURL = URL(string: url) else {\n                dispatchGroup.leave()\n                continue\n            }\n            URLSession.shared.dataTask(with: imageURL) { (data, response, error) in\n                if let data = data, let image = UIImage(data: data) {\n                    images.append(image)\n                }\n                dispatchGroup.leave()\n            }.resume()\n        }\n\n        dispatchGroup.notify(queue: .main) {\n            completion(images)\n        }\n    }\n}"
    },
    {
      "instruction": " \n\nImplement a custom UITableView cell that displays an image, title, and subtitle.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    let subtitleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        addSubview(cellImageView)\n        addSubview(titleLabel)\n        addSubview(subtitleLabel)\n        \n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 8),\n            cellImageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            cellImageView.widthAnchor.constraint(equalToConstant: 50),\n            cellImageView.heightAnchor.constraint(equalToConstant: 50),\n            \n            titleLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 8),\n            titleLabel.topAnchor.constraint(equalTo: topAnchor, constant: 8),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -8),\n            \n            subtitleLabel.leadingAnchor.constraint(equalTo: titleLabel.leadingAnchor),\n            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 4),\n            subtitleLabel.trailingAnchor.constraint(equalTo: titleLabel.trailingAnchor),\n            subtitleLabel.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -8)\n        ])\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that takes a CLLocation, a CLLocationDistance, and a CLLocationDirection, and returns a new CLLocation at the specified distance and direction.",
      "input": "",
      "output": "import CoreLocation\n\nfunc location(at distance: CLLocationDistance, from startLocation: CLLocation, direction: CLLocationDirection) -> CLLocation {\n    let distanceRadians = distance / 6_367_000.0\n    let bearingRadians = direction * .pi / 180.0\n\n    let startLatitudeRadians = startLocation.coordinate.latitude * .pi / 180.0\n    let startLongitudeRadians = startLocation.coordinate.longitude * .pi / 180.0\n\n    let endLatitudeRadians = asin(sin(startLatitudeRadians) * cos(distanceRadians) + cos(startLatitudeRadians) * sin(distanceRadians) * cos(bearingRadians))\n    let endLongitudeRadians = startLongitudeRadians + atan2(sin(bearingRadians) * sin(distanceRadians) * cos(startLatitudeRadians), cos(distanceRadians) - sin(startLatitudeRadians) * sin(endLatitudeRadians))\n\n    let endLatitude = endLatitudeRadians * 180.0 / .pi\n    let endLongitude = endLongitudeRadians * 180.0 / .pi\n\n    return CLLocation(latitude: endLatitude, longitude: endLongitude)\n}"
    },
    {
      "instruction": " \n\nImplement a function that takes a string containing HTML and returns an NSAttributedString with the HTML tags applied.",
      "input": "",
      "output": "import UIKit\n\nfunc attributedStringFromHTML(_ htmlString: String) -> NSAttributedString? {\n    guard let data = htmlString.data(using: .utf8) else {\n        return nil\n    }\n\n    let options: [NSAttributedString.DocumentReadingOptionKey: Any] = [\n        .documentType: NSAttributedString.DocumentType.html,\n        .characterEncoding: String.Encoding.utf8.rawValue\n    ]\n\n    return try? NSAttributedString(data: data, options: options, documentAttributes: nil)\n}"
    },
    {
      "instruction": " \n\nImplement a function that saves an UIImage to the user's photo library and returns a success or failure message.",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToPhotoLibrary(_ image: UIImage, completion: @escaping (Result<Void, Error>) -> Void) {\n    PHPhotoLibrary.requestAuthorization { (status) in\n        switch status {\n        case .authorized:\n            PHPhotoLibrary.shared().performChanges({\n                PHAssetChangeRequest.creationRequestForAsset(from: image)\n            }) { (success, error) in\n                DispatchQueue.main.async {\n                    if let error = error {\n                        completion(.failure(error))\n                    } else {\n                        completion(.success(()))\n                    }\n                }\n            }\n        case .denied, .restricted, .notDetermined:\n            DispatchQueue.main.async {\n                completion(.failure(NSError(domain: \"PhotoLibraryError\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"Unauthorized access to photo library\"])))\n            }\n        @unknown default:\n            fatalError(\"Unknown authorization status\")\n        }\n    }\n}"
    },
    {
      "instruction": " \n\nImplement a function that takes a UIView and a CGPoint, and returns the UIView's subview at the given point (if any).",
      "input": "",
      "output": "func subview(at point: CGPoint, in view: UIView) -> UIView? {\n    for subview in view.subviews {\n        if subview.frame.contains(point) {\n            return subview\n        }\n    }\n    return nil\n}"
    },
    {
      "instruction": " \n\nImplement a function that adds a simple animation to a UIButton, making it pulse when tapped.",
      "input": "",
      "output": "import UIKit\n\nfunc addPulseAnimation(to button: UIButton) {\n    let pulseAnimation = CASpringAnimation(keyPath: \"transform.scale\")\n    pulseAnimation.duration = 0.4\n    pulseAnimation.fromValue = 0.95\n    pulseAnimation.toValue = 1.0\n    pulseAnimation.autoreverses = true\n    pulseAnimation.repeatCount = 1\n    pulseAnimation.initialVelocity = 0.5\n    pulseAnimation.damping = 1.0\n\n    button.layer.add(pulseAnimation, forKey: \"pulse\")\n}"
    },
    {
      "instruction": "Write a Swift function to create a UITableView with a custom UITableViewCell that contains a UILabel and a UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    static let reuseIdentifier = \"CustomTableViewCell\"\n    \n    let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let cellLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    func setupViews() {\n        contentView.addSubview(cellImageView)\n        contentView.addSubview(cellLabel)\n        \n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 8),\n            cellImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            cellImageView.heightAnchor.constraint(equalToConstant: 40),\n            cellImageView.widthAnchor.constraint(equalToConstant: 40),\n            \n            cellLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 8),\n            cellLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -8),\n            cellLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor)\n        ])\n    }\n}\n\nfunc createCustomTableView() -> UITableView {\n    let tableView = UITableView()\n    tableView.translatesAutoresizingMaskIntoConstraints = false\n    tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: CustomTableViewCell.reuseIdentifier)\n    return tableView\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UICollectionView with a custom UICollectionViewCell that contains a UILabel and a UIImageView, using UICollectionViewFlowLayout",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n    \n    let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let cellLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    func setupViews() {\n        addSubview(cellImageView)\n        addSubview(cellLabel)\n        \n        NSLayoutConstraint.activate([\n            cellImageView.centerXAnchor.constraint(equalTo: centerXAnchor),\n            cellImageView.topAnchor.constraint(equalTo: topAnchor, constant: 8),\n            cellImageView.heightAnchor.constraint(equalToConstant: 40),\n            cellImageView.widthAnchor.constraint(equalToConstant: 40),\n            \n            cellLabel.topAnchor.constraint(equalTo: cellImageView.bottomAnchor, constant: 8),\n            cellLabel.leadingAnchor.constraint(equalTo: leadingAnchor),\n            cellLabel.trailingAnchor.constraint(equalTo: trailingAnchor),\n            cellLabel.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -8)\n        ])\n    }\n}\n\nfunc createCustomCollectionView() -> UICollectionView {\n    let layout = UICollectionViewFlowLayout()\n    layout.itemSize = CGSize(width: 100, height: 100)\n    layout.minimumInteritemSpacing = 8\n    layout.minimumLineSpacing = 8\n    \n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.backgroundColor = .clear\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n    return collectionView\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIStackView containing a UITextField, a UIButton, and a UILabel, with specified alignments and spacings",
      "input": "",
      "output": "func createStackView() -> UIStackView {\n    let textField = UITextField()\n    textField.translatesAutoresizingMaskIntoConstraints = false\n    textField.placeholder = \"Enter text\"\n    \n    let button = UIButton(type: .system)\n    button.translatesAutoresizingMaskIntoConstraints = false\n    button.setTitle(\"Submit\", for: .normal)\n    \n    let label = UILabel()\n    label.translatesAutoresizingMaskIntoConstraints = false\n    label.text = \"Result\"\n    \n    let stackView = UIStackView(arrangedSubviews: [textField, button, label])\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    stackView.axis = .vertical\n    stackView.alignment = .fill\n    stackView.spacing = 8\n    \n    return stackView\n}"
    },
    {
      "instruction": "Write a function in Swift to download an image from a URL and display it in a UIImageView. The function should take a URL string and a UIImageView as parameters and set the downloaded image as the UIImageView's image.",
      "input": "\"https://example.com/image.jpg\", imageView",
      "output": "import UIKit\n\nfunc downloadImage(from urlString: String, to imageView: UIImageView) {\n    guard let url = URL(string: urlString) else { return }\n    \n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else { return }\n        \n        DispatchQueue.main.async {\n            let image = UIImage(data: data)\n            imageView.image = image\n        }\n    }.resume()\n}\n\nlet imageUrl = \"https://example.com/image.jpg\"\nlet imageView = UIImageView()\ndownloadImage(from: imageUrl, to: imageView)"
    },
    {
      "instruction": "Write a Swift function that creates a UIAlertController with a specified title, message, and preferredStyle. The function should take three arguments: a title, a message, and a preferredStyle, and return the created UIAlertController.",
      "input": "\"Alert Title\", \"This is an example alert message.\", .alert",
      "output": "import UIKit\n\nfunc createAlertController(title: String, message: String, preferredStyle: UIAlertController.Style) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: preferredStyle)\n    return alertController\n}\n\nlet alertTitle = \"Alert Title\"\nlet alertMessage = \"This is an example alert message.\"\nlet preferredStyle: UIAlertController.Style = .alert\nlet alertController = createAlertController(title: alertTitle, message: alertMessage, preferredStyle: preferredStyle)"
    },
    {
      "instruction": "Write a Swift function that sends a GET request to a given URL and prints the JSON response. The function should take a URL string as input.",
      "input": "\"https://api.example.com/data\"",
      "output": "import Foundation\n\nfunc getJsonResponse(from urlString: String) {\n    guard let url = URL(string: urlString) else { return }\n\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else { return }\n\n        do {\n            if let jsonResponse = try JSONSerialization.jsonObject(with: data, options: []) as? [String: AnyObject] {\n                print(jsonResponse)\n            }\n        } catch {\n            print(\"Error: \\(error)\")\n        }\n    }\n\n    task.resume()\n}\n\nlet apiUrl = \"https://api.example.com/data\"\ngetJsonResponse(from: apiUrl)"
    },
    {
      "instruction": "Write a Swift function that animates a UIView's position using CGAffineTransform. The function should take a UIView, a CGPoint for the new position, and a TimeInterval for the duration of the animation as parameters.",
      "input": "view, CGPoint(x: 100, y: 200), 0.5",
      "output": "import UIKit\n\nfunc animateViewPosition(view: UIView, newPosition: CGPoint, duration: TimeInterval) {\n    UIView.animate(withDuration: duration) {\n        view.transform = CGAffineTransform(translationX: newPosition.x, y: newPosition.y)\n    }\n}\n\nlet view = UIView()\nlet newPosition = CGPoint(x: 100, y: 200)\nlet duration: TimeInterval = 0.5\nanimateViewPosition(view: view, newPosition: newPosition, duration: duration)"
    },
    {
      "instruction": "Write a Swift function to encode an object that conforms to the Codable protocol into a JSON string. The function should take a Codable object as input and return the JSON string.",
      "input": "Person(name: \"John Doe\", age: 30)",
      "output": "import Foundation\n\nfunc encodeToJson<T: Codable>(_ object: T) -> String? {\n    let encoder = JSONEncoder()\n    encoder.outputFormatting = .prettyPrinted\n\n    do {\n        let data = try encoder.encode(object)\n        return String(data: data, encoding: .utf8)\n    } catch {\n        print(\"Error: \\(error)\")\n        return nil\n    }\n}\n\nstruct Person: Codable {\n    let name: String\n    let age: Int\n}\n\nlet person = Person(name: \"John Doe\", age: 30)\nif let jsonString = encodeToJson(person) {\n    print(jsonString)\n}"
    },
    {
      "instruction": "Write a Swift function that takes a UITableView and a UITableViewCell as arguments and dequeues a reusable cell with a specified identifier. The function should return a UITableViewCell.",
      "input": "tableView, \"exampleCell\"",
      "output": "import UIKit\n\nfunc dequeueReusableCell(for tableView: UITableView, with identifier: String) -> UITableViewCell {\n    return tableView.dequeueReusableCell(withIdentifier: identifier) ?? UITableViewCell(style: .default, reuseIdentifier: identifier)\n}\n\nlet tableView = UITableView()\nlet cellIdentifier = \"exampleCell\"\nlet cell = dequeueReusableCell(for: tableView, with: cellIdentifier)"
    },
    {
      "instruction": "Write a Swift function that adds a UITapGestureRecognizer toa UIView and calls a specified action when the tap gesture is recognized. The function should take a UIView and a Selector as parameters.",
      "input": "view, #selector(handleTapGesture(_:))",
      "output": "import UIKit\n\nfunc addTapGestureRecognizer(to view: UIView, action: Selector) {\n    let tapGesture = UITapGestureRecognizer(target: view, action: action)\n    view.addGestureRecognizer(tapGesture)\n    view.isUserInteractionEnabled = true\n}\n\nclass ExampleViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let view = UIView()\n        addTapGestureRecognizer(to: view, action: #selector(handleTapGesture(_:)))\n    }\n\n    @objc func handleTapGesture(_ gesture: UITapGestureRecognizer) {\n        print(\"Tap gesture recognized\")\n    }\n}\n\nlet viewController = ExampleViewController()"
    },
    {
      "instruction": "Write a Swift function that adds a UIActivityIndicatorView to a UIView, starts animating it, and sets its style and color. The function should take a UIView, a UIActivityIndicatorView.Style, and a UIColor as parameters.",
      "input": "view, .large, .red",
      "output": "import UIKit\n\nfunc addActivityIndicator(to view: UIView, style: UIActivityIndicatorView.Style, color: UIColor) {\n    let activityIndicator = UIActivityIndicatorView(style: style)\n    activityIndicator.color = color\n    activityIndicator.translatesAutoresizingMaskIntoConstraints = false\n    view.addSubview(activityIndicator)\n    \n    NSLayoutConstraint.activate([\n        activityIndicator.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n        activityIndicator.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n    ])\n    \n    activityIndicator.startAnimating()\n}\n\nlet view = UIView(frame: CGRect(x: 0, y: 0, width: 300, height: 300))\naddActivityIndicator(to: view, style: .large, color: .red)"
    },
    {
      "instruction": "Swift function to create and present a UIAlertController with multiple actions:",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    func presentAlertController() {\n        let alertController = UIAlertController(title: \"Title\", message: \"Message\", preferredStyle: .alert)\n        \n        let action1 = UIAlertAction(title: \"Action 1\", style: .default) { (_) in\n            print(\"Action 1 tapped\")\n        }\n        \n        let action2 = UIAlertAction(title: \"Action 2\", style: .default) { (_) in\n            print(\"Action 2 tapped\")\n        }\n        \n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n        \n        alertController.addAction(action1)\n        alertController.addAction(action2)\n        alertController.addAction(cancelAction)\n        \n        self.present(alertController, animated: true, completion: nil)\n    }\n    \n}"
    },
    {
      "instruction": "Swift function to create and configure a UICollectionView:",
      "input": "",
      "output": "import UIKit\n\nclass CollectionViewController: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource {\n    \n    private lazy var collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .vertical\n        layout.itemSize = CGSize(width: 100, height: 100)\n        \n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.delegate = self\n        collectionView.dataSource = self\n        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: \"Cell\")\n        \n        return collectionView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(collectionView)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"Cell\", for: indexPath)\n        cell.backgroundColor = .red\n        return cell\n    }\n    \n}"
    },
    {
      "instruction": "Swift function to make a network request using URLSession:",
      "input": "",
      "output": "import Foundation\n\nclass NetworkManager {\n    \n    func fetchData(urlString: String, completion: @escaping (Data?, Error?) -> Void) {\n        guard let url = URL(string: urlString) else { return }\n        \n        let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n            completion(data, error)\n        }\n        \n        task.resume()\n    }\n    \n}"
    },
    {
      "instruction": "Swift function to create a custom UITableViewCell:",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    \n    private lazy var titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        contentView.addSubview(titleLabel)\n        setupConstraints()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            titleLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16)\n        ])\n    }\n    \n    func configure(title: String) {\n        titleLabel.text = title\n    }\n    \n}"
    },
    {
      "instruction": "Swift function to create and configure a UISearchBar:",
      "input": "",
      "output": "import UIKit\n\nclass SearchViewController: UIViewController, UISearchBarDelegate {\n    \n    private lazy var searchBar: UISearchBar = {\n        let searchBar = UISearchBar()\n        searchBar.translatesAutoresizingMaskIntoConstraints = false\n        searchBar.delegate = self\n        searchBar.placeholder = \"Search\"\n        return searchBar\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(searchBar)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            searchBar.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            searchBar.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            searchBar.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {\n        searchBar.resignFirstResponder()\n        print(\"Search text: \\(searchBar.text ?? \"\")\")\n    }\n    \n}"
    },
    {
      "instruction": "Swift function to create and configure a UIPickerView:",
      "input": "",
      "output": "import UIKit\n\nclass PickerViewExample: UIViewController, UIPickerViewDelegate, UIPickerViewDataSource {\n    \n    private lazy var pickerView: UIPickerView = {\n        let pickerView = UIPickerView()\n        pickerView.translatesAutoresizingMaskIntoConstraints = false\n        pickerView.delegate = self\n        pickerView.dataSource = self\n        return pickerView\n    }()\n    \n    private let data = [\"Option 1\", \"Option 2\", \"Option 3\"]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(pickerView)\n        setupConstraints()\n       private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            pickerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            pickerView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n    \n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return data.count\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return data[row]\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        print(\"Selected: \\(data[row])\")\n    }\n    \n}"
    },
    {
      "instruction": "Swift function to create and configure a UIActivityIndicatorView:",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    private lazy var activityIndicator: UIActivityIndicatorView = {\n        let activityIndicator = UIActivityIndicatorView(style: .large)\n        activityIndicator.translatesAutoresizingMaskIntoConstraints = false\n        activityIndicator.hidesWhenStopped = true\n        activityIndicator.color = .blue\n        return activityIndicator\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(activityIndicator)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            activityIndicator.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            activityIndicator.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n    \n    func startActivityIndicator() {\n        activityIndicator.startAnimating()\n    }\n    \n    func stopActivityIndicator() {\n        activityIndicator.stopAnimating()\n    }\n    \n}"
    },
    {
      "instruction": "Swift function to create and configure a UITableView with a custom cell:",
      "input": "",
      "output": "import UIKit\n\nclass TableViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {\n    \n    private lazy var tableView: UITableView = {\n        let tableView = UITableView()\n        tableView.translatesAutoresizingMaskIntoConstraints = false\n        tableView.delegate = self\n        tableView.dataSource = self\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomCell\")\n        return tableView\n    }()\n    \n    private let data = [\"Item 1\", \"Item 2\", \"Item 3\"]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(tableView)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            tableView.topAnchor.constraint(equalTo: view.topAnchor),\n            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomCell\", for: indexPath) as! CustomTableViewCell\n        cell.configure(title: data[indexPath.row])\n        return cell\n    }\n    \n}"
    },
    {
      "instruction": "Write a Swift function to create and configure a UISlider",
      "input": "",
      "output": "import UIKit\n\nclass SliderViewController: UIViewController {\n    \n    private lazy var slider: UISlider = {\n        let slider = UISlider()\n        slider.translatesAutoresizingMaskIntoConstraints = false\n        slider.minimumValue = 0\n        slider.maximumValue = 100\n        slider.value = 50\n        slider.addTarget(self, action: #selector(sliderValueChanged(_:)), for: .valueChanged)\n        return slider\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(slider)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            slider.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            slider.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n    \n    @objc func sliderValueChanged(_ sender: UISlider) {\n        print(\"Slider value: \\(sender.value)\")\n    }\n    \n}"
    },
    {
      "instruction": "Implement a function that fetches a list of nearby restaurants using CoreLocation and URLSession, then returns the list of restaurants in a completion handler.",
      "input": "    import CoreLocation\n    import Foundation",
      "output": "    import CoreLocation\n    import Foundation\n\n    struct Restaurant: Codable {\n        let name: String\n        let address: String\n        let rating: Double\n    }\n\n    func fetchNearbyRestaurants(userLocation: CLLocation, completion: @escaping ([Restaurant]?, Error?) -> Void) {\n        let baseUrl = \"https://api.example.com/restaurants\"\n        let lat = userLocation.coordinate.latitude\n        let lon = userLocation.coordinate.longitude\n        let urlString = \"\\(baseUrl)?lat=\\(lat)&lon=\\(lon)\"\n\n        guard let url = URL(string: urlString) else {\n            completion(nil, NSError(domain: \"InvalidURL\", code: 0, userInfo: nil))\n            return\n        }\n\n        let task = URLSession.shared.dataTask(with: url) { data, response, error in\n            if let error = error {\n                completion(nil, error)\n                return\n            }\n\n            guard let data = data else {\n                completion(nil, NSError(domain: \"NoData\", code: 0, userInfo: nil))\n                return\n            }\n\n            do {\n                let decoder = JSONDecoder()\n                let restaurants = try decoder.decode([Restaurant].self, from: data)\n                completion(restaurants, nil)\n            } catch {\n                completion(nil, error)\n            }\n        }\n        task.resume()\n    }"
    },
    {
      "instruction": " \nImplement a function that takes an image and a compression quality as input, and returns a JPEG representation of the image with the specified compression quality.",
      "input": "    import UIKit",
      "output": "    import UIKit\n\n    func jpegData(from image: UIImage, compressionQuality: CGFloat) -> Data? {\n        return image.jpegData(compressionQuality: compressionQuality)\n    }"
    },
    {
      "instruction": " \nWrite a function that asynchronously downloads an image from a given URL and sets that image to a UIImageView.",
      "input": "    import UIKit",
      "output": "    import UIKit\n\n    extension UIImageView {\n        func setImage(from url: URL) {\n            URLSession.shared.dataTask(with: url) { data, response, error in\n                guard let data = data, error == nil, let image = UIImage(data: data) else {\n                    return\n                }\n\n                DispatchQueue.main.async {\n                    self.image = image\n                }\n            }.resume()\n        }\n    }"
    },
    {
      "instruction": " \nImplement a function that creates a custom UIButton with a rounded border, background color, and title.",
      "input": "    import UIKit",
      "output": "    import UIKit\n\n    func createRoundedButton(title: String, backgroundColor: UIColor, borderColor: UIColor, cornerRadius: CGFloat) -> UIButton {\n        let button = UIButton(type: .system)\n        button.setTitle(title, for: .normal)\n        button.backgroundColor = backgroundColor\n        button.layer.borderColor = borderColor.cgColor\n        button.layer.borderWidth = 1\n        button.layer.cornerRadius = cornerRadius\n        button.clipsToBounds = true\n        return button\n    }"
    },
    {
      "instruction": " \nWrite a function that uses CoreMotion to start updating accelerometer data, and then prints the accelerometer data to the console.",
      "input": "    import CoreMotion",
      "output": "    import CoreMotion\n\n    func startAccelerometerUpdates() {\n        let motionManager = CMMotionManager()\n        \n        if motionManager.isAccelerometerAvailable {\n            motionManager.accelerometerUpdateInterval = 0.1\n            motionManager.startAccelerometerUpdates(to: .main) { data, error in\n                guard let data = data, error == nil else {\n                    return\n                }\n\n                print(\"Accelerometer Data: \\(data)\")\n            }\n        } else {\n            print(\"Accelerometer not available on this device.\")\n        }\n    }"
    },
    {
      "instruction": " \nWrite a function that takes a string and a UIFont as input and returns the size of the string when rendered with the given font.",
      "input": "    import UIKit",
      "output": "    import UIKit\n\n    func textSize(for text: String, font: UIFont) -> CGSize {\n        let attributedString = NSAttributedString(string: text, attributes: [.font: font])\n        return attributedString.size()\n    }"
    },
    {
      "instruction": " \nImplement a function that takes a UITableView, an array of data, and a cell configuration closure, and then registers, dequeues, and configures cells using the provided closure.",
      "input": "    import UIKit",
      "output": "    import UIKit\n\n    func configureTableView<T: UITableViewCell>(_ tableView: UITableView, data: [Any], cellIdentifier: String, configureCell: @escaping (T, Any) -> Void) {\n        tableView.register(T.self, forCellReuseIdentifier: cellIdentifier)\n        \n        let numberOfRows = data.count\n        for row in 0..<numberOfRows {\n            let indexPath = IndexPath(row: row, section: 0)\n            guard let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath) as? T else {\n                continue\n            }\n            configureCell(cell, data[row])\n        }\n    }"
    },
    {
      "instruction": " \nWrite a function that takes a date and a format string as input and returns a string representation of the date using the given format.",
      "input": "    import Foundation",
      "output": "    import Foundation\n\n    func formatDate(_ date: Date, format: String) -> String {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat = format\n        return dateFormatter.string(from: date)\n    }"
    },
    {
      "instruction": "Create a custom UITableView cell that displays an image, title, and subtitle for a mobile app's news feed.",
      "input": "",
      "output": "import UIKit\n\nclass NewsFeedTableViewCell: UITableViewCell {\n\n    static let reuseIdentifier = \"NewsFeedTableViewCell\"\n\n    private let newsImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFit\n        return imageView\n    }()\n\n    private let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.font = UIFont.systemFont(ofSize: 18, weight: .bold)\n        label.numberOfLines = 0\n        return label\n    }()\n\n    private let subtitleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.font = UIFont.systemFont(ofSize: 14, weight: .regular)\n        label.numberOfLines = 0\n        return label\n    }()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupSubviews()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupSubviews() {\n        addSubview(newsImageView)\n        addSubview(titleLabel)\n        addSubview(subtitleLabel)\n\n        NSLayoutConstraint.activate([\n            newsImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 16),\n            newsImageView.topAnchor.constraint(equalTo: topAnchor, constant: 16),\n            newsImageView.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -16),\n            newsImageView.widthAnchor.constraint(equalToConstant: 100),\n\n            titleLabel.leadingAnchor.constraint(equalTo: newsImageView.trailingAnchor, constant: 16),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -16),\n            titleLabel.topAnchor.constraint(equalTo: topAnchor, constant: 16),\n\n            subtitleLabel.leadingAnchor.constraint(equalTo: titleLabel.leadingAnchor),\n            subtitleLabel.trailingAnchor.constraint(equalTo: titleLabel.trailingAnchor),\n            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 8)\n        ])\n    }\n\n    func configure(with model: NewsFeedItem) {\n        newsImageView.image = model.image\n        titleLabel.text = model.title\n        subtitleLabel.text = model.subtitle\n    }\n}\n\nstruct NewsFeedItem {\n    let image: UIImage\n    let title: String\n    let subtitle: String\n}"
    },
    {
      "instruction": " \nImplement a custom UICollectionView flow layout to display items in a grid with 2 columns and a fixed item height.",
      "input": "",
      "output": "import UIKit\n\nclass CustomFlowLayout: UICollectionViewFlowLayout {\n\n    private let numberOfColumns = 2\n    private let itemHeight: CGFloat = 200\n\n    override func prepare() {\n        super.prepare()\n\n        guard let collectionView = collectionView else { return }\n\n        let availableWidth = collectionView.bounds.width - (sectionInset.left + sectionInset.right)\n        let itemWidth = (availableWidth / CGFloat(numberOfColumns)).rounded(.down)\n\n        itemSize = CGSize(width: itemWidth, height: itemHeight)\n        minimumLineSpacing = 20\n        minimumInteritemSpacing = 0\n        sectionInset = UIEdgeInsets(top: 20, left: 20, bottom: 20, right: 20)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to fetch a list of users from a REST API, decode the JSON response into an array of User objects, and handle errors appropriately. The function should take a completion handler as a parameter which will be called with the array of users or an error.",
      "input": "",
      "output": "import Foundation\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let email: String\n}\n\nenum APIError: Error {\n    case requestFailed\n    case jsonDecodingError\n}\n\nfunc fetchUsers(completion: @escaping (Result<[User], APIError>) -> Void) {\n    let url = URL(string: \"https://api.example.com/users\")!\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil else {\n            completion(.failure(.requestFailed))\n            return\n        }\n        do {\n            let users = try JSONDecoder().decode([User].self, from: data)\n            completion(.success(users))\n        } catch {\n            completion(.failure(.jsonDecodingError))\n        }\n    }\n    task.resume()\n}\n\nfetchUsers { result in\n    switch result {\n    case .success(let users):\n        for user in users {\n            print(\"\\(user.name) <\\(user.email)>\")\n        }\n    case .failure(let error):\n        print(\"Error: \\(error)\")\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to download an image from a URL, cache it, and display it in a UIImageView using Kingfisher. The function should take an imageURL String and imageView as input.",
      "input": "",
      "output": "import UIKit\nimport Kingfisher\n\nfunc setImage(with url: String, on imageView: UIImageView) {\n    guard let imageURL = URL(string: url) else {\n        return\n    }\n    imageView.kf.setImage(with: imageURL)\n}\n\nlet imageView = UIImageView(frame: CGRect(x: 0, y: 0, width: 200, height: 200))\nlet imageURL = \"https://example.com/image.jpg\"\nsetImage(with: imageURL, on: imageView)"
    },
    {
      "instruction": "Write a view controller in Swift that uses a UIPickerView to allow users to select their country from a list of countries and display the selected country in a UILabel.",
      "input": "",
      "output": "import UIKit\n\nclass CountryPickerViewController: UIViewController, UIPickerViewDelegate, UIPickerViewDataSource {\n\n    let countries = [\"United States\", \"Canada\", \"Mexico\", \"United Kingdom\", \"France\", \"Germany\", \"Italy\", \"Spain\", \"Brazil\", \"Australia\"]\n    let pickerView = UIPickerView()\n    let countryLabel = UILabel()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        pickerView.delegate = self\n        pickerView.dataSource = self\n        pickerView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(pickerView)\n\n        countryLabel.textAlignment = .center\n        countryLabel.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(countryLabel)\n\n        NSLayoutConstraint.activate([\n            pickerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            pickerView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            countryLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            countryLabel.topAnchor.constraint(equalTo: pickerView.bottomAnchor, constant: 20)\n        ])\n\n        countryLabel.text = countries[pickerView.selectedRow(inComponent: 0)]\n    }\n\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return countries.count\n    }\n\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return countries[row]\n    }\n\n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        countryLabel.text = countries[row]\n    }\n}"
    },
    {
      "instruction": "Write a function in Swift language to sort a list of contacts by their last name. Each contact is represented by a dictionary with keys \"firstName\" and \"lastName\". The function should take a list of contacts as input and return a sorted list of contacts.",
      "input": "let contacts = [\n    [\"firstName\": \"John\", \"lastName\": \"Doe\"],\n    [\"firstName\": \"Jane\", \"lastName\": \"Smith\"],\n    [\"firstName\": \"Tom\", \"lastName\": \"Brown\"]\n]",
      "output": "func sortContactsByLastName(_ contacts: [[String: String]]) -> [[String: String]] {\n    return contacts.sorted { contact1, contact2 in\n        return contact1[\"lastName\"]! < contact2[\"lastName\"]!\n    }\n}\n\nlet sortedContacts = sortContactsByLastName(contacts)\nprint(sortedContacts)"
    },
    {
      "instruction": " \nWrite a function in Swift language that takes an array of integers as input and returns the sum of all even numbers within the array.",
      "input": "let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
      "output": "func sumOfEvenNumbers(_ numbers: [Int]) -> Int {\n    return numbers.filter { $0 % 2 == 0 }.reduce(0, +)\n}\n\nlet sum = sumOfEvenNumbers(numbers)\nprint(sum)"
    },
    {
      "instruction": " \nWrite a Swift function to calculate the factorial of a given non-negative integer using recursion.",
      "input": "5",
      "output": "func factorial(_ n: Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    return n * factorial(n - 1)\n}\n\nlet result = factorial(5)\nprint(result)"
    },
    {
      "instruction": " \nWrite a function in Swift language that takes a string as input and returns a dictionary with the count of each character (excluding spaces) in the string.",
      "input": "let inputString = \"hello world\"",
      "output": "func characterCount(_ input: String) -> [Character: Int] {\n    var countDict: [Character: Int] = [:]\n    for char in input where char != \" \" {\n        countDict[char] = (countDict[char] ?? 0) + 1\n    }\n    return countDict\n}\n\nlet count = characterCount(inputString)\nprint(count)"
    },
    {
      "instruction": " \nWrite a function in Swift language to generate a random password of given length with at least one uppercase letter, one lowercase letter, and one digit.",
      "input": "8",
      "output": "import Foundation\n\nfunc generateRandomPassword(_ length: Int) -> String {\n    let uppercaseLetters = Array(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    let lowercaseLetters = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    let digits = Array(\"0123456789\")\n\n    var password = [Character]()\n    password.append(uppercaseLetters.randomElement()!)\n    password.append(lowercaseLetters.randomElement()!)\n    password.append(digits.randomElement()!)\n\n    while password.count < length {\n        password.append([uppercaseLetters, lowercaseLetters, digits].flatMap { $0 }.randomElement()!)\n    }\n\n    password.shuffle()\n\n    return String(password)\n}\n\nlet randomPassword = generateRandomPassword(8)\nprint(randomPassword)"
    },
    {
      "instruction": " \nWrite a function in Swift language that takes a collection of UIView instances and applies a rounded corner radius to each view.",
      "input": "let views: [UIView] = [view1, view2, view3]",
      "output": "import UIKit\n\nfunc applyRoundedCornersToViews(_ views: [UIView], cornerRadius: CGFloat) {\n    for view in views {\n        view.layer.cornerRadius = cornerRadius\n        view.clipsToBounds = true\n    }\n}\n\napplyRoundedCornersToViews(views, cornerRadius: 10.0)"
    },
    {
      "instruction": " \nWrite a Swift function that takes a string as input and removes all vowels from the string.",
      "input": "let inputString = \"Hello, world!\"",
      "output": "func removeVowels(_ input: String) -> String {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    return String(input.filter { !vowels.contains($0) })\n}\n\nlet stringWithoutVowels = removeVowels(inputString)\nprint(stringWithoutVowels)"
    },
    {
      "instruction": " \nWrite a function in Swift language that takes an array of integers as input and returns an array with the squares of all input integers.",
      "input": "let numbers = [1, 2, 3, 4, 5]",
      "output": "func squareOfNumbers(_ numbers: [Int]) -> [Int] {\n    return numbers.map { $0 * $0 }\n}\n\nlet squaredNumbers = squareOfNumbers(numbers)\nprint(squaredNumbers)"
    },
    {
      "instruction": "Create a Swift function to check network connectivity in a mobile application",
      "input": "",
      "output": "import Foundation\nimport SystemConfiguration\n\nclass NetworkChecker {\n    static func isConnectedToNetwork() -> Bool {\n        var zeroAddress = sockaddr_in()\n        zeroAddress.sin_len = UInt8(MemoryLayout.size(ofValue: zeroAddress))\n        zeroAddress.sin_family = sa_family_t(AF_INET)\n\n        guard let defaultRouteReachability = withUnsafePointer(to: &zeroAddress, {\n            $0.withMemoryRebound(to: sockaddr.self, capacity: 1) {\n                SCNetworkReachabilityCreateWithAddress(nil, $0)\n            }\n        }) else {\n            return false\n        }\n\n        var flags: SCNetworkReachabilityFlags = []\n        if !SCNetworkReachabilityGetFlags(defaultRouteReachability, &flags) {\n            return false\n        }\n\n        let isReachable = flags.contains(.reachable)\n        let needsConnection = flags.contains(.connectionRequired)\n        return isReachable && !needsConnection\n    }\n}\n\n// Usage example\nif NetworkChecker.isConnectedToNetwork() {\n    print(\"Connected to network\")\n} else {\n    print(\"Not connected to network\")\n}"
    },
    {
      "instruction": " \nWrite a Swift function to fetch JSON data from a URL and decode it into a custom data model",
      "input": "",
      "output": "import Foundation\n\nstruct User: Decodable {\n    let id: Int\n    let name: String\n}\n\nfunc fetchJSONData(url: String, completion: @escaping (User?, Error?) -> Void) {\n    guard let url = URL(string: url) else {\n        completion(nil, NSError(domain: \"Invalid URL\", code: -1, userInfo: nil))\n        return\n    }\n\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil else {\n            completion(nil, error)\n            return\n        }\n\n        do {\n            let decoder = JSONDecoder()\n            let user = try decoder.decode(User.self, from: data)\n            completion(user, nil)\n        } catch {\n            completion(nil, error)\n        }\n    }.resume()\n}\n\n// Usage example\nfetchJSONData(url: \"https://jsonplaceholder.typicode.com/users/1\") { user, error in\n    if let user = user {\n        print(\"User name: \\(user.name)\")\n    } else {\n        print(\"Error: \\(error?.localizedDescription ?? \"Unknown error\")\")\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to create and configure a UICollectionView with custom cell registration and a specified number of columns",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n    // Configure the cell's UI elements here\n}\n\nfunc createCollectionView(columns: Int) -> UICollectionView {\n    let layout = UICollectionViewFlowLayout()\n    layout.minimumInteritemSpacing = 10\n    layout.minimumLineSpacing = 10\n    let screenWidth = UIScreen.main.bounds.width\n    let itemWidth = (screenWidth - (CGFloat(columns) + 1) * layout.minimumInteritemSpacing) / CGFloat(columns)\n    layout.itemSize = CGSize(width: itemWidth, height: itemWidth)\n\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    return collectionView\n}"
    },
    {
      "instruction": "Write a Swift function to make a GET request to a specified URL and handle the response with a completion handler",
      "input": "",
      "output": "import Foundation\n\nfunc getRequest(urlString: String, completionHandler: @escaping (Data?, URLResponse?, Error?) -> Void) {\n    guard let url = URL(string: urlString) else {\n        print(\"Invalid URL\")\n        return\n    }\n\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        completionHandler(data, response, error)\n    }\n\n    task.resume()\n}"
    },
    {
      "instruction": "Write a Swift function to create and configure a UIPickerView with a specified list of options and a default selected option",
      "input": "",
      "output": "import UIKit\n\nfunc createPickerView(options: [String], defaultOption: String) -> UIPickerView {\n    let pickerView = UIPickerView()\n    pickerView.translatesAutoresizingMaskIntoConstraints = false\n\n    if let selectedIndex = options.firstIndex(of: defaultOption) {\n        pickerView.selectRow(selectedIndex, inComponent: 0, animated: false)\n    }\n\n    return pickerView\n}\n\n// Make sure to conform to UIPickerViewDelegate & UIPickerViewDataSource\n// extension ViewController: UIPickerViewDelegate, UIPickerViewDataSource {\n// func numberOfComponents(in pickerView: UIPickerView) -> Int {\n// return 1\n// }\n//\n// func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n// return options.count\n// }\n//\n// func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n// return options[row]\n// }\n// }"
    },
    {
      "instruction": "Write a Swift function to create and configure a UISegmentedControl with a specified list of segment titles and an action handler",
      "input": "",
      "output": "import UIKit\n\nfunc createSegmentedControl(titles: [String], actionHandler: Selector) -> UISegmentedControl {\n    let segmentedControl = UISegmentedControl(items: titles)\n    segmentedControl.translatesAutoresizingMaskIntoConstraints = false\n    segmentedControl.addTarget(self, action: actionHandler, for: .valueChanged)\n    return segmentedControl\n}\n\n// Example action handler:\n// @objc func segmentedControlValueChanged(_ sender: UISegmentedControl) {\n// // Handle value changed event\n// }"
    },
    {
      "instruction": "Write a Swift function to create and configure a UIStackView with an array of UIViews and specified axis, alignment, and spacing",
      "input": "",
      "output": "import UIKit\n\nfunc createStackView(views: [UIView], axis: NSLayoutConstraint.Axis, alignment: UIStackView.Alignment, spacing: CGFloat) -> UIStackView {\n    let stackView = UIStackView(arrangedSubviews: views)\n    stackView.axis = axis\n    stackView.alignment = alignment\n    stackView.spacing = spacing\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    return stackView\n}"
    },
    {
      "instruction": "Write a Swift function to create and configure a UITableView with custom cell registration and UITableViewDataSource conformance",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    static let reuseIdentifier = \"CustomTableViewCell\"\n    // Configure the cell's UI elements here\n}\n\nfunc createTableView() -> UITableView {\n    let tableView = UITableView()\n    tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: CustomTableViewCell.reuseIdentifier)\n    tableView.translatesAutoresizingMaskIntoConstraints = false\n    return tableView\n}\n\n// Make sure to conform to UITableViewDataSource\n// extension ViewController: UITableViewDataSource {\n// func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n// return data.count\n// }\n//\n// func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n// let cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.reuseIdentifier, for: indexPath) as! CustomTableViewCell\n// // Configure the cell with data\n// return cell\n// }\n// }"
    },
    {
      "instruction": "Write a Swift function to create and configure a UIAlertController with a specified title, message, and UIAlertAction",
      "input": "",
      "output": "import UIKit\n\nfunc createAlertController(title: String, message: String, actionTitle: String, actionHandler: @escaping (UIAlertAction) -> Void) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: actionTitle, style: .default, handler: actionHandler)\n    alertController.addAction(action)\n    return alertController\n}\n\n// Example usage:\n// let alertController = createAlertController(title: \"Alert\", message: \"This is an alert message\", actionTitle: \"OK\") { _ in\n// // Handle action here\n// }\n// self.present(alertController, animated: true, completion: nil)"
    },
    {
      "instruction": "Write a Swift function to create and configure a UISlider with a specified minimum and maximum value, and an action handler",
      "input": "",
      "output": "import UIKit\n\nfunc createSlider(minValue: Float, maxValue: Float, actionHandler: Selector) -> UISlider {\n    let slider = UISlider()\n    slider.minimumValue = minValue\n    slider.maximumValue = maxValue\n    slider.translatesAutoresizingMaskIntoConstraints = false\n    slider.addTarget(self, action: actionHandler, for: .valueChanged)\n    return slider\n}\n\n// Example action handler:\n// @objc func sliderValueChanged(_ sender: UISlider) {\n// // Handle value changed event\n// }"
    },
    {
      "instruction": "Write a Swift function that downloads an image from a URL and sets it as the background of a UIButton.",
      "input": "",
      "output": "import UIKit\n\nclass MyViewController: UIViewController {\n    \n    private lazy var button: UIButton = {\n        let button = UIButton()\n        button.translatesAutoresizingMaskIntoConstraints = false\n        return button\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(button)\n        \n        NSLayoutConstraint.activate([\n            button.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            button.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n        ])\n        \n        guard let imageUrl = URL(string: \"https://example.com/image.png\") else { return }\n        downloadImage(from: imageUrl) { image in\n            DispatchQueue.main.async {\n                self.button.setBackgroundImage(image, for: .normal)\n            }\n        }\n    }\n    \n    func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n        let task = URLSession.shared.dataTask(with: url) { data, _, _ in\n            guard let data = data, let image = UIImage(data: data) else {\n                completion(nil)\n                return\n            }\n            completion(image)\n        }\n        task.resume()\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that presents a UIAlertController with a title, message, and a single UIAlertAction.",
      "input": "",
      "output": "import UIKit\n\nclass MyViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        presentAlert(title: \"Hello\", message: \"This is an alert.\")\n    }\n    \n    func presentAlert(title: String, message: String) {\n        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n        let okAction = UIAlertAction(title: \"OK\", style: .default, handler: nil)\n        alertController.addAction(okAction)\n        present(alertController, animated: true, completion: nil)\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UICollectionView with a custom UICollectionViewCell.",
      "input": "",
      "output": "import UIKit\n\nclass MyCustomCell: UICollectionViewCell {\n    static let reuseIdentifier = \"MyCustomCell\"\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.backgroundColor = .red\n    }\n    \n    required init?(coder: NSCoder) {"
    },
    {
      "instruction": "Write a Swift function that creates a UICollectionView with a custom layout and registers a UICollectionViewCell subclass",
      "input": "",
      "output": "func createCollectionView(layout: UICollectionViewLayout, cellClass: UICollectionViewCell.Type, reuseIdentifier: String) -> UICollectionView {\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    collectionView.register(cellClass, forCellWithReuseIdentifier: reuseIdentifier)\n    return collectionView\n}"
    },
    {
      "instruction": "Write a Swift function that creates a URLSessionDataTask to fetch data from a given URL and handle the result using a completion handler",
      "input": "",
      "output": "func fetchData(from url: URL, completionHandler: @escaping (Result<Data, Error>) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completionHandler(.failure(error))\n        } else if let data = data {\n            completionHandler(.success(data))\n        } else {\n            completionHandler(.failure(NSError(domain: \"NoDataError\", code: 1, userInfo: nil)))\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": "Write a Swift function that creates a custom UIButton with rounded corners, a background color, and a title",
      "input": "",
      "output": "func createRoundedButton(title: String, backgroundColor: UIColor, cornerRadius: CGFloat) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.backgroundColor = backgroundColor\n    button.layer.cornerRadius = cornerRadius\n    button.clipsToBounds = true\n    return button\n}"
    },
    {
      "instruction": "Write a Swift function that asynchronously downloads an image from a given URL and sets it asthe UIImage of a UIImageView",
      "input": "",
      "output": "func setImageAsync(for imageView: UIImageView, from url: URL) {\n    DispatchQueue.global().async {\n        if let data = try? Data(contentsOf: url), let image = UIImage(data: data) {\n            DispatchQueue.main.async {\n                imageView.image = image\n            }\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that creates a UIAlertController with a given title, message, and an array of UIAlertAction configurations",
      "input": "",
      "output": "func createAlertController(title: String, message: String, actions: [(title: String, style: UIAlertAction.Style, handler: ((UIAlertAction) -> Void)?)]) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    for action in actions {\n        let alertAction = UIAlertAction(title: action.title, style: action.style, handler: action.handler)\n        alertController.addAction(alertAction)\n    }\n    return alertController\n}"
    },
    {
      "instruction": "Write a Swift function that takes a UITableView and dequeues a UITableViewCell with a given identifier, configures it, and returns it",
      "input": "",
      "output": "func dequeueReusableCell(for tableView: UITableView, withIdentifier identifier: String, configure: (UITableViewCell) -> Void) -> UITableViewCell {\n    let cell = tableView.dequeueReusableCell(withIdentifier: identifier) ?? UITableViewCell(style: .default, reuseIdentifier: identifier)\n    configure(cell)\n    return cell\n}"
    },
    {
      "instruction": "Write a Swift function that creates a UITapGestureRecognizer with a given target, selector, and number of taps required",
      "input": "",
      "output": "func createTapGestureRecognizer(target: Any?, action: Selector, numberOfTapsRequired: Int) -> UITapGestureRecognizer {\n    let tapGestureRecognizer = UITapGestureRecognizer(target: target, action: action)\n    tapGestureRecognizer.numberOfTapsRequired = numberOfTapsRequired\n    return tapGestureRecognizer\n}"
    },
    {
      "instruction": "Write a Swift function that takes a UIView and applies a shadow with a given color, opacity, offset, and radius",
      "input": "",
      "output": "func applyShadow(to view: UIView, color: UIColor, opacity: Float, offset: CGSize, radius: CGFloat) {\n    view.layer.shadowColor = color.cgColor\n    view.layer.shadowOpacity = opacity\n    view.layer.shadowOffset = offset\n    view.layer.shadowRadius = radius\n}"
    },
    {
      "instruction": "Write a Swift function that asynchronously downloads an image from a URL and sets it as the image of a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, to imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil, let image = UIImage(data: data) else {\n            print(\"Error downloading image: \\(error?.localizedDescription ?? \"Unknown error\")\")\n            return\n        }\n        \n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nImplement a Swift function that creates a custom UITableViewCell with a UILabel and a UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    let customImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        addSubview(titleLabel)\n        addSubview(customImageView)\n        \n        NSLayoutConstraint.activate([\n            titleLabel.topAnchor.constraint(equalTo: topAnchor),\n            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 16),\n            customImageView.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 8),\n            customImageView.leadingAnchor.constraint(equalTo: titleLabel.trailingAnchor, constant: 8),\n            customImageView.bottomAnchor.constraint(equalTo: bottomAnchor),\n            customImageView.widthAnchor.constraint(equalToConstant: 50),\n            customImageView.heightAnchor.constraint(equalToConstant: 50)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that handles user location updates using CoreLocation and displays the updated location coordinates in a UILabel",
      "input": "",
      "output": "import UIKit\nimport CoreLocation\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n    let locationLabel = UILabel()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        locationManager.requestWhenInUseAuthorization()\n        \n        if CLLocationManager.locationServicesEnabled() {\n            locationManager.delegate = self\n            locationManager.desiredAccuracy = kCLLocationAccuracyBest\n            locationManager.startUpdatingLocation()\n        }\n        \n        view.addSubview(locationLabel)\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            locationLabel.text = \"Latitude: \\(location.coordinate.latitude), Longitude: \\(location.coordinate.longitude)\"\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error updating location: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift function that adds a gesture recognizer to a UIView, triggering an action when the view is tapped",
      "input": "",
      "output": "import UIKit\n\nclass TapGestureViewController: UIViewController {\n    let customView = UIView()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        customView.frame = CGRect(x: 0, y: 0, width: 150, height: 150)\n        customView.center = view.center\n        customView.backgroundColor = .red\n        view.addSubview(customView)\n        \n        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(handleTap))\n        customView.addGestureRecognizer(tapGestureRecognizer)\n    }\n    \n    @objc func handleTap() {\n        print(\"View tapped\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UICollectionView with a custom UICollectionViewCell that displays an image and a label",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let identifier = \"CustomCollectionViewCell\"\n    \n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(imageView)\n        contentView.addSubview(titleLabel)\n        \n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n            \n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n\nclass CustomCollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    private var collectionView: UICollectionView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let layout = UICollectionViewFlowLayout()\n        layout.itemSize = CGSize(width: 120, height: 150)\n        \n        collectionView = UICollectionView(frame: view.bounds, collectionViewLayout: layout)\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.identifier)\n        collectionView.backgroundColor = .white\n        \n        view.addSubview(collectionView)\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 20\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.identifier, for: indexPath) as! CustomCollectionViewCell\n        cell.imageView.image = UIImage(systemName: \"photo\")\n        cell.titleLabel.text = \"Item \\(indexPath.row + 1)\"\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that configures a UISlider with a custom minimum and maximum value, and a target action when the value changes",
      "input": "",
      "output": "import UIKit\n\nclass SliderViewController: UIViewController {\n    let customSlider = UISlider()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        customSlider.frame = CGRect(x: 0, y: 0, width: 300, height: 40)\n        customSlider.center = view.center\n        customSlider.minimumValue = 0\n        customSlider.maximumValue = 100\n        customSlider.addTarget(self, action: #selector(sliderValueChanged), for: .valueChanged)\n        view.addSubview(customSlider)\n    }\n    \n    @objc func sliderValueChanged() {\n        print(\"Slider value changed to: \\(customSlider.value)\")\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift function that uses NotificationCenter to post and observe a custom notification, updating a UILabel with the received data",
      "input": "",
      "output": "import UIKit\n\nclass NotificationCenterViewController: UIViewController {\n    let notificationName = Notification.Name(rawValue: \"customNotification\")\n    let dataLabel = UILabel()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        NotificationCenter.default.addObserver(self, selector: #selector(handleNotification(_:)), name: notificationName, object: nil)\n        \n        dataLabel.frame = CGRect(x: 0, y: 0, width: 200, height: 40)\n        dataLabel.center = view.center\n        dataLabel.textAlignment = .center\n        view.addSubview(dataLabel"
    },
    {
      "instruction": "Write a Swift function to download an image from a URL and set it as the image of a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass ImageDownloader {\n    static func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n        let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n            guard let data = data, error == nil else {\n                completion(nil)\n                return\n            }\n            \n            DispatchQueue.main.async {\n                completion(UIImage(data: data))\n            }\n        }\n        \n        task.resume()\n    }\n}\n\nfunc setImageFromUrl(_ imageView: UIImageView, url: URL) {\n    ImageDownloader.downloadImage(from: url) { (image) in\n        imageView.image = image\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIAlertController with a title, message, and an action button.",
      "input": "",
      "output": "func presentAlertController(title: String, message: String, actionTitle: String, viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: actionTitle, style: .default, handler: nil)\n    alertController.addAction(action)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to display a local notification with a title, body, and a time interval.",
      "input": "",
      "output": "import UserNotifications\n\nfunc scheduleLocalNotification(title: String, body: String, timeInterval: TimeInterval) {\n    let content = UNMutableNotificationContent()\n    content.title = title\n    content.body = body\n    \n    let trigger = UNTimeIntervalNotificationTrigger(timeInterval: timeInterval, repeats: false)\n    let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)\n    \n    UNUserNotificationCenter.current().add(request) { (error) in\n        if let error = error {\n            print(\"Error scheduling notification: \\(error.localizedDescription)\")\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a programmatic UIButton with a target and action.",
      "input": "",
      "output": "func createButton(title: String, target: Any, action: Selector) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.addTarget(target, action: action, for: .touchUpInside)\n    return button\n}"
    },
    {
      "instruction": " \nWrite a Swift function to play a sound file from the application's main bundle.",
      "input": "",
      "output": "import AVFoundation\n\nfunc playSound(fileName: String, fileType: String) {\n    guard let url = Bundle.main.url(forResource: fileName, withExtension: fileType) else {\n        print(\"Unable to find sound file\")\n        return\n    }\n\n    do {\n        let audioPlayer = try AVAudioPlayer(contentsOf: url)\n        audioPlayer.play()\n    } catch let error {\n        print(\"Error playing sound: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to animate a UIView's position change using CGAffineTransform.",
      "input": "",
      "output": "func animateViewPositionChange(_ view: UIView, translationX: CGFloat, translationY: CGFloat, duration: TimeInterval) {\n    UIView.animate(withDuration: duration) {\n        view.transform = CGAffineTransform(translationX: translationX, translationY: translationY)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to save an object to UserDefaults and read it back.",
      "input": "",
      "output": "import Foundation\n\nfunc saveObjectToUserDefaults<T: Codable>(_ object: T, forKey key: String) {\n    let encoder = JSONEncoder()\n    if let encodedObject = try? encoder.encode(object) {\n        UserDefaults.standard.set(encodedObject, forKey: key)\n    }\n}\n\nfunc getObjectFromUserDefaults<T: Codable>(forKey key: String) -> T? {\n    guard let data = UserDefaults.standard.data(forKey: key) else {\n        return nil\n    }\n    \n    let decoder = JSONDecoder()\n    return try? decoder.decode(T.self, from: data)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to register and dequeue a UICollectionViewCell with an identifier in cellForItemAt indexPath function.",
      "input": "",
      "output": "func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"MyCollectionViewCell\", for: indexPath) as! MyCollectionViewCell\n    // Configure cell\n    return cell\n}"
    },
    {
      "instruction": "Write a Swift function to fetch data from a REST API and decode it into a custom data model.",
      "input": "",
      "output": "import Foundation\n\nstruct MyModel: Codable {\n    let id: Int\n    let title: String\n    let description: String\n}\n\nclass APIManager {\n    let baseURL = \"https://api.example.com/data\"\n\n    func fetchData(completion: @escaping ([MyModel]?, Error?) -> Void) {\n        guard let url = URL(string: baseURL) else {\n            completion(nil, NSError(domain: \"\", code: -1, userInfo: nil))\n            return\n        }\n\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let error = error {\n                completion(nil, error)\n                return\n            }\n\n            guard let data = data else {\n                completion(nil, NSError(domain: \"\", code: -1, userInfo: nil))\n                return\n            }\n\n            do {\n                let decoder = JSONDecoder()\n                let models = try decoder.decode([MyModel].self, from: data)\n                completion(models, nil)\n            } catch {\n                completion(nil, error)\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to download an image from a URL and display it in a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass ImageDownloader {\n    static let shared = ImageDownloader()\n    private init() {}\n\n    func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            guard let data = data, error == nil else {\n                completion(nil)\n                return\n            }\n            DispatchQueue.main.async {\n                completion(UIImage(data: data))\n            }\n        }.resume()\n    }\n}\n\n// Usage:\nlet imageUrl = URL(string: \"https://example.com/image.jpg\")!\nlet imageView = UIImageView()\nImageDownloader.shared.downloadImage(from: imageUrl) { image in\n    imageView.image = image\n}"
    },
    {
      "instruction": " \nWrite a Swift function to store and retrieve user preferences using UserDefaults.",
      "input": "",
      "output": "import Foundation\n\nclass UserPreferences {\n    private let userDefaults = UserDefaults.standard\n\n    func setUserName(_ name: String) {\n        userDefaults.set(name, forKey: \"userName\")\n    }\n\n    func getUserName() -> String? {\n        return userDefaults.string(forKey: \"userName\")\n    }\n\n    func setDarkModeEnabled(_ isEnabled: Bool) {\n        userDefaults.set(isEnabled, forKey: \"darkModeEnabled\")\n    }\n\n    func isDarkModeEnabled() -> Bool {\n        return userDefaults.bool(forKey: \"darkModeEnabled\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UICollectionViewCell with a UIImageView and a UILabel.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView = {\n        let iv = UIImageView()\n        iv.contentMode = .scaleAspectFill\n        iv.clipsToBounds = true\n        return iv\n    }()\n\n    let label: UILabel = {\n        let label = UILabel()\n        label.textAlignment = .center\n        return label\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n\n        addSubview(imageView)\n        addSubview(label)\n\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        label.translatesAutoresizingMaskIntoConstraints = false\n\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.heightAnchor.constraint(equalTo: heightAnchor, multiplier: 0.7),\n\n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            label.leadingAnchor.constraint(equalTo: leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: trailingAnchor),\n            label.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIAlertController with a text field and two actions: \"Save\" and \"Cancel\".",
      "input": "",
      "output": "import UIKit\n\nfunc presentAlertControllerWithTextField() {\n    let alertController = UIAlertController(title: \"Enter Text\", message: nil, preferredStyle: .alert)\n\n    alertController.addTextField { textField in\n        textField.placeholder = \"Enter some text\"\n    }\n\n    let saveAction = UIAlertAction(title: \"Save\", style: .default) { _ in\n        if let textField = alertController.textFields?.first, let text = textField.text {\n            print(\"Text entered: \\(text)\")\n        }\n    }\n\n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n\n    alertController.addAction(saveAction)\n    alertController.addAction(cancelAction)\n\n    self.present(alertController, animated: true, completion: nil)\n}\n\n// Usage:\n// Call this function inside a view controller to present the alert controller\npresentAlertControllerWithTextField()"
    },
    {
      "instruction": " \nWrite a Swift function to handle the navigation between two view controllers using a UINavigationController.",
      "input": "",
      "output": "import UIKit\n\nclass FirstViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n\n        let button = UIButton(type: .system)\n        button.setTitle(\"Go to Second View\", for: .normal)\n        button.addTarget(self, action: #selector(goToSecondView), for: .touchUpInside)\n\n        view.addSubview(button)\n        button.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            button.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            button.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n\n    @objc func goToSecondView() {\n        let secondViewController = SecondViewController()\n        navigationController?.pushViewController(secondViewController, animated: true)\n    }\n}\n\nclass SecondViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .green\n        title = \"Second View\"\n    }\n}\n\n// Usage:\n// In the AppDelegate.swift or SceneDelegate.swift, set the root view controller as follows:\nlet viewController = FirstViewController()\nlet navigationController = UINavigationController(rootViewController: viewController)\nwindow?.rootViewController = navigationController"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIButton and handle its touchUpInside event.",
      "input": "",
      "output": "import UIKit\n\nclass CustomButton: UIButton {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setTitle(\"Custom Button\", for: .normal)\n        setTitleColor(.white, for: .normal)\n        backgroundColor = .blue\n        addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    @objc private func buttonTapped() {\n        print(\"Custom button tapped\")\n    }\n}\n\n// Usage:\n// Add the custom button to a view controller's view\nlet customButton = CustomButton()\nview.addSubview(customButton)\ncustomButton.translatesAutoresizingMaskIntoConstraints = false\nNSLayoutConstraint.activate([\n    customButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n    customButton.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n])"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIView with a gradient background.",
      "input": "",
      "output": "import UIKit\n\nclass GradientView: UIView {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        addGradientBackground()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        addGradientBackground()\n    }\n\n    private func addGradientBackground() {\n        let gradientLayer = CAGradientLayer()\n        gradientLayer.frame = bounds\n        gradientLayer.colors = [UIColor.red.cgColor, UIColor.blue.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 1)\n        layer.insertSublayer(gradientLayer, at: 0)\n    }\n}\n\n// Usage:\n// Add the custom gradient view to a view controller's view\nlet gradientView = GradientView()\nview.addSubview(gradientView)\ngradientView.translatesAutoresizingMaskIntoConstraints = false\nNSLayoutConstraint.activate([\n    gradientView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n    gradientView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n    gradientView.topAnchor.constraint(equalTo: view.topAnchor),\n    gradientView.bottomAnchor.constraint(equalTo: view.bottomAnchor)\n])"
    },
    {
      "instruction": "Write a Swift function that asynchronously downloads an image and sets it to a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass ImageViewController: UIViewController {\n    \n    private lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFit\n        return imageView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.addSubview(imageView)\n        setupConstraints()\n        downloadImage(urlString: \"https://www.example.com/image.png\")\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: view.topAnchor),\n            imageView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            imageView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    func downloadImage(urlString: String) {\n        guard let url = URL(string: urlString) else { return }\n        \n        URLSession.shared.dataTask(with: url) { [weak self] data, _, error in\n            guard let data = data, error == nil else { return }\n            \n            DispatchQueue.main.async {\n                self?.imageView.image = UIImage(data: data)\n            }\n        }.resume()\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift UITableView with custom UITableViewCell that displays a list of names and their corresponding images.",
      "input": "",
      "output": "import UIKit\n\nstruct Person {\n    let name: String\n    let imageURL: URL\n}\n\nclass CustomTableViewCell: UITableViewCell {\n    static let identifier = \"CustomTableViewCell\"\n    \n    private lazy var nameLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    private lazy var personImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFit\n        return imageView\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        contentView.addSubview(nameLabel)\n        contentView.addSubview(personImageView)\n        setupConstraints()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            personImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 8),\n            personImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            personImageView.widthAnchor.constraint(equalToConstant: 50),\n            personImageView.heightAnchor.constraint(equalToConstant: 50),\n            \n            nameLabel.leadingAnchor.constraint(equalTo: personImageView.trailingAnchor, constant: 8),\n            nameLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -8),\n            nameLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n        ])\n    }\n    \n    func configure(with person: Person) {\n        nameLabel.text = person.name\n        URLSession.shared.dataTask(with: person.imageURL) { [weak self] data, _, _ in\n            guard let data = data else { return }\n            DispatchQueue.main.async {\n                self?.personImageView.image = UIImage(data: data)\n            }\n        }.resume()\n    }\n    \n}\n\nclass NamesViewController: UITableViewController {\n    private let people: [Person] = [\n        // Populate with Person objects\n    ]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: CustomTableViewCell.identifier)\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return people.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.identifier, for: indexPath) as! CustomTableViewCell\n        cell.configure(with: people[indexPath.row])\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that uses CoreLocation to get the current user's location and display it as an annotation on an MKMapView.",
      "input": "",
      "output": "import UIKit\nimport MapKit\nimport CoreLocation\n\nclass MapViewController: UIViewController, CLLocationManagerDelegate {\n    private lazy var mapView: MKMapView = {\n        let mapView = MKMapView()\n        mapView.translatesAutoresizingMaskIntoConstraints = false\n        return mapView\n    }()\n    \n    private let locationManager = CLLocationManager()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.addSubview(mapView)\n        setupConstraints()\n        setupLocationManager()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            mapView.topAnchor.constraint(equalTo: view.topAnchor),\n            mapView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            mapView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            mapView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    private func setupLocationManager() {\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        guard let location = locations.last else { return }\n       let center = CLLocationCoordinate2D(latitude: location.coordinate.latitude, longitude: location.coordinate.longitude)\n        let region = MKCoordinateRegion(center: center, latitudinalMeters: 1000, longitudinalMeters: 1000)\n        mapView.setRegion(region, animated: true)\n        \n        let annotation = MKPointAnnotation()\n        annotation.coordinate = center\n        annotation.title = \"Current Location\"\n        mapView.addAnnotation(annotation)\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that retrieves data from a REST API, decodes it using JSONDecoder, and populates a UITableView with the results.",
      "input": "",
      "output": "import UIKit\n\nstruct APIResponse: Codable {\n    let items: [Item]\n}\n\nstruct Item: Codable {\n    let title: String\n}\n\nclass APIItemsViewController: UITableViewController {\n    \n    private var items: [Item] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"cell\")\n        fetchData()\n    }\n    \n    private func fetchData() {\n        guard let url = URL(string: \"https://api.example.com/items\") else { return }\n        URLSession.shared.dataTask(with: url) { [weak self] data, _, error in\n            guard let data = data, error == nil else { return }\n            \n            do {\n                let response = try JSONDecoder().decode(APIResponse.self, from: data)\n                DispatchQueue.main.async {\n                    self?.items = response.items\n                    self?.tableView.reloadData()\n                }\n            } catch {\n                print(\"Error decoding JSON: \\(error)\")\n            }\n        }.resume()\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        cell.textLabel?.text = items[indexPath.row].title\n        return cell\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that plays an audio file using AVFoundation.",
      "input": "",
      "output": "import UIKit\nimport AVFoundation\n\nclass AudioPlayerViewController: UIViewController {\n    \n    private var player: AVAudioPlayer?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupAudioPlayer()\n    }\n    \n    private func setupAudioPlayer() {\n        guard let url = Bundle.main.url(forResource: \"example\", withExtension: \"mp3\") else { return }\n        \n        do {\n            player = try AVAudioPlayer(contentsOf: url)\n            player?.prepareToPlay()\n            player?.play()\n        } catch {\n            print(\"Error initializing audio player: \\(error)\")\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that implements a basic authentication flow using Firebase Authentication.",
      "input": "",
      "output": "import UIKit\nimport FirebaseAuth\n\nclass AuthenticationViewController: UIViewController {\n    \n    private lazy var emailTextField: UITextField = {\n        let textField = UITextField()\n        textField.translatesAutoresizingMaskIntoConstraints = false\n        textField.placeholder = \"Email\"\n        return textField\n    }()\n    \n    private lazy var passwordTextField: UITextField = {\n        let textField = UITextField()\n        textField.translatesAutoresizingMaskIntoConstraints = false\n        textField.placeholder = \"Password\"\n        textField.isSecureTextEntry = true\n        return textField\n    }()\n    \n    private lazy var signInButton: UIButton = {\n        let button = UIButton(type: .system)\n        button.translatesAutoresizingMaskIntoConstraints = false\n        button.setTitle(\"Sign In\", for: .normal)\n        button.addTarget(self, action: #selector(signIn), for: .touchUpInside)\n        return button\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(emailTextField)\n        view.addSubview(passwordTextField)\n        view.addSubview(signInButton)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            emailTextField.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            emailTextField.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),\n            emailTextField.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),\n            emailTextField.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),\n            \n            passwordTextField.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            passwordTextField.topAnchor.constraint(equalTo: emailTextField.bottomAnchor, constant: 10),\n            passwordTextField.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),\n            passwordTextField.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),\n            \n            signInButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            signInButton.topAnchor.constraint(equalTo: passwordTextField.bottomAnchor, constant: 20),\n        ])\n    }\n    \n    @objc private func signIn() {\n        guard let email = emailTextField.text, let password = passwordTextField.text else { return }\n        \n        Auth.auth().signIn(withEmail: email, password: password) { [weak self] result, error in\n            if let error = error {\n                print(\"Error signing in: \\("
    },
    {
      "instruction": "Create a custom table view cell with a profile image, name, and subtitle labels, and a custom table view controller that uses the custom cell",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var profileImageView: UIImageView!\n    @IBOutlet weak var nameLabel: UILabel!\n    @IBOutlet weak var subtitleLabel: UILabel!\n    \n    func configure(with image: UIImage, name: String, subtitle: String) {\n        profileImageView.image = image\n        nameLabel.text = name\n        subtitleLabel.text = subtitle\n    }\n}\n\nclass CustomTableViewController: UITableViewController {\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomTableViewCell\", for: indexPath) as! CustomTableViewCell\n        let item = items[indexPath.row]\n        cell.configure(with: item.image, name: item.name, subtitle: item.subtitle)\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIView subclass that presents a circular progress bar with a percentage label",
      "input": "",
      "output": "import UIKit\n\nclass CircularProgressView: UIView {\n    private var progressLayer = CAShapeLayer()\n    private var backgroundLayer = CAShapeLayer()\n    private let percentageLabel = UILabel()\n    \n    var progress: CGFloat = 0 {\n        didSet {\n            updateProgress()\n        }\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupLayers()\n        setupPercentageLabel()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupLayers()\n        setupPercentageLabel()\n    }\n    \n    private func setupLayers() {\n        backgroundLayer.strokeColor = UIColor.lightGray.cgColor\n        backgroundLayer.lineWidth = 10\n        backgroundLayer.fillColor = UIColor.clear.cgColor\n        layer.addSublayer(backgroundLayer)\n        \n        progressLayer.strokeColor = UIColor.red.cgColor\n        progressLayer.lineWidth = 10\n        progressLayer.fillColor = UIColor.clear.cgColor\n        progressLayer.lineCap = .round\n        layer.addSublayer(progressLayer)\n    }\n    \n    private func setupPercentageLabel() {\n        percentageLabel.textAlignment = .center\n        percentageLabel.font = UIFont.systemFont(ofSize: 20)\n        addSubview(percentageLabel)\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        backgroundLayer.frame = bounds\n        progressLayer.frame = bounds\n        percentageLabel.frame = bounds\n        \n        let center = CGPoint(x: bounds.midX, y: bounds.midY)\n        let radius = min(bounds.width, bounds.height) / 2 - progressLayer.lineWidth / 2\n        let startAngle = -CGFloat.pi / 2\n        let endAngle = startAngle + 2 * CGFloat.pi\n        \n        let backgroundPath = UIBezierPath(arcCenter: center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)\n        backgroundLayer.path = backgroundPath.cgPath\n        \n        let progressPath = UIBezierPath(arcCenter: center, radius: radius, startAngle: startAngle, endAngle: startAngle + progress * 2 * CGFloat.pi, clockwise: true)\n        progressLayer.path = progressPath.cgPath\n    }\n    \n    private func updateProgress() {\n        let progressPath = UIBezierPath(arcCenter: CGPoint(x: bounds.midX, y: bounds.midY), radius: min(bounds.width, bounds.height) / 2 - progressLayer.lineWidth / 2, startAngle: -CGFloat.pi / 2, endAngle: -CGFloat.pi / 2 + progress * 2 * CGFloat.pi, clockwise: true)\n        progressLayer.path = progressPath.cgPath\n        percentageLabel.text = String(format: \"%.0f%%\", progress * 100)\n    }\n}"
    },
    {
      "instruction": " \nWrite a function that fetches and parses JSON data from a URL and displays it in a UITableView",
      "input": "",
      "output": "import UIKit\n\nstruct Item: Decodable {\n    let title: String\n    let description: String\n}\n\nclass ItemListTableViewController: UITableViewController {\n    private var items: [Item] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        fetchData()\n    }\n    \n    private func fetchData() {\n        let urlString = \"https://example.com/items.json\"\n        guard let url = URL(string: urlString) else { return }\n        \n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let error = error {\n                print(\"Error fetching data: \\(error.localizedDescription)\")\n                return\n            }\n            \n            guard let data = data else { return }\n            \n            do {\n                let items = try JSONDecoder().decode([Item].self, from: data)\n                DispatchQueue.main.async {\n                    self.items = items\n                    self.tableView.reloadData()\n                }\n            } catch {\n                print(\"Error decoding JSON: \\(error.localizedDescription)\")\n            }\n        }.resume()\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"ItemCell\", for: indexPath)\n        let item = items[indexPath.row]\n        cell.textLabel?.text = item.title\n        cell.detailTextLabel?.text = item.description\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIPickerView that displays a list of countries, allowing the user to select their country",
      "input": "",
      "output": "import UIKit\n\nclass CountryPickerView: UIPickerView, UIPickerViewDataSource, UIPickerViewDelegate {\n    private let countries = [\"United States\", \"United Kingdom\", \"Canada\", \"France\", \"Germany\", \"Japan\", \"Australia\", \"Brazil\", \"China\", \"India\"]\n    \n    var selectedCountry: String {\n        return countries[selectedRow(inComponent: 0)]\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupPickerView()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupPickerView()\n    }\n    \n    private func setupPickerView() {\n        self.dataSource = self\n        self.delegate = self\n    }\n    \n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return countries.count\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return countries[row]\n    }\n}"
    },
    {
      "instruction": " \nWrite a function that saves an image to the user's photo library",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToPhotoLibrary(_ image: UIImage) {\n    PHPhotoLibrary.requestAuthorization { status in\n        if status == .authorized {\n            PHPhotoLibrary.shared().performChanges({\n                PHAssetChangeRequest.creationRequestForAsset(from: image)\n            }, completionHandler: { success, error in\n                if success {\n                    print(\"Image saved to photo library\")\n                } else {\n                    print(\"Error saving image: \\(String(describing: error?.localizedDescription))\")\n                }\n            })\n        } else {\n            print(\"Photo library access not granted\")\n        }\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UISlider that changes its thumb image when the value changes",
      "input": "",
      "output": "import UIKit\n\nclass CustomSlider: UISlider {\n    private var thumbImages: [UIImage] = [] // Add your thumb images to this array\n    \n    override func awakeFromNib() {\n        super.awakeFromNib()\n        addTarget(self, action: #selector(valueChanged), for: .valueChanged)\n        updateThumbImage()\n    }\n    \n    @objc private func valueChanged() {\n        updateThumbImage()\n    }\n    \n    private func updateThumbImage() {\n        let index = Int(value * Float(thumbImages.count - 1))\n        setThumbImage(thumbImages[index], for: .normal)\n    }\n}"
    },
    {
      "instruction": " \nImplement a UIViewController that plays a video from a remote URL using AVPlayer",
      "input": "",
      "output": "import UIKit\nimport AVFoundation\n\nclass VideoPlayerViewController: UIViewController {\n    private var player: AVPlayer?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupPlayer()\n    }\n    \n    private func setupPlayer() {\n        guard let url = URL(string: \"https://example.com/video.mp4\") else { return }\n        let playerItem = AVPlayerItem(url: url)\n        player = AVPlayer(playerItem: playerItem)\n        \n        let playerLayer = AVPlayerLayer(player: player)\n        playerLayer.frame = view.bounds\n        playerLayer.videoGravity = .resizeAspect\n        view.layer.addSublayer(playerLayer)\n        \n        player?.play()\n    }\n    \n    override func viewWillDisappear(_ animated: Bool) {\n        super.viewWillDisappear(animated)\n        player?.pause()\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UISearchBar with a clear button that resets the search query",
      "input": "",
      "output": "import UIKit\n\nclass CustomSearchBar: UISearchBar {\n    private let clearButton: UIButton = {\n        let button = UIButton(type: .system)\n        button.setTitle(\"Clear\", for: .normal)\n        button.addTarget(self, action: #selector(clearButtonTapped), for: .touchUpInside)\n        return button\n    }()\n    \n   "
    },
    {
      "instruction": "Write a Swift function to download an image from a URL and display it in a UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    @IBOutlet weak var imageView: UIImageView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    func downloadImage(from url: String) {\n        guard let imageUrl = URL(string: url) else { return }\n\n        DispatchQueue.global(qos: .background).async { [weak self] in\n            guard let imageData = try? Data(contentsOf: imageUrl) else { return }\n            \n            DispatchQueue.main.async {\n                self?.imageView.image = UIImage(data: imageData)\n            }\n        }\n    }\n}\n\n// Usage:\n// let imageUrlString = \"https://example.com/image.jpg\"\n// downloadImage(from: imageUrlString)"
    },
    {
      "instruction": " \nWrite a Swift function to implement pull-to-refresh functionality in a UITableView",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    @IBOutlet weak var tableView: UITableView!\n\n    private let refreshControl = UIRefreshControl()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        tableView.delegate = self\n        setupRefreshControl()\n    }\n\n    private func setupRefreshControl() {\n        tableView.refreshControl = refreshControl\n        refreshControl.addTarget(self, action: #selector(refreshData(_:)), for: .valueChanged)\n    }\n\n    @objc private func refreshData(_ sender: Any) {\n        // Call your data fetching method here\n        // After fetching data, end refreshing\n        refreshControl.endRefreshing()\n    }\n\n    // UITableViewDataSource and UITableViewDelegate methods\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UICollectionViewCell with a UIImageView and UILabel",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n\n    let label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupImageView()\n        setupLabel()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupImageView() {\n        addSubview(imageView)\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.heightAnchor.constraint(equalTo: heightAnchor, multiplier: 0.6)\n        ])\n    }\n\n    private func setupLabel() {\n        addSubview(label)\n        NSLayoutConstraint.activate([\n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            label.leadingAnchor.constraint(equalTo: leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: trailingAnchor),\n            label.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to handle push notifications and present an alert when a notification is received",
      "input": "",
      "output": "import UIKit\nimport UserNotifications\n\nclass NotificationHandler: NSObject, UNUserNotificationCenterDelegate {\n\n    func userNotificationCenter(_ center: UNUserNotificationCenter,\n                                willPresent notification: UNNotification,\n                                withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {\n        let alert = UIAlertController(title: \"Notification Received\", message: notification.request.content.body, preferredStyle: .alert)\n        alert.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n        UIApplication.shared.keyWindow?.rootViewController?.present(alert, animated: true, completion: nil)\n        completionHandler([.banner, .sound])\n    }\n}\n\n// In AppDelegate.swift\n// func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n//     let center = UNUserNotificationCenter.current()\n//     center.delegate = NotificationHandler()\n//     center.requestAuthorization(options: [.alert, .sound]) { granted, error in\n//         // Handle authorization\n//     }\n//     return true\n// }"
    },
    {
      "instruction": " \nWrite a Swift function to save data to UserDefaults and retrieve it later",
      "input": "",
      "output": "class UserDefaultsHelper {\n    static let shared = UserDefaultsHelper()\n    private let userDefaults = UserDefaults.standard\n    private let key = \"savedData\"\n\n    func saveData(_ data: String) {\n        userDefaults.set(data, forKey: key)\n    }\n\n    func retrieveData() -> String? {\n        return userDefaults.string(forKey: key)\n    }\n}\n\n// Usage:\n// UserDefaultsHelper.shared.saveData(\"Example data\")\n// let retrievedData = UserDefaultsHelper.shared.retrieveData()"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIStackView with multiple buttons",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    private let buttonTitles = [\"Button 1\", \"Button 2\", \"Button3\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupStackView()\n    }\n\n    private func setupStackView() {\n        let stackView = UIStackView()\n        stackView.axis = .vertical\n        stackView.distribution = .fillEqually\n        stackView.spacing = 10\n        stackView.translatesAutoresizingMaskIntoConstraints = false\n\n        for title in buttonTitles {\n            let button = UIButton(type: .system)\n            button.setTitle(title, for: .normal)\n            button.addTarget(self, action: #selector(buttonTapped(_:)), for: .touchUpInside)\n            stackView.addArrangedSubview(button)\n        }\n\n        view.addSubview(stackView)\n\n        NSLayoutConstraint.activate([\n            stackView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            stackView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            stackView.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.5)\n        ])\n    }\n\n    @objc private func buttonTapped(_ sender: UIButton) {\n        print(\"Button tapped: \\(sender.titleLabel?.text ?? \"Unknown\")\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a search bar in a UITableView",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate, UISearchBarDelegate {\n    @IBOutlet weak var tableView: UITableView!\n    @IBOutlet weak var searchBar: UISearchBar!\n\n    var data: [String] = [\"Apple\", \"Banana\", \"Orange\", \"Pineapple\", \"Strawberry\"]\n    var filteredData: [String] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        tableView.delegate = self\n        searchBar.delegate = self\n        filteredData = data\n    }\n\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredData = data\n        } else {\n            filteredData = data.filter { $0.lowercased().contains(searchText.lowercased()) }\n        }\n        tableView.reloadData()\n    }\n\n    // UITableViewDataSource and UITableViewDelegate methods\n}"
    },
    {
      "instruction": " \nWrite a Swift function to request and handle location updates using CoreLocation",
      "input": "",
      "output": "import UIKit\nimport CoreLocation\n\nclass ViewController: UIViewController, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupLocationManager()\n    }\n\n    private func setupLocationManager() {\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n        if status == .authorizedWhenInUse {\n            locationManager.startUpdatingLocation()\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            print(\"Latitude: \\(location.coordinate.latitude), Longitude: \\(location.coordinate.longitude)\")\n        }\n    }\n}"
    },
    {
      "instruction": "Implement a custom UITableViewController that displays a list of contacts with their names and phone numbers.",
      "input": "",
      "output": "import UIKit\n\nstruct Contact {\n    let name: String\n    let phoneNumber: String\n}\n\nclass ContactsTableViewController: UITableViewController {\n    \n    var contacts: [Contact] = [\n        Contact(name: \"John Doe\", phoneNumber: \"123-456-7890\"),\n        Contact(name: \"Jane Smith\", phoneNumber: \"234-567-8901\"),\n        // Add more contacts here\n    ]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"contactCell\")\n    }\n    \n    override func numberOfSections(in tableView: UITableView) -> Int {\n        return 1\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return contacts.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"contactCell\", for: indexPath)\n        let contact = contacts[indexPath.row]\n        cell.textLabel?.text = \"\\(contact.name) - \\(contact.phoneNumber)\"\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a custom UIView subclass that renders a circular progress bar with a configurable percentage.",
      "input": "",
      "output": "import UIKit\n\nclass CircularProgressView: UIView {\n    \n    private var progressLayer = CAShapeLayer()\n    \n    @IBInspectable var progress: CGFloat = 0 {\n        didSet {\n            setNeedsDisplay()\n        }\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupProgressLayer()\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        setupProgressLayer()\n    }\n    \n    private func setupProgressLayer() {\n        progressLayer.strokeColor = UIColor.blue.cgColor\n        progressLayer.fillColor = UIColor.clear.cgColor\n        progressLayer.lineWidth = 5\n        layer.addSublayer(progressLayer)\n    }\n    \n    override func draw(_ rect: CGRect) {\n        let center = CGPoint(x: bounds.midX, y: bounds.midY)\n        let radius = min(bounds.width, bounds.height) / 2 - progressLayer.lineWidth / 2\n        let startAngle = -CGFloat.pi / 2\n        let endAngle = startAngle + 2 * CGFloat.pi * progress\n        \n        let path = UIBezierPath(arcCenter: center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)\n        progressLayer.path = path.cgPath\n    }\n}"
    },
    {
      "instruction": " \nCreate an extension for UIColor that allows the instantiation of colors using hexadecimal values.",
      "input": "",
      "output": "import UIKit\n\nextension UIColor {\n    convenience init(hex: Int, alpha: CGFloat = 1.0) {\n        let red = CGFloat((hex >> 16) & 0xFF) / 255.0\n        let green = CGFloat((hex >> 8) & 0xFF) / 255.0\n        let blue = CGFloat(hex & 0xFF) / 255.0\n        self.init(red: red, green: green, blue: blue, alpha: alpha)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that asynchronously downloads an image from a URL and sets it as the image of a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc setImage(from url: URL, to imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil else {\n            return\n        }\n        DispatchQueue.main.async {\n            imageView.image = UIImage(data: data)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nImplement a Swift function that takes a string and returns the number of occurrences of a specified character.",
      "input": "",
      "output": "func countOccurrences(of character: Character, in string: String) -> Int {\n    return string.reduce(0) { count, currentCharacter in\n        return count + (currentCharacter == character ? 1 : 0)\n    }\n}"
    },
    {
      "instruction": "Create a Swift UITableViewController that displays a list of items and allows users to delete items by swiping.",
      "input": "",
      "output": "import UIKit\n\nclass MyTableViewController: UITableViewController {\n\n    var items = [\"Item 1\", \"Item 2\", \"Item 3\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"cell\")\n    }\n\n    // MARK: - Table view data source\n\n    override func numberOfSections(in tableView: UITableView) -> Int {\n        return 1\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        cell.textLabel?.text = items[indexPath.row]\n        return cell\n    }\n    \n    // Enable editing\n    override func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {\n        return true\n    }\n    \n    // Handle delete action\n    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {\n        if editingStyle == .delete {\n            items.remove(at: indexPath.row)\n            tableView.deleteRows(at: [indexPath], with: .fade)\n        }\n    }\n}\n\nlet tableViewController = MyTableViewController()"
    },
    {
      "instruction": "Write a Swift function to make an API call using URLSession and parse the JSON response.",
      "input": "",
      "output": "import Foundation\n\nstruct ApiResponse: Codable {\n    let results: [String]\n}\n\nfunc fetchResults(completion: @escaping ([String]?) -> Void) {\n    let urlString = \"https://api.example.com/results\"\n    guard let url = URL(string: urlString) else { return }\n\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            print(\"Error: \\(error.localizedDescription)\")\n            completion(nil)\n            return\n        }\n\n        guard let data = data else { return }\n\n        do {\n            let decoder = JSONDecoder()\n            let response = try decoder.decode(ApiResponse.self, from: data)\n            completion(response.results)\n        } catch {\n            print(\"Error decoding JSON: \\(error.localizedDescription)\")\n            completion(nil)\n        }\n    }\n\n    task.resume()\n}\n\nfetchResults { results in\n    if let results = results {\n        print(\"Results: \\(results)\")\n    } else {\n        print(\"Error fetching results\")\n    }\n}"
    },
    {
      "instruction": "Create a custom UITableView with a search bar, and implement search functionality based on a list of names.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var nameLabel: UILabel!\n}\n\nclass CustomTableViewController: UITableViewController, UISearchBarDelegate {\n    @IBOutlet weak var searchBar: UISearchBar!\n    \n    let names = [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grace\", \"Hannah\", \"Igor\", \"Jack\"]\n    var filteredNames: [String] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        searchBar.delegate = self\n        filteredNames = names\n    }\n    \n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredNames = names\n        } else {\n            filteredNames = names.filter { $0.lowercased().contains(searchText.lowercased()) }\n        }\n        tableView.reloadData()\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredNames.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomCell\", for: indexPath) as! CustomTableViewCell\n        \n        cell.nameLabel.text = filteredNames[indexPath.row]\n        \n        return cell\n    }\n}"
    },
    {
      "instruction": "Implement a function that fetches the user's current location using CoreLocation, then makes a network request to the OpenWeatherMap API to get the current weather for the location.",
      "input": "",
      "output": "import CoreLocation\nimport UIKit\n\nclass WeatherViewController: UIViewController, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n    let apiKey = \"your_openweathermap_api_key\"\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        locationManager.delegate = self\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.startUpdatingLocation()\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            fetchWeather(latitude: location.coordinate.latitude, longitude: location.coordinate.longitude)\n            locationManager.stopUpdatingLocation()\n        }\n    }\n    \n    func fetchWeather(latitude: CLLocationDegrees, longitude: CLLocationDegrees) {\n        let urlString = \"https://api.openweathermap.org/data/2.5/weather?lat=\\(latitude)&lon=\\(longitude)&appid=\\(apiKey)\"\n        \n        guard let url = URL(string: urlString) else { return }\n        \n        let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let error = error {\n                print(\"Error fetching weather data: \\(error.localizedDescription)\")\n                return\n            }\n            \n            if let data = data {\n                do {\n                    if let json = try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any] {\n                        print(json)\n                    }\n                } catch {\n                    print(\"Error decoding JSON: \\(error.localizedDescription)\")\n                }\n            }\n        }\n        task.resume()\n    }\n}"
    },
    {
      "instruction": "Create a function that downloads an image from a given URL and sets it as the background image for a UIButton.",
      "input": "",
      "output": "import UIKit\n\nclass CustomButtonViewController: UIViewController {\n    @IBOutlet weak var customButton: UIButton!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let imageURL = \"https://example.com/path/to/image.png\"\n        setBackgroundImageForButton(from: imageURL, for: customButton)\n    }\n    \n    func setBackgroundImageForButton(from url: String, for button: UIButton) {\n        guard let imageURL = URL(string: url) else { return }\n        \n        URLSession.shared.dataTask(with: imageURL) { (data, response, error) in\n            if let error = error {\n                print(\"Error downloading image: \\(error.localizedDescription)\")\n                return\n            }\n            \n            if let data = data {\n                DispatchQueue.main.async {\n                    if let image = UIImage(data: data) {\n                        button.setBackgroundImage(image, for: .normal)\n                    }\n                }\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": "Create a function that saves a JSON object to UserDefaults, then another function to retrieve the JSON object from UserDefaults and convert it back to a dictionary.",
      "input": "",
      "output": "import Foundation\n\nfunc saveJSONToUserDefaults(json: [String: Any], forKey key: String) {\n    if let jsonData = try? JSONSerialization.data(withJSONObject: json, options: []) {\n        UserDefaults.standard.set(jsonData, forKey: key)\n    }\n}\n\nfunc retrieveJSONFromUserDefaults(forKey key: String) -> [String: Any]? {\n    if let jsonData = UserDefaults.standard.data(forKey: key) {\n        iflet jsonObject = try? JSONSerialization.jsonObject(with: jsonData, options: []) as? [String: Any] {\n            return jsonObject\n        }\n    }\n    return nil\n}"
    },
    {
      "instruction": "Create a UICollectionView with a custom UICollectionViewCell that displays an image and title. Implement a function to load the image from a remote URL and update the cell.",
      "input": "",
      "output": "import UIKit\n\nstruct Item {\n    let title: String\n    let imageURL: String\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n    let items: [Item] = [\n        Item(title: \"Example 1\", imageURL: \"https://example.com/image1.png\"),\n        Item(title: \"Example 2\", imageURL: \"https://example.com/image2.png\"),\n        // Add more items...\n    ]\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return items.count\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        \n        cell.titleLabel.text = items[indexPath.row].title\n        loadImage(from: items[indexPath.row].imageURL, into: cell.imageView)\n        \n        return cell\n    }\n    \n    func loadImage(from url: String, into imageView: UIImageView) {\n        guard let imageURL = URL(string: url) else { return }\n        \n        URLSession.shared.dataTask(with: imageURL) { (data, response, error) in\n            if let error = error {\n                print(\"Error downloading image: \\(error.localizedDescription)\")\n                return\n            }\n            \n            if let data = data {\n                DispatchQueue.main.async {\n                    if let image = UIImage(data: data) {\n                        imageView.image = image\n                    }\n                }\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": "Implement a function that takes in a completion handler and simulates an asynchronous API call. After a delay, the function should invoke the completion handler with a success message.",
      "input": "",
      "output": "import Foundation\n\nfunc simulateAPICall(completion: @escaping (String) -> Void) {\n    DispatchQueue.global().async {\n        let delay = DispatchTime.now() + .seconds(3)\n        \n        DispatchQueue.main.asyncAfter(deadline: delay) {\n            completion(\"Success!\")\n        }\n    }\n}\n\nsimulateAPICall { (message) in\n    print(\"API call completed with message: \\(message)\")\n}"
    },
    {
      "instruction": "Create a simple login screen with two UITextField elements for email and password, and a UIButton for submitting the login. Implement a function that validates the input and presents an UIAlertController if the input is invalid.",
      "input": "",
      "output": "import UIKit\n\nclass LoginViewController: UIViewController {\n    @IBOutlet weak var emailTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n    \n    @IBAction func loginButtonTapped(_ sender: UIButton) {\n        if validateInput() {\n            // Perform login action\n        } else {\n            presentInvalidInputAlert()\n        }\n    }\n    \n    func validateInput() -> Bool {\n        guard let email = emailTextField.text, !email.isEmpty,\n              let password = passwordTextField.text, !password.isEmpty else {\n            return false\n        }\n        \n        // Add more validation logic if needed\n        return true\n    }\n    \n    func presentInvalidInputAlert() {\n        let alertController = UIAlertController(title: \"Invalid Input\", message: \"Please enter both email and password.\", preferredStyle: .alert)\n        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": "Create a function that uses Combine to fetch data from a remote API, decode it into a Swift model, and handle errors.",
      "input": "",
      "output": "import Combine\nimport Foundation\n\nstruct Post: Codable {\n    let userId: Int\n    let id: Int\n    let title: String\n    let body: String\n}\n\nfunc fetchPosts() -> AnyPublisher<[Post], Error> {\n    guard let url = URL(string: \"https://jsonplaceholder.typicode.com/posts\") else {\n        fatalError(\"Invalid URL\")\n    }\n    \n    return URLSession.shared.dataTaskPublisher(for: url)\n        .map { $0.data }\n        .decode(type: [Post].self, decoder: JSONDecoder())\n        .receive(on: DispatchQueue.main)\n        .eraseToAnyPublisher()\n}\n\nlet cancellable = fetchPosts()\n    .sink(receiveCompletion: { completion in\n        switch completion {\n        case .failure(let error):\n            print(\"Error fetching posts: (error.localizedDescription)\")\n        case .finished:\n            print(\"Fetching posts completed.\")\n        }\n    }, receiveValue: { posts in\n        for post in posts {\n            print(\"\\(post.title) \\(post.body)\")\n        }\n    })"
    },
    {
      "instruction": "Write a Swift function that fetches data from a REST API, decodes the JSON response into a custom data structure, and then calls a completion handler with the result.",
      "input": "",
      "output": "import Foundation\n\nstruct CustomData: Codable {\n    let id: Int\n    let name: String\n}\n\nfunc fetchData(completion: @escaping (Result<[CustomData], Error>) -> Void) {\n    let url = URL(string: \"https://api.example.com/data\")!\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else {\n            let error = NSError(domain: \"DataError\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"Invalid Data\"])\n            completion(.failure(error))\n            return\n        }\n\n        do {\n            let decoder = JSONDecoder()\n            let decodedData = try decoder.decode([CustomData].self, from: data)\n            completion(.success(decodedData))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIView with a UILabel and a UITextField, then return the custom UIView.",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomView() -> UIView {\n    let customView = UIView()\n    customView.translatesAutoresizingMaskIntoConstraints = false\n\n    let label = UILabel()\n    label.text = \"Name:\"\n    label.translatesAutoresizingMaskIntoConstraints = false\n    customView.addSubview(label)\n\n    let textField = UITextField()\n    textField.borderStyle = .roundedRect\n    textField.translatesAutoresizingMaskIntoConstraints = false\n    customView.addSubview(textField)\n\n    NSLayoutConstraint.activate([\n        label.leadingAnchor.constraint(equalTo: customView.leadingAnchor),\n        label.topAnchor.constraint(equalTo: customView.topAnchor),\n        textField.leadingAnchor.constraint(equalTo: label.trailingAnchor, constant: 8),\n        textField.trailingAnchor.constraint(equalTo: customView.trailingAnchor),\n        textField.topAnchor.constraint(equalTo: customView.topAnchor),\n        textField.bottomAnchor.constraint(equalTo: customView.bottomAnchor)\n    ])\n\n    return customView\n}"
    },
    {
      "instruction": " \nWrite a Swift function that configures a UITableView to display a list of names and register a custom UITableViewCell.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    static let reuseIdentifier = \"CustomTableViewCell\"\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        // Add custom UI elements and configuration here\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n\nfunc configureTableView(_ tableView: UITableView, names: [String]) {\n    tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: CustomTableViewCell.reuseIdentifier)\n\n    tableView.dataSource = UITableViewDataSource.self\n\n    class UITableViewDataSource: NSObject, UITableViewDataSource {\n        private let names: [String]\n\n        init(names: [String]) {\n            self.names = names\n            super.init()\n        }\n        \n        func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n            return names.count\n        }\n        \n        func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.reuseIdentifier, for: indexPath)\n            cell.textLabel?.text = names[indexPath.row]\n            return cell\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a UITapGestureRecognizer to a UIImageView, allowing the user to tap the image to perform an action.",
      "input": "",
      "output": "import UIKit\n\nfunc addTapGestureToImageView(_ imageView: UIImageView, action: @escaping () -> Void) {\n    imageView.isUserInteractionEnabled = true\n    let tapGesture = UITapGestureRecognizer(target: self, action: #selector(imageTapped))\n    imageView.addGestureRecognizer(tapGesture)\n\n    class TapGestureHandler: NSObject {\n        private let action: () -> Void\n\n        init(action: @escaping () -> Void) {\n            self.action = action\n            super.init()\n        }\n\n        @objc func imageTapped() {\n            action()\n        }\n    }\n\n    let handler = TapGestureHandler(action: action)\n    objc_setAssociatedObject(tapGesture, Unmanaged.passUnretained(handler).toOpaque(), handler, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that presents an UIAlertController with a text field, allowing the user to enter their name and then performs an action with the entered name.",
      "input": "",
      "output": "import UIKit\n\nfunc presentNameAlertController(viewController: UIViewController, completion: @escaping (String) -> Void) {\n    let alertController = UIAlertController(title: \"Enter your name\", message: nil, preferredStyle: .alert)\n    alertController.addTextField { textField in        textField.placeholder = \"Name\"\n    }\n\n    let submitAction = UIAlertAction(title: \"Submit\", style: .default) { _ in\n        if let name = alertController.textFields?.first?.text {\n            completion(name)\n        }\n    }\n    alertController.addAction(submitAction)\n\n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n    alertController.addAction(cancelAction)\n\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a UIViewController and adds a UIStackView with two UIButtons to the view, then configures the buttons to perform separate actions when tapped.",
      "input": "",
      "output": "import UIKit\n\nfunc addStackViewWithButtons(to viewController: UIViewController, button1Action: @escaping () -> Void, button2Action: @escaping () -> Void) {\n    let stackView = UIStackView()\n    stackView.axis = .horizontal\n    stackView.distribution = .fillEqually\n    stackView.spacing = 10\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    viewController.view.addSubview(stackView)\n\n    NSLayoutConstraint.activate([\n        stackView.centerXAnchor.constraint(equalTo: viewController.view.centerXAnchor),\n        stackView.centerYAnchor.constraint(equalTo: viewController.view.centerYAnchor)\n    ])\n\n    let button1 = UIButton(type: .system)\n    button1.setTitle(\"Button 1\", for: .normal)\n    button1.addTarget(self, action: #selector(button1Tapped), for: .touchUpInside)\n    stackView.addArrangedSubview(button1)\n\n    let button2 = UIButton(type: .system)\n    button2.setTitle(\"Button 2\", for: .normal)\n    button2.addTarget(self, action: #selector(button2Tapped), for: .touchUpInside)\n    stackView.addArrangedSubview(button2)\n\n    class ButtonActions: NSObject {\n        private let button1Action: () -> Void\n        private let button2Action: () -> Void\n\n        init(button1Action: @escaping () -> Void, button2Action: @escaping () -> Void) {\n            self.button1Action = button1Action\n            self.button2Action = button2Action\n            super.init()\n        }\n\n        @objc func button1Tapped() {\n            button1Action()\n        }\n\n        @objc func button2Tapped() {\n            button2Action()\n        }\n    }\n\n    let actions = ButtonActions(button1Action: button1Action, button2Action: button2Action)\n    objc_setAssociatedObject(viewController, Unmanaged.passUnretained(actions).toOpaque(), actions, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a UISlider's value and adjusts the font size of a UILabel accordingly.",
      "input": "",
      "output": "import UIKit\n\nfunc adjustFontSize(sliderValue: Float, label: UILabel) {\n    let minFontSize: CGFloat = 10\n    let maxFontSize: CGFloat = 30\n    let fontSize = minFontSize + (maxFontSize - minFontSize) * CGFloat(sliderValue)\n    label.font = UIFont.systemFont(ofSize: fontSize)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UICollectionViewCell with a UIImageView and a UILabel, and configure the cell to display an image and a title.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n\n    private let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n\n    private let titleLabel: UILabel = {\n        let label = UILabel()\n        label.numberOfLines = 1\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupViews() {\n        addSubview(imageView)\n        addSubview(titleLabel)\n\n        NSLayoutConstraint.activate([\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.heightAnchor.constraint(equalTo: heightAnchor, multiplier: 0.75),\n\n            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor),\n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 4),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n\n    func configureCell(image: UIImage, title: String) {\n        imageView.image = image\n        titleLabel.text = title\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to present a UIAlertController with an action sheet style",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    @IBAction func showActionSheet(_ sender: UIButton) {\n        let alertController = UIAlertController(title: \"Choose an Option\", message: nil, preferredStyle: .actionSheet)\n        \n        let optionOneAction = UIAlertAction(title: \"Option 1\", style: .default) { _ in\n            print(\"Option 1 selected\")\n        }\n        \n        let optionTwoAction = UIAlertAction(title: \"Option 2\", style: .default) { _ in\n            print(\"Option 2 selected\")\n        }\n        \n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n        \n        alertController.addAction(optionOneAction)\n        alertController.addAction(optionTwoAction)\n        alertController.addAction(cancelAction)\n        \n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to make an API request with URLSession and decode the JSON response using Codable",
      "input": "",
      "output": "import Foundation\n\nstruct APIResponse: Codable {\n    let data: [String: String]\n}\n\nclass APIManager {\n    \n    func fetchData(completion: @escaping (APIResponse?, Error?) -> Void) {\n        let urlString = \"https://api.example.com/data\"\n        \n        guard let url = URL(string: urlString) else { return }\n        \n        URLSession.shared.dataTask(with: url) { data, response, error in\n            guard let data = data, error == nil else {\n                completion(nil, error)\n                return\n            }\n            \n            do {\n                let decodedData = try JSONDecoder().decode(APIResponse.self, from: data)\n                completion(decodedData, nil)\n            } catch {\n                completion(nil, error)\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UICollectionView with custom UICollectionViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n    // Add your custom UI components here\n}\n\nclass ViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {\n    \n    private lazy var collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        return collectionView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(collectionView)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10 // Return the number of items\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        // Configure cell\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a horizontal UIScrollView with multiple UIViews inside",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    private let numberOfPages = 4\n    \n    private lazy var scrollView: UIScrollView = {\n        let scrollView = UIScrollView()\n        scrollView.isPagingEnabled = true\n        scrollView.showsHorizontalScrollIndicator = false\n        scrollView.translatesAutoresizingMaskIntoConstraints = false\n        return scrollView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(scrollView)\n        setupConstraints()\n        createScrollContent()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            scrollView.topAnchor.constraint(equalTo: view.topAnchor),\n            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    private func createScrollContent() {\n        for i in 0..<numberOfPages {\n            let view = UIView()\n            view.backgroundColor = UIColor.random()\n            view.frame = CGRect(x: CGFloat(i) * view.bounds.width, y: 0, width: view.bounds.width, height: view.bounds.height)\n            scrollView.addSubview(view)\n        }\n        \n        scrollView.contentSize = CGSize(width: view.bounds.width * CGFloat(numberOfPages), height: view.bounds.height)\n    }\n}\n\nextension UIColor {\n    static func random() -> UIColor {\n        return UIColor(red: CGFloat.random(in: 0...1), green: CGFloat.random(in: 0...1), blue: CGFloat.random(in: 0...1), alpha: 1.0)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement infinite scrolling in a UITableView",
      "input": "",
      "output": "import UIKit\n\nclass InfiniteScrollTableViewController: UITableViewController {\n    \n    private var data: [String] = []\n    private var isLoadingData = false\n    private let loadMoreThreshold = 5\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"Cell\")\n        loadData()\n    }\n    \n    private func loadData() {\n        isLoadingData = true\n        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {\n            for i in 1...10 {\n                self.data.append(\"Item \\(i)\")\n            }\n            self.tableView.reloadData()\n            self.isLoadingData = false\n        }\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\n        cell.textLabel?.text = data[indexPath.row]\n        \n        if !isLoadingData && indexPath.row >= data.count - loadMoreThreshold {\n            loadData()\n        }\n        \n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to play a video from a URL using AVPlayerViewController",
      "input": "",
      "output": "import UIKit\nimport AVKit\nimport AVFoundation\n\nclass ViewController: UIViewController {\n    \n    @IBAction func playVideo(_ sender: UIButton) {\n        guard let url = URL(string: \"https://example.com/video.mp4\") else { return }\n        let player = AVPlayer(url: url)\n        let playerViewController = AVPlayerViewController()\n        playerViewController.player = player\n        present(playerViewController, animated: true) {\n            playerViewController.player?.play()\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to implement a search functionality using UISearchBar and UISearchResultsUpdating",
      "input": "",
      "output": "import UIKit\n\nclass SearchViewController: UIViewController, UISearchBarDelegate, UISearchResultsUpdating {\n    \n    private let data = [\"Apple\", \"Banana\", \"Orange\", \"Blueberry\", \"Cherry\"]\n    private var filteredData: [String] = []\n    \n    private lazy var searchBar: UISearchBar = {\n        let searchBar = UISearchBar()\n        searchBar.searchBarStyle = .minimal\n        searchBar.delegate = self\n        return searchBar\n    }()\n    \n    private lazy var tableView: UITableView = {\n        let tableView = UITableView()\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"Cell\")\n        tableView.dataSource = self\n        tableView.translatesAutoresizingMaskIntoConstraints = false\n        return tableView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(searchBar)\n        view.addSubview(tableView)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        searchBar.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            searchBar.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            searchBar.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            searchBar.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            \n            tableView.topAnchor.constraint(equalTo: searchBar.bottomAnchor),\n            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    func updateSearchResults(for searchController: UISearchController) {\n        guard let searchText = searchController.searchBar.text else { return }\n        filteredData = data.filter { $0.lowercased().contains(searchText.lowercased()) }\n        tableView.reloadData()\n    }\n}\n\nextension SearchViewController: UITableViewDataSource {\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredData.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\n        cell.textLabel?.text = filteredData[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to create a UITableView with a custom UITableViewCell that displays an image and a label side by side.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let cellLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        addSubview(cellImageView)\n        addSubview(cellLabel)\n        \n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 8),\n            cellImageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            cellLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 16),\n            cellLabel.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n\nclass CustomTableViewController: UITableViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"customCell\")\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 10\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"customCell\", for: indexPath) as! CustomTableViewCell\n        cell.cellImageView.image = UIImage(named: \"exampleImage\")\n        cell.cellLabel.text = \"Example cell \\(indexPath.row)\"\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to programmatically create a UICollectionView with a custom UICollectionViewCell that displays a label inside a colored square.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        addSubview(label)\n        NSLayoutConstraint.activate([\n            label.centerXAnchor.constraint(equalTo: centerXAnchor),\n            label.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n        backgroundColor = .blue\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n    init() {\n        let layout = UICollectionViewFlowLayout()\n        layout.itemSize = CGSize(width: 100, height: 100)\n        super.init(collectionViewLayout: layout)\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"customCell\")\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 20\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"customCell\", for: indexPath) as! CustomCollectionViewCell\n        cell.label.text = \"Cell \\(indexPath.item)\"\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIView that displays a UITextView and UIButton. Tapping the button should print the content of the UITextView.",
      "input": "",
      "output": "import UIKit\n\nclass CustomView: UIView {\n    let textView: UITextView = {\n        let textView = UITextView()\n        textView.translatesAutoresizingMaskIntoConstraints = false\n        return textView\n    }()\n    \n    let button: UIButton = {\n        let button = UIButton(type: .system)\n        button.setTitle(\"Print text\", for: .normal)\n        button.translatesAutoresizingMaskIntoConstraints = false\n        return button\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        addSubview(textView)\n        addSubview(button)\n        NSLayoutConstraint.activate([\n            textView.centerXAnchor.constraint(equalTo: centerXAnchor),\n            textView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            textView.widthAnchor.constraint(equalToConstant: 200),\n            textView.heightAnchor.constraint(equalToConstant: 100),\n            button.topAnchor.constraint(equalTo: textView.bottomAnchor, constant: 8),\n            button.centerXAnchor.constraint(equalTo: centerXAnchor)\n        ])\n        button.addTarget(self, action: #selector(printText), for: .touchUpInside)\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    @objc func printText() {\n        print(textView.text)\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function that uses CoreLocation to get the user's current location and print the latitude and longitude.",
      "input": "",
      "output": "import UIKit\nimport CoreLocation\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            print(\"Latitude: \\(location.coordinate.latitude), Longitude: \\(location.coordinate.longitude)\")\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that uses MapKit to display a map with the user's current location and a custom annotation at a given latitude and longitude.",
      "input": "",
      "output": "import UIKit\nimport MapKit\n\nclass CustomAnnotation: NSObject, MKAnnotation {\n    let title: String?\n    let coordinate: CLLocationCoordinate2D\n\n    init(title: String, coordinate: CLLocationCoordinate2D) {\n        self.title = title\n        self.coordinate = coordinate\n    }\n}\n\nclass MapViewController: UIViewController, MKMapViewDelegate {\n    let mapView = MKMapView()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        mapView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(mapView)\n        NSLayoutConstraint.activate([\n            mapView.topAnchor.constraint(equalTo: view.topAnchor),\n            mapView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            mapView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            mapView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n        \n        mapView.delegate = self\n        mapView.showsUserLocation = true\n        mapView.userTrackingMode = .follow\n        \n        let customAnnotation = CustomAnnotation(title: \"Custom Annotation\", coordinate: CLLocationCoordinate2D(latitude: 37.7749, longitude: -122.4194))\n        mapView.addAnnotation(customAnnotation)\n    }\n    \n    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {\n        if annotation is CustomAnnotation {\n            let identifier = \"customAnnotation\"\n            var annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: identifier)\n            \n            if annotationView == nil {\n                annotationView = MKPinAnnotationView(annotation: annotation, reuseIdentifier: identifier)\n                annotationView?.canShowCallout = true\n            } else {\n                annotationView?.annotation = annotation\n            }\n            \n            return annotationView\n        }\n        \n        return nil\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIControl that acts as a rating control with a series of stars. Tapping on a star should update the rating value.",
      "input": "",
      "output": "import UIKit\n\nclass RatingControl: UIControl {\n    var rating = 0 {\n        didSet {\n            setNeedsLayout()\n        }\n    }\n    \n    private var starButtons = [UIButton]()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupStars()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupStars()\n    }\n    \n    private func setupStars() {\n        for _ in 0..<5 {\n            let button = UIButton()\n            button.setImage(UIImage(systemName: \"star.fill\"), for: .selected)\n            button.setImage(UIImage(systemName: \"star\"), for: .normal)\n            button.translatesAutoresizingMaskIntoConstraints = false\n            button.addTarget(self, action: #selector(ratingButtonTapped(button:)), for: .touchUpInside)\n            addSubview(button)\n            starButtons.append(button)\n        }\n        \n        var constraints = [NSLayoutConstraint]()\n        for (index, button) in starButtons.enumerated() {\n            constraints += [\n                button.widthAnchor.constraint(equalToConstant: 44),\n                button.heightAnchor.constraint(equalToConstant: 44),\n                button.centerYAnchor.constraint(equalTo: centerYAnchor)\n            ]\n            \n            if index == 0 {\n                constraints.append(button.leadingAnchor.constraint(equalTo: leadingAnchor))\n            } else {\n                constraints.append(button.leadingAnchor.constraint(equalTo: starButtons[index - 1].trailingAnchor))\n            }\n        }\n        NSLayoutConstraint.activate(constraints)\n    }\n    \n    @objc func ratingButtonTapped(button: UIButton) {\n        if let index = starButtons.firstIndex(of: button) {\n            rating = index + 1\n            updateStarSelectionStates()\n        }\n    }\n    \n    private func updateStarSelectionStates() {\n        for (index, button) in starButtons.enumerated() {\n            button.isSelected = index < rating\n        }\n    }\n}"
    },
    {
      "instruction": "Create a custom UITableViewCell with an image, title, and subtitle.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n\n    static let identifier = \"CustomTableViewCell\"\n\n    private let customImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n\n    private let titleLabel: UILabel = {\n        let label = UILabel()\n        label.font = UIFont.boldSystemFont(ofSize: 18)\n        return label\n    }()\n\n    private let subtitleLabel: UILabel = {\n        let label = UILabel()\n        label.font = UIFont.systemFont(ofSize: 14)\n        label.textColor = .gray\n        return label\n    }()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        contentView.addSubview(customImageView)\n        contentView.addSubview(titleLabel)\n        contentView.addSubview(subtitleLabel)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n\n        customImageView.frame = CGRect(x: 10, y: 5, width: 70, height: 70)\n        titleLabel.frame = CGRect(x: 90, y: 10, width: contentView.frame.size.width - 100, height: 20)\n        subtitleLabel.frame = CGRect(x: 90, y: 35, width: contentView.frame.size.width - 100, height: 20)\n    }\n\n    func configure(with image: UIImage, title: String, subtitle: String) {\n        customImageView.image = image\n        titleLabel.text = title\n        subtitleLabel.text = subtitle\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift function to download an image from a URL and display it in a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil, let image = UIImage(data: data) else {\n            completion(nil)\n            return\n        }\n        DispatchQueue.main.async {\n            completion(image)\n        }\n    }.resume()\n}\n\nfunc setImage(from url: URL, to imageView: UIImageView) {\n    downloadImage(from: url) { image in\n        imageView.image = image\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIButton with rounded corners and a gradient background",
      "input": "",
      "output": "import UIKit\n\nclass GradientButton: UIButton {\n\n    private let gradientLayer = CAGradientLayer()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupGradient()\n        setupRoundedCorners()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupGradient()\n        setupRoundedCorners()\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        gradientLayer.frame = bounds\n    }\n\n    private func setupGradient() {\n        gradientLayer.colors = [UIColor.red.cgColor, UIColor.orange.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0.5)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 0.5)\n        layer.insertSublayer(gradientLayer, at: 0)\n    }\n\n    private func setupRoundedCorners() {\n        layer.cornerRadius = bounds.height / 2\n        clipsToBounds = true\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to register for and handle remote push notifications",
      "input": "",
      "output": "import UIKit\nimport UserNotifications\n\nfunc registerForPushNotifications(application: UIApplication) {\n    let center = UNUserNotificationCenter.current()\n    center.requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in\n        if granted {\n            DispatchQueue.main.async {\n                application.registerForRemoteNotifications()\n            }\n        }\n    }\n}\n\nfunc application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    // Send device token to your server\n}\n\nfunc application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n    print(\"Failed to register for remote notifications: \\(error)\")\n}\n\nfunc application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n    // Handle remote notification\n    completionHandler(.newData)\n}"
    },
    {
      "instruction": " \nCreate a view controller that displays a list of items using UICollectionView",
      "input": "",
      "output": "import UIKit\n\nclass CollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n\n    private let collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .vertical\n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: \"cell\")\n        collectionView.backgroundColor = .white\n        return collectionView\n    }()\n\n    private let items = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(collectionView)\n        collectionView.dataSource = self\n        collectionView.delegate = self\n    }\n\n    override func viewDidLayoutSubviews() {\n        super.viewDidLayoutSubviews()\n        collectionView.frame = view.bounds\n    }\n\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"cell\", for: indexPath)\n        cell.backgroundColor = .blue\n        return cell\n    }\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: view.frame.size.width / 2 - 15, height: view.frame.size.width / 2 - 15)\n    }\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {\n        return 10\n    }\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {\n        return 10\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom swipe-to-delete action for UITableViewCell",
      "input": "",
      "output": "import UIKit\n\nclass SwipeToDeleteViewController: UITableViewController {\n\n    private var data = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"cell\")\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        cell.textLabel?.text = data[indexPath.row]\n        return cell\n    }\n\n    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {\n        if editingStyle == .delete {\n            data.remove(at: indexPath.row)\n            tableView.deleteRows(at: [indexPath], with: .automatic)\n        }\n    }\n}"
    },
    {
      "instruction": " \nImplement a custom UIAlertController with multiple actions",
      "input": "",
      "output": "import UIKit\n\nfunc showCustomAlertController(on viewController: UIViewController) {\n    let alertController = UIAlertController(title: \"Custom Alert\", message: \"Choose an option\", preferredStyle: .alert)\n\n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n    alertController.addAction(cancelAction)\n\n    let optionOneAction = UIAlertAction(title: \"Option 1\", style: .default) { _ in\n        print(\"Option 1 selected\")\n    }\n    alertController.addAction(optionOneAction)\n\n    let optionTwoAction = UIAlertAction(title: \"Option 2\", style: .default) { _ in\n        print(\"Option 2 selected\")\n    }\n    alertController.addAction(optionTwoAction)\n\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nCreate a custom UIPageViewController that displays a series of images",
      "input": "",
      "output": "import UIKit\n\nclass ImagePageViewController: UIPageViewController, UIPageViewControllerDataSource, UIPageViewControllerDelegate {\n\n    private let images: [UIImage] = [\n        UIImage(named: \"image1\")!,\n        UIImage(named: \"image2\")!,\n        UIImage(named: \"image3\")!\n    ]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        dataSource = self\n        delegate = self\n\n        setViewControllers([createImageViewController(image: images[0])], direction: .forward, animated: false, completion: nil)\n    }\n\n    func createImageViewController(image: UIImage) -> UIViewController {\n        let viewController = UIViewController()\n        let imageView = UIImageView(image: image)\n        imageView.contentMode = .scaleAspectFit\n        viewController.view = imageView\n        return viewController\n    }\n\n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n        guard let imageView = (viewController.view as? UIImageView), let image = imageView.image, let index = images.firstIndex(of: image), index > 0 else {\n            return nil\n        }\n        return createImageViewController(image: images[index - 1])\n    }\n\n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) ->"
    },
    {
      "instruction": "Create a Swift function called downloadImage that asynchronously downloads an image from a given URL and updates the UIImageView of a UITableViewCell with the downloaded image. Use URLSession and a completion handler to update the UIImageView.",
      "input": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var customImageView: UIImageView!\n}",
      "output": "func downloadImage(url: URL, forCell cell: CustomTableViewCell) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            print(\"Error downloading image: \\(String(describing: error?.localizedDescription))\")\n            return\n        }\n        \n        DispatchQueue.main.async {\n            if let image = UIImage(data: data) {\n                cell.customImageView.image = image\n            }\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nImplement a custom UIView called CircularProgressBar that displays a circular progress bar with a customizable progress percentage, color, and thickness. Add the ability to animate the progress update.",
      "input": "import UIKit\n\nclass CircularProgressBar: UIView {\n    var progress: CGFloat\n    var progressColor: UIColor\n    var progressThickness: CGFloat\n}",
      "output": "class CircularProgressBar: UIView {\n    private var progressLayer: CAShapeLayer!\n    \n    var progress: CGFloat {\n        didSet {\n            setNeedsDisplay()\n        }\n    }\n    \n    var progressColor: UIColor {\n        didSet {\n            progressLayer.strokeColor = progressColor.cgColor\n        }\n    }\n    \n    var progressThickness: CGFloat {\n        didSet {\n            progressLayer.lineWidth = progressThickness\n        }\n    }\n    \n    override init(frame: CGRect) {\n        self.progress = 0\n        self.progressColor = .blue\n        self.progressThickness = 5\n        super.init(frame: frame)\n        setup()\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        self.progress = 0\n        self.progressColor = .blue\n        self.progressThickness = 5\n        super.init(coder: aDecoder)\n        setup()\n    }\n    \n    private func setup() {\n        progressLayer = CAShapeLayer()\n        progressLayer.strokeColor = progressColor.cgColor\n        progressLayer.lineWidth = progressThickness\n        progressLayer.fillColor = UIColor.clear.cgColor\n        progressLayer.lineCap = .round\n        layer.addSublayer(progressLayer)\n    }\n    \n    override func draw(_ rect: CGRect) {\n        let center = CGPoint(x: bounds.midX, y: bounds.midY)\n        let radius = min(bounds.width, bounds.height) / 2 - progressThickness / 2\n        let startAngle = CGFloat(-Double.pi / 2)\n        let endAngle = startAngle + 2 * CGFloat(Double.pi) * progress\n        \n        let path = UIBezierPath(arcCenter: center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)\n        progressLayer.path = path.cgPath\n    }\n    \n    func animateProgress(to value: CGFloat, duration: TimeInterval) {\n        progress = value\n        let animation = CABasicAnimation(keyPath: \"strokeEnd\")\n        animation.fromValue = 0\n        animation.toValue = value\n        animation.duration = duration\n        animation.isRemovedOnCompletion = false\n        animation.fillMode = .forwards\n        progressLayer.add(animation, forKey: \"progressAnimation\")\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift function called searchForContacts that searches the user's contact list for a contact with a given name, using the Contacts framework. The function should return an array of matching contacts.",
      "input": "import Contacts\n\nfunc searchForContacts(searchText: String) -> [CNContact] {\n}",
      "output": "import Contacts\n\nfunc searchForContacts(searchText: String) -> [CNContact] {\n    let contactStore = CNContactStore()\n    let keysToFetch = [CNContactGivenNameKey, CNContactFamilyNameKey] as [CNKeyDescriptor]\n    let predicate = CNContact.predicateForContacts(matchingName: searchText)\n    var matchingContacts: [CNContact] = []\n    \n    do {\n        matchingContacts = try contactStore.unifiedContacts(matching: predicate, keysToFetch: keysToFetch)\n    } catch let error as NSError {\n        print(\"Error searching for contacts: \\(error.localizedDescription)\")\n    }\n    \n    return matchingContacts\n}"
    },
    {
      "instruction": " \nCreate a Swift function called showAlert that takes a UIViewController, a title, a message, and an array of UIAlertAction objects as parameters, and presents a UIAlertController with the given parameters on the UIViewController.",
      "input": "import UIKit\n\nfunc showAlert(on viewController: UIViewController, title: String, message: String, actions: [UIAlertAction]) {\n}",
      "output": "import UIKit\n\nfunc showAlert(on viewController: UIViewController, title: String, message: String, actions: [UIAlertAction]) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    for action in actions {\n        alertController.addAction(action)\n    }\n    \n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nImplement a Swift function called saveImageToPhotoLibrary that saves a UIImage to the user's photo library using the Photos framework. The function should include a completion handler that returns an optional Error object.",
      "input": "import Photos\n\nfunc saveImageToPhotoLibrary(image: UIImage, completion: @escaping (Error?) -> Void) {\n}",
      "output": "import Photos\n\nfunc saveImageToPhotoLibrary(image: UIImage, completion: @escaping (Error?) -> Void) {\n    PHPhotoLibrary.requestAuthorization { status in\n        guard status == .authorized else {\n            completion(NSError(domain: \"PhotoLibrary\", code: 1, userInfo: [NSLocalizedDescriptionKey: \"Unauthorized access to photo library\"]))\n            return\n        }\n        \n        PHPhotoLibrary.shared().performChanges({\n            PHAssetChangeRequest.creationRequestForAsset(from: image)\n        }, completionHandler: { success, error in\n            DispatchQueue.main.async {\n                if success {\n                    completion(nil)\n                } else {\n                    completion(error)\n                }\n            }\n        })\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift function called getDeviceBatteryLevel that returns the current battery level of the device as a percentage. Use the UIDevice class to access the battery information.",
      "input": "import UIKit\n\nfunc getDeviceBatteryLevel() -> Float {\n}",
      "output": "import UIKit\n\nfunc getDeviceBatteryLevel() -> Float {\n    UIDevice.current.isBatteryMonitoringEnabled = true\n    let batteryLevel = UIDevice.current.batteryLevel\n    UIDevice.current.isBatteryMonitoringEnabled = false\n    \n    return batteryLevel * 100\n}"
    },
    {
      "instruction": " \nCreate a Swift function called registerForRemoteNotifications that registers the app for remote notifications using the UserNotifications framework. The function should request authorization for alert, sound, and badge notification options.",
      "input": "import UserNotifications\n\nfunc registerForRemoteNotifications() {\n}",
      "output": "import UserNotifications\n\nfunc registerForRemoteNotifications() {\n    let center = UNUserNotificationCenter.current()\n    let options: UNAuthorizationOptions = [.alert, .sound, .badge]\n    \n    center.requestAuthorization(options: options) { granted, error in\n        if granted {\n            DispatchQueue.main.async {\n                UIApplication.shared.registerForRemoteNotifications()\n            }\n        } else {\n            print(\"Error requesting authorization for remote notifications: \\(String(describing: error?.localizedDescription))\")\n        }\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift function called getCurrentLocation that retrieves the user's current location using CoreLocation and returns a CLLocation object via a completion handler. The function should request the user's authorization for location services if necessary.",
      "input": "import CoreLocation\n\nfunc getCurrentLocation(completion: @escaping (CLLocation?) -> Void) {\n}",
      "output": "import CoreLocation\n\nfunc getCurrentLocation(completion: @escaping (CLLocation?) -> Void) {\n    let locationManager = CLLocationManager()\n    locationManager.desiredAccuracy = kCLLocationAccuracyBest\n    \n    let authorizationStatus = CLLocationManager.authorizationStatus()\n    if authorizationStatus == .notDetermined {\n        locationManager.requestWhenInUseAuthorization()\n    }\n    \n    guard authorizationStatus == .authorizedWhenInUse || authorizationStatus == .authorizedAlways else {\n        completion(nil)\n        return\n    }\n    \n    locationManager.requestLocation()\n    locationManager.startUpdatingLocation()\n    \n    locationManager.didUpdateLocations = { locations in\n        locationManager.stopUpdatingLocation()\n        completion(locations.first)\n    }\n    \n    locationManager.didFailWithError = { error in\n        print(\"Error retrieving location: \\(error.localizedDescription)\")\n        completion(nil)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to asynchronously download an image from a URL and set it as the background image of a UIButton",
      "input": "",
      "output": "import UIKit\n\nextension UIButton {\n    func setBackgroundImageFromURL(url: URL, placeholderImage: UIImage? = nil, completion: ((Result<UIImage, Error>) -> Void)? = nil) {\n        if let placeholderImage = placeholderImage {\n            setBackgroundImage(placeholderImage, for: .normal)\n        }\n\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            DispatchQueue.main.async {\n                if let error = error {\n                    completion?(.failure(error))\n                    return\n                }\n\n                if let data = data, let image = UIImage(data: data) {\n                    self.setBackgroundImage(image, for: .normal)\n                    completion?(.success(image))\n                } else {\n                    completion?(.failure(NSError(domain: \"ImageDownloadError\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"Unable to download image\"])))\n                }\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UITableViewCell with a left-aligned UILabel and a right-aligned UISwitch",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n\n    let label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    let toggleSwitch: UISwitch = {\n        let toggleSwitch = UISwitch()\n        toggleSwitch.translatesAutoresizingMaskIntoConstraints = false\n        return toggleSwitch\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupCell()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupCell()\n    }\n    \n    private func setupCell() {\n        contentView.addSubview(label)\n        contentView.addSubview(toggleSwitch)\n        \n        NSLayoutConstraint.activate([\n            label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            label.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            \n            toggleSwitch.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\n            toggleSwitch.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to present a UIAlertController with an action sheet style, containing options to share content via email, message, or cancel",
      "input": "",
      "output": "import UIKit\n\nfunc presentShareActionSheet(from viewController: UIViewController) {\n    let alertController = UIAlertController(title: \"Share\", message: \"Choose a method to share\", preferredStyle: .actionSheet)\n\n    let emailAction = UIAlertAction(title: \"Email\", style: .default) { _ in\n        // Implement email sharing functionality\n    }\n\n    let messageAction = UIAlertAction(title: \"Message\", style: .default) { _ in\n        // Implement message sharing functionality\n    }\n\n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n\n    alertController.addAction(emailAction)\n    alertController.addAction(messageAction)\n    alertController.addAction(cancelAction)\n\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UICollectionView with a custom UICollectionViewCell and a specified number of items in a section",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // Custom UICollectionViewCell implementation\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n    private let numberOfItemsInSection: Int\n\n    init(numberOfItemsInSection: Int) {\n        self.numberOfItemsInSection = numberOfItemsInSection\n        let layout = UICollectionViewFlowLayout()\n        super.init(collectionViewLayout: layout)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n        collectionView.backgroundColor = .white\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return numberOfItemsInSection\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        // Configure the custom cell\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to fetch JSON data from a given URL and decode it into a specified Codable model using Combine",
      "input": "",
      "output": "import Foundation\nimport Combine\n\nstruct ExampleModel: Codable {\n    let id: Int\n    let name: String\n    // Other properties\n}\n\nfunc fetchJSONData<T: Codable>(from url: URL, model: T.Type) -> AnyPublisher<T, Error> {\n    return URLSession.shared.dataTaskPublisher(for: url)\n        .tryMap { data, response -> Data in            guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {\n                throw URLError(.badServerResponse)\n            }\n            return data\n        }\n        .decode(type: T.self, decoder: JSONDecoder())\n        .receive(on: DispatchQueue.main)\n        .eraseToAnyPublisher()\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UIPageViewController with an array of view controllers and allow looping through the pages",
      "input": "",
      "output": "import UIKit\n\nclass LoopingPageViewController: UIPageViewController, UIPageViewControllerDataSource, UIPageViewControllerDelegate {\n    private var viewControllersList: [UIViewController] = []\n\n    init(viewControllersList: [UIViewController]) {\n        self.viewControllersList = viewControllersList\n        super.init(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.dataSource = self\n        self.delegate = self\n\n        if let firstViewController = viewControllersList.first {\n            setViewControllers([firstViewController], direction: .forward, animated: true, completion: nil)\n        }\n    }\n\n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n        guard let currentIndex = viewControllersList.firstIndex(of: viewController) else { return nil }\n        let previousIndex = (currentIndex - 1 + viewControllersList.count) % viewControllersList.count\n        return viewControllersList[previousIndex]\n    }\n\n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {\n        guard let currentIndex = viewControllersList.firstIndex(of: viewController) else { return nil }\n        let nextIndex = (currentIndex + 1) % viewControllersList.count\n        return viewControllersList[nextIndex]\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UISearchBar with a specified placeholder text and a clear button",
      "input": "",
      "output": "import UIKit\n\nclass CustomSearchBar: UISearchBar {\n\n    init(placeholderText: String) {\n        super.init(frame: .zero)\n        self.placeholder = placeholderText\n        self.showsCancelButton = true\n        self.showsSearchResultsButton = false\n        self.translatesAutoresizingMaskIntoConstraints = false\n        self.barStyle = .default\n        self.autocapitalizationType = .none\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        if let textField = self.value(forKey: \"searchField\") as? UITextField {\n            textField.clearButtonMode = .whileEditing\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIView that contains a UILabel and a UITextField arranged vertically in a UIStackView",
      "input": "",
      "output": "import UIKit\n\nclass CustomLabelAndTextFieldView: UIView {\n\n    let label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    let textField: UITextField = {\n        let textField = UITextField()\n        textField.borderStyle = .roundedRect\n        textField.translatesAutoresizingMaskIntoConstraints = false\n        return textField\n    }()\n\n    init(labelText: String, textFieldPlaceholder: String) {\n        super.init(frame: .zero)\n        label.text = labelText\n        textField.placeholder = textFieldPlaceholder\n        setupView()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n\n    private func setupView() {\n        let stackView = UIStackView(arrangedSubviews: [label, textField])\n        stackView.axis = .vertical\n        stackView.spacing = 8\n        stackView.translatesAutoresizingMaskIntoConstraints = false\n        addSubview(stackView)\n\n        NSLayoutConstraint.activate([\n            stackView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            stackView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            stackView.topAnchor.constraint(equalTo: topAnchor),\n            stackView.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that asynchronously downloads an image from a URL and sets it as the background of a UIButton",
      "input": "",
      "output": "import UIKit\n\nextension UIButton {\n    func setBackgroundImageAsync(from url: URL, forState state: UIControl.State) {\n        DispatchQueue.global().async { [weak self] in\n            guard let data = try? Data(contentsOf: url),\n                  let image = UIImage(data: data) else {\n                return\n            }\n            DispatchQueue.main.async {\n                self?.setBackgroundImage(image, for: state)\n            }\n        }\n    }\n}\n\n// Usage\nlet button = UIButton()\nif let imageURL = URL(string: \"https://example.com/image.png\") {\n    button.setBackgroundImageAsync(from: imageURL, forState: .normal)\n}"
    },
    {
      "instruction": "Write a Swift function that creates a UIAlertController with a datePicker and a callback for when the date is selected",
      "input": "",
      "output": "import UIKit\n\nfunc presentDatePickerAlertController(title: String, message: String, completion: @escaping (Date) -> Void) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .actionSheet)\n    let datePicker = UIDatePicker()\n    datePicker.datePickerMode = .date\n    alertController.view.addSubview(datePicker)\n    \n    let okAction = UIAlertAction(title: \"OK\", style: .default) { _ in\n        completion(datePicker.date)\n    }\n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel)\n    \n    alertController.addAction(okAction)\n    alertController.addAction(cancelAction)\n    \n    NSLayoutConstraint.activate([\n        datePicker.centerXAnchor.constraint(equalTo: alertController.view.centerXAnchor),\n        datePicker.topAnchor.constraint(equalTo: alertController.view.topAnchor, constant: 20)\n    ])\n    \n    present(alertController, animated: true)\n}\n\n// Usage\npresentDatePickerAlertController(title: \"Select Date\", message: \"Choose a date from the picker below\") { selectedDate in\n    print(\"Selected Date: \\(selectedDate)\")\n}"
    },
    {
      "instruction": "Write a Swift function that displays an alert with a text field to input a username and a \"Save\" button to save the username.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    @objc func displayAlert() {\n        let alertController = UIAlertController(title: \"Enter Username\", message: \"Please input your username:\", preferredStyle: .alert)\n        \n        alertController.addTextField { (textField) in\n            textField.placeholder = \"Username\"\n        }\n        \n        let saveAction = UIAlertAction(title: \"Save\", style: .default) { [weak alertController] _ in\n            guard let alertController = alertController, let textField = alertController.textFields?.first else { return }\n            let username = textField.text\n            \n            // Save the username or perform any necessary action\n            print(\"Username: \\(username ?? \"No username entered\")\")\n        }\n        \n        alertController.addAction(saveAction)\n        alertController.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n        \n        self.present(alertController, animated: true, completion: nil)\n    }\n}\n// Call displayAlert() function when needed, such as in response to a button tap"
    },
    {
      "instruction": " \nWrite a Swift function that plays an audio file from a given URL when a button is clicked.",
      "input": "",
      "output": "import AVFoundation\nimport UIKit\n\nclass ViewController: UIViewController, AVAudioPlayerDelegate {\n    var audioPlayer: AVAudioPlayer?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    @objc func playAudio() {\n        let audioUrl = \"https://example.com/audiofile.mp3\"\n        guard let url = URL(string: audioUrl) else { return }\n        \n        do {\n            let data = try Data(contentsOf: url)\n            try AVAudioSession.sharedInstance().setCategory(.playback)\n            try AVAudioSession.sharedInstance().setActive(true)\n            \n            audioPlayer = try AVAudioPlayer(data: data)\n            audioPlayer?.delegate = self\n            audioPlayer?.prepareToPlay()\n            audioPlayer?.play()\n        } catch {\n            print(\"Error playing audio: \\(error.localizedDescription)\")\n        }\n    }\n}\n// Add a UIButton and addTarget to call playAudio() function when the button is tapped"
    },
    {
      "instruction": " \nWrite a Swift function that fetches and parses a JSON file from a given URL, and then prints the result.",
      "input": "",
      "output": "import Foundation\nimport UIKit\n\nstruct ExampleData: Codable {\n    let id: Int\n    let title: String\n}\n\nclass ViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    func fetchAndParseJSON() {\n        let urlString = \"https://api.example.com/data\"\n        guard let url = URL(string: urlString) else { return }\n        \n        let task = URLSession.shared.dataTask(with: url) { data, response, error in\n            guard let data = data, error == nil else {\n                print(\"Error fetching data: \\(error?.localizedDescription ?? \"Unknown error\")\")\n                return\n            }\n            \n            do {\n                let decodedData = try JSONDecoder().decode([ExampleData].self, from: data)\n                print(decodedData)\n            } catch {\n                print(\"Error decoding data: \\(error.localizedDescription)\")\n            }\n        }\n        \n        task.resume()\n    }\n}\n// Call fetchAndParseJSON() function when needed, such as in viewDidLoad() or in response to a button tap"
    },
    {
      "instruction": " \nWrite a Swift function that captures a photo using the device's camera and displays the captured image in a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n    let imageView = UIImageView()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Configure the imageView and add it to the view\n    }\n    \n    @objc func capturePhoto() {\n        if UIImagePickerController.isSourceTypeAvailable(.camera) {\n            let imagePicker = UIImagePickerController()\n            imagePicker.delegate = self\n            imagePicker.sourceType = .camera\n            imagePicker.allowsEditing = false\n            self.present(imagePicker, animated: true, completion: nil)\n        } else {\n            print(\"Camera not available\")\n        }\n    }\n    \n    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {\n        if let pickedImage = info[.originalImage] as? UIImage {\n            imageView.contentMode = .scaleAspectFit\n            imageView.image = pickedImage\n        }\n        \n        dismiss(animated: true, completion: nil)\n    }\n}\n// Add a UIButton and addTarget to call capturePhoto() function when the button is tapped"
    },
    {
      "instruction": " \nWrite a Swift function that animates a UIViewto move from its current position to a specified CGPoint, with a given duration and delay.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    let animatedView = UIView()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Configure the animatedView and add it to the view\n    }\n    \n    func animateView(to position: CGPoint, duration: TimeInterval, delay: TimeInterval) {\n        UIView.animate(withDuration: duration, delay: delay, options: .curveEaseInOut) {\n            self.animatedView.frame.origin = position\n        } completion: { _ in\n            print(\"Animation completed\")\n        }\n    }\n}\n// Call animateView(to:duration:delay:) function when needed, such as in response to a button tap\n// Example usage: animateView(to: CGPoint(x: 50, y: 100), duration: 1.0, delay: 0)"
    },
    {
      "instruction": " \nWrite a Swift function that adds a custom annotation to a MKMapView at a specified CLLocationCoordinate2D.",
      "input": "",
      "output": "import MapKit\nimport UIKit\n\nclass CustomAnnotation: NSObject, MKAnnotation {\n    var coordinate: CLLocationCoordinate2D\n    var title: String?\n    \n    init(coordinate: CLLocationCoordinate2D, title: String?) {\n        self.coordinate = coordinate\n        self.title = title\n    }\n}\n\nclass ViewController: UIViewController, MKMapViewDelegate {\n    let mapView = MKMapView()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        mapView.delegate = self\n        // Configure the mapView and add it to the view\n    }\n    \n    func addCustomAnnotation(at coordinate: CLLocationCoordinate2D, title: String?) {\n        let annotation = CustomAnnotation(coordinate: coordinate, title: title)\n        mapView.addAnnotation(annotation)\n    }\n}\n// Call addCustomAnnotation(at:title:) function when needed, such as in viewDidLoad() or in response to a button tap\n// Example usage: addCustomAnnotation(at: CLLocationCoordinate2D(latitude: 37.7749, longitude: -122.4194), title: \"San Francisco\")"
    },
    {
      "instruction": " \nWrite a Swift function that saves an image to the device's photo library and displays a success or error message.",
      "input": "",
      "output": "import Photos\nimport UIKit\n\nclass ViewController: UIViewController {\n    \n    let imageView = UIImageView()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Configure the imageView and add it to the view\n    }\n    \n    @objc func saveImageToPhotoLibrary() {\n        guard let image = imageView.image else {\n            print(\"No image to save\")\n            return\n        }\n        \n        PHPhotoLibrary.shared().performChanges({\n            PHAssetChangeRequest.creationRequestForAsset(from: image)\n        }, completionHandler: { success, error in\n            DispatchQueue.main.async {\n                if success {\n                    print(\"Image saved to photo library\")\n                } else {\n                    print(\"Error saving image: \\(error?.localizedDescription ?? \"Unknown error\")\")\n                }\n            }\n        })\n    }\n}\n// Add a UIButton and addTarget to call saveImageToPhotoLibrary() function when the button is tapped"
    },
    {
      "instruction": " \nWrite a Swift function that observes the device's battery level and logs it to the console when it changes.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        observeBatteryLevelChanges()\n    }\n    \n    func observeBatteryLevelChanges() {\n        UIDevice.current.isBatteryMonitoringEnabled = true\n        NotificationCenter.default.addObserver(self, selector: #selector(batteryLevelDidChange), name: UIDevice.batteryLevelDidChangeNotification, object: nil)\n    }\n    \n    @objc func batteryLevelDidChange(_ notification: Notification) {\n        let batteryLevel = UIDevice.current.batteryLevel\n        print(\"Battery level changed: \\(batteryLevel * 100)%\")\n    }\n    \n    deinit {\n        NotificationCenter.default.removeObserver(self, name: UIDevice.batteryLevelDidChangeNotification, object: nil)\n    }\n}\n// The function will automatically start observing battery level changes when the view controller is loaded"
    },
    {
      "instruction": "Write a Swift function that handles a user tapping a button to send a message and updates the UI accordingly.",
      "input": "",
      "output": "import UIKit\n\nclass MessageViewController: UIViewController {\n\n    @IBOutlet weak var messageTextField: UITextField!\n    @IBOutlet weak var tableView: UITableView!\n    \n    var messages: [String] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n    }\n    \n    @IBAction func sendMessageButtonTapped(_ sender: UIButton) {\n        guard let message = messageTextField.text, !message.isEmpty else { return }\n        messages.append(message)\n        tableView.reloadData()\n        messageTextField.text = \"\"\n    }\n}\n\nextension MessageViewController: UITableViewDataSource {\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return messages.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"MessageCell\", for: indexPath)\n        cell.textLabel?.text = messages[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that fetches user's current location and displays it on a map within the app.",
      "input": "",
      "output": "import UIKit\nimport MapKit\nimport CoreLocation\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n    \n    @IBOutlet weak var mapView: MKMapView!\n    \n    let locationManager = CLLocationManager()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            let center = CLLocationCoordinate2D(latitude: location.coordinate.latitude, longitude: location.coordinate.longitude)\n            let region = MKCoordinateRegion(center: center, latitudinalMeters: 1000, longitudinalMeters: 1000)\n            mapView.setRegion(region, animated: true)\n            locationManager.stopUpdatingLocation()\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error fetching location: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that authenticates a user using their email and password with Firebase.",
      "input": "",
      "output": "import UIKit\nimport FirebaseAuth\n\nclass LoginViewController: UIViewController {\n\n    @IBOutlet weak var emailTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n    \n    @IBAction func loginButtonTapped(_ sender: UIButton) {\n        guard let email = emailTextField.text, let password = passwordTextField.text else { return }\n        \n        Auth.auth().signIn(withEmail: email, password: password) { [weak self] result, error in\n            if let error = error {\n                print(\"Error logging in: \\(error)\")\n            } else {\n                self?.performSegue(withIdentifier: \"LoggedInSegue\", sender: nil)\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that allows the user to select an image from their photo library and display it in an UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass ImagePickerViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n\n    @IBOutlet weak var imageView: UIImageView!\n    \n    @IBAction func selectImageButtonTapped(_ sender: UIButton) {\n        let imagePickerController = UIImagePickerController()\n        imagePickerController.delegate = self\n        imagePickerController.sourceType = .photoLibrary\n        present(imagePickerController, animated: true, completion: nil)\n    }\n    \n    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {\n        if let selectedImage = info[.originalImage] as? UIImage {\n            imageView.image = selectedImage\n        }\n        dismiss(animated: true, completion: nil)\n    }\n    \n    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {\n        dismiss(animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that uses Core Data to save and fetch notes in a note-taking app.",
      "input": "",
      "output": "import UIKit\nimport CoreData\n\nclass NotesViewController: UIViewController, UITableViewDataSource {\n\n    @IBOutlet weak var tableView: UITableView!\n    \n    var notes: [NSManagedObject] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        fetchNotes()\n    }\n    \n    func fetchNotes() {\n        guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else { return }\n        let managedContext = appDelegate.persistentContainer.viewContext\n        let fetchRequest = NSFetchRequest<NSManagedObject>(entityName: \"Note\")\n        \n        do {\n            notes = try managedContext.fetch(fetchRequest)\n            tableView.reloadData()\n       } catch let error as NSError {\n            print(\"Error fetching notes: \\(error), \\(error.userInfo)\")\n        }\n    }\n    \n    @IBAction func addNoteButtonTapped(_ sender: UIBarButtonItem) {\n        let alertController = UIAlertController(title: \"New Note\", message: \"Enter a note\", preferredStyle: .alert)\n        alertController.addTextField()\n        let saveAction = UIAlertAction(title: \"Save\", style: .default) { [unowned self] action in\n            guard let textField = alertController.textFields?.first, let noteText = textField.text else { return }\n            self.save(noteText: noteText)\n        }\n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel)\n        \n        alertController.addAction(saveAction)\n        alertController.addAction(cancelAction)\n        present(alertController, animated: true)\n    }\n    \n    func save(noteText: String) {\n        guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else { return }\n        let managedContext = appDelegate.persistentContainer.viewContext\n        let entity = NSEntityDescription.entity(forEntityName: \"Note\", in: managedContext)!\n        let note = NSManagedObject(entity: entity, insertInto: managedContext)\n        \n        note.setValue(noteText, forKey: \"text\")\n        \n        do {\n            try managedContext.save()\n            notes.append(note)\n            tableView.reloadData()\n        } catch let error as NSError {\n            print(\"Error saving note: \\(error), \\(error.userInfo)\")\n        }\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return notes.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"NoteCell\", for: indexPath)\n        let note = notes[indexPath.row]\n        cell.textLabel?.text = note.value(forKey: \"text\") as? String\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that performs a search on a UITableView by filtering its data source based on user input.",
      "input": "",
      "output": "import UIKit\n\nclass SearchViewController: UIViewController, UITableViewDataSource, UISearchBarDelegate {\n\n    @IBOutlet weak var searchBar: UISearchBar!\n    @IBOutlet weak var tableView: UITableView!\n    \n    let data: [String] = [\"Apple\", \"Banana\", \"Grape\", \"Orange\", \"Peach\", \"Strawberry\", \"Watermelon\"]\n    var filteredData: [String] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        searchBar.delegate = self\n        filteredData = data\n    }\n    \n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredData = data\n        } else {\n            filteredData = data.filter { $0.lowercased().contains(searchText.lowercased()) }\n        }\n        tableView.reloadData()\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredData.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"DataCell\", for: indexPath)\n        cell.textLabel?.text = filteredData[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that uses URLSession to make a GET request to a REST API and parses the JSON response.",
      "input": "",
      "output": "import UIKit\n\nclass APIViewController: UIViewController {\n\n    @IBOutlet weak var textView: UITextView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        fetchData()\n    }\n    \n    func fetchData() {\n        let url = URL(string: \"https://jsonplaceholder.typicode.com/posts\")!\n        \n        let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let error = error {\n                print(\"Error fetching data: \\(error)\")\n                return\n            }\n            \n            guard let data = data else {\n                print(\"Error: No data received\")\n                return\n            }\n            \n            do {\n                let json = try JSONSerialization.jsonObject(with: data, options: [])\n                if let jsonArray = json as? [[String: Any]] {\n                    DispatchQueue.main.async {\n                        self.textView.text = self.parse(jsonArray: jsonArray)\n                    }\n                }\n            } catch let error as NSError {\n                print(\"Error parsing JSON: \\(error)\")\n            }\n        }\n        \n        task.resume()\n    }\n    \n    func parse(jsonArray: [[String: Any]]) -> String {\n        var result = \"\"\n        \n        for json in jsonArray {\n            if let id = json[\"id\"] as? Int, let title = json[\"title\"] as? String {\n                result += \"ID: \\(id)\\nTitle: \\(title)\\n\\n\"\n            }\n        }\n        \n        return result\n    }\n}"
    },
    {
      "instruction": "Create a custom UICollectionViewCell subclass with an image and label for a shopping app.",
      "input": "",
      "output": "import UIKit\n\nclass ProductCollectionViewCell: UICollectionViewCell {\n\n    static let reuseIdentifier = \"ProductCollectionViewCell\"\n\n    private let productImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n\n    private let productNameLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textAlignment = .center\n        label.numberOfLines = 0\n        label.font = UIFont.systemFont(ofSize: 16)\n        return label\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupViews() {\n        addSubview(productImageView)\n        addSubview(productNameLabel)\n\n        NSLayoutConstraint.activate([\n            productImageView.topAnchor.constraint(equalTo: topAnchor),\n            productImageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            productImageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            productImageView.heightAnchor.constraint(equalToConstant: 150),\n\n            productNameLabel.topAnchor.constraint(equalTo: productImageView.bottomAnchor, constant: 8),\n            productNameLabel.leadingAnchor.constraint(equalTo: leadingAnchor),\n            productNameLabel.trailingAnchor.constraint(equalTo: trailingAnchor),\n            productNameLabel.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n\n    func configure(with product: Product) {\n        productImageView.image = UIImage(named: product.imageName)\n        productNameLabel.text = product.name\n    }\n}"
    },
    {
      "instruction": " \nImplement a custom UITableViewDelegate to handle row selection and present a new view controller.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController, UITableViewDelegate {\n\n    private let tableView = UITableView()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        tableView.delegate = self\n        // additional setup for the tableView\n    }\n\n    // MARK: - UITableViewDelegate\n\n    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        tableView.deselectRow(at: indexPath, animated: true)\n\n        let nextViewController = NextViewController()\n        navigationController?.pushViewController(nextViewController, animated: true)\n    }\n}\n\nclass NextViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n        title = \"Next View Controller\"\n    }\n}"
    },
    {
      "instruction": " \nImplement a UISearchBar with a UISearchController and show search results in a UICollectionView.",
      "input": "",
      "output": "import UIKit\n\nclass SearchViewController: UIViewController {\n\n    private var collectionView: UICollectionView!\n    private let searchController = UISearchController(searchResultsController: nil)\n    private var searchResults: [Product] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        setupSearchController()\n        setupCollectionView()\n    }\n\n    private func setupSearchController() {\n        searchController.searchResultsUpdater = self\n        searchController.obscuresBackgroundDuringPresentation = false\n        searchController.searchBar.placeholder = \"Search for products\"\n        navigationItem.searchController = searchController\n        definesPresentationContext = true\n    }\n\n    private func setupCollectionView() {\n        let layout = UICollectionViewFlowLayout()\n        collectionView = UICollectionView(frame: view.bounds, collectionViewLayout: layout)\n        collectionView.autoresizingMask = [.flexibleWidth, .flexibleHeight]\n        collectionView.backgroundColor = .white\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(ProductCollectionViewCell.self, forCellWithReuseIdentifier: ProductCollectionViewCell.reuseIdentifier)\n\n        view.addSubview(collectionView)\n    }\n}\n\n// MARK: - UICollectionViewDataSource\nextension SearchViewController: UICollectionViewDataSource {\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return searchResults.count\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: ProductCollectionViewCell.reuseIdentifier, for: indexPath) as! ProductCollectionViewCell\n        cell.configure(with: searchResults[indexPath.item])\n        return cell\n    }\n}\n\n// MARK: - UICollectionViewDelegateFlowLayout\nextension SearchViewController: UICollectionViewDelegateFlowLayout {\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        let width = (collectionView.frame.width - 20) / 2\n        return CGSize(width: width, height: width + 40)\n    }\n}\n\n// MARK: - UISearchResultsUpdating\nextension SearchViewController: UISearchResultsUpdating {\n    func updateSearchResults(for searchController: UISearchController) {\n        guard let searchText = searchController.searchBar.text, !searchText.isEmpty else {\n            searchResults = []\n            collectionView.reloadData()\n            return\n        }\n\n        searchResults = Product.searchProducts(query: searchText)\n        collectionView.reloadData()\n    }\n}"
    },
    {
      "instruction": "Using the comment as a guide, complete the following code.",
      "input": "class TableViewDataSource: NSObject, UITableViewDataSource {\n    var transactions: [Transaction] = []\n    \n    // TODO: Add your code here\n    \n}",
      "output": "class TableViewDataSource: NSObject, UITableViewDataSource {\n    var transactions: [Transaction] = []\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return transactions.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"TransactionCell\", for: indexPath) as! TransactionCell\n        let transaction = transactions[indexPath.row]\n        cell.configure(with: transaction)\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nUsing the comment as a guide, complete the following code.",
      "input": "class LoginViewController: UIViewController {\n    @IBOutlet weak var usernameTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n    \n    // TODO: Add your code here\n}",
      "output": "class LoginViewController: UIViewController {\n    @IBOutlet weak var usernameTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n    \n    @IBAction func loginButtonTapped(_ sender: UIButton) {\n        guard let username = usernameTextField.text, !username.isEmpty,\n              let password = passwordTextField.text, !password.isEmpty else {\n            showAlert(message: \"Please enter your username and password.\")\n            return\n        }\n        \n        loginUser(username: username, password: password)\n    }\n    \n    private func loginUser(username: String, password: String) {\n        // Implement your login logic here\n    }\n    \n    private func showAlert(message: String) {\n        let alertController = UIAlertController(title: \"Error\", message: message, preferredStyle: .alert)\n        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n        self.present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nUsing the comment as a guide, complete the following code.",
      "input": "class UserProfileViewController: UIViewController {\n    @IBOutlet weak var nameLabel: UILabel!\n    @IBOutlet weak var emailLabel: UILabel!\n    var user: User?\n    \n    // TODO: Add your code here\n}",
      "output": "class UserProfileViewController: UIViewController {\n    @IBOutlet weak var nameLabel: UILabel!\n    @IBOutlet weak var emailLabel: UILabel!\n    var user: User?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        if let user = user {\n            nameLabel.text = user.name\n            emailLabel.text = user.email\n        }\n    }\n}"
    },
    {
      "instruction": " \nUsing the comment as a guide, complete the following code.",
      "input": "class RegisterViewController: UIViewController {\n    @IBOutlet weak var usernameTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n    @IBOutlet weak var confirmPasswordTextField: UITextField!\n    \n    // TODO: Add your code here\n}",
      "output": "class RegisterViewController: UIViewController {\n    @IBOutlet weak var usernameTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n    @IBOutlet weak var confirmPasswordTextField: UITextField!\n    \n    @IBAction func registerButtonTapped(_ sender: UIButton) {\n        guard let username = usernameTextField.text, !username.isEmpty,\n              let password = passwordTextField.text, !password.isEmpty,\n              let confirmPassword = confirmPasswordTextField.text, !confirmPassword.isEmpty else {\n            showAlert(message: \"Please fill in all fields.\")\n            return\n        }\n        \n        if password != confirmPassword {\n            showAlert(message: \"Passwords do not match.\")\n            return\n        }\n        \n        registerUser(username: username, password: password)\n    }\n    \n    private func registerUser(username: String, password: String) {\n        // Implement your registration logic here\n    }\n    \n    private func showAlert(message: String) {\n        let alertController = UIAlertController(title: \"Error\", message: message, preferredStyle: .alert)\n        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n        self.present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nUsing the comment as a guide, complete the following code.",
      "input": "class PermissionsManager {\n    // TODO: Add your code here\n}",
      "output": "import UserNotifications\n\nclass PermissionsManager {\n    func requestNotificationPermission(completion: @escaping (Bool) -> Void) {\n        let center = UNUserNotificationCenter.current()\n        let options: UNAuthorizationOptions = [.alert, .sound, .badge]\n        \n        center.requestAuthorization(options: options) { granted, error in\n            if let error = error {\n                print(\"Error requesting notification permissions: \\(error)\")\n            }\n            completion(granted)\n        }\n    }\n}"
    },
    {
      "instruction": " \nUsing the comment as a guide, complete the following code.",
      "input": "class LocationManager: NSObject {\n    private let locationManager = CLLocationManager()\n    \n    // TODO: Add your code here\n}",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    private let locationManager = CLLocationManager()\n    \n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n    }\n    \n    func requestLocationPermission() {\n        locationManager.requestWhenInUseAuthorization()\n    }\n    \n    func startUpdatingLocation() {\n        locationManager.startUpdatingLocation()\n    }\n    \n    func stopUpdatingLocation() {\n        locationManager.stopUpdatingLocation()\n    }\n    \n    // CLLocationManagerDelegate\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            print(\"Current location: \\(location)\")\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error getting location: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " \nUsing the comment as a guide, complete the following code.",
      "input": "class SearchViewController: UIViewController {\n    @IBOutlet weak var searchBar: UISearchBar!\n    @IBOutlet weak var tableView: UITableView!\n    let dataSource = TableViewDataSource()\n    \n    // TODO: Add your code here\n}",
      "output": "class SearchViewController: UIViewController, UISearchBarDelegate {\n    @IBOutlet weak var searchBar: UISearchBar!\n    @IBOutlet weak var tableView: UITableView!\n    let dataSource = TableViewDataSource()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        searchBar.delegate = self\n        tableView.dataSource = dataSource\n    }\n    \n    // UISearchBarDelegate\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        dataSource.transactions = searchTransactions(query: searchText)\n        tableView.reloadData()\n    }\n    \n    private func searchTransactions(query: String) -> [Transaction] {\n        // Implement your search logic here\n        return []\n    }\n}"
    },
    {
      "instruction": " \nUsing the comment as a guide, complete the following code.",
      "input": "class SettingsViewController: UIViewController {\n    @IBOutlet weak var notificationsSwitch: UISwitch!\n    \n    // TODO: Add your code here\n}",
      "output": "class SettingsViewController: UIViewController {\n    @IBOutlet weak var notificationsSwitch: UISwitch!\n    private let permissionsManager = PermissionsManager()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        notificationsSwitch.setOn(UserDefaults.standard.bool(forKey: \"notificationsEnabled\"), animated: false)\n    }\n    \n    @IBAction func notificationsSwitchChanged(_ sender: UISwitch) {\n        let enabled = sender.isOn\n        UserDefaults.standard.set(enabled, forKey: \"notificationsEnabled\")\n        \n        if enabled {\n            permissionsManager.requestNotificationPermission { granted in\n                if !granted {\n                    DispatchQueue.main.async {\n                        sender.setOn(false, animated: true)\n                        UserDefaults.standard.set(false, forKey: \"notificationsEnabled\")\n                    }\n                }\n            }\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that sets up a UITableView and registers a custom UITableViewCell",
      "input": "",
      "output": "class CustomTableViewCell: UITableViewCell {\n    // Add custom UI elements and configure the cell\n}\n\nfunc setupTableView() {\n    let tableView = UITableView()\n    tableView.translatesAutoresizingMaskIntoConstraints = false\n    tableView.dataSource = self\n    tableView.delegate = self\n    tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomCell\")\n    view.addSubview(tableView)\n    \n    // Add constraints to position the table view\n    NSLayoutConstraint.activate([\n        tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n        tableView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),\n        tableView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n        tableView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor)\n    ])\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UICollectionView with a custom UICollectionViewCell",
      "input": "",
      "output": "class CustomCollectionViewCell: UICollectionViewCell {\n    // Add custom UI elements and configure the cell\n}\n\nfunc setupCollectionView() {\n    let layout = UICollectionViewFlowLayout()\n    layout.itemSize = CGSize(width: 100, height: 100)\n    layout.sectionInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)\n\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    collectionView.dataSource = self\n    collectionView.delegate = self\n    collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n    view.addSubview(collectionView)\n    \n    // Add constraints to position the collection view\n    NSLayoutConstraint.activate([\n        collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n        collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),\n        collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n        collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor)\n    ])\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIPickerView and implement its delegate and data source methods",
      "input": "",
      "output": "class ViewController: UIViewController, UIPickerViewDelegate, UIPickerViewDataSource {\n    let pickerView = UIPickerView()\n    let data = [\"Option 1\", \"Option 2\", \"Option 3\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupPickerView()\n    }\n\n    func setupPickerView() {\n        pickerView.translatesAutoresizingMaskIntoConstraints = false\n        pickerView.delegate = self\n        pickerView.dataSource = self\n        view.addSubview(pickerView)\n        \n        // Add constraints to position the picker view\n        NSLayoutConstraint.activate([\n            pickerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            pickerView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n    \n    // UIPickerViewDataSource methods\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return data.count\n    }\n    \n    // UIPickerViewDelegate methods\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return data[row]\n    }\n\n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        print(\"Selected option: \\(data[row])\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to make a network request using URLSession and decode the JSON response",
      "input": "",
      "output": "struct ApiResponse: Codable {\n    let result: String\n}\n\nfunc makeNetworkRequest() {\n    guard let url = URL(string: \"https://api.example.com/data\") else { return }\n\n    let task = URLSession.shared.dataTask(with: url) { (data, _, error) in\n        guard let data = data, error == nil else {\n            print(\"Error: \\(error?.localizedDescription ?? \"Unknown error\")\")\n            return\n        }\n\n        do {\n            let decodedData = try JSONDecoder().decode(ApiResponse.self, from: data)\n            print(\"Result: \\(decodedData.result)\")\n        } catch {\n            print(\"Error decoding JSON: \\(error.localizedDescription)\")\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function to save and retrieve data using UserDefaults",
      "input": "",
      "output": "func saveDataToUserDefaults(key: String, value: String) {\n    UserDefaults.standard.set(value, forKey: key)\n}\n\nfunc retrieveDataFromUserDefaults(key: String) -> String? {\n    return UserDefaults.standard.string(forKey: key)\n}\n\n// Usage:\nsaveDataToUserDefaults(key: \"username\", value: \"JohnDoe\")\nif let username = retrieveDataFromUserDefaults(key: \"username\") {\n    print(\"Username: \\(username)\")\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and present a UIAlertController with a single button",
      "input": "",
      "output": "func showAlert(title: String, message: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let okAction = UIAlertAction(title: \"OK\", style: .default, handler: nil)\n    alertController.addAction(okAction)\n    present(alertController, animated: true, completion: nil)\n}\n\n// Usage:\nshowAlert(title: \"Error\", message: \"An error occurred while processing your request.\")"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UISlider with a specified range and value",
      "input": "",
      "output": "func createSlider(minValue: Float, maxValue: Float, currentValue: Float) -> UISlider {\n    let slider = UISlider()\n    slider.minimumValue = minValue\n    slider.maximumValue = maxValue\n    slider.value = currentValue\n    slider.translatesAutoresizingMaskIntoConstraints = false\n    return slider\n}\n\n// Usage:\nlet slider = createSlider(minValue: 0, maxValue: 100, currentValue: 50)\nview.addSubview(slider)\n\n// Add constraints to position the slider\nNSLayoutConstraint.activate([\n    slider.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n    slider.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n])"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UIStackView with an array of UIViews",
      "input": "",
      "output": "func createStackView(subviews: [UIView], axis: NSLayoutConstraint.Axis, spacing: CGFloat) -> UIStackView {\n    let stackView = UIStackView(arrangedSubviews: subviews)\n    stackView.axis = axis\n    stackView.spacing = spacing\n    stackView.alignment = .fill\n    stackView.distribution = .fillEqually\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    return stackView\n}\n\n// Usage:\nlet button1 = UIButton(type: .system)\nbutton1.setTitle(\"Button 1\", for: .normal)\n\nlet button2 = UIButton(type: .system)\nbutton2.setTitle(\"Button 2\", for: .normal)\n\nlet stackView = createStackView(subviews: [button1, button2], axis: .vertical, spacing: 10)\nview.addSubview(stackView)\n\n// Add constraints to position the stack view\nNSLayoutConstraint.activate([\n    stackView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n    stackView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n])"
    },
    {
      "instruction": "Write a Swift function that fetches an image from a URL and sets it as the background of a UIButton.",
      "input": "",
      "output": "import UIKit\n\nfunc setBackgroundImageFromURL(for button: UIButton, withURL url: URL) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil else { return }\n        DispatchQueue.main.async {\n            if let image = UIImage(data: data) {\n                button.setBackgroundImage(image, for: .normal)\n            }\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that handles the user's location update in a CLLocationManagerDelegate.",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationHandler: NSObject, CLLocationManagerDelegate {\n    var locationManager: CLLocationManager\n\n    init(locationManager: CLLocationManager) {\n        self.locationManager = locationManager\n        super.init()\n        self.locationManager.delegate = self\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        guard let mostRecentLocation = locations.last else { return }\n        print(\"Updated location: \\(mostRecentLocation)\")\n        // TODO: Handle the location update as required\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that asynchronously downloads a JSON from a given URL and parses it into a specified Swift type.",
      "input": "",
      "output": "import Foundation\n\nfunc downloadJSON<T: Decodable>(from url: URL, responseType: T.Type, completion: @escaping (Result<T, Error>) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data\", code: 0, userInfo: nil)))\n            return\n        }\n\n        do {\n            let decodedObject = try JSONDecoder().decode(responseType, from: data)\n            completion(.success(decodedObject))\n        } catch {\n            completion(.failure(error))\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that saves an image to the user's photo library and handles the result.",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToPhotoLibrary(_ image: UIImage, completion: @escaping (Result<Void, Error>) -> Void) {\n    PHPhotoLibrary.shared().performChanges({\n        PHAssetChangeRequest.creationRequestForAsset(from: image)\n    }) { success, error in\n        DispatchQueue.main.async {\n            if success {\n                completion(.success(()))\n            } else if let error = error {\n                completion(.failure(error))\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that retrieves the user's contacts and filters them by a given search term.",
      "input": "",
      "output": "import Contacts\n\nfunc fetchContacts(matching searchTerm: String, completion: @escaping (Result<[CNContact], Error>) -> Void) {\n    let contactStore = CNContactStore()\n    let keysToFetch = [CNContactGivenNameKey, CNContactFamilyNameKey] as [CNKeyDescriptor]\n    let predicate = CNContact.predicateForContacts(matchingName: searchTerm)\n    \n    do {\n        let contacts = try contactStore.unifiedContacts(matching: predicate, keysToFetch: keysToFetch)\n        completion(.success(contacts))\n    } catch {\n        completion(.failure(error))\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that detects when the user's device is shaken using a motion event.",
      "input": "",
      "output": "import UIKit\n\nclass ShakeDetectionViewController: UIViewController {\n    override func motionEnded(_ motion: UIEvent.EventSubtype, with event: UIEvent?) {\n        if motion == .motionShake {\n            print(\"Device shaken\")\n            // TODO: Handle the shake event as required\n        }\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that animates the scaling of a UIView with a completion handler.",
      "input": "",
      "output": "import UIKit\n\nfunc animateScaling(of view: UIView, scaleFactor: CGFloat, duration: TimeInterval, completion: @escaping () -> Void) {\n    UIView.animate(withDuration: duration, animations: {\n        view.transform = CGAffineTransform(scaleX: scaleFactor, y: scaleFactor)\n    }) { _ in\n        completion()\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that calculates the time difference between two dates in a human-readable format.",
      "input": "",
      "output": "import Foundation\n\nfunc timeDifference(from startDate: Date, to endDate: Date)-> String {\n    let components = Calendar.current.dateComponents([.year, .month, .day, .hour, .minute, .second], from: startDate, to: endDate)\n\n    let formatter = DateComponentsFormatter()\n    formatter.unitsStyle = .full\n    formatter.allowedUnits = [.year, .month, .day, .hour, .minute, .second]\n    formatter.maximumUnitCount = 2\n\n    guard let formattedString = formatter.string(from: components) else {\n        return \"Invalid time difference\"\n    }\n\n    return formattedString\n}"
    },
    {
      "instruction": "Create a Swift function that takes a UIImage, applies a Core Image filter, and returns the filtered image",
      "input": "",
      "output": "import UIKit\nimport CoreImage\n\nfunc applyFilter(to image: UIImage, filterName: String) -> UIImage? {\n    guard let ciImage = CIImage(image: image),\n          let filter = CIFilter(name: filterName) else { return nil }\n    \n    filter.setValue(ciImage, forKey: kCIInputImageKey)\n    \n    guard let outputImage = filter.outputImage,\n          let cgImage = CIContext().createCGImage(outputImage, from: outputImage.extent) else { return nil }\n    \n    return UIImage(cgImage: cgImage)\n}"
    },
    {
      "instruction": " \nCreate a Swift function that detects faces in a UIImage using Vision framework",
      "input": "",
      "output": "import UIKit\nimport Vision\n\nfunc detectFaces(in image: UIImage, completion: @escaping ([VNFaceObservation]) -> Void) {\n    guard let cgImage = image.cgImage else {\n        completion([])\n        return\n    }\n    \n    let request = VNDetectFaceRectanglesRequest { request, error in\n        guard let observations = request.results as? [VNFaceObservation] else {\n            completion([])\n            return\n        }\n        completion(observations)\n    }\n    \n    let handler = VNImageRequestHandler(cgImage: cgImage, options: [:])\n    do {\n        try handler.perform([request])\n    } catch {\n        print(\"Failed to perform face detection: \\(error)\")\n        completion([])\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function that downloads an image from a URL and caches it using NSCache",
      "input": "",
      "output": "import UIKit\n\nclass ImageCache {\n    private let imageCache = NSCache<NSURL, UIImage>()\n\n    func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n        if let cachedImage = imageCache.object(forKey: url as NSURL) {\n            completion(cachedImage)\n            return\n        }\n\n        let task = URLSession.shared.dataTask(with: url) { [weak self] data, response, error in\n            guard let data = data, let image = UIImage(data: data), error == nil else {\n                completion(nil)\n                return\n            }\n\n            self?.imageCache.setObject(image, forKey: url as NSURL)\n            completion(image)\n        }\n        task.resume()\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function that saves and retrieves user settings using UserDefaults",
      "input": "",
      "output": "import Foundation\n\nstruct Settings {\n    private enum Keys: String {\n        case username\n        case email\n    }\n\n    static var username: String? {\n        get {\n            return UserDefaults.standard.string(forKey: Keys.username.rawValue)\n        }\n        set {\n            UserDefaults.standard.set(newValue, forKey: Keys.username.rawValue)\n        }\n    }\n\n    static var email: String? {\n        get {\n            return UserDefaults.standard.string(forKey: Keys.email.rawValue)\n        }\n        set {\n            UserDefaults.standard.set(newValue, forKey: Keys.email.rawValue)\n        }\n    }\n}"
    },
    {
      "instruction": " \n \nCreate a Swift function that authenticates a user using Firebase Authentication",
      "input": "",
      "output": "import FirebaseAuth\n\nfunc authenticateUser(email: String, password: String, completion: @escaping (Result<User, Error>) -> Void) {\n    Auth.auth().signIn(withEmail: email, password: password) { authResult, error in\n        if let user = authResult?.user {\n            completion(.success(user))\n        } else if let error = error {\n            completion(.failure(error))\n        } else {\n            completion(.failure(NSError(domain: \"AuthenticationError\", code: -1, userInfo: nil)))\n        }\n    }\n}"
    },
    {
      "instruction": " \n \nCreate a Swift function that sends a push notification using Firebase Cloud Messaging",
      "input": "",
      "output": "import FirebaseMessaging\n\nfunc sendPushNotification(to token: String, title: String, body: String, completion: @escaping (Error?) -> Void) {\n    let message: [String: Any] = [\n        \"to\": token,\n        \"notification\": [\n            \"title\": title,\n            \"body\": body\n        ]\n    ]\n\n    var request = URLRequest(url: URL(string: \"https://fcm.googleapis.com/fcm/send\")!)\n    request.httpMethod = \"POST\"\n    request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n    request.setValue(\"key=\\(ServerKey)\", forHTTPHeaderField: \"Authorization\")\n    request.httpBody = try? JSONSerialization.data(withJSONObject: message, options: .prettyPrinted)\n\n    let task = URLSession.shared.dataTask(with: request) { data, response, error in\n        completion(error)\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " \n \nCreate a Swift function that fetches userlocation using CoreLocation and returns CLLocationCoordinate2D",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    private let locationManager = CLLocationManager()\n    private var locationCallback: ((CLLocationCoordinate2D?) -> Void)?\n\n    func fetchUserLocation(completion: @escaping (CLLocationCoordinate2D?) -> Void) {\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n        locationCallback = completion\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            locationManager.stopUpdatingLocation()\n            locationCallback?(location.coordinate)\n            locationManager.delegate = nil\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        locationManager.stopUpdatingLocation()\n        locationCallback?(nil)\n        locationManager.delegate = nil\n    }\n}"
    },
    {
      "instruction": " \n \nCreate a Swift function that downloads and parses JSON data from an API using Codable and URLSession",
      "input": "",
      "output": "import Foundation\n\nstruct ApiResponse: Codable {\n    let data: [String]\n}\n\nfunc downloadAndParseJson(url: URL, completion: @escaping (Result<[String], Error>) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else {\n            completion(.failure(NSError(domain: \"DataError\", code: -1, userInfo: nil)))\n            return\n        }\n\n        do {\n            let decoder = JSONDecoder()\n            let response = try decoder.decode(ApiResponse.self, from: data)\n            completion(.success(response.data))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": "Write a Swift function that asynchronously downloads an image from a URL and sets it as the image of a UIImageView in a UITableViewCell.",
      "input": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var thumbnailImageView: UIImageView!\n    \n    func configure(with url: URL) {\n        downloadImage(from: url)\n    }\n    \n    // other code\n}",
      "output": "import UIKit\n\nextension CustomTableViewCell {\n    private func downloadImage(from url: URL) {\n        URLSession.shared.dataTask(with: url) { [weak self] data, response, error in\n            guard let self = self, let data = data, let image = UIImage(data: data), error == nil else { return }\n            \n            DispatchQueue.main.async {\n                self.thumbnailImageView.image = image\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UIButton with a gradient background and rounded corners.",
      "input": "",
      "output": "import UIKit\n\nfunc createGradientButton(frame: CGRect, cornerRadius: CGFloat, colors: [CGColor]) -> UIButton {\n    let button = UIButton(frame: frame)\n    let gradientLayer = CAGradientLayer()\n    gradientLayer.frame = button.bounds\n    gradientLayer.colors = colors\n    gradientLayer.cornerRadius = cornerRadius\n    button.layer.insertSublayer(gradientLayer, at: 0)\n    button.layer.cornerRadius = cornerRadius\n    button.clipsToBounds = true\n    return button\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates a UIView to fade in with a specified duration and completion handler.",
      "input": "",
      "output": "import UIKit\n\nfunc fadeIn(_ view: UIView, duration: TimeInterval, completion: ((Bool) -> Void)? = nil) {\n    view.alpha = 0\n    UIView.animate(withDuration: duration, animations: {\n        view.alpha = 1\n    }, completion: completion)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that presents a UIAlertController with a specified title, message, and button titles, handling button taps with a completion handler.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(on viewController: UIViewController, title: String, message: String, buttonTitles: [String], completion: @escaping (Int) -> Void) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    for (index, buttonTitle) in buttonTitles.enumerated() {\n        let action = UIAlertAction(title: buttonTitle, style: .default) { _ in\n            completion(index)\n        }\n        alertController.addAction(action)\n    }\n    \n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that registers a UICollectionViewCell subclass with a UICollectionView using the cell's class name as the reuse identifier.",
      "input": "",
      "output": "import UIKit\n\nfunc registerCell<T: UICollectionViewCell>(_ collectionView: UICollectionView, cellClass: T.Type) {\n    let identifier = String(describing: cellClass)\n    collectionView.register(cellClass, forCellWithReuseIdentifier: identifier)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that asynchronously fetches JSON data from an API endpoint, decodes it into a specified Codable model, and returns the result via a completion handler.",
      "input": "",
      "output": "import Foundation\n\nfunc fetchData<T: Codable>(url: URL, model: T.Type, completion: @escaping (Result<T, Error>) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n        } else if let data = data {\n            do {\n                let decodedData = try JSONDecoder().decode(model, from: data)\n                completion(.success(decodedData))\n            } catch {\n                completion(.failure(error))\n            }\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sets up an NSLayoutConstraint and activates it for a specified horizontal distance between two UIViews.",
      "input": "",
      "output": "import UIKit\n\nfunc setHorizontalDistanceConstraint(from leftView: UIView, to rightView: UIView, distance: CGFloat) {\n    let constraint = NSLayoutConstraint(item: leftView, attribute: .trailing, relatedBy: .equal, toItem: rightView, attribute: .leading, multiplier: 1, constant: -distance)\n    constraint.isActive = true\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UIStackView with specified views, axis, alignment, distribution, and spacing.",
      "input": "",
      "output": "import UIKit\n\nfunc createStackView(views: [UIView], axis: NSLayoutConstraint.Axis, alignment: UIStackView.Alignment, distribution: UIStackView.Distribution, spacing: CGFloat) -> UIStackView {\n    let stackView = UIStackView(arrangedSubviews: views)\n    stackView.axis = axis\n    stackView.alignment= alignment\n    stackView.distribution = distribution\n    stackView.spacing = spacing\n    return stackView\n}"
    },
    {
      "instruction": "Write a Swift function to implement a UITableView with a custom UITableViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    \n    static let identifier = \"CustomTableViewCell\"\n    \n    private let label: UILabel = {\n        let label = UILabel()\n        label.numberOfLines = 0\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        contentView.addSubview(label)\n        NSLayoutConstraint.activate([\n            label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            label.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\n            label.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),\n            label.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    func configure(with text: String) {\n        label.text = text\n    }\n    \n}\n\nclass CustomTableViewController: UITableViewController {\n    \n    private let cellData = [\"Example 1\", \"Example 2\", \"Example 3\"]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: CustomTableViewCell.identifier)\n    }\n    \n    override func numberOfSections(in tableView: UITableView) -> Int {\n        return 1\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return cellData.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.identifier, for: indexPath) as! CustomTableViewCell\n        cell.configure(with: cellData[indexPath.row])\n        return cell\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UINavigationController",
      "input": "",
      "output": "import UIKit\n\nclass CustomNavigationController: UINavigationController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupNavigationBar()\n    }\n\n    private func setupNavigationBar() {\n        navigationBar.barTintColor = .systemBlue\n        navigationBar.tintColor = .white\n        navigationBar.titleTextAttributes = [\n            NSAttributedString.Key.foregroundColor: UIColor.white\n        ]\n        navigationBar.largeTitleTextAttributes = [\n            NSAttributedString.Key.foregroundColor: UIColor.white\n        ]\n        navigationBar.prefersLargeTitles = true\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that implements a UICollectionView with custom UICollectionViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n\n    static let identifier = \"CustomCollectionViewCell\"\n\n    private let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(imageView)\n        NSLayoutConstraint.activate([\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    func configure(with image: UIImage) {\n        imageView.image = image\n    }\n\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n\n    private let images = [UIImage(named: \"image1\"), UIImage(named: \"image2\"), UIImage(named: \"image3\")]\n\n    init() {\n        let layout = UICollectionViewFlowLayout()\n        layout.itemSize = CGSize(width: 100, height: 100)\n        layout.sectionInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)\n        super.init(collectionViewLayout: layout)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.identifier)\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return images.count\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.identifier, for: indexPath) as! CustomCollectionViewCell\n        cell.configure(with: images[indexPath.row]!)\n        return cell\n    }\n\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a UIPickerView",
      "input": "",
      "output": "import UIKit\n\nclass PickerViewExampleViewController: UIViewController, UIPickerViewDelegate, UIPickerViewDataSource {\n\n    private let pickerView = UIPickerView()\n\n    private let pickerData = [\"Option 1\", \"Option 2\", \"Option 3\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        pickerView.delegate = self\n        pickerView.dataSource = self\n        view.addSubview(pickerView)\n        pickerView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            pickerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            pickerView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return pickerData.count\n    }\n\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return pickerData[row]\n    }\n\n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        print(\"Selected option: \\(pickerData[row])\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a UISearchBar",
      "input": "",
      "output": "import UIKit\n\nclass SearchBarExampleViewController: UIViewController, UISearchBarDelegate {\n\n    private let searchBar = UISearchBar()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        searchBar.delegate = self\n        view.addSubview(searchBar)\n        searchBar.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            searchBar.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            searchBar.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            searchBar.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor)\n        ])\n    }\n\n    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {\n        searchBar.resignFirstResponder()\n        if let searchText = searchBar.text {\n            print(\"Searching for: \\(searchText)\")\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a UIPageViewController",
      "input": "",
      "output": "import UIKit\n\nclass PageContentViewController: UIViewController {\n    var pageIndex: Int = 0\n    var displayText: String = \"\"\n    \n    private let label: UILabel = {\n        let label = UILabel()\n        label.textAlignment = .center\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n        label.text = displayText\n        view.addSubview(label)\n        NSLayoutConstraint.activate([\n            label.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            label.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n}\n\nclass PageViewControllerExample: UIPageViewController, UIPageViewControllerDataSource {\n    \n    private let pages: [PageContentViewController] = {\n        var pages = [PageContentViewController]()\n        for i in 1...5 {\n            let page = PageContentViewController()\n            page.pageIndex = i\n            page.displayText = \"Page \\(i)\"\n            pages.append(page)\n        }\n        return pages\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        dataSource = self\n        setViewControllers([pages[0]], direction: .forward, animated: true, completion: nil)\n    }\n    \n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n        if let vc = viewController as? PageContentViewController, vc.pageIndex > 1 {\n            return pages[vc.pageIndex - 2]\n        }\n        return nil\n    }\n    \n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {\n        if let vc = viewController as? PageContentViewController, vc.pageIndex < pages.count {\n            return pages[vc.pageIndex]\n        }\n        return nil\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a UIViewController with a UISlider and UILabel to display the slider value",
      "input": "",
      "output": "import UIKit\n\nclass SliderExampleViewController: UIViewController {\n\n    private let slider: UISlider = {\n        let slider = UISlider()\n        slider.minimumValue = 0\n        slider.maximumValue = 100\n        slider.translatesAutoresizingMaskIntoConstraints = false\n        return slider\n    }()\n\n    private let valueLabel: UILabel = {\n        let label = UILabel()\n        label.textAlignment = .center\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n        view.addSubview(slider)\n        view.addSubview(valueLabel)\n\n        NSLayoutConstraint.activate([\n            slider.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            slider.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            valueLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            valueLabel.bottomAnchor.constraint(equalTo: slider.topAnchor, constant: -16)\n        ])\n\n        slider.addTarget(self, action: #selector(sliderValueChanged), for: .valueChanged)\n        updateValueLabel()\n    }\n\n    @objc private func sliderValueChanged() {\n        updateValueLabel()\n    }\n\n    private func updateValueLabel() {\n        let sliderValue = Int(slider.value)\n        valueLabel.text = \"Value: \\(sliderValue)\"\n    }\n}"
    },
    {
      "instruction": "Create a Swift function that fetches a list of users from a REST API, decodes the JSON response, and updates a UITableView.",
      "input": "",
      "output": "import UIKit\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let username: String\n}\n\nclass UsersTableViewController: UITableViewController {\n    \n    private var users = [User]()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        fetchUsers()\n    }\n\n    private func fetchUsers() {\n        let url = URL(string: \"https://jsonplaceholder.typicode.com/users\")!\n        \n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            guard let data = data else { return }\n            \n            do {\n                let users = try JSONDecoder().decode([User].self, from: data)\n                DispatchQueue.main.async {\n                    self.users = users\n                    self.tableView.reloadData()\n                }\n            } catch {\n                print(error.localizedDescription)\n            }\n            \n        }.resume()\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return users.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"UserCell\", for: indexPath)\n        cell.textLabel?.text = users[indexPath.row].name\n        return cell\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that creates a custom UIPageViewController with embedded UIViewControllers.",
      "input": "",
      "output": "import UIKit\n\nclass CustomPageViewController: UIPageViewController, UIPageViewControllerDataSource {\n    \n    private lazy var pages: [UIViewController] = {\n        return [\n            UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"Page1\"),\n            UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"Page2\"),\n            UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"Page3\"),\n        ]\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        dataSource = self\n        setViewControllers([pages[0]], direction: .forward, animated: false, completion: nil)\n    }\n\n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n        guard let index = pages.firstIndex(of: viewController), index > 0 else {\n            return nil\n        }\n        return pages[index - 1]\n    }\n    \n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {\n        guard let index = pages.firstIndex(of: viewController), index < pages.count - 1 else {\n            return nil\n        }\n        return pages[index + 1]\n    }\n}"
    },
    {
      "instruction": "Write a Swift function for implementing a custom UISearchBar with a UITableView and updating the table view based on the search text.",
      "input": "",
      "output": "import UIKit\n\nclass SearchTableViewController: UITableViewController, UISearchResultsUpdating {\n    \n    let searchController = UISearchController(searchResultsController: nil)\n    var items: [String] = []\n    var filteredItems: [String] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        searchController.searchResultsUpdater = self\n        searchController.obscuresBackgroundDuringPresentation = false\n        searchController.searchBar.placeholder = \"Search Items\"\n        navigationItem.searchController = searchController\n        definesPresentationContext = true\n    }\n\n    func updateSearchResults(for searchController: UISearchController) {\n        if let searchText = searchController.searchBar.text, !searchText.isEmpty {\n            filteredItems = items.filter { item in\n                return item.lowercased().contains(searchText.lowercased())\n            }\n        } else {\n            filteredItems = items\n        }\n        tableView.reloadData()\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredItems.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"SearchCell\", for: indexPath)\n        cell.textLabel?.text = filteredItems[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": "Write a Swift function for implementing a custom UIScrollView with zooming capabilities.",
      "input": "",
      "output": "import UIKit\n\nclass ZoomingViewController: UIViewController, UIScrollViewDelegate {\n    \n    @IBOutlet weak var scrollView: UIScrollView!\n    @IBOutlet weak var imageView: UIImageView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        scrollView.delegate = self\n        scrollView.minimumZoomScale = 1.0\n        scrollView.maximumZoomScale = 3.0\n    }\n    \n    func viewForZooming(in scrollView: UIScrollView) -> UIView? {\n        return imageView\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that registers for remote notifications and handles notification payload upon receiving a notification",
      "input": "",
      "output": "import UIKit\nimport UserNotifications\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate, UNUserNotificationCenterDelegate {\n    \n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        \n        UNUserNotificationCenter.current().delegate = self\n        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in\n            if granted {\n                DispatchQueue.main.async {\n                    application.registerForRemoteNotifications()\n                }\n            }\n        }\n        \n        return true\n    }\n    \n    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n        let tokenParts = deviceToken.map { data in String(format: \"%02.2hhx\", data) }\n        let token = tokenParts.joined()\n        print(\"Device Token: \\(token)\")\n    }\n    \n    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n        print(\"Failed to register for remote notifications: \\(error.localizedDescription)\")\n    }\n    \n    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {\n        completionHandler([.alert, .sound, .badge])\n    }\n    \n    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n        let userInfo = response.notification.request.content.userInfo\n        print(\"Notification received: \\(userInfo)\")\n        completionHandler()\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to implement a custom UICollectionViewCell with a rounded image view and a label below it.",
      "input": "",
      "output": "import UIKit\n\nclass RoundedImageCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n    \n    override func awakeFromNib() {\n        super.awakeFromNib()\n        imageView.layer.cornerRadius = imageView.bounds.width / 2\n        imageView.clipsToBounds = true\n        imageView.contentMode = .scaleAspectFill\n    }\n    \n    func configure(with image: UIImage, title: String) {\n        imageView.image = image\n        titleLabel.text = title\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to implement a custom UIPickerView with a delegate that handles user selection.",
      "input": "",
      "output": "import UIKit\n\nclass CustomPickerViewController: UIViewController, UIPickerViewDelegate, UIPickerViewDataSource {\n    \n    @IBOutlet weak var pickerView: UIPickerView!\n    \n    let pickerData = [\"Option 1\", \"Option 2\", \"Option 3\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        pickerView.delegate = self\n        pickerView.dataSource = self\n    }\n    \n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return pickerData.count\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return pickerData[row]\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        print(\"Selected option: \\(pickerData[row])\")\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that asynchronously loads an image from a URL and sets it as the image of a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc loadImageAsync(url: String, imageView: UIImageView) {\n    guard let imageUrl = URL(string: url) else { return }\n    \n    DispatchQueue.global().async {\n        if let data = try? Data(contentsOf: imageUrl) {\n            DispatchQueue.main.async {\n                imageView.image = UIImage(data: data)\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UITableView with a custom UITableViewCell using a .xib file.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var customLabel: UILabel!\n}\n\nfunc setupTableView(tableView: UITableView, viewController: UIViewController) {\n    let nib = UINib(nibName: \"CustomTableViewCell\", bundle: nil)\n    tableView.register(nib, forCellReuseIdentifier: \"CustomTableViewCell\")\n    tableView.delegate = viewController as? UITableViewDelegate\n    tableView.dataSource = viewController as? UITableViewDataSource\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sets up a URLSession for a GET request and parses the JSON response.",
      "input": "",
      "output": "import Foundation\n\nfunc fetchJSONData(url: String, completion: @escaping (Result<Any, Error>) -> Void) {\n    guard let url = URL(string: url) else {\n        completion(.failure(NSError(domain: \"Invalid URL\", code: -1, userInfo: nil)))\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data received\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let jsonObject = try JSONSerialization.jsonObject(with: data, options: [])\n            completion(.success(jsonObject))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    \n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that configures a UICollectionView with a custom UICollectionViewCell using a .xib file.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var customImageView: UIImageView!\n}\n\nfunc setupCollectionView(collectionView: UICollectionView, viewController: UIViewController) {\n    let nib = UINib(nibName: \"CustomCollectionViewCell\", bundle: nil)\n    collectionView.register(nib, forCellWithReuseIdentifier: \"CustomCollectionViewCell\")\n    collectionView.delegate = viewController as? UICollectionViewDelegate\n    collectionView.dataSource = viewController as? UICollectionViewDataSource\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates and presents an UIAlertController with a single action.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(title: String, message"
    },
    {
      "instruction": "Write a Swift function that initializes a UICollectionView with a custom UICollectionViewCell and sets up its delegate, dataSource, and flow layout",
      "input": "",
      "output": "func setupCollectionView() -> UICollectionView {\n    let layout = UICollectionViewFlowLayout()\n    layout.itemSize = CGSize(width: 100, height: 100)\n    layout.minimumLineSpacing = 10\n    layout.minimumInteritemSpacing = 10\n    \n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    collectionView.delegate = self\n    collectionView.dataSource = self\n    collectionView.backgroundColor = .white\n    collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n    \n    return collectionView\n}\n\n// Make sure to conform to UICollectionViewDelegate, UICollectionViewDataSource, & UICollectionViewDelegateFlowLayout\n// extension ViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n//     func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n//         return dataSource.count\n//     }\n//\n//     func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n//         let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n//         cell.configure(with: dataSource[indexPath.item])\n//         return cell\n//     }\n// }"
    },
    {
      "instruction": " \nWrite a Swift function that initializes a UITableView with a custom UITableViewCell and sets up its delegate and dataSource",
      "input": "",
      "output": "func setupTableView() -> UITableView {\n    let tableView = UITableView(frame: .zero, style: .plain)\n    tableView.translatesAutoresizingMaskIntoConstraints = false\n    tableView.delegate = self\n    tableView.dataSource = self\n    tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomCell\")\n    return tableView\n}\n\n// Make sure to conform to UITableViewDelegate & UITableViewDataSource\n// extension ViewController: UITableViewDelegate, UITableViewDataSource {\n//     func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n//         return dataSource.count\n//     }\n//\n//     func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n//         let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomCell\", for: indexPath) as! CustomTableViewCell\n//         cell.configure(with: dataSource[indexPath.row])\n//         return cell\n//     }\n// }"
    },
    {
      "instruction": " \nWrite a Swift function that initializes a UIPageViewController with custom view controllers and sets up its dataSource",
      "input": "",
      "output": "func setupPageViewController() -> UIPageViewController {\n    let pageViewController = UIPageViewController(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil)\n    pageViewController.dataSource = self\n    \n    let firstViewController = CustomViewController()\n    let secondViewController = CustomViewController()\n    \n    pageViewController.setViewControllers([firstViewController], direction: .forward, animated: true, completion: nil)\n    \n    return pageViewController\n}\n\n// Make sure to conform to UIPageViewControllerDataSource\n// extension ViewController: UIPageViewControllerDataSource {\n//     func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n//         if viewController == secondViewController {\n//             return firstViewController\n//         }\n//         return nil\n//     }\n//\n//     func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {\n//         if viewController == firstViewController {\n//             return secondViewController\n//         }\n//         return nil\n//     }\n// }"
    },
    {
      "instruction": "Write a Swift function to download an image from a URL and set it to a UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass ImageDownloader {\n    static let shared = ImageDownloader()\n    private init() {}\n    \n    func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            guard let data = data, error == nil, let image = UIImage(data: data) else {\n                completion(nil)\n                return\n            }\n            completion(image)\n        }.resume()\n    }\n}\n\nextension UIImageView {\n    func setImage(from url: URL) {\n        ImageDownloader.shared.downloadImage(from: url) { [weak self] image in\n            DispatchQueue.main.async {\n                self?.image = image\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to play an audio file from a URL using AVFoundation",
      "input": "",
      "output": "import AVFoundation\n\nclass AudioPlayer: NSObject, AVAudioPlayerDelegate {\n    private var audioPlayer: AVAudioPlayer?\n    \n    func playAudio(from url: URL, completion: @escaping (Bool) -> Void) {\n        do {\n            audioPlayer = try AVAudioPlayer(contentsOf: url)\n            audioPlayer?.delegate = self\n            audioPlayer?.prepareToPlay()\n            audioPlayer?.play()\n            completion(true)\n        } catch {\n            completion(false)\n        }\n    }\n    \n    func audioPlayerDidFinishPlaying(_ player: AVAudioPlayer, successfully flag: Bool) {\n        audioPlayer = nil\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UITableView with a refresh control",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewController: UITableViewController {\n    private let refresh = UIRefreshControl()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupRefreshControl()\n    }\n    \n    private func setupRefreshControl() {\n        refresh.addTarget(self, action: #selector(refreshData), for: .valueChanged)\n        tableView.refreshControl = refresh\n    }\n    \n    @objc private func refreshData() {\n        // Fetch new data and reload the table view\n        refresh.endRefreshing()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to authenticate a user using Face ID or Touch ID",
      "input": "",
      "output": "import LocalAuthentication\n\nclass BiometricAuthenticator {\n    func authenticateUser(completion: @escaping (Bool, Error?) -> Void) {\n        let context = LAContext()\n        var error: NSError?\n\n        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {\n            let reason = \"Authenticate with biometrics\"\n            context.evaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, localizedReason: reason) { success, error in\n                DispatchQueue.main.async {\n                    completion(success, error)\n                }\n            }\n        } else {\n            DispatchQueue.main.async {\n                completion(false, error)\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UICollectionView with a flow layout",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UICollectionViewController {\n    private let reuseIdentifier = \"CustomCell\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupCollectionView()\n    }\n    \n    private func setupCollectionView() {\n        let layout = UICollectionViewFlowLayout()\n        layout.itemSize = CGSize(width: 100, height: 100)\n        collectionView.setCollectionViewLayout(layout, animated: true)\n        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: reuseIdentifier)\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath)\n        cell.backgroundColor = .blue\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIView with rounded corners and a shadow",
      "input": "",
      "output": "import UIKit\n\nclass RoundedShadowView: UIView {\n    override func awakeFromNib() {\n        super.awakeFromNib()\n        setupView()\n    }\n    \n    private func setupView() {\n        layer.cornerRadius = 10\n        layer.masksToBounds = false\n        layer.shadowColor = UIColor.black.cgColor\n        layer.shadowOffset = CGSize(width: 0, height: 2)\n        layer.shadowOpacity = 0.3\n        layer.shadowRadius = 4\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIButton with an animated tap effect",
      "input": "",
      "output": "import UIKit\n\nclass AnimatedButton: UIButton {\n    override func awakeFromNib() {\n        super.awakeFromNib()\n        addTarget(self, action: #selector(animateTap), for: .touchUpInside)\n    }\n    \n    @objc private func animateTap() {\n        UIView.animate(withDuration: 0.1, animations: {\n            self.transform = CGAffineTransform(scaleX: 0.95, y: 0.95)\n        }) { _ in\n            UIView.animate(withDuration: 0.1) {\n                self.transform = CGAffineTransform.identity\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UISearchBar with a clear button and a cancel button",
      "input": "",
      "output": "import UIKit\n\nclass CustomSearchBarController: UIViewController, UISearchBarDelegate {\n    private let searchBar = UISearchBar()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupSearchBar()\n    }\n    \n    private func setupSearchBar() {\n        searchBar.delegate = self\n        searchBar.showsCancelButton = true\n        searchBar.placeholder = \"Search\"\n        searchBar.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(searchBar)\n        \n        NSLayoutConstraint.activate([\n            searchBar.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            searchBar.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            searchBar.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            searchBar.perform(#selector(resignFirstResponder), with: nil, afterDelay: 0.1)\n        }\n    }\n    \n    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {\n        searchBar.text = \"\"\n        searchBar.resignFirstResponder()\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to create a UITableView with custom cell registration and configuration",
      "input": "",
      "output": "func createTableView() -> UITableView {\n    let tableView = UITableView(frame: .zero, style: .plain)\n    tableView.translatesAutoresizingMaskIntoConstraints = false\n    tableView.delegate = self\n    tableView.dataSource = self\n    tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomCell\")\n    return tableView\n}\n\n// Make sure to conform to UITableViewDelegate & UITableViewDataSource\n// extension ViewController: UITableViewDelegate, UITableViewDataSource {\n// func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int { return dataSource.count }\n// func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n//     let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomCell\", for: indexPath) as! CustomTableViewCell\n//     cell.configure(with: dataSource[indexPath.row])\n//     return cell\n// }\n// }"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UICollectionView with a custom layout and cell registration",
      "input": "",
      "output": "func createCollectionView() -> UICollectionView {\n    let layout = UICollectionViewFlowLayout()\n    layout.scrollDirection = .vertical\n    layout.minimumLineSpacing = 10\n    layout.minimumInteritemSpacing = 10\n    layout.itemSize = CGSize(width: 100, height: 100)\n\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    collectionView.delegate = self\n    collectionView.dataSource = self\n    collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n    return collectionView\n}\n\n// Make sure to conform to UICollectionViewDelegate & UICollectionViewDataSource\n// extension ViewController: UICollectionViewDelegate, UICollectionViewDataSource {\n// func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int { return dataSource.count }\n// func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n//     let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n//     cell.configure(with: dataSource[indexPath.item])\n//     return cell\n// }\n// }"
    },
    {
      "instruction": " \nWrite a Swift function that initializes a UIAlertController with a given title, message, and UIAlertAction",
      "input": "",
      "output": "func showAlert(title: String, message: String, actionTitle: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: actionTitle, style: .default, handler: nil)\n    alertController.addAction(action)\n    present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that initializes a UIPageViewController with a custom view controller data source",
      "input": "",
      "output": "func createPageViewController() -> UIPageViewController {\n    let pageViewController = UIPageViewController(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil)\n    pageViewController.delegate = self\n    pageViewController.dataSource = self\n    return pageViewController\n}\n\n// Make sure to conform to UIPageViewControllerDelegate & UIPageViewControllerDataSource\n// extension ViewController: UIPageViewControllerDelegate, UIPageViewControllerDataSource {\n// func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n//     guard let index = orderedViewControllers.firstIndex(of: viewController), index > 0 else { return nil }\n//     return orderedViewControllers[index - 1]\n// }\n//\n// func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {\n//     guard let index = orderedViewControllers.firstIndex(of: viewController), index < orderedViewControllers.count - 1 else { return nil }\n//     return orderedViewControllers[index + 1]\n// }\n// }"
    },
    {
      "instruction": " \nWrite a Swift function that initializes a UIImagePickerController with a given source type and delegate",
      "input": "",
      "output": "func createImagePickerController(sourceType: UIImagePickerController.SourceType) -> UIImagePickerController? {\n    guard UIImagePickerController.isSourceTypeAvailable(sourceType) else { return nil }\n    let imagePickerController = UIImagePickerController()\n    imagePickerController.sourceType = sourceType\n    imagePickerController.delegate = self\n    return imagePickerController\n}\n\n// Make sure to conform to UIImagePickerControllerDelegate & UINavigationControllerDelegate\n// extension ViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n// func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {\n//     if let image = info[.originalImage] as? UIImage {\n//         // Do something with the image\n//     }\n//     picker.dismiss(animated: true, completion: nil)\n// }\n// }"
    },
    {
      "instruction": " \nWrite a Swift function that initializes a CLLocationManager with a given delegate and desired accuracy",
      "input": "",
      "output": "func createLocationManager() -> CLLocationManager {\n    let locationManager = CLLocationManager()\n    locationManager.delegate = self\n    locationManager.desiredAccuracy = kCLLocationAccuracyBest\n    locationManager.requestWhenInUseAuthorization()\n    return locationManager\n}\n\n// Make sure to conform to CLLocationManagerDelegate\n// extension ViewController: CLLocationManagerDelegate {\n// func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n//     if let location = locations.first {\n//         // Do something with the location\n//     }\n// }\n// }"
    },
    {
      "instruction": " \nWrite a Swift function that initializes a WKWebView with a given URL and navigation delegate",
      "input": "",
      "output": "func createWebView(url: URL) -> WKWebView {\n    let webView = WKWebView()\n    webView.translatesAutoresizingMaskIntoConstraints = false\n    webView.navigationDelegate = self\n    let request = URLRequest(url: url)\n    webView.load(request)\n    return webView\n}\n\n// Make sure to conform to WKNavigationDelegate\n// extension ViewController: WKNavigationDelegate {\n// func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {\n//     // Do something when the web view finishes loading\n// }\n// }"
    },
    {
      "instruction": " \nWrite a Swift function that initializes a UIStackView with a given axis, distribution, and alignment",
      "input": "",
      "output": "func createStackView(axis: NSLayoutConstraint.Axis, distribution: UIStackView.Distribution, alignment: UIStackView.Alignment) -> UIStackView {\n    let stackView = UIStackView()\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    stackView.axis = axis\n    stackView.distribution = distribution\n    stackView.alignment = alignment\n    stackView.spacing = 8\n    return stackView\n}"
    },
    {
      "instruction": "Implement a UITableView with a custom UITableViewCell that displays a user's avatar, name, and email address.",
      "input": "",
      "output": "import UIKit\n\nstruct User {\n    let avatar: UIImage\n    let name: String\n    let email: String\n}\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var avatarImageView: UIImageView!\n    @IBOutlet weak var nameLabel: UILabel!\n    @IBOutlet weak var emailLabel: UILabel!\n    \n    func configure(with user: User) {\n        avatarImageView.image = user.avatar\n        nameLabel.text = user.name\n        emailLabel.text = user.email\n    }\n}\n\nclass UsersTableViewController: UITableViewController {\n    var users: [User] = [] // Populate this array with your data\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UINib(nibName: \"CustomTableViewCell\", bundle: nil), forCellReuseIdentifier: \"CustomCell\")\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return users.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomCell\", for: indexPath) as! CustomTableViewCell\n        cell.configure(with: users[indexPath.row])\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a function that fetches JSON data from a URL and decodes it into a Swift object using Codable.",
      "input": "",
      "output": "import Foundation\n\nstruct ResponseData: Codable {\n    // Define the properties based on the JSON structure\n}\n\nfunc fetchData(from url: String, completion: @escaping (Result<ResponseData, Error>) -> Void) {\n    guard let url = URL(string: url) else {\n        completion(.failure(NSError(domain: \"\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"Invalid URL\"])))\n        return\n    }\n    \n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"No data received\"])))\n            return\n        }\n        \n        do {\n            let jsonData = try JSONDecoder().decode(ResponseData.self, from: data)\n            completion(.success(jsonData))\n        } catch {\n            completion(.failure(error))\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nImplement a view controller that displays a UICollectionView with images and their titles.",
      "input": "",
      "output": "import UIKit\n\nstruct ImageData {\n    let image: UIImage\n    let title: String\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n    \n    func configure(with data: ImageData) {\n        imageView.image = data.image\n        titleLabel.text = data.title\n    }\n}\n\nclass ImagesCollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    @IBOutlet weak var collectionView: UICollectionView!\n    var imagesData: [ImageData] = [] // Populate this array with your data\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(UINib(nibName: \"CustomCollectionViewCell\", bundle: nil), forCellWithReuseIdentifier: \"CustomCell\")\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return imagesData.count\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        cell.configure(with: imagesData[indexPath.item])\n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: (collectionView.bounds.width - 40) / 2, height: (collectionView.bounds.width - 40) / 2)\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIView that displays a circular progress bar using Core Graphics.",
      "input": "",
      "output": "import UIKit\n\nclass CircularProgressView: UIView {\n    var progress: CGFloat = 0 {\n        didSet {\n            setNeedsDisplay()\n        }\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        backgroundColor = .clear\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        backgroundColor = .clear\n    }\n    \n    override func draw(_ rect: CGRect) {\n        let center = CGPoint(x: rect.midX, y: rect.midY)\n        let radius = min(rect.width, rect.height) / 2 - 10\n        let startAngle = -CGFloat.pi / 2\n        let endAngle = startAngle + 2 * CGFloat.pi * progress\n        \n        let path = UIBezierPath(arcCenter: center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)\n        path.lineWidth = 10\n        UIColor.blue.setStroke()\n        path.stroke()\n    }\n}"
    },
    {
      "instruction": " \nImplement a view controller that uses a WKWebView to load a webpage and provides a progress bar to track the loading progress.",
      "input": "",
      "output": "import UIKit\nimport WebKit\n\nclass WebViewController: UIViewController, WKNavigationDelegate {\n    @IBOutlet weak var webView: WKWebView!\n    @IBOutlet weak var progressBar: UIProgressView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        webView.navigationDelegate = self\n        webView.addObserver(self, forKeyPath: #keyPath(WKWebView.estimatedProgress), options: .new, context: nil)\n        \n        if let url = URL(string: \"https://www.example.com\") {\n            let request = URLRequest(url: url)\n            webView.load(request)\n        }\n    }\n    \n    deinit {\n        webView.removeObserver(self, forKeyPath: #keyPath(WKWebView.estimatedProgress))\n    }\n    \n    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {\n        if keyPath == #keyPath(WKWebView.estimatedProgress) {\n            progressBar.progress = Float(webView.estimatedProgress)\n        }\n    }\n    \n    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {\n        progressBar.isHidden = true\n    }\n    \n    func webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!) {\n        progressBar.isHidden = false\n    }\n}"
    },
    {
      "instruction": " \nImplement a custom UITableViewCell with swipe actions for editing and deleting rows in a UITableView.",
      "input": "",
      "output": "import UIKit\n\nclass EditableTableViewCell: UITableViewCell {\n    // Add your outlets and configure the cell based on your needs\n}\n\nclass EditableTableViewController: UITableViewController {\n    // Populate this array with your data\n    var data: [String] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UINib(nibName: \"EditableTableViewCell\", bundle: nil), forCellReuseIdentifier: \"EditableCell\")\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"EditableCell\", for: indexPath) as! EditableTableViewCell\n        // Configure the cell based on your data\n        return cell\n    }\n    \n    override func tableView(_ tableView: UITableView, leadingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {\n        let editAction = UIContextualAction(style: .normal, title: \"Edit\") { (action, view, completionHandler) in\n            // Perform edit action\n            completionHandler(true)\n        }\n        editAction.backgroundColor = .blue\n        return UISwipeActionsConfiguration(actions: [editAction])\n    }\n    \n    override func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {\n        let deleteAction = UIContextualAction(style: .destructive, title: \"Delete\") { (action, view, completionHandler) in\n            // Perform delete action\n            completionHandler(true)\n        }\n        return UISwipeActionsConfiguration"
    },
    {
      "instruction": "Write a Swift function that asynchronously fetches JSON data from a given URL and decodes it into a provided Codable type, returning the result in a completion handler",
      "input": "",
      "output": "import Foundation\n\nfunc fetchJSONData<T: Codable>(urlString: String, decodeType: T.Type, completion: @escaping (Result<T, Error>) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(.failure(NSError(domain: \"\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"Invalid URL\"])))\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"No data\"])))\n            return\n        }\n        \n        do {\n            let decodedData = try JSONDecoder().decode(decodeType, from: data)\n            completion(.success(decodedData))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    \n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a UITableView and a UITableViewCell identifier as parameters, and registers and dequeues a UITableViewCell with the given identifier",
      "input": "",
      "output": "import UIKit\n\nfunc dequeueReusableCell<T: UITableViewCell>(tableView: UITableView, withIdentifier identifier: String) -> T {\n    tableView.register(T.self, forCellReuseIdentifier: identifier)\n    guard let cell = tableView.dequeueReusableCell(withIdentifier: identifier) as? T else {\n        fatalError(\"Unable to dequeue cell with identifier: \\(identifier)\")\n    }\n    return cell\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and present a UIAlertController with a specified title, message, and a list of UIAlertAction objects",
      "input": "",
      "output": "import UIKit\n\nfunc presentAlertController(_ viewController: UIViewController, title: String, message: String, actions: [UIAlertAction]) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    for action in actions {\n        alertController.addAction(action)\n    }\n    \n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a latitude and longitude, and returns a CLLocation object",
      "input": "",
      "output": "import CoreLocation\n\nfunc createLocation(latitude: CLLocationDegrees, longitude: CLLocationDegrees) -> CLLocation {\n    let location = CLLocation(latitude: latitude, longitude: longitude)\n    return location\n}"
    },
    {
      "instruction": " \nWrite a Swift function to asynchronously download an image from a URL and update a UIImageView's image property with the downloaded image",
      "input": "",
      "output": "import UIKit\n\nfunc loadImage(from url: URL, into imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            print(\"Error downloading image: \\(error.localizedDescription)\")\n            return\n        }\n        \n        guard let data = data else {\n            print(\"No data received.\")\n            return\n        }\n        \n        DispatchQueue.main.async {\n            imageView.image = UIImage(data: data)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a string and validates if it's a valid email address using a regular expression",
      "input": "",
      "output": "import Foundation\n\nfunc isValidEmail(_ email: String) -> Bool {\n    let emailRegex = \"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,64}\"\n    let emailPredicate = NSPredicate(format: \"SELF MATCHES %@\", emailRegex)\n    return emailPredicate.evaluate(with: email)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes an array of integers and a completion handler, and computes the sum of the integers asynchronously using Grand Central Dispatch (GCD)",
      "input": "",
      "output": "import Dispatch\n\nfunc asyncSum(integers: [Int], completion: @escaping (Int) -> Void) {\n    DispatchQueue.global(qos: .userInitiated).async {\n        let sum = integers.reduce(0, +)\n        DispatchQueue.main.async {\n            completion(sum)\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a UICollectionView and a UICollectionViewCell identifier as parameters, and registers and dequeues a UICollectionViewCell with the given identifier",
      "input": "",
      "output": "import UIKit\n\nfunc dequeueReusableCell<T: UICollectionViewCell>(collectionView: UICollectionView, withIdentifier identifier: String, for indexPath: IndexPath) -> T {\n    collectionView.register(T.self, forCellWithReuseIdentifier: identifier)\n    guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: identifier, for: indexPath) as? T else {\n        fatalError(\"Unable to dequeue cell with identifier: \\(identifier)\")\n    }\n    return cell\n}"
    },
    {
      "instruction": "Implement a UITableView with custom UITableViewCell that contains an image and a label. Use the UITableViewDataSource and UITableViewDelegate protocols to populate the table view.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var itemImageView: UIImageView!\n    @IBOutlet weak var itemTitleLabel: UILabel!\n    \n    func configure(with image: UIImage, title: String) {\n        itemImageView.image = image\n        itemTitleLabel.text = title\n    }\n}\n\nclass CustomTableViewController: UITableViewController {\n    \n    var items: [(image: UIImage, title: String)] = [] // Your data source\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UINib(nibName: \"CustomTableViewCell\", bundle: nil), forCellReuseIdentifier: \"CustomTableViewCell\")\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomTableViewCell\", for: indexPath) as! CustomTableViewCell\n        let item = items[indexPath.row]\n        cell.configure(with: item.image, title: item.title)\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a function that asynchronously downloads an image from a URL and displays it in a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            print(\"Error downloading image: \\(error.localizedDescription)\")\n            completion(nil)\n            return\n        }\n        \n        guard let data = data else {\n            completion(nil)\n            return\n        }\n        \n        let image = UIImage(data: data)\n        completion(image)\n    }.resume()\n}\n\nfunc updateImageView(with url: URL, imageView: UIImageView) {\n    downloadImage(from: url) { image in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " \nCreate a view controller that displays a map with the user's current location, and add a pin annotation at the user's location",
      "input": "",
      "output": "import UIKit\nimport MapKit\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n    @IBOutlet weak var mapView: MKMapView!\n    private let locationManager = CLLocationManager()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            let span = MKCoordinateSpan(latitudeDelta: 0.05, longitudeDelta: 0.05)\n            let region = MKCoordinateRegion(center: location.coordinate, span: span)\n            mapView.setRegion(region, animated: true)\n            \n            let annotation = MKPointAnnotation()\n            annotation.coordinate = location.coordinate\n            mapView.addAnnotation(annotation)\n        }\n    }\n}"
    },
    {
      "instruction": " \nImplement a custom UITableViewCell with a UISwitch and a delegate pattern to handle the switch value change",
      "input": "",
      "output": "import UIKit\n\nprotocol CustomSwitchCellDelegate: AnyObject {\n    func switchValueChanged(isOn: Bool, forCell cell: CustomSwitchTableViewCell)\n}\n\nclass CustomSwitchTableViewCell: UITableViewCell {\n    @IBOutlet weak var customSwitch: UISwitch!\n    \n    weak var delegate: CustomSwitchCellDelegate?\n\n    @IBAction func switchValueChanged(_ sender: UISwitch) {\n        delegate?.switchValueChanged(isOn: sender.isOn, forCell: self)\n    }\n}\n\nclass CustomSwitchTableViewController: UITableViewController, CustomSwitchCellDelegate {\n    func switchValueChanged(isOn: Bool, forCell cell: CustomSwitchTableViewCell) {\n        if let indexPath = tableView.indexPath(for: cell) {\n            print(\"Switch at row \\(indexPath.row) changed to \\(isOn)\")\n        }\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 10 // Your data source count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomSwitchTableViewCell\", for: indexPath) as! CustomSwitchTableViewCell\n        cell.delegate = self\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIView with a progress bar and a label indicating the percentage of progress",
      "input": "",
      "output": "import UIKit\n\nclass CustomProgressView: UIView {\n    @IBOutlet weak var progressBar: UIProgressView!\n    @IBOutlet weak var progressLabel: UILabel!\n    \n    func updateProgress(_ progress: Float) {\n        progressBar.progress = progress\n        progressLabel.text = String(format: \"%.0f%%\", progress * 100)\n    }\n}"
    },
    {
      "instruction": " \nWrite a function that retrieves the user's contacts and prints their names and phone numbers",
      "input": "",
      "output": "import Contacts\n\nfunc fetchContacts() {\n    let store = CNContactStore()\n    let keysToFetch = [CNContactGivenNameKey, CNContactFamilyNameKey, CNContactPhoneNumbersKey] as [CNKeyDescriptor]\n    let request = CNContactFetchRequest(keysToFetch: keysToFetch)\n\n    do {\n        try store.enumerateContacts(with: request) { (contact, stop) in\n            let name = contact.givenName + \" \" + contact.familyName\n            let phoneNumbers = contact.phoneNumbers.map { $0.value.stringValue }\n            print(\"Name: \\(name), Phone Numbers: \\(phoneNumbers)\")\n        }\n    } catch let error {\n        print(\"Failed to fetch contacts: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " \nImplement a UIViewController with a UIScrollView and a UIImageView to display a zoomable image",
      "input": "",
      "output": "import UIKit\n\nclass ZoomableImageViewController: UIViewController, UIScrollViewDelegate {\n    @IBOutlet weak var scrollView: UIScrollView!\n    @IBOutlet weak var imageView: UIImageView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        scrollView.minimumZoomScale = 1.0\n        scrollView.maximumZoomScale = 6.0\n        scrollView.delegate = self\n    }\n\n    func viewForZooming(in scrollView: UIScrollView) -> UIView? {\n        return imageView\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIControl that displays a rating using stars, allowing users to select the rating by tapping on the stars",
      "input": "",
      "output": "import UIKit\n\nclass StarRatingControl: UIControl {\n    private var starButtons: [UIButton] = []\n    private let numberOfStars = 5\n    private let starSize: CGSize = CGSize(width: 44, height: 44)\n    private let starSpacing: CGFloat = 8\n\n    var rating: Int = 0 {\n        didSet {\n            updateButtonSelectionStates()\n        }\n    }\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupButtons()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupButtons()\n    }\n\n    private func setupButtons() {\n        for _ in 0..<numberOfStars {\n            let button = UIButton()\n            button.setImage(UIImage(named: \"emptyStar\"), for: .normal)\n            button.setImage(UIImage(named: \"filledStar\"), for: .selected)\n\n            button.addTarget(self, action: #selector(ratingButtonTapped(button:)), for: .touchUpInside)\n\n            starButtons.append(button)\n            addSubview(button)\n        }\n    }\n\n    override func layoutSubviews() {\n        let buttonWidth = starSize.width + starSpacing\n        var buttonFrame = CGRect(origin: .zero, size: starSize)\n\n        for (index, button) in starButtons.enumerated() {\n            buttonFrame.origin.x = CGFloat(index) * buttonWidth\n            button.frame = buttonFrame\n        }\n    }\n\n    override var intrinsicContentSize: CGSize {\n        let width = CGFloat(numberOfStars) * starSize.width + CGFloat(numberOfStars - 1) * starSpacing\n        return CGSize(width: width, height: starSize.height)\n    }\n\n    @objc private func ratingButtonTapped(button: UIButton) {\n        guard let index = starButtons.firstIndex(of: button) else { return }\n        rating = index + 1\n\n        sendActions(for: .valueChanged)\n    }\n\n    private func updateButtonSelectionStates() {\n        for (index, button) in starButtons.enumerated() {\n            button.isSelected = index < rating\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that downloads an image from a URL and updates a UIImageView with the downloaded image.",
      "input": "URL: https://example.com/sample-image.jpg\nUIImageView: imageView",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil, let image = UIImage(data: data) else {\n            completion(nil)\n            return\n        }\n        completion(image)\n    }\n    task.resume()\n}\n\nlet imageUrl = URL(string: \"https://example.com/sample-image.jpg\")!\nlet imageView = UIImageView()\n\ndownloadImage(from: imageUrl) { image in\n    DispatchQueue.main.async {\n        imageView.image = image\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that asynchronously fetches JSON data from a URL and decodes it into a specified model type.",
      "input": "URL: https://api.example.com/data\nModel: DataModel",
      "output": "import Foundation\n\nstruct DataModel: Codable {\n    // Properties go here.\n}\n\nfunc fetchJSONData<T: Decodable>(url: URL, completion: @escaping (Result<T, Error>) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(.failure(error))\n        } else if let data = data {\n            do {\n                let decodedData = try JSONDecoder().decode(T.self, from: data)\n                completion(.success(decodedData))\n            } catch {\n                completion(.failure(error))\n            }\n        }\n    }\n    task.resume()\n}\n\nlet dataUrl = URL(string: \"https://api.example.com/data\")!\nfetchJSONData(url: dataUrl) { (result: Result<DataModel, Error>) in\n    switch result {\n    case .success(let data):\n        print(data)\n    case .failure(let error):\n        print(error)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that saves a string to UserDefaults and another function that retrieves the string.",
      "input": "Key: \"username\"\nValue: \"john_doe\"",
      "output": "import Foundation\n\nfunc saveToUserDefaults(key: String, value: String) {\n    UserDefaults.standard.set(value, forKey: key)\n}\n\nfunc retrieveFromUserDefaults(key: String) -> String? {\n    return UserDefaults.standard.string(forKey: key)\n}\n\nlet key = \"username\"\nlet value = \"john_doe\"\n\nsaveToUserDefaults(key: key, value: value)\nif let retrievedValue = retrieveFromUserDefaults(key: key) {\n    print(retrievedValue)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that registers a local notification with a specified title, body, and time interval.",
      "input": "Title: \"Reminder\"\nBody: \"Don't forget to check the app.\"\nTimeInterval: 5",
      "output": "import UserNotifications\n\nfunc scheduleLocalNotification(title: String, body: String, timeInterval: TimeInterval) {\n    let center = UNUserNotificationCenter.current()\n\n    let content = UNMutableNotificationContent()\n    content.title = title\n    content.body = body\n\n    let trigger = UNTimeIntervalNotificationTrigger(timeInterval: timeInterval, repeats: false)\n\n    let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)\n    center.add(request) { (error) in\n        if let error = error {\n            print(\"Error scheduling notification: \\(error)\")\n        }\n    }\n}\n\nlet title = \"Reminder\"\nlet body = \"Don't forget to check the app.\"\nlet timeInterval: TimeInterval = 5\n\nscheduleLocalNotification(title: title, body: body, timeInterval: timeInterval)"
    },
    {
      "instruction": " \nWrite a Swift function that plays a sound file stored in the app's main bundle.",
      "input": "Sound file: \"example.wav\"",
      "output": "import AVFoundation\n\nfunc playSound(named fileName: String) {\n    guard let url = Bundle.main.url(forResource: fileName, withExtension: nil) else {\n        print(\"Unable to find file: \\(fileName)\")\n        return\n    }\n\n    do {\n        let audioPlayer = try AVAudioPlayer(contentsOf: url)\n        audioPlayer.play()\n    } catch {\n        print(\"Error playing sound: \\(error)\")\n    }\n}\n\nlet soundFileName = \"example.wav\"\nplaySound(named: soundFileName)"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UIAlertController with one UIAlertAction.",
      "input": "Title: \"Warning\"\nMessage: \"Are you sure you want to continue?\"\nAction title: \"Continue\"",
      "output": "import UIKit\n\nfunc presentAlertController(title: String, message: String, actionTitle: String, viewController: UIViewController) {\n    letalertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: actionTitle, style: .default, handler: nil)\n    alertController.addAction(action)\n    viewController.present(alertController, animated: true, completion: nil)\n}\n\nlet title = \"Warning\"\nlet message = \"Are you sure you want to continue?\"\nlet actionTitle = \"Continue\"\nlet viewController = UIViewController() // Replace with your view controller\n\npresentAlertController(title: title, message: message, actionTitle: actionTitle, viewController: viewController)"
    },
    {
      "instruction": " \nWrite a Swift function that converts a Date to a formatted String.",
      "input": "Date: 2023-05-26 09:00:00\nFormat: \"yyyy-MM-dd HH:mm\"",
      "output": "import Foundation\n\nfunc formatDate(_ date: Date, format: String) -> String {\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = format\n    return dateFormatter.string(from: date)\n}\n\nlet date = Date(timeIntervalSince1970: 1674256800) // 2023-05-26 09:00:00\nlet format = \"yyyy-MM-dd HH:mm\"\n\nlet formattedDate = formatDate(date, format: format)\nprint(formattedDate)"
    },
    {
      "instruction": " \nWrite a Swift function that takes a UIImage and returns a grayscale version of the image.",
      "input": "UIImage: originalImage",
      "output": "import UIKit\n\nfunc convertToGrayscale(image: UIImage) -> UIImage? {\n    guard let cgImage = image.cgImage else { return nil }\n    \n    let width = Int(image.size.width)\n    let height = Int(image.size.height)\n    \n    let colorSpace = CGColorSpaceCreateDeviceGray()\n    let bitmapInfo = CGBitmapInfo(rawValue: CGImageAlphaInfo.none.rawValue)\n    \n    guard let context = CGContext(data: nil, width: width, height: height, bitsPerComponent: 8, bytesPerRow: 0, space: colorSpace, bitmapInfo: bitmapInfo.rawValue) else { return nil }\n    \n    context.draw(cgImage, in: CGRect(x: 0, y: 0, width: width, height: height))\n    \n    guard let grayImage = context.makeImage() else { return nil }\n    \n    return UIImage(cgImage: grayImage)\n}\n\nlet originalImage = UIImage(named: \"example.jpg\")! // Replace with your UIImage\nif let grayscaleImage = convertToGrayscale(image: originalImage) {\n    print(\"Grayscale image created.\")\n}"
    },
    {
      "instruction": "Create a new view controller that contains a table view and a search bar. When the user types in the search bar, filter the table view results based on the input. The table view should display a list of strings.",
      "input": "class SearchableTableViewController: UITableViewController, UISearchResultsUpdating {\n    var data = [\"Apple\", \"Banana\", \"Orange\", \"Grape\", \"Strawberry\"]\n    var filteredData: [String] = []\n    var searchController = UISearchController(searchResultsController: nil)\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        searchController.searchResultsUpdater = self\n        searchController.obscuresBackgroundDuringPresentation = false\n        searchController.searchBar.placeholder = \"Search Items\"\n        navigationItem.searchController = searchController\n        definesPresentationContext = true\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"cell\")\n    }\n    \n    // TODO: Add UITableViewDataSource methods and UISearchResultsUpdating method\n}",
      "output": "class SearchableTableViewController: UITableViewController, UISearchResultsUpdating {\n    var data = [\"Apple\", \"Banana\", \"Orange\", \"Grape\", \"Strawberry\"]\n    var filteredData: [String] = []\n    var searchController = UISearchController(searchResultsController: nil)\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        searchController.searchResultsUpdater = self\n        searchController.obscuresBackgroundDuringPresentation = false\n        searchController.searchBar.placeholder = \"Search Items\"\n        navigationItem.searchController = searchController\n        definesPresentationContext = true\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"cell\")\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return isFiltering() ? filteredData.count : data.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        cell.textLabel?.text = isFiltering() ? filteredData[indexPath.row] : data[indexPath.row]\n        return cell\n    }\n    \n    func isFiltering() -> Bool {\n        return searchController.isActive && !searchBarIsEmpty()\n    }\n\n    func searchBarIsEmpty() -> Bool {\n        return searchController.searchBar.text?.isEmpty ?? true\n    }\n\n    func updateSearchResults(for searchController: UISearchController) {\n        filterContentForSearchText(searchController.searchBar.text!)\n    }\n\n    func filterContentForSearchText(_ searchText: String) {\n        filteredData = data.filter({(item: String) -> Bool in\n            return item.lowercased().contains(searchText.lowercased())\n        })\n        tableView.reloadData()\n    }\n}"
    },
    {
      "instruction": "Create a simple weather application that fetches the current weather for a given location using the OpenWeatherMap API. ",
      "input": "import UIKit\n\nstruct WeatherData: Codable {\n    let main: Main\n    struct Main: Codable {\n        let temp: Double\n    }\n}\n\nclass WeatherViewController: UIViewController {\n    @IBOutlet weak var temperatureLabel: UILabel!\n    let apiKey = \"your_api_key_here\"\n    let city = \"New York\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        fetchWeatherData()\n    }\n    \n    // TODO: Add function to fetch weather data\n}",
      "output": "import UIKit\n\nstruct WeatherData: Codable {\n    let main: Main\n    struct Main: Codable {\n        let temp: Double\n    }\n}\n\nclass WeatherViewController: UIViewController {\n    @IBOutlet weak var temperatureLabel: UILabel!\n    let apiKey = \"your_api_key_here\"\n    let city = \"New York\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        fetchWeatherData()\n    }\n    \n    func fetchWeatherData() {\n        let urlString = \"https://api.openweathermap.org/data/2.5/weather?q=\\(city)&appid=\\(apiKey)&units=metric\"\n        guard let url = URL(string: urlString) else { return }\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            guard let data = data else { return }\n            do {\n                let weatherData = try JSONDecoder().decode(WeatherData.self, from: data)\n                DispatchQueue.main.async {\n                    self.temperatureLabel.text = \"\\(weatherData.main.temp)°C\"\n                }\n            } catch {\n                print(\"Error decoding JSON: \\(error)\")\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": "Create a simple image gallery application that fetches images from a remote server and displays them in a UICollectionView. When a user taps on an image, present it in a full-screen view.",
      "input": "import UIKit\n\nstruct Image {\n    let url: URL\n}\n\nclass ImageGalleryViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {\n    @IBOutlet weak var collectionView: UICollectionView!\n    var images: [Image] = []\n\noverride func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        fetchImages()\n    }\n    \n    // TODO: Add UICollectionViewDataSource methods and fetchImages function\n}",
      "output": "import UIKit\n\nstruct Image {\n    let url: URL\n}\n\nclass ImageGalleryViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {\n    @IBOutlet weak var collectionView: UICollectionView!\n    var images: [Image] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        fetchImages()\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return images.count\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"ImageCell\", for: indexPath) as! ImageCell\n        let image = images[indexPath.item]\n        cell.configure(with: image)\n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {\n        let image = images[indexPath.item]\n        let fullScreenViewController = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"FullScreenViewController\") as! FullScreenViewController\n        fullScreenViewController.image = image\n        present(fullScreenViewController, animated: true, completion: nil)\n    }\n    \n    func fetchImages() {\n        // Fetch images from a remote server and populate the images array\n        // Then call collectionView.reloadData() on the main thread\n    }\n}\n\nclass ImageCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n    \n    func configure(with image: Image) {\n        // Load the image from the URL and set it to the imageView\n    }\n}\n\nclass FullScreenViewController: UIViewController {\n    @IBOutlet weak var imageView: UIImageView!\n    var image: Image!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        imageView.loadImage(from: image.url)\n    }\n}\n\nextension UIImageView {\n    func loadImage(from url: URL) {\n        // Load the image from the URL and set it to the imageView\n    }\n}"
    },
    {
      "instruction": "Implement a simple audio player that plays a remote audio file using AVFoundation.",
      "input": "import UIKit\nimport AVFoundation\n\nclass AudioPlayerViewController: UIViewController {\n    var player: AVPlayer?\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // TODO: Add code to initialize the player with a remote URL and play the audio\n    }\n}",
      "output": "import UIKit\nimport AVFoundation\n\nclass AudioPlayerViewController: UIViewController {\n    var player: AVPlayer?\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        if let url = URL(string: \"https://example.com/audiofile.mp3\") {\n            player = AVPlayer(url: url)\n            player?.play()\n        }\n    }\n}"
    },
    {
      "instruction": "Present an AVPlayerViewController and play a remote video.",
      "input": "import UIKit\nimport AVFoundation\nimport AVKit\n\nclass VideoPlayerViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // TODO: Add code to present an AVPlayerViewController and play a remote video\n    }\n}",
      "output": "import UIKit\nimport AVFoundation\nimport AVKit\n\nclass VideoPlayerViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        if let url = URL(string: \"https://example.com/videofile.mp4\") {\n            let player = AVPlayer(url: url)\n            let playerViewController = AVPlayerViewController()\n            playerViewController.player = player\n            present(playerViewController, animated: true) {\n                playerViewController.player?.play()\n            }\n        }\n    }\n}"
    },
    {
      "instruction": "Create a simple map view using MapKit that displays the user's current location.",
      "input": "import UIKit\nimport MapKit\n\nclass MapViewController: UIViewController {\n    @IBOutlet weak var mapView: MKMapView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // TODO: Add code to display user's current location on the map\n    }\n}",
      "output": "import UIKit\nimport MapKit\n\nclass MapViewController: UIViewController, CLLocationManagerDelegate {\n    @IBOutlet weak var mapView: MKMapView!\n    private var locationManager: CLLocationManager!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupLocationManager()\n        mapView.showsUserLocation = true\n    }\n    \n    private func setupLocationManager() {\n        locationManager = CLLocationManager()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n    \n    // MARK: - CLLocationManagerDelegate\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            let region = MKCoordinateRegion(center: location.coordinate, latitudinalMeters: 1000, longitudinalMeters: 1000)\n            mapView.setRegion(region, animated: true)\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error while updating location: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": "Implement a custom UITableViewCell with a UILabel and a UIImageView using programmatically created constraints.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n\n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    let iconImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupUI()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupUI() {\n        addSubview(titleLabel)\n        addSubview(iconImageView)\n        \n        NSLayoutConstraint.activate([\n            iconImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 16),\n            iconImageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            iconImageView.heightAnchor.constraint(equalToConstant: 40),\n            iconImageView.widthAnchor.constraint(equalToConstant: 40),\n            \n            titleLabel.leadingAnchor.constraint(equalTo: iconImageView.trailingAnchor, constant: 16),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -16),\n            titleLabel.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIControl subclass that displays a star rating using UIButton objects.",
      "input": "",
      "output": "import UIKit\n\nclass StarRatingControl: UIControl {\n    var rating = 0 {\n        didSet {\n            updateButtons()\n        }\n    }\n    private var buttons = [UIButton]()\n    private let starCount = 5\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupButtons()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupButtons()\n    }\n    \n    private func setupButtons() {\n        for _ in 0..<starCount {\n            let button = UIButton()\n            button.setImage(UIImage(named: \"emptyStar\"), for: .normal)\n            button.setImage(UIImage(named: \"filledStar\"), for: .selected)\n            button.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n            addSubview(button)\n            buttons.append(button)\n        }\n        updateButtons()\n    }\n    \n    override func layoutSubviews() {\n        let buttonSize = bounds.width / CGFloat(starCount)\n        for (index, button) in buttons.enumerated() {\n            button.frame = CGRect(x: CGFloat(index) * buttonSize, y: 0, width: buttonSize, height: bounds.height)\n        }\n    }\n    \n    @objc private func buttonTapped(_ sender: UIButton) {\n        guard let index = buttons.firstIndex(of: sender) else { return }\n        rating = index + 1\n        sendActions(for: .valueChanged)\n    }\n    \n    private func updateButtons() {\n        for (index, button) in buttons.enumerated() {\n            button.isSelected = index < rating\n        }\n    }\n}"
    },
    {
      "instruction": " \nImplement a UICollectionView with a custom UICollectionViewCell containing a UILabel and a UIImageView, using a UICollectionViewFlowLayout.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCell\"\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupUI()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupUI() {\n        addSubview(titleLabel)\n        addSubview(imageView)\n        \n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n            \n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n    let dataSource = [(\"Item 1\", \"image1\"), (\"Item 2\", \"image2\")]\n    \n    init() {\n        let layout = UICollectionViewFlowLayout()\n        layout.itemSize = CGSize(width: 100, height: 140)\n        layout.minimumLineSpacing = 16\n        layout.sectionInset = UIEdgeInsets(top: 16, left: 16, bottom: 16, right: 16)\n        super.init(collectionViewLayout: layout)\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n        collectionView.backgroundColor = .white\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return dataSource.count\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        let (title, imageName) = dataSource[indexPath.item]\n        cell.titleLabel.text = title\n        cell.imageView.image = UIImage(named: imageName)\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIView subclass that displays a circular progress bar using CAShapeLayer and a UILabel to show the percentage.",
      "input": "",
      "output": "import UIKit\n\nclass CircularProgressView: UIView {\n    private var progressLayer: CAShapeLayer!\n    private var backgroundLayer: CAShapeLayer!\n    private let percentageLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textAlignment = .center\n        return label\n    }()\n    \n    var progress: CGFloat = 0 {\n        didSet {\n            updateProgress()\n        }\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup()\n    }\n    \n    private func setup() {\n        backgroundLayer = createCircularLayer(strokeColor: UIColor.lightGray.cgColor)\n        progressLayer = createCircularLayer(strokeColor: UIColor.red.cgColor)\n        layer.addSublayer(backgroundLayer)\n        layer.addSublayer(progressLayer)\n        addSubview(percentageLabel)\n        \n        NSLayoutConstraint.activate([\n            percentageLabel.centerXAnchor.constraint(equalTo: centerXAnchor),\n            percentageLabel.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        backgroundLayer.path = createCircularPath().cgPath\n        progressLayer.path = createCircularPath().cgPath\n        updateProgress()\n    }\n    \n    private func createCircularLayer(strokeColor: CGColor) -> CAShapeLayer {\n        let layer = CAShapeLayer()\n        layer.strokeColor = strokeColor\n        layer.lineWidth = 10\n        layer.fillColor = UIColor.clear.cgColor\n        layer.lineCap = .round\n        return layer\n    }\n    \n    private func createCircularPath() -> UIBezierPath {\n        return UIBezierPath(arcCenter: CGPoint(x: bounds.midX, y: bounds.midY), radius: bounds.width / 2 - 10, startAngle: -CGFloat.pi / 2, endAngle: 3 * CGFloat.pi / 2, clockwise: true)\n    }\n    \n    private func updateProgress() {\n        progressLayer.strokeEnd = progress\n        percentageLabel.text = \"\\(Int(progress * 100))%\"\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIViewController subclass that uses a UIScrollView and UIStackView to display dynamic content.",
      "input": "",
      "output": "import UIKit\n\nclass DynamicContentViewController: UIViewController {\n    let scrollView: UIScrollView = {\n        let scrollView = UIScrollView()\n        scrollView.translatesAutoresizingMaskIntoConstraints = false\n        return scrollView\n    }()\n    \n    let stackView: UIStackView = {\n        let stackView = UIStackView()\n        stackView.translatesAutoresizingMaskIntoConstraints = false\n        stackView.axis = .vertical\n        stackView.spacing = 8\n        return stackView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n        \n        view.addSubview(scrollView)\n        scrollView.addSubview(stackView)\n        \n        NSLayoutConstraint.activate([\n            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            scrollView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            \n            stackView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor, constant: 16),\n            stackView.topAnchor.constraint(equalTo: scrollView.topAnchor, constant: 16),\n            stackView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor, constant: -16),\n            stackView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor, constant: -16),\n            stackView.widthAnchor.constraint(equalTo: scrollView.widthAnchor, constant: -32)\n        ])\n        \n        for i in 1...10 {\n            let label = UILabel()\n            label.text = \"This is label \\(i)\"\n            label.numberOfLines = 0\n            stackView.addArrangedSubview(label)\n        }\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UITextField subclass that includes a left icon, a right clear button, and a custom border.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTextField: UITextField {\n    var leftIcon: UIImage? {\n        didSet {\n            updateView()\n        }\n    }\n    \n   "
    },
    {
      "instruction": "Write a Swift function that asynchronously downloads an image from a URL and sets it as the background image of a UIButton.",
      "input": "",
      "output": "import UIKit\n\nfunc setBackgroundImage(url: URL, for button: UIButton) {\n    DispatchQueue.global().async {\n        if let data = try? Data(contentsOf: url), let image = UIImage(data: data) {\n            DispatchQueue.main.async {\n                button.setBackgroundImage(image, for: .normal)\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a UICollectionView with a specified layout to a UIView and sets its delegate and dataSource.",
      "input": "",
      "output": "import UIKit\n\nfunc addCollectionView(to view: UIView, withLayout layout: UICollectionViewLayout, delegate: UICollectionViewDelegate, dataSource: UICollectionViewDataSource) {\n    let collectionView = UICollectionView(frame: view.bounds, collectionViewLayout: layout)\n    collectionView.delegate = delegate\n    collectionView.dataSource = dataSource\n    view.addSubview(collectionView)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that presents a UIAlertController with a specified title, message, and action button.",
      "input": "",
      "output": "import UIKit\n\nfunc presentAlert(in viewController: UIViewController, title: String, message: String, actionTitle: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: actionTitle, style: .default, handler: nil)\n    alertController.addAction(action)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that performs a segue with a specified identifier from a UIViewController.",
      "input": "",
      "output": "import UIKit\n\nfunc performSegue(from viewController: UIViewController, withIdentifier identifier: String) {\n    viewController.performSegue(withIdentifier: identifier, sender: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a child view controller to a specified parent view controller and adds the child's view to the parent's view.",
      "input": "",
      "output": "import UIKit\n\nfunc addChildViewController(child: UIViewController, to parent: UIViewController) {\n    parent.addChild(child)\n    parent.view.addSubview(child.view)\n    child.didMove(toParent: parent)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that removes a specified child view controller from its parent view controller.",
      "input": "",
      "output": "import UIKit\n\nfunc removeChildViewController(child: UIViewController) {\n    child.willMove(toParent: nil)\n    child.view.removeFromSuperview()\n    child.removeFromParent()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that registers a UITableViewCell subclass with a specified identifier to a UITableView.",
      "input": "",
      "output": "import UIKit\n\nfunc register(cellClass: UITableViewCell.Type, forCellWithReuseIdentifier identifier: String, to tableView: UITableView) {\n    tableView.register(cellClass, forCellReuseIdentifier: identifier)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sets the left and right bar button items of a UIViewController's navigation item with specified UIBarButtonItems.",
      "input": "",
      "output": "import UIKit\n\nfunc setLeftAndRightBarButtonItems(leftItem: UIBarButtonItem, rightItem: UIBarButtonItem, for viewController: UIViewController) {\n    viewController.navigationItem.leftBarButtonItem = leftItem\n    viewController.navigationItem.rightBarButtonItem = rightItem\n}"
    },
    {
      "instruction": "Create a Swift function that loads a JSON file, decodes it into an array of custom objects, and returns the objects or an error using a completion handler block.",
      "input": "",
      "output": "import Foundation\n\nstruct CustomObject: Codable {\n    let id: Int\n    let title: String\n    let description: String\n}\n\nfunc loadJSONFile<T: Codable>(fileName: String, completion: @escaping(Result<[T], Error>) -> Void) {\n    guard let url = Bundle.main.url(forResource: fileName, withExtension: \"json\") else {\n        completion(.failure(NSError(domain: \"File not found\", code: 404, userInfo: nil)))\n        return\n    }\n    \n    DispatchQueue.global().async {\n        do {\n            let data = try Data(contentsOf: url)\n            let decoder = JSONDecoder()\n            let objects = try decoder.decode([T].self, from: data)\n            DispatchQueue.main.async {\n                completion(.success(objects))\n            }\n        } catch {\n            DispatchQueue.main.async {\n                completion(.failure(error))\n            }\n        }\n    }\n}"
    },
    {
      "instruction": "Create a custom UITableViewCell class with an ImageView, UILabel, and a UITextField, and implement the required initializer.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let customImageView: UIImageView\n    let customLabel: UILabel\n    let customTextField: UITextField\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        customImageView = UIImageView()\n        customLabel = UILabel()\n        customTextField = UITextField()\n    \n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n    \n        contentView.addSubview(customImageView)\n        contentView.addSubview(customLabel)\n        contentView.addSubview(customTextField)\n    \n        // Configure your custom UI components here\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": "Create a custom UIView subclass with a UILabel and a UIActivityIndicatorView, and implement methods to show and hide the activity indicator.",
      "input": "",
      "output": "import UIKit\n\nclass CustomLoadingView: UIView {\n    let loadingLabel: UILabel\n    let activityIndicator: UIActivityIndicatorView\n\n    override init(frame: CGRect) {\n        loadingLabel = UILabel()\n        activityIndicator = UIActivityIndicatorView(style: .medium)\n    \n        super.init(frame: frame)\n    \n        addSubview(loadingLabel)\n        addSubview(activityIndicator)\n    \n        // Configure your custom UI components here\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    func showLoading() {\n        loadingLabel.isHidden = false\n        activityIndicator.isHidden = false\n        activityIndicator.startAnimating()\n    }\n\n    func hideLoading() {\n        loadingLabel.isHidden = true\n        activityIndicator.isHidden = true\n        activityIndicator.stopAnimating()\n    }\n}"
    },
    {
      "instruction": "Create a custom UIControl subclass that acts as a rating control with custom images for selected and unselected states.",
      "input": "",
      "output": "import UIKit\n\nclass RatingControl: UIControl {\n    private var ratingButtons: [UIButton] = []\n    var rating: Int = 0 {\n        didSet {\n            updateButtonSelectionStates()\n        }\n    }\n\n    let selectedImage: UIImage\n    let unselectedImage: UIImage\n\n    init(frame: CGRect, selectedImage: UIImage, unselectedImage: UIImage) {\n        self.selectedImage = selectedImage\n        self.unselectedImage = unselectedImage\n        super.init(frame: frame)\n        createRatingButtons()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func createRatingButtons() {\n        for _ in 0..<5 {\n            let button = UIButton(type: .custom)\n            button.setImage(unselectedImage, for: .normal)\n            button.setImage(selectedImage, for: .selected)\n            button.addTarget(self, action: #selector(ratingButtonTapped(button:)), for: .touchUpInside)\n            addSubview(button)\n            ratingButtons.append(button)\n        }\n        // Layout and position your buttons here\n    }\n\n    @objc private func ratingButtonTapped(button: UIButton) {\n        guard let index = ratingButtons.firstIndex(of: button) else {\n            return\n        }\n\n        rating = index + 1\n        sendActions(for: .valueChanged)\n    }\n\n    private func updateButtonSelectionStates() {\n        for (index, button) in ratingButtons.enumerated() {\n            button.isSelected = index < rating\n        }\n    }\n}"
    },
    {
      "instruction": "Create a URLSession-based function that takes a URL and returns the data or an error using a completion handler.",
      "input": "",
      "output": "import Foundation\n\nfunc fetchData(from url: URL, completion: @escaping (Result<Data, Error>) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { (data,response, error) in\n        if let error = error {\n            DispatchQueue.main.async {\n                completion(.failure(error))\n            }\n            return\n        }\n        \n        guard let data = data else {\n            DispatchQueue.main.async {\n                completion(.failure(NSError(domain: \"No data\", code: 500, userInfo: nil)))\n            }\n            return\n        }\n        \n        DispatchQueue.main.async {\n            completion(.success(data))\n        }\n    }\n    \n    task.resume()\n}"
    },
    {
      "instruction": " \nCreate a Swift function that takes a UIImageView, a URL, and a placeholder UIImage. The function should download the image from the URL and set it to the UIImageView, using the placeholder UIImage while the image is being downloaded.",
      "input": "",
      "output": "import UIKit\n\nfunc setImage(from url: URL, to imageView: UIImageView, placeholder: UIImage? = nil) {\n    imageView.image = placeholder\n    \n    fetchData(from: url) { result in\n        switch result {\n        case .success(let data):\n            let image = UIImage(data: data)\n            DispatchQueue.main.async {\n                imageView.image = image\n            }\n        case .failure(let error):\n            print(\"Error loading image: \\(error.localizedDescription)\")\n        }\n    }\n}"
    },
    {
      "instruction": "Create a Swift function that takes a UITableView and a UISearchBar, and filters the data in the table view based on the search text, updating the table view as the user types.",
      "input": "",
      "output": "import UIKit\n\nclass SearchableTableViewController: UITableViewController, UISearchBarDelegate {\n    var allData: [String] = [] // Replace with your data type\n    var filteredData: [String] = [] // Replace with your data type\n    \n    func setupSearchBar(searchBar: UISearchBar) {\n        searchBar.delegate = self\n    }\n    \n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredData = allData\n        } else {\n            filteredData = allData.filter { $0.lowercased().contains(searchText.lowercased()) } // Update the filter condition based on your data type\n        }\n        \n        tableView.reloadData()\n    }\n    \n    // Implement your tableView's data source methods using filteredData\n}"
    },
    {
      "instruction": "Create a Swift function that takes a UICollectionViewCell, a UICollectionView, and a UIImage, and animates the UICollectionViewCell to a fullscreen view using the UIImage as a transitional element.",
      "input": "",
      "output": "import UIKit\n\nextension UIViewController: UINavigationControllerDelegate, UIViewControllerTransitioningDelegate {\n    func animateToFullscreen(cell: UICollectionViewCell, collectionView: UICollectionView, image: UIImage) {\n        guard let cellFrame = cell.superview?.convert(cell.frame, to: nil) else { return }\n        \n        let imageView = UIImageView(frame: cellFrame)\n        imageView.image = image\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        \n        let snapshotView = imageView.snapshotView(afterScreenUpdates: false)\n        snapshotView?.frame = cellFrame\n        \n        view.addSubview(snapshotView!)\n        cell.isHidden = true\n        \n        let finalFrame = AVMakeRect(aspectRatio: image.size, insideRect: view.bounds)\n        \n        UIView.animate(\n            withDuration: 0.3,\n            delay: 0,\n            options: .curveEaseInOut,\n            animations: {\n                snapshotView?.frame = finalFrame\n            },\n            completion: { _ in\n                snapshotView?.removeFromSuperview()\n                cell.isHidden = false\n                \n                // Present the fullscreen view controller\n            }\n        )\n    }\n}"
    },
    {
      "instruction": "Create a custom table view cell with a profile picture, name label, and a subtitle label, and a custom table view controller that uses the custom cell",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var profilePictureImageView: UIImageView!\n    @IBOutlet weak var nameLabel: UILabel!\n    @IBOutlet weak var subtitleLabel: UILabel!\n    \n    func configure(with profilePicture: UIImage, name: String, subtitle: String) {\n        profilePictureImageView.image = profilePicture\n        nameLabel.text = name\n        subtitleLabel.text = subtitle\n    }\n}\n\nclass CustomTableViewController: UITableViewController {\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomTableViewCell\", for: indexPath) as! CustomTableViewCell\n        let item = items[indexPath.row]\n        cell.configure(with: item.profilePicture, name: item.name, subtitle: item.subtitle)\n        return cell\n    }\n}"
    },
    {
      "instruction": "Create a function that makes an API call using URLSession, parses the JSON response into a custom model object, and returns the result using a completion handler",
      "input": "",
      "output": "import Foundation\n\nstruct CustomModel: Decodable {\n    let id: Int\n    let title: String\n}\n\nfunc fetchCustomModel(url: URL, completionHandler: @escaping (Result<CustomModel, Error>) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completionHandler(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completionHandler(.failure(NSError(domain: \"com.example\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let customModel = try JSONDecoder().decode(CustomModel.self, from: data)\n            completionHandler(.success(customModel))\n        } catch {\n            completionHandler(.failure(error))\n        }\n    }.resume()\n}"
    },
    {
      "instruction": "Create a custom UIView subclass with a gradient background, and a UILabel with rounded corners inside",
      "input": "",
      "output": "import UIKit\n\nclass GradientView: UIView {\n    @IBOutlet weak var label: UILabel!\n\n    override func awakeFromNib() {\n        super.awakeFromNib()\n        setupGradient()\n        setupLabel()\n    }\n\n    private func setupGradient() {\n        let gradientLayer = CAGradientLayer()\n        gradientLayer.frame = bounds\n        gradientLayer.colors = [UIColor.red.cgColor, UIColor.blue.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 1)\n        layer.insertSublayer(gradientLayer, at: 0)\n    }\n\n    private func setupLabel() {\n        label.layer.cornerRadius = 8\n        label.layer.masksToBounds = true\n        label.backgroundColor = .white\n    }\n}"
    },
    {
      "instruction": "Create a function that takes a UIImage and compresses it to a maximum file size using a binary search",
      "input": "",
      "output": "import UIKit\n\nfunc compressImage(_ image: UIImage, maxFileSize: Int) -> Data? {\n    let maxFileSizeInBytes = maxFileSize * 1024\n    var compression: CGFloat = 1.0\n    var imageData = image.jpegData(compressionQuality: compression)\n\n    guard var initialData = imageData else {\n        return nil\n    }\n\n    var lower: CGFloat = 0.0\n    var upper: CGFloat = 1.0\n\n    while initialData.count > maxFileSizeInBytes && abs(upper - lower) > 0.001 {\n        compression = (lower + upper) / 2\n        imageData = image.jpegData(compressionQuality: compression)\n\n        guard let newData = imageData else {\n            return nil\n        }\n\n        if newData.count > maxFileSizeInBytes {\n            lower = compression\n        } else {\n            upper = compression\n        }\n\n        initialData = newData\n    }\n\n    return initialData\n}"
    },
    {
      "instruction": "Create a custom UIPickerView subclass that allows selecting a date and time, with separate components for day, month, year, hour, and minute",
      "input": "",
      "output": "import UIKit\n\nclass DateTimePickerView: UIPickerView, UIPickerViewDelegate, UIPickerViewDataSource {\n    private let days = Array(1...31)\n    private let months = Array(1...12)\n    private let years = Array(1900...2100)\n    private let hours = Array(0...23)\n    private let minutes = Array(0...59)\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup()\n       private func setup() {\n        delegate = self\n        dataSource = self\n    }\n\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 5\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        switch component {\n        case 0: return days.count\n        case 1: return months.count\n        case 2: return years.count\n        case 3: return hours.count\n        case 4: return minutes.count\n        default: return 0\n        }\n    }\n\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        switch component {\n        case 0: return \"\\(days[row])\"\n        case 1: return \"\\(months[row])\"\n        case 2: return \"\\(years[row])\"\n        case 3: return \"\\(hours[row])\"\n        case 4: return \"\\(minutes[row])\"\n        default: return nil\n        }\n    }\n\n    func getSelectedDate() -> Date? {\n        let day = days[selectedRow(inComponent: 0)]\n        let month = months[selectedRow(inComponent: 1)]\n        let year = years[selectedRow(inComponent: 2)]\n        let hour = hours[selectedRow(inComponent: 3)]\n        let minute = minutes[selectedRow(inComponent: 4)]\n\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat = \"dd MM yyyy HH:mm\"\n        return dateFormatter.date(from: \"\\(day) \\(month) \\(year) \\(hour):\\(minute)\")\n    }\n}"
    },
    {
      "instruction": "Create a function that fetches data from a URL, caches it using NSCache, and returns the cache if the data is already available",
      "input": "",
      "output": "import Foundation\n\nclass DataCache {\n    private let cache = NSCache<NSURL, NSData>()\n\n    func fetchData(url: URL, completionHandler: @escaping (Result<Data, Error>) -> Void) {\n        if let cachedData = cache.object(forKey: url as NSURL) {\n            completionHandler(.success(cachedData as Data))\n            return\n        }\n\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            if let error = error {\n                completionHandler(.failure(error))\n                return\n            }\n\n            guard let data = data else {\n                completionHandler(.failure(NSError(domain: \"com.example\", code: -1, userInfo: nil)))\n                return\n            }\n\n            self.cache.setObject(data as NSData, forKey: url as NSURL)\n            completionHandler(.success(data))\n        }.resume()\n    }\n}"
    },
    {
      "instruction": "Create a custom UISlider subclass that displays a custom tooltip with the current value when the user interacts with the slider",
      "input": "",
      "output": "import UIKit\n\nclass CustomSlider: UISlider {\n    private var tooltip: UILabel?\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup()\n    }\n\n    private func setup() {\n        addTarget(self, action: #selector(touchDown), for: .touchDown)\n        addTarget(self, action: #selector(valueChanged), for: .valueChanged)\n        addTarget(self, action: #selector(touchUp), for: [.touchUpInside, .touchUpOutside])\n    }\n\n    @objc private func touchDown() {\n        showTooltip()\n    }\n\n    @objc private func valueChanged() {\n        updateTooltip()\n    }\n\n    @objc private func touchUp() {\n        hideTooltip()\n    }\n\n    private func showTooltip() {\n        tooltip = UILabel()\n        tooltip?.backgroundColor = .black\n        tooltip?.textColor = .white\n        tooltip?.alpha = 0.8\n        tooltip?.layer.cornerRadius = 5\n        tooltip?.clipsToBounds = true\n        tooltip?.textAlignment = .center\n        tooltip?.font = UIFont.systemFont(ofSize: 12)\n\n        updateTooltip()\n        guard let tooltip = tooltip else { return }\n        addSubview(tooltip)\n    }\n\n    private func updateTooltip() {\n        guard let tooltip = tooltip else { return }\n        let value = Int(self.value)\n        tooltip.text = \"\\(value)\"\n        tooltip.sizeToFit()\n        tooltip.frame.size.width += 10\n        tooltip.frame.size.height += 5\n        tooltip.center = CGPoint(x: thumbCenterX(), y: bounds.midY - 30)\n    }\n\n    private func hideTooltip() {\n        tooltip?.removeFromSuperview()\n        tooltip = nil\n    }\n\n    private func thumbCenterX() -> CGFloat {\n        let trackRange = bounds.width - thumbRect(forBounds: bounds, trackRect: trackRect(forBounds: bounds), value: 0).midX\n        let startX = trackRect(forBounds: bounds).minX\n        return startX + trackRange * CGFloat((value - minimumValue) / (maximumValue - minimumValue))\n    }\n}"
    },
    {
      "instruction": "Implement a custom UICollectionView with a custom UICollectionViewCell that displays images and labels.",
      "input": "",
      "output": "import UIKit\n\nstruct CustomItem {\n    let image: UIImage\n    let title: String\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n\n    private let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n\n    private let titleLabel: UILabel = {\n        let label = UILabel()\n        label.textAlignment = .center\n        label.font = UIFont.systemFont(ofSize: 16, weight: .medium)\n        return label\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(imageView)\n        contentView.addSubview(titleLabel)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        imageView.frame = CGRect(x: 0, y: 0, width: contentView.bounds.width, height: contentView.bounds.height * 0.75)\n        titleLabel.frame = CGRect(x: 0, y: imageView.bounds.height, width: contentView.bounds.width, height: contentView.bounds.height * 0.25)\n    }\n\n    func configure(with item: CustomItem) {\n        imageView.image = item.image\n        titleLabel.text = item.title\n    }\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n    private var items: [CustomItem] = []\n\n    init() {\n        let layout = UICollectionViewFlowLayout()\n        layout.itemSize = CGSize(width: 100, height: 150)\n        layout.sectionInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)\n        super.init(collectionViewLayout: layout)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.backgroundColor = .white\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n\n        // Populate items with sample data\n        items = [\n            CustomItem(image: UIImage(named: \"sample1\")!, title: \"Sample 1\"),\n            CustomItem(image: UIImage(named: \"sample2\")!, title: \"Sample 2\"),\n            CustomItem(image: UIImage(named: \"sample3\")!, title: \"Sample 3\")\n        ]\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        cell.configure(with: items[indexPath.item])\n        return cell\n    }\n}"
    },
    {
      "instruction": "Implement a custom UITableView with a custom UITableViewCell that displays a user's name, email, and a profile picture.",
      "input": "",
      "output": "import UIKit\n\nstruct User {\n    let name: String\n    let email: String\n    let profilePicture: UIImage\n}\n\nclass CustomTableViewCell: UITableViewCell {\n    static let reuseIdentifier = \"CustomTableViewCell\"\n\n    private let profileImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        imageView.layer.cornerRadius = 30\n        return imageView\n    }()\n\n    private let nameLabel: UILabel = {\n        let label = UILabel()\n        label.font = UIFont.systemFont(ofSize: 18, weight: .medium)\n        return label\n    }()\n\n    private let emailLabel: UILabel = {\n        let label = UILabel()\n        label.font = UIFont.systemFont(ofSize: 14, weight: .regular)\n        label.textColor = .gray\n        return label\n    }()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        contentView.addSubview(profileImageView)\n        contentView.addSubview(nameLabel)\n        contentView.addSubview(emailLabel)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        profileImageView.frame = CGRect(x: 15, y: 7, width: 60, height: 60)\n        nameLabel.frame = CGRect(x: 90, y: 15, width: contentView.bounds.width - 100, height: 25)\n        emailLabel.frame = CGRect(x: 90, y: 40, width: contentView.bounds.width - 100, height: 20)\n    }\n\n    func configure(with user: User) {\n        profileImageView.image = user.profilePicture\n        nameLabel.text = user.name\n        emailLabel.text = user.email\n    }\n}\n\nclassCustomTableViewController: UITableViewController {\n    private var users: [User] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: CustomTableViewCell.reuseIdentifier)\n\n        // Populate users with sample data\n        users = [\n            User(name: \"John Doe\", email: \"john.doe@example.com\", profilePicture: UIImage(named: \"john\")!),\n            User(name: \"Jane Smith\", email: \"jane.smith@example.com\", profilePicture: UIImage(named: \"jane\")!)\n        ]\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return users.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.reuseIdentifier, for: indexPath) as! CustomTableViewCell\n        cell.configure(with: users[indexPath.row])\n        return cell\n    }\n\n    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {\n        return 75\n    }\n}"
    },
    {
      "instruction": "Create a WeatherViewController that fetches weather data from OpenWeatherMap API and displays the temperature, weather description, and an icon.",
      "input": "",
      "output": "import UIKit\n\nstruct WeatherData: Codable {\n    let main: Main\n    let weather: [Weather]\n\n    struct Main: Codable {\n        let temp: Double\n    }\n\n    struct Weather: Codable {\n        let description: String\n        let icon: String\n    }\n}\n\nclass WeatherViewController: UIViewController {\n    private let apiKey = \"YOUR_API_KEY\"\n\n    private let temperatureLabel: UILabel = {\n        let label = UILabel()\n        label.font = UIFont.systemFont(ofSize: 48, weight: .medium)\n        label.textAlignment = .center\n        return label\n    }()\n\n    private let descriptionLabel: UILabel = {\n        let label = UILabel()\n        label.font = UIFont.systemFont(ofSize: 24, weight: .regular)\n        label.textAlignment = .center\n        return label\n    }()\n\n    private let weatherIcon: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFit\n        return imageView\n    }()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(temperatureLabel)\n        view.addSubview(descriptionLabel)\n        view.addSubview(weatherIcon)\n\n        fetchWeatherData()\n    }\n\n    override func viewWillLayoutSubviews() {\n        super.viewWillLayoutSubviews()\n        temperatureLabel.frame = CGRect(x: 0, y: 100, width: view.bounds.width, height: 50)\n        descriptionLabel.frame = CGRect(x: 0, y: 160, width: view.bounds.width, height: 30)\n        weatherIcon.frame = CGRect(x: (view.bounds.width - 100) / 2, y: 200, width: 100, height: 100)\n    }\n\n    private func fetchWeatherData() {\n        guard let url = URL(string: \"https://api.openweathermap.org/data/2.5/weather?q=London&appid=\\(apiKey)&units=metric\") else { return }\n        let task = URLSession.shared.dataTask(with: url) { [weak self] data, response, error in\n            guard let data = data, error == nil else { return }\n            do {\n                let weatherData = try JSONDecoder().decode(WeatherData.self, from: data)\n                DispatchQueue.main.async {\n                    self?.updateUI(with: weatherData)\n                }\n            } catch {\n                print(error)\n            }\n        }\n        task.resume()\n    }\n\n    private func updateUI(with weatherData: WeatherData) {\n        temperatureLabel.text = \"\\(Int(weatherData.main.temp))°\"\n        descriptionLabel.text = weatherData.weather.first?.description.capitalized\n        loadImage(icon: weatherData.weather.first?.icon)\n    }\n\n    private func loadImage(icon: String?) {\n        guard let icon = icon, let url = URL(string: \"https://openweathermap.org/img/wn/\\(icon)@2x.png\") else { return }\n        let task = URLSession.shared.dataTask(with: url) { [weak self] data, response, error in\n            guard let data = data, error == nil else { return }\n            DispatchQueue.main.async {\n                self?.weatherIcon.image = UIImage(data: data)\n            }\n        }\n        task.resume()\n    }\n}"
    },
    {
      "instruction": "Implement a function called `setupMapView` that initializes a `MKMapView` instance on the current view with the given `CLLocationCoordinate2D`. Add an `MKPointAnnotation` to the map with the same coordinate and title.",
      "input": "import UIKit\nimport MapKit\n\nclass MapViewController: UIViewController {\n    \n    private var mapView: MKMapView!\n    private var coordinate: CLLocationCoordinate2D!\n    private var title: String!\n    \n    public func configure(with coordinate: CLLocationCoordinate2D, title: String) {\n        self.coordinate = coordinate\n        self.title = title\n        setupMapView()\n    }\n}",
      "output": "import UIKit\nimport MapKit\n\nclass MapViewController: UIViewController {\n    \n    private var mapView: MKMapView!\n    private var coordinate: CLLocationCoordinate2D!\n    private var title: String!\n    \n    public func configure(with coordinate: CLLocationCoordinate2D, title: String) {\n        self.coordinate = coordinate\n        self.title = title\n        setupMapView()\n    }\n    \n    private func setupMapView() {\n        mapView = MKMapView(frame: view.bounds)\n        view.addSubview(mapView)\n        \n        mapView.setCenter(coordinate, animated: true)\n        let region = MKCoordinateRegion(center: coordinate, latitudinalMeters: 1000, longitudinalMeters: 1000)\n        mapView.setRegion(region, animated: true)\n        \n        let annotation = MKPointAnnotation()\n        annotation.coordinate = coordinate\n        annotation.title = title\n        mapView.addAnnotation(annotation)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function called `setupTableView` that initializes a `UITableView` instance and sets the given view controller as its delegate and data source. Register the custom cell class `CustomTableViewCell` with the reuseIdentifier \"CustomCell\".",
      "input": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {}\n\nclass MainViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {\n    \n    private var tableView: UITableView!\n    \n    // other code here\n    \n}",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {}\n\nclass MainViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {\n    \n    private var tableView: UITableView!\n    \n    // other code here\n\n    private func setupTableView() {\n        tableView = UITableView(frame: view.bounds, style: .plain)\n        view.addSubview(tableView)\n        \n        tableView.delegate = self\n        tableView.dataSource = self\n        \n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomCell\")\n    }\n}"
    },
    {
      "instruction": " \nImplement a function called `retrieveWeatherData` that makes a network request to fetch weather data for the given city using the OpenWeatherMap API. Upon successful response, decode the JSON data into a `WeatherData` model and call the closure with the model.",
      "input": "import Foundation\n\nstruct WeatherData: Codable {\n    let main: Main\n    let weather: [Weather]\n}\n\nstruct Main: Codable {\n    let temp: Double\n}\n\nstruct Weather: Codable {\n    let id: Int\n    let main: String\n    let description: String\n    let icon: String\n}\n\nfunc retrieveWeatherData(city: String, apiKey: String, completion: @escaping (WeatherData?) -> Void) {\n    // TODO: Add your code here\n}",
      "output": "import Foundation\n\nstruct WeatherData: Codable {\n    let main: Main\n    let weather: [Weather]\n}\n\nstruct Main: Codable {\n    let temp: Double\n}\n\nstruct Weather: Codable {\n    let id: Int\n    let main: String\n    let description: String\n    let icon: String\n}\n\nfunc retrieveWeatherData(city: String, apiKey: String, completion: @escaping (WeatherData?) -> Void) {\n    guard let url = URL(string: \"https://api.openweathermap.org/data/2.5/weather?q=\\(city)&appid=\\(apiKey)\") else {\n        completion(nil)\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard error == nil, let data = data else {\n            completion(nil)\n            return\n        }\n        \n        do {\n            let decoder = JSONDecoder()\n            let weatherData = try decoder.decode(WeatherData.self, from: data)\n            completion(weatherData)\n        } catch {\n            completion(nil)\n        }\n    }\n    \n    task.resume()\n}"
    },
    {
      "instruction": "Write a Swift function that fetches data from an API, decodes JSON, and displays the result in a UITableView.",
      "input": "",
      "output": "import UIKit\n\nstruct MyData: Codable {\n    let title: String\n}\n\nclass MyViewController: UIViewController, UITableViewDataSource {\n    \n    private let apiURL = \"https://api.example.com/data\"\n    private var dataItems: [MyData] = []\n    \n    private lazy var tableView: UITableView = {\n        let tableView = UITableView()\n        tableView.translatesAutoresizingMaskIntoConstraints = false\n        tableView.dataSource = self\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"cell\")\n        return tableView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.addSubview(tableView)\n        NSLayoutConstraint.activate([\n            tableView.topAnchor.constraint(equalTo: view.topAnchor),\n            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n        \n        fetchData()\n    }\n    \n    func fetchData() {\n        guard let url = URL(string: apiURL) else { return }\n        \n        URLSession.shared.dataTask(with: url) { data, response, error in\n            guard let data = data else { return }\n            \n            do {\n                let decoder = JSONDecoder()\n                let items = try decoder.decode([MyData].self, from: data)\n                DispatchQueue.main.async {\n                    self.dataItems = items\n                    self.tableView.reloadData()\n                }\n            } catch {\n                print(\"Error: \\(error)\")\n            }\n        }.resume()\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return dataItems.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        cell.textLabel?.text = dataItems[indexPath.row].title\n        return cell\n    }\n    \n}"
    },
    {
      "instruction": "Implement a custom UICollectionViewLayout in Swift that displays items in a staggered grid with variable heights.",
      "input": "",
      "output": "import UIKit\n\nclass StaggeredGridLayout: UICollectionViewLayout {\n    \n    private let numberOfColumns = 2\n    private let cellPadding: CGFloat = 6\n    private var cache: [UICollectionViewLayoutAttributes] = []\n    private var contentHeight: CGFloat = 0\n    private var contentWidth: CGFloat {\n        guard let collectionView = collectionView else { return 0 }\n        let insets = collectionView.contentInset\n        return collectionView.bounds.width - (insets.left + insets.right)\n    }\n    \n    override var collectionViewContentSize: CGSize {\n        return CGSize(width: contentWidth, height: contentHeight)\n    }\n    \n    override func prepare() {\n        guard cache.isEmpty, let collectionView = collectionView else { return }\n        \n        let columnWidth = contentWidth / CGFloat(numberOfColumns)\n        var xOffset: [CGFloat] = []\n        for column in 0..<numberOfColumns {\n            xOffset.append(CGFloat(column) * columnWidth)\n        }\n        \n        var column = 0\n        var yOffset: [CGFloat] = .init(repeating: 0, count: numberOfColumns)\n        \n        for item in 0..<collectionView.numberOfItems(inSection: 0) {\n            let indexPath = IndexPath(item: item, section: 0)\n            let height: CGFloat = CGFloat.random(in: 150...300)\n            let frame = CGRect(x: xOffset[column], y: yOffset[column], width: columnWidth, height: height)\n            let insetFrame = frame.insetBy(dx: cellPadding, dy: cellPadding)\n            \n            let attributes = UICollectionViewLayoutAttributes(forCellWith: indexPath)\n            attributes.frame = insetFrame\n            cache.append(attributes)\n            \n            contentHeight = max(contentHeight, frame.maxY)\n            yOffset[column] = yOffset[column] + height\n            \n            column = column < (numberOfColumns - 1) ? (column + 1) : 0\n        }\n    }\n    \n    override func layoutAttributesForElements(in rect: CGRect) -> [UICollectionViewLayoutAttributes]? {\n        var visibleLayoutAttributes: [UICollectionViewLayoutAttributes] = []\n        \n        for attributes in cache {\n            if attributes.frame.intersects(rect) {\n                visibleLayoutAttributes.append(attributes)\n            }\n        }\n        return visibleLayoutAttributes\n    }\n    \n    override func layoutAttributesForItem(at indexPath: IndexPath) -> UICollectionViewLayoutAttributes? {\n        return cache[indexPath.item]\n    }\n    \n}"
    },
    {
      "instruction": "Write a function in Swift that fetches user profile data from a REST API and decodes the JSON response into a custom `UserProfile` model.",
      "input": "API URL: https://api.example.com/user-profile/1\nSample JSON response:\n{\n    \"id\": 1,\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"age\": 30\n}",
      "output": "import Foundation\n\n// Step 1: Define the UserProfile model\nstruct UserProfile: Codable {\n    let id: Int\n    let name: String\n    let email: String\n    let age: Int\n}\n\n// Step 2: Create a function to fetch user profile data\nfunc fetchUserProfile(completion: @escaping (Result<UserProfile, Error>) -> Void) {\n    let urlString = \"https://api.example.com/user-profile/1\"\n    guard let url = URL(string: urlString) else {\n        completion(.failure(NSError(domain: \"\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"Invalid URL\"])))\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"No Data\"])))\n            return\n        }\n        \n        do {\n            let decoder = JSONDecoder()\n            let userProfile = try decoder.decode(UserProfile.self, from: data)\n            completion(.success(userProfile))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    \n    task.resume()\n}\n\n// Usage\nfetchUserProfile { result in\n    switch result {\n    case .success(let userProfile):\n        print(\"User profile: \\(userProfile)\")\n    case .failure(let error):\n        print(\"Error fetching user profile: \\(error)\")\n    }\n}"
    },
    {
      "instruction": "Write a function in Swift that asynchronously loads an image from a URL and displays it in a UIImageView.",
      "input": "let imageUrl = \"https://example.com/image.jpg\"",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    // Step 1: Create a UIImageView\n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        // Step 2: Add the UIImageView to the view\n        view.addSubview(imageView)\n        \n        // Step 3: Set up constraints for the UIImageView\n        NSLayoutConstraint.activate([\n            imageView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            imageView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            imageView.widthAnchor.constraint(equalToConstant: 200),\n            imageView.heightAnchor.constraint(equalToConstant: 200)\n        ])\n        \n        // Step 4: Load the image asynchronously\n        loadImage(from: \"https://example.com/image.jpg\") { image in\n            DispatchQueue.main.async {\n                self.imageView.image = image\n            }\n        }\n    }\n    \n    func loadImage(from url: String, completion: @escaping (UIImage?) -> Void) {\n        guard let imageUrl = URL(string: url) else {\n            completion(nil)\n            return\n        }\n        \n        let task = URLSession.shared.dataTask(with: imageUrl) { data, response, error in\n            guard let data = data, error == nil, let image = UIImage(data: data) else {\n                completion(nil)\n                return\n            }\n            \n            completion(image)\n        }\n        \n        task.resume()\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to create a UICollectionView with a custom cell, set its data source and delegate, and implement the required delegate methods",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // Add custom subviews and layout code for the cell here\n}\n\nclass CustomCollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {\n    \n    private let collectionView: UICollectionView\n    \n    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {\n        let layout = UICollectionViewFlowLayout()\n        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n        \n        view.addSubview(collectionView)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.topAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor)\n        ])\n    }\n    \n    // MARK: - UICollectionViewDataSource\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        // Return the number of items in your collection view\n        return 10\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        // Configure the cell with your data\n        return cell\n    }\n    \n    // MARK: - UICollectionViewDelegate\n    \n    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {\n        // Handle item selection\n    }\n    \n    // MARK: - UICollectionViewDelegateFlowLayout\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        // Return the size for the cell\n        return CGSize(width: 100, height: 100)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to make a network request using URLSession to fetch JSON data from a given URL, decode it into a model object, and handle the result in a completion handler",
      "input": "",
      "output": "import Foundation\n\nstruct ExampleModel: Codable {\n    // Add your model properties here\n}\n\nfunc fetchJSONData(from urlString: String, completion: @escaping (Result<ExampleModel, Error>) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(.failure(NSError(domain: \"Invalid URL\", code: -1, userInfo: nil)))\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data received\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let decoder = JSONDecoder()\n            let model = try decoder.decode(ExampleModel.self, from: data)\n            completion(.success(model))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    \n    task.resume()\n}"
    },
    {
      "instruction": "Write a Swift function to create a custom UIStackView with specified axis, distribution, alignment, and spacing, and add an array of UIViews to the stack view",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomStackView(axis: NSLayoutConstraint.Axis, distribution: UIStackView.Distribution, alignment: UIStackView.Alignment, spacing: CGFloat, views: [UIView]) -> UIStackView {\n    let stackView = UIStackView()\n    stackView.axis = axis\n    stackView.distribution = distribution\n    stackView.alignment = alignment\n    stackView.spacing = spacing\n    \n    for view in views {\n        stackView.addArrangedSubview(view)\n    }\n    \n    return stackView\n}"
    },
    {
      "instruction": "Write a Swift function to create a UITableView with a custom UITableViewCell, set its data source and delegate, and implement the required delegate methods",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    // Add custom subviews and layout code for the cell here\n}\n\nclass CustomTableViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    \n    private let tableView = UITableView()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        tableView.dataSource = self\n        tableView.delegate = self\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomCell\")\n        \n        view.addSubview(tableView)\n        tableView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            tableView.topAnchor.constraint(equalTo: view.topAnchor),\n            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor)\n        ])\n    }\n    \n    // MARK: - UITableViewDataSource\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        // Return the number of rows in your table view\n        return 10\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomCell\", for: indexPath) as! CustomTableViewCell\n        // Configure the cell with your data\n        return cell\n    }\n    \n    // MARK: - UITableViewDelegate\n    \n    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        // Handle row selection\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to create an interactive custom UIView transition animation using UIViewControllerAnimatedTransitioning",
      "input": "",
      "output": "import UIKit\n\nclass CustomTransition: NSObject, UIViewControllerAnimatedTransitioning {\n    \n    let duration: TimeInterval\n    \n    init(duration: TimeInterval) {\n        self.duration = duration\n    }\n    \n    func transitionDuration(using transitionContext: UIViewControllerContextTransitioning?) -> TimeInterval {\n        return duration\n    }\n    \n    func animateTransition(using transitionContext: UIViewControllerContextTransitioning) {\n        guard let fromView = transitionContext.view(forKey: .from),\n              let toView = transitionContext.view(forKey: .to) else {\n            transitionContext.completeTransition(false)\n            return\n        }\n        \n        let containerView = transitionContext.containerView\n        containerView.addSubview(toView)\n        \n        // Customize your transition animation here\n        toView.alpha = 0\n        \n        UIView.animate(withDuration: duration, animations: {\n            toView.alpha = 1\n            fromView.alpha = 0\n        }) { _ in\n            fromView.alpha = 1\n            transitionContext.completeTransition(!transitionContext.transitionWasCancelled)\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to create a custom UIButton with a gradient background, corner radius, and shadow",
      "input": "",
      "output": "import UIKit\n\nfunc createGradientButton(title: String, startColor: UIColor, endColor: UIColor, cornerRadius: CGFloat, shadowRadius: CGFloat, shadowOffset: CGSize, shadowOpacity: Float) -> UIButton {\n    let button = UIButton(type: .custom)\n    button.setTitle(title, for: .normal)\n    \n    let gradientLayer = CAGradientLayer()\n    gradientLayer.frame = button.bounds\n    gradientLayer.colors = [startColor.cgColor, endColor.cgColor]\n    gradientLayer.cornerRadius = cornerRadius\n    button.layer.insertSublayer(gradientLayer, at: 0)\n    \n    button.layer.shadowColor = UIColor.black.cgColor\n    button.layer.shadowRadius = shadowRadius\n    button.layer.shadowOffset = shadowOffset\n    button.layer.shadowOpacity = shadowOpacity\n    \n    return button\n}"
    },
    {
      "instruction": "Write a Swift function to create a custom UIPickerView, set its data source, delegate and implement the required delegate methods",
      "input": "",
      "output": "import UIKit\n\nclass CustomPickerViewController: UIViewController, UIPickerViewDataSource, UIPickerViewDelegate {\n    \n    private let pickerView = UIPickerView()\n    private let pickerData = [\"Option 1\", \"Option 2\", \"Option 3\"]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        pickerView.dataSource = self\n        pickerView.delegate = self\n        \n        view.addSubview(pickerView)\n        pickerView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            pickerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            pickerView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n    \n    // MARK: - UIPickerViewDataSource\n    \n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return pickerData.count\n    }\n    \n    // MARK: - UIPickerViewDelegate\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return pickerData[row]\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        // Handle row selection\n    }\n}"
    },
    {
      "instruction": "Implement a custom UICollectionViewCell with a UIImageView and UILabel",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // Create a UIImageView and UILabel\n    let imageView: UIImageView = {\n        let iv = UIImageView()\n        iv.translatesAutoresizingMaskIntoConstraints = false\n        return iv\n    }()\n\n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n\n        // Add the UIImageView and UILabel to the cell's contentView\n        contentView.addSubview(imageView)\n        contentView.addSubview(titleLabel)\n\n        // Apply constraints to position the UIImageView and UILabel\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.heightAnchor.constraint(equalTo: contentView.heightAnchor, multiplier: 0.7),\n\n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nImplement a custom UITableViewHeaderFooterView with a UILabel",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewHeaderFooterView: UITableViewHeaderFooterView {\n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    override init(reuseIdentifier: String?) {\n        super.init(reuseIdentifier: reuseIdentifier)\n        \n        contentView.addSubview(titleLabel)\n        \n        NSLayoutConstraint.activate([\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            titleLabel.topAnchor.constraint(equalTo: contentView.topAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16)\n        ])\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nImplement a custom UIButton that animates when tapped",
      "input": "",
      "output": "import UIKit\n\nclass CustomButton: UIButton {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        addTarget(self, action: #selector(tapped), for: .touchUpInside)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    @objc private func tapped() {\n        UIView.animate(withDuration: 0.1, animations: {\n            self.transform = CGAffineTransform(scaleX: 0.95, y: 0.95)\n        }) { _ in\n            UIView.animate(withDuration: 0.1) {\n                self.transform = CGAffineTransform.identity\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nCreate a UIViewController with a UICollectionView using UICollectionViewDiffableDataSource",
      "input": "",
      "output": "import UIKit\n\nclass DiffableDataSourceViewController: UIViewController {\n    enum Section {\n        case main\n    }\n\n    var collectionView: UICollectionView!\n    var dataSource: UICollectionViewDiffableDataSource<Section, String>!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        configureCollectionView()\n        configureDataSource()\n    }\n\n    func configureCollectionView() {\n        collectionView = UICollectionView(frame: view.bounds, collectionViewLayout: createLayout())\n        collectionView.autoresizingMask = [.flexibleWidth, .flexibleHeight]\n        collectionView.backgroundColor = .systemBackground\n        view.addSubview(collectionView)\n    }\n\n    func createLayout() -> UICollectionViewLayout {\n        let itemSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1.0), heightDimension: .fractionalHeight(1.0))\n        let item = NSCollectionLayoutItem(layoutSize: itemSize)\n\n        let groupSize = NSCollectionLayoutSize(widthDimension: .fractionalWidth(1.0), heightDimension: .absolute(44))\n        let group = NSCollectionLayoutGroup.horizontal(layoutSize: groupSize, subitems: [item])\n\n        let section = NSCollectionLayoutSection(group: group)\n        section.contentInsets = NSDirectionalEdgeInsets(top: 0, leading: 10, bottom: 0, trailing: 10)\n\n        let layout = UICollectionViewCompositionalLayout(section: section)\n        return layout\n    }\n\n    func configureDataSource() {\n        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: \"cell\")\n\n        dataSource = UICollectionViewDiffableDataSource<Section, String>(collectionView: collectionView) { (collectionView, indexPath, identifier) -> UICollectionViewCell? in\n            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"cell\", for: indexPath)\n            cell.contentView.backgroundColor = .systemBlue\n            return cell\n        }\n\n        var snapshot = NSDiffableDataSourceSnapshot<Section, String>()\n        snapshot.appendSections([.main])\n        snapshot.appendItems(Array(repeating: \"Item\", count: 10))\n        dataSource.apply(snapshot, animatingDifferences: false)\n    }\n}"
    },
    {
      "instruction": " \nImplement a custom UISlider with a custom thumb image",
      "input": "",
      "output": "import UIKit\n\nclass CustomSlider: UISlider {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup()\n    }\n\n    private func setup() {\n        let thumbImage = UIImage(named: \"customThumbImage\")\n        setThumbImage(thumbImage, for: .normal)\n    }\n}"
    },
    {
      "instruction": " \nImplement a UIViewController with a UISearchBar and UITableView, filtering the table view based on the search input",
      "input": "",
      "output": "import UIKit\n\nclass SearchViewController: UIViewController, UISearchBarDelegate, UITableViewDataSource, UITableViewDelegate {\n    let searchBar = UISearchBar()\n    let tableView = UITableView()\n\n    let dataSource = [\"Apple\", \"Banana\", \"Cherry\", \"Grape\", \"Orange\", \"Peach\", \"Plum\", \"Strawberry\"]\n    var filteredData: [String] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n\n        setupSearchBar()\n        setupTableView()\n\n        filteredData = dataSource\n    }\n\n    func setupSearchBar() {\n        searchBar.delegate = self\n        searchBar.placeholder = \"Search\"\n        navigationItem.titleView = searchBar\n    }\n\n    func setupTableView() {\n        tableView.dataSource = self\n        tableView.delegate = self\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"cell\")\n\n        view.addSubview(tableView)\n        tableView.frame = view.bounds\n        tableView.autoresizingMask = [.flexibleWidth, .flexibleHeight]\n    }\n\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredData = dataSource\n        } else {\n            filteredData = dataSource.filter { $0.lowercased().contains(searchText.lowercased()) }\n        }\n        tableView.reloadData()\n    }\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredData.count\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        cell.textLabel?.text = filteredData[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nImplement a UIViewController with a UIScrollView and a UIImageView to display a zoomable image",
      "input": "",
      "output": "import UIKit\n\nclass ZoomableImageViewController: UIViewController, UIScrollViewDelegate {\n    let scrollView = UIScrollView()\n    let imageView = UIImageView()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        setupScrollView()\n        setupImageView()\n    }\n\n    func setupScrollView() {\n        scrollView.delegate = self\n        scrollView.maximumZoomScale = 3.0\n        scrollView.minimumZoomScale = 1.0\n\n        view.addSubview(scrollView)\n        scrollView.frame = view.bounds\n        scrollView.autoresizingMask = [.flexibleWidth, .flexibleHeight]\n    }\n\n    func setupImageView() {\n        imageView.image = UIImage(named: \"exampleImage\")\n        imageView.contentMode = .scaleAspectFit\n\n        scrollView.addSubview(imageView)\n        imageView.frame = scrollView.bounds\n        imageView.autoresizingMask = [.flexibleWidth, .flexibleHeight]\n    }\n\n    func viewForZooming(in scrollView: UIScrollView) -> UIView? {\n        return imageView\n    }\n}"
    },
    {
      "instruction": " \nImplement a UITableViewController with sections and index list",
      "input": "",
      "output": "import UIKit\n\nclass SectionedTableViewController: UITableViewController {\n    let sections = [\n        (title: \"A\", items: [\"Apple\", \"Apricot\"]),\n        (title: \"B\", items: [\"Banana\", \"Blackberry\", \"Blueberry\"]),\n        (title: \"C\", items: [\"Cherry\", \"Coconut\", \"Cranberry\"]),\n        (title: \"G\", items: [\"Grape\", \"Grapefruit\"]),\n        (title: \"O\", items: [\"Orange\"]),\n        (title: \"P\", items: [\"Peach\", \"Pineapple\", \"Plum\"]),\n        (title: \"S\", items: [\"Strawberry\"])\n    ]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"cell\")\n    }\n\n    override func numberOfSections(in tableView: UITableView) -> Int {\n        return sections.count\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return sections[section].items.count\n    }\n\n    override func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {\n        return sections[section].title"
    },
    {
      "instruction": "Create a Swift function to configure and display a UIAlertController with a text field and two buttons",
      "input": "",
      "output": "func displayAlertWithTextField(title: String, message: String, placeholder: String, confirmTitle: String, cancelTitle: String, confirmAction: @escaping (String) -> Void) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    alertController.addTextField { (textField) in\n        textField.placeholder = placeholder\n    }\n    \n    let confirmAction = UIAlertAction(title: confirmTitle, style: .default) { (_) in\n        if let textField = alertController.textFields?.first, let text = textField.text {\n            confirmAction(text)\n        }\n    }\n    \n    let cancelAction = UIAlertAction(title: cancelTitle, style: .cancel, handler: nil)\n    \n    alertController.addAction(confirmAction)\n    alertController.addAction(cancelAction)\n    \n    if let topController = UIApplication.shared.keyWindow?.rootViewController {\n        topController.present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that makes an API call to fetch a list of users and decode the JSON response",
      "input": "",
      "output": "import Foundation\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let username: String\n}\n\nfunc fetchUsers(completion: @escaping ([User]?, Error?) -> Void) {\n    let url = URL(string: \"https://jsonplaceholder.typicode.com/users\")!\n    \n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let data = data {\n            do {\n                let users = try JSONDecoder().decode([User].self, from: data)\n                completion(users, nil)\n            } catch {\n                completion(nil, error)\n            }\n        } else {\n            completion(nil, error)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": "Create a custom UICollectionViewCell class with a UIImageView and UILabel",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        \n        contentView.addSubview(imageView)\n        contentView.addSubview(titleLabel)\n        \n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.bottomAnchor.constraint(equalTo: titleLabel.topAnchor),\n            \n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that creates a custom UIView with rounded corners and a shadow",
      "input": "",
      "output": "import UIKit\n\nfunc createRoundedViewWithShadow(cornerRadius: CGFloat, shadowOffset: CGSize, shadowRadius: CGFloat, shadowOpacity: Float) -> UIView {\n    let customView = UIView()\n    \n    customView.layer.cornerRadius = cornerRadius\n    customView.layer.shadowColor = UIColor.black.cgColor\n    customView.layer.shadowOffset = shadowOffset\n    customView.layer.shadowOpacity = shadowOpacity\n    customView.layer.shadowRadius = shadowRadius\n    \n    return customView\n}"
    },
    {
      "instruction": "Write a Swift function that sets up a UITableView with a custom UITableViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    // Custom cell configuration\n}\n\nfunc setupTableView(tableView: UITableView) {\n    tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomCell\")\n    tableView.rowHeight = UITableView.automaticDimension\n    tableView.estimatedRowHeight = 100\n}\n\nextension ViewController: UITableViewDataSource {\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return dataList.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomCell\", for: indexPath) as! CustomTableViewCell\n        // Configure the cell with data from dataList[indexPath.row]\n        \n        return cell\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to present a UIImagePickerController with a specified source type",
      "input": "",
      "output": "import UIKit\n\nfunc presentImagePickerController(sourceType: UIImagePickerController.SourceType, delegate: (UIImagePickerControllerDelegate & UINavigationControllerDelegate)?) {\n    guard UIImagePickerController.isSourceTypeAvailable(sourceType) else {\n        print(\"Source type not available\")\n        return\n    }\n    \n    let imagePickerController = UIImagePickerController()\n    imagePickerController.sourceType = sourceType\n    imagePickerController.delegate =delegate\n    \n    if let topController = UIApplication.shared.keyWindow?.rootViewController {\n        topController.present(imagePickerController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that creates and configures a UIStackView with an array of UIViews",
      "input": "",
      "output": "import UIKit\n\nfunc createConfiguredStackView(views: [UIView], axis: NSLayoutConstraint.Axis, distribution: UIStackView.Distribution, alignment: UIStackView.Alignment, spacing: CGFloat) -> UIStackView {\n    let stackView = UIStackView(arrangedSubviews: views)\n    \n    stackView.axis = axis\n    stackView.distribution = distribution\n    stackView.alignment = alignment\n    stackView.spacing = spacing\n    \n    return stackView\n}"
    },
    {
      "instruction": "Write a Swift function that asynchronously fetches an image from a URL and sets it to a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc loadImageFromURL(url: URL, imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let data = data, let image = UIImage(data: data) {\n            DispatchQueue.main.async {\n                imageView.image = image\n            }\n        } else {\n            print(\"Error loading image: \\(error?.localizedDescription ?? \"Unknown error\")\")\n        }\n    }.resume()\n}"
    },
    {
      "instruction": "Implement a custom TableView with a search bar and display filtered results based on the user's search query.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var titleLabel: UILabel!\n}\n\nclass SearchTableViewController: UITableViewController, UISearchBarDelegate {\n    @IBOutlet weak var searchBar: UISearchBar!\n\n    private var data: [String] = [\"Apple\", \"Banana\", \"Cherry\", \"Grape\", \"Orange\", \"Peach\", \"Plum\"]\n    private var filteredData: [String] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        searchBar.delegate = self\n        filteredData = data\n    }\n\n    // MARK: - Table view data source\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredData.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomCell\", for: indexPath) as! CustomTableViewCell\n        cell.titleLabel.text = filteredData[indexPath.row]\n        return cell\n    }\n\n    // MARK: - Search bar delegate\n\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredData = data\n        } else {\n            filteredData = data.filter { $0.lowercased().contains(searchText.lowercased()) }\n        }\n        tableView.reloadData()\n    }\n}"
    },
    {
      "instruction": " \n\n\nCreate a custom UIView with a horizontal UIScrollView that contains a stack of buttons.",
      "input": "",
      "output": "import UIKit\n\nclass CustomScrollView: UIView {\n    private let scrollView = UIScrollView()\n    private let stackView = UIStackView()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupScrollView()\n        setupStackView()\n        addButtons()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupScrollView() {\n        scrollView.translatesAutoresizingMaskIntoConstraints = false\n        addSubview(scrollView)\n        NSLayoutConstraint.activate([\n            scrollView.topAnchor.constraint(equalTo: topAnchor),\n            scrollView.bottomAnchor.constraint(equalTo: bottomAnchor),\n            scrollView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            scrollView.trailingAnchor.constraint(equalTo: trailingAnchor)\n        ])\n    }\n\n    private func setupStackView() {\n        stackView.translatesAutoresizingMaskIntoConstraints = false\n        stackView.axis = .horizontal\n        stackView.spacing = 15\n        scrollView.addSubview(stackView)\n        NSLayoutConstraint.activate([\n            stackView.topAnchor.constraint(equalTo: scrollView.topAnchor),\n            stackView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),\n            stackView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),\n            stackView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),\n            stackView.heightAnchor.constraint(equalTo: scrollView.heightAnchor)\n        ])\n    }\n\n    private func addButtons() {\n        for i in 1...10 {\n            let button = UIButton()\n            button.setTitle(\"Button \\(i)\", for: .normal)\n            button.setTitleColor(.blue, for: .normal)\n            stackView.addArrangedSubview(button)\n        }\n    }\n}"
    },
    {
      "instruction": " \n\n\nCreate a UICollectionView with custom UICollectionViewCell that displays images and labels fetched from a remote API.",
      "input": "",
      "output": "import UIKit\n\nstruct Item {\n    let imageURL: String\n    let title: String\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n    private let reuseIdentifier = \"CustomCell\"\n\n    private var items: [Item] = [] {\n        didSet {\n            collectionView.reloadData()\n        }\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        fetchItems()\n    }\n\n    // MARK: - UICollectionView data source\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        let item = items[indexPath.row]\n        cell.titleLabel.text = item.title\n        loadImage(from: item.imageURL) { image in\n            cell.imageView.image = image\n        }\n        return cell\n    }\n\n    // MARK: - API call and image loading\n\n    private func fetchItems() {\n        // Replace with a real API call\n        items = [\n            Item(imageURL: \"https://via.placeholder.com/150/0000FF\", title: \"Item 1\"),\n            Item(imageURL: \"https://via.placeholder.com/150/FF0000\", title: \"Item 2\"),\n            Item(imageURL: \"https://via.placeholder.com/150/00FF00\", title: \"Item 3\")\n        ]\n    }\n\n    private func loadImage(from url: String, completion: @escaping (UIImage?) -> Void) {\n        guard let imageURL = URL(string: url) else {\n            completion(nil)\n            return\n        }\n        URLSession.shared.dataTask(with: imageURL) { data, _, _ in\n            guard let data = data, let image = UIImage(data: data) else {\n                completion(nil)\n                return\n            }\n            DispatchQueue.main.async {\n                completion(image)\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \n\n\nCreate a custom UIControl subclass that acts as a star rating component.",
      "input": "",
      "output": "import UIKit\n\nclass StarRatingControl: UIControl {\n    var rating: Int = 0 {\n        didSet {\n            updateStarImages()\n        }\n    }\n\n    private var starButtons: [UIButton] = []\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupStarButtons()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupStarButtons()\n    }\n\n    private func setupStarButtons() {\n        for _ in 0..<5 {\n            let button = UIButton()\n            button.setImage(UIImage(named: \"emptyStar\"), for: .normal)\n            button.setImage(UIImage(named: \"filledStar\"), for: .selected)\n            button.addTarget(self, action: #selector(starButtonTapped(_:)), for: .touchUpInside)\n            addSubview(button)\n            starButtons.append(button)\n        }\n        layoutStarButtons()\n    }\n\n    private func layoutStarButtons() {\n        let buttonSize = Int(frame.size.height)\n        var buttonFrame = CGRect(x: 0, y: 0, width: buttonSize, height: buttonSize)\n\n        for (index, button) in starButtons.enumerated() {\n            buttonFrame.origin.x = CGFloat(index * (buttonSize + 5))\n            button.frame = buttonFrame\n        }\n    }\n\n    @objc private func starButtonTapped(_ button: UIButton) {\n        guard let index = starButtons.firstIndex(of: button) else { return }\n        rating = index + 1\n        sendActions(for: .valueChanged)\n    }\n\n    private func updateStarImages() {\n        for (index, button) in starButtons.enumerated() {\n            button.isSelected = index < rating\n        }\n    }\n}"
    },
    {
      "instruction": " \n\n\nCreate a custom UIViewController that displays a list of countries and their flags using a UITableView and fetching data from a remote API.",
      "input": "",
      "output": "import UIKit\n\nstruct Country {\n    let name: String\n    let flagURL: String\n}\n\nclass CountryTableViewCell: UITableViewCell {\n    @IBOutlet weak var flagImageView: UIImageView!\n    @IBOutlet weak var nameLabel: UILabel!\n}\n\nclass CountryListViewController: UITableViewController {\n    private var countries: [Country] = [] {\n        didSet {\n            tableView.reloadData()\n        }\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        fetchCountries()\n    }\n\n    // MARK: - Table view data source\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return countries.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CountryCell\", for: indexPath) as! CountryTableViewCell\n        let country = countries[indexPath.row]\n        cell.nameLabel.text = country.name\n        loadImage(from: country.flagURL) { image in\n            cell.flagImageView.image = image\n        }\n        return cell\n    }\n\n    // MARK: - API call and image loading\n\n    private func fetchCountries() {\n        // Replace with a real API call\n        countries = [\n            Country(name: \"United States\", flagURL: \"https://via.placeholder.com/64/0000FF\"),\n            Country(name: \"Canada\", flagURL: \"https://via.placeholder.com/64/FF0000\"),\n            Country(name: \"Mexico\", flagURL: \"https://via.placeholder.com/64/00FF00\")\n        ]\n    }\n\n    private func loadImage(from url: String, completion: @escaping (UIImage?) -> Void) {\n        guard let imageURL = URL(string: url) else {\n            completion(nil)\n            return\n        }\n        URLSession.shared.dataTask(with: imageURL) { data, _, _ in\n            guard let data = data, let image = UIImage(data: data) else {\n                completion(nil)\n                return\n            }\n            DispatchQueue.main.async {\n                completion(image)\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \n\n\nCreate a custom UIViewController that displays a login form with username and password fields and a submit button.",
      "input": "",
      "output": "import UIKit\n\nclass LoginFormViewController: UIViewController {\n    @IBOutlet weak var usernameTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n    @IBOutlet weak var submitButton: UIButton!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        submitButton.addTarget(self, action: #selector(submitButtonT"
    },
    {
      "instruction": "Write a Swift function that asynchronously fetches JSON data from a given API endpoint, decodes it into a specified type, and then calls a completion block with the result or error.",
      "input": "import Foundation\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let email: String\n}",
      "output": "import Foundation\n\nclass NetworkManager {\n    \n    func fetchJSONData<T: Decodable>(from url: String, responseType: T.Type, completion: @escaping (Result<T, Error>) -> Void) {\n        guard let requestURL = URL(string: url) else {\n            completion(.failure(NetworkError.invalidURL))\n            return\n        }\n        \n        URLSession.shared.dataTask(with: requestURL) { (data, response, error) in\n            if let error = error {\n                completion(.failure(error))\n                return\n            }\n            \n            guard let data = data else {\n                completion(.failure(NetworkError.noData))\n                return\n            }\n            \n            do {\n                let decodedData = try JSONDecoder().decode(responseType, from: data)\n                completion(.success(decodedData))\n            } catch {\n                completion(.failure(error))\n            }\n        }.resume()\n    }\n    \n    enum NetworkError: Error {\n        case invalidURL\n        case noData\n    }\n}\n\nlet networkManager = NetworkManager()\nnetworkManager.fetchJSONData(from: \"https://jsonplaceholder.typicode.com/users\", responseType: [User].self) { (result: Result<[User], Error>) in\n    switch result {\n    case .success(let users):\n        print(\"Fetched users: \\(users)\")\n    case .failure(let error):\n        print(\"Error fetching users: \\(error)\")\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that creates a custom UITableViewCell with a label and an image view.",
      "input": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    // ...\n}",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    \n    private let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.font = UIFont.systemFont(ofSize: 18, weight: .medium)\n        label.textColor = .black\n        return label\n    }()\n    \n    private let thumbnailImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupSubviews()\n        setupConstraints()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupSubviews() {\n        contentView.addSubview(titleLabel)\n        contentView.addSubview(thumbnailImageView)\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            thumbnailImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            thumbnailImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            thumbnailImageView.widthAnchor.constraint(equalToConstant: 80),\n            thumbnailImageView.heightAnchor.constraint(equalToConstant: 80),\n            \n            titleLabel.leadingAnchor.constraint(equalTo: thumbnailImageView.trailingAnchor, constant: 16),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\n            titleLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor)\n        ])\n    }\n    \n    func configure(with title: String, image: UIImage) {\n        titleLabel.text = title\n        thumbnailImageView.image = image\n    }\n}"
    },
    {
      "instruction": "Create a custom UIButton subclass called LoadingButton that shows an activity indicator while the button is in a loading state. Implement a function to update the button's loading state.",
      "input": "import UIKit\n\nclass LoadingButton: UIButton {\n    // TODO: Implement the LoadingButton functionality\n}",
      "output": "import UIKit\n\nclass LoadingButton: UIButton {\n    private var originalButtonText: String?\n    private var activityIndicator: UIActivityIndicatorView!\n\n    func showLoading() {\n        originalButtonText = self.titleLabel?.text\n        self.setTitle(\"\", for: .normal)\n\n        if (activityIndicator == nil) {\n            activityIndicator = createActivityIndicator()\n        }\n\n        showSpinning()\n    }\n\n    func hideLoading() {\n        self.setTitle(originalButtonText, for: .normal)\n        activityIndicator.stopAnimating()\n    }\n\n    private func createActivityIndicator() -> UIActivityIndicatorView {\n        let activityIndicator = UIActivityIndicatorView()\n        activityIndicator.hidesWhenStopped = true\n        activityIndicator.translatesAutoresizingMaskIntoConstraints = false\n        self.addSubview(activityIndicator)\n\n        NSLayoutConstraint.activate([\n            activityIndicator.centerYAnchor.constraint(equalTo: self.centerYAnchor),\n            activityIndicator.centerXAnchor.constraint(equalTo: self.centerXAnchor)\n        ])\n\n        return activityIndicator\n    }\n\n    private func showSpinning() {\n        activityIndicator.startAnimating()\n    }\n}"
    },
    {
      "instruction": "Create a function to fetch data from a REST API using URLSession and decode it to a Codable model called 'User'. Handle errors and the completion with a Result type.",
      "input": "import Foundation\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let username: String\n    let email: String\n}\n\nfunc fetchUserData(url: String, completion: @escaping (Result<User, Error>) -> Void) {\n    // TODO: Implement the fetchUserData function\n}",
      "output": "import Foundation\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let username: String\n    let email: String\n}\n\nfunc fetchUserData(url: String, completion: @escaping (Result<User, Error>) -> Void) {\n    guard let url = URL(string: url) else {\n        completion(.failure(NSError(domain: \"Invalid URL\", code: -1, userInfo: nil)))\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let decoder = JSONDecoder()\n            let user = try decoder.decode(User.self, from: data)\n            completion(.success(user))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    \n    task.resume()\n}"
    },
    {
      "instruction": "Implement a UIPickerView with a custom data source and delegate to display an array of strings. Show the selected item in a UILabel.",
      "input": "import UIKit\n\nclass CustomPickerViewController: UIViewController {\n    // TODO: Implement UIPickerView with custom data source and delegate\n}",
      "output": "import UIKit\n\nclass CustomPickerViewController: UIViewController, UIPickerViewDataSource, UIPickerViewDelegate {\n    private let items = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\"]\n    private let pickerView = UIPickerView()\n    private let selectedItemLabel = UILabel()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        pickerView.dataSource = self\n        pickerView.delegate = self\n        pickerView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(pickerView)\n        \n        selectedItemLabel.textAlignment = .center\n        selectedItemLabel.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(selectedItemLabel)\n        \n        NSLayoutConstraint.activate([\n            pickerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            pickerView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            selectedItemLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            selectedItemLabel.bottomAnchor.constraint(equalTo: pickerView.topAnchor, constant: -20)\n        ])\n\n        selectedItemLabel.text = items[pickerView.selectedRow(inComponent: 0)]\n    }\n\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return items.count\n    }\n\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return items[row]\n    }\n\n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n       selectedItemLabel.text = items[row]\n    }\n}"
    },
    {
      "instruction": "Implement a UICollectionView with a custom UICollectionViewCell to display a grid of images. Create a custom UICollectionViewCell with an imageView and a label.",
      "input": "import UIKit\n\nclass ImageGridViewController: UIViewController {\n    // TODO: Implement UICollectionView with custom UICollectionViewCell\n}",
      "output": "import UIKit\n\nclass ImageGridViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {\n    private let images = [\"image1\", \"image2\", \"image3\", \"image4\", \"image5\"]\n    private let collectionView: UICollectionView\n\n    init() {\n        let layout = UICollectionViewFlowLayout()\n        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        super.init(nibName: nil, bundle: nil)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(ImageGridCell.self, forCellWithReuseIdentifier: \"ImageGridCell\")\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(collectionView)\n\n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor)\n        ])\n    }\n\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return images.count\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"ImageGridCell\", for: indexPath) as! ImageGridCell\n        cell.configure(imageName: images[indexPath.item], labelText: \"Image \\(indexPath.item + 1)\")\n        return cell\n    }\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        let width = (view.frame.width - 30) / 2\n        return CGSize(width: width, height: width)\n    }\n}\n\nclass ImageGridCell: UICollectionViewCell {\n    private let imageView = UIImageView()\n    private let label = UILabel()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupSubviews()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    func configure(imageName: String, labelText: String) {\n        imageView.image = UIImage(named: imageName)\n        label.text = labelText\n    }\n\n    private func setupSubviews() {\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        contentView.addSubview(imageView)\n\n        label.textAlignment = .center\n        label.translatesAutoresizingMaskIntoConstraints = false\n        contentView.addSubview(label)\n\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.heightAnchor.constraint(equalTo: contentView.widthAnchor),\n\n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n            label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: contentView.trailingAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that retrieves a user's location using CoreLocation and calls a completion handler with the location coordinates.",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    private let locationManager = CLLocationManager()\n    private var completion: ((CLLocationCoordinate2D) -> Void)?\n\n    func getUserLocation(completion: @escaping (CLLocationCoordinate2D) -> Void) {\n        self.completion = completion\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            completion?(location.coordinate)\n            locationManager.stopUpdatingLocation()\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that loads a JSON file from the app's bundle and decodes it into an array of custom objects using the Codable protocol.",
      "input": "",
      "output": "import Foundation\n\nstruct MyData: Codable {\n    let id: Int\n    let name: String\n}\n\nfunc loadJSONData(fileName: String, completion: @escaping ([MyData]?) -> Void) {\n    DispatchQueue.global(qos: .background).async {\n        guard let url = Bundle.main.url(forResource: fileName, withExtension: \"json\"),\n              let data = try? Data(contentsOf: url),\n              let decodedData = try? JSONDecoder().decode([MyData].self, from: data) else {\n            DispatchQueue.main.async {\n                completion(nil)\n            }\n            return\n        }\n\n        DispatchQueue.main.async {\n            completion(decodedData)\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that fetches images asynchronously from a URL and sets it to a UIImageView using URLSession.",
      "input": "",
      "output": "import UIKit\n\nextension UIImageView {\n    func setImage(from url: URL, placeholder: UIImage? = nil) {\n        self.image = placeholder\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            guard let data = data, error == nil, let image = UIImage(data: data) else { return }\n            DispatchQueue.main.async {\n                self.image = image\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UIView with a gradient background color.",
      "input": "",
      "output": "import UIKit\n\nclass GradientView: UIView {\n    private let gradientLayer = CAGradientLayer()\n\n    init(colors: [CGColor], startPoint: CGPoint, endPoint: CGPoint) {\n        super.init(frame: .zero)\n        gradientLayer.colors = colors\n        gradientLayer.startPoint = startPoint\n        gradientLayer.endPoint = endPoint\n        layer.insertSublayer(gradientLayer, at: 0)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        gradientLayer.frame = bounds\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates the change of a UIButton's title and background color.",
      "input": "",
      "output": "import UIKit\n\nextension UIButton {\n    func animateTitleChange(newTitle: String, newBackgroundColor: UIColor, duration: TimeInterval) {\n        UIView.transition(with: self, duration: duration, options: .transitionCrossDissolve) {\n            self.setTitle(newTitle, for: .normal)\n        } completion: { _ in\n            UIView.animate(withDuration: duration) {\n                self.backgroundColor = newBackgroundColor\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that configures a UITableView with automatic cell sizing.",
      "input": "",
      "output": "import UIKit\n\nextension UITableView {\n    func configureAutomaticCellSizing(estimatedRowHeight: CGFloat) {\n        self.rowHeight = UITableView.automaticDimension\n        self.estimatedRowHeight = estimatedRowHeight\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UIAlertController with multiple actions.",
      "input": "",
      "output": "import UIKit\n\nfunc createAlertController(title: String, message: String, actions: [(String, UIAlertAction.Style, ((UIAlertAction) -> Void)?)]) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n\n    for actionInfo in actions {\n        let action = UIAlertAction(title: actionInfo.0, style: actionInfo.1, handler: actionInfo.2)\n        alertController.addAction(action)\n    }\n\n    return alertController\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a custom UIView to the center of a parent UIView with a specified width and height.",
      "input": "",
      "output": "import UIKit\n\nfunc addSubviewToCenter(parentView: UIView, subview: UIView, width: CGFloat, height: CGFloat) {\n    subview.translatesAutoresizingMaskIntoConstraints = false\n    parentView.addSubview(subview)\n\n    NSLayoutConstraint.activate([\n        subview.widthAnchor.constraint(equalToConstant: width),\n        subview.heightAnchor.constraint(equalToConstant: height),\n        subview.centerXAnchor.constraint(equalTo: parentView.centerXAnchor),\n        subview.centerYAnchor.constraint(equalTo: parentView.centerYAnchor)\n    ])\n}"
    },
    {
      "instruction": "Write a Swift function that downloads an image from a URL and sets it to a UIImageView asynchronously using URLSession",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let data = data, let image = UIImage(data: data) {\n            completion(image)\n        } else {\n            completion(nil)\n        }\n    }\n    task.resume()\n}\n\nfunc setImage(from url: URL, to imageView: UIImageView) {\n    downloadImage(from: url) { image in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that fetches JSON data from a REST API and decodes it into a Decodable object",
      "input": "",
      "output": "import Foundation\n\nfunc fetchJSONData<T: Decodable>(from url: URL, completion: @escaping (Result<T, Error>) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n        } else if let data = data {\n            do {\n                let decodedObject = try JSONDecoder().decode(T.self, from: data)\n                completion(.success(decodedObject))\n            } catch {\n                completion(.failure(error))\n            }\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a gradient layer to a UIView",
      "input": "",
      "output": "import UIKit\n\nfunc addGradientLayer(to view: UIView, colors: [CGColor], startPoint: CGPoint, endPoint: CGPoint) {\n    let gradientLayer = CAGradientLayer()\n    gradientLayer.colors = colors\n    gradientLayer.startPoint = startPoint\n    gradientLayer.endPoint = endPoint\n    gradientLayer.frame = view.bounds\n    view.layer.insertSublayer(gradientLayer, at: 0)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates the change of a UILabel's text",
      "input": "",
      "output": "import UIKit\n\nfunc animateTextChange(for label: UILabel, newText: String, duration: TimeInterval) {\n    UIView.transition(with: label, duration: duration, options: .transitionCrossDissolve) {\n        label.text = newText\n    } completion: { _ in }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that saves a UIImage to the device's photo library",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToPhotoLibrary(image: UIImage, completion: @escaping (Bool, Error?) -> Void) {\n    PHPhotoLibrary.requestAuthorization { status in\n        if status == .authorized {\n            PHPhotoLibrary.shared().performChanges({\n                PHAssetChangeRequest.creationRequestForAsset(from: image)\n            }, completionHandler: { success, error in\n                DispatchQueue.main.async {\n                    completion(success, error)\n                }\n            })\n        } else {\n            DispatchQueue.main.async {\n                completion(false, nil)\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that registers a custom UITableViewCell for a UITableView with a reuse identifier",
      "input": "",
      "output": "import UIKit\n\nfunc registerCustomCell<T: UITableViewCell>(for tableView: UITableView, cellType: T.Type, reuseIdentifier: String) {\n    tableView.register(UINib(nibName: String(describing: cellType), bundle: nil), forCellReuseIdentifier: reuseIdentifier)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates and presents a UIAlertController with a title, message, and a single \"OK\" button",
      "input": "",
      "output": "import UIKit\n\nfunc presentAlert(from viewController: UIViewController, title: String, message: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that generates a random color and returns it as a UIColor",
      "input": "",
      "output": "import UIKit\n\nfunc generateRandomColor() -> UIColor {\n    let red = CGFloat(arc4random_uniform(256)) / 255.0\n    let green = CGFloat(arc4random_uniform(256)) / 255.0\n    let blue = CGFloat(arc4random_uniform(256)) / 255.0\n    let alpha = CGFloat(arc4random_uniform(101)) / 100.0\n    return UIColor(red: red, green: green, blue:blue, alpha: alpha)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a circular UIView with a specified radius and color",
      "input": "",
      "output": "import UIKit\n\nfunc createCircularView(radius: CGFloat, color: UIColor) -> UIView {\n    let view = UIView(frame: CGRect(x: 0, y: 0, width: radius * 2, height: radius * 2))\n    view.backgroundColor = color\n    view.layer.cornerRadius = radius\n    view.clipsToBounds = true\n    return view\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates and configures a UIButton with an image, title, and target action",
      "input": "",
      "output": "import UIKit\n\nfunc createButton(withImage image: UIImage?, title: String, target: Any?, action: Selector, for controlEvents: UIControl.Event) -> UIButton {\n    let button = UIButton(type: .custom)\n    button.setImage(image, for: .normal)\n    button.setTitle(title, for: .normal)\n    button.addTarget(target, action: action, for: controlEvents)\n    return button\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a shadow to a UIView with a specified color, offset, radius, and opacity",
      "input": "",
      "output": "import UIKit\n\nfunc addShadow(to view: UIView, color: UIColor, offset: CGSize, radius: CGFloat, opacity: Float) {\n    view.layer.shadowColor = color.cgColor\n    view.layer.shadowOffset = offset\n    view.layer.shadowRadius = radius\n    view.layer.shadowOpacity = opacity\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UITapGestureRecognizer and adds it to a UIView",
      "input": "",
      "output": "import UIKit\n\nfunc addTapGestureRecognizer(to view: UIView, target: Any?, action: Selector) {\n    let tapGestureRecognizer = UITapGestureRecognizer(target: target, action: action)\n    view.addGestureRecognizer(tapGestureRecognizer)\n    view.isUserInteractionEnabled = true\n}"
    },
    {
      "instruction": " \nWrite a Swift function that rounds the corners of a UIView with a given radius and specifies which corners to round",
      "input": "",
      "output": "import UIKit\n\nfunc roundCorners(of view: UIView, radius: CGFloat, corners: UIRectCorner) {\n    let path = UIBezierPath(roundedRect: view.bounds, byRoundingCorners: corners, cornerRadii: CGSize(width: radius, height: radius))\n    let mask = CAShapeLayer()\n    mask.path = path.cgPath\n    view.layer.mask = mask\n}"
    },
    {
      "instruction": "Write a Swift function to create a custom UIButton with rounded corners and a gradient background.",
      "input": "",
      "output": "import UIKit\n\nfunc createGradientButton(title: String, cornerRadius: CGFloat, gradientColors: [CGColor]) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n\n    let gradientLayer = CAGradientLayer()\n    gradientLayer.frame = button.bounds\n    gradientLayer.colors = gradientColors\n    gradientLayer.cornerRadius = cornerRadius\n\n    button.layer.insertSublayer(gradientLayer, at: 0)\n    button.layer.cornerRadius = cornerRadius\n    button.clipsToBounds = true\n\n    return button\n}"
    },
    {
      "instruction": "Write a Swift function to display an alert with a title, message, and a single \"OK\" button.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(title: String, message: String, viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let okAction = UIAlertAction(title: \"OK\", style: .default, handler: nil)\n    alertController.addAction(okAction)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": "Write a Swift function to make an API call using URLSession and parse the JSON response.",
      "input": "",
      "output": "import Foundation\n\nstruct ApiResponse: Codable {\n    // Define your response structure\n}\n\nfunc fetchApiData(url: URL, completion: @escaping (Result<ApiResponse, Error>) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"NoDataError\", code: -1, userInfo: nil)))\n            return\n        }\n\n        do {\n            let decodedData = try JSONDecoder().decode(ApiResponse.self, from: data)\n            completion(.success(decodedData))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": "Write a Swift function to asynchronously download an image from a URL and update a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil, let image = UIImage(data: data) else {\n            return\n        }\n        \n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }.resume()\n}"
    },
    {
      "instruction": "Write a Swift function to create a UICollectionView with a custom UICollectionViewCell for displaying images.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n    \n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(imageView)\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor),\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n\nfunc createImageCollectionView() -> UICollectionView {\n    let layout = UICollectionViewFlowLayout()\n    layout.scrollDirection = .vertical\n    layout.itemSize = CGSize(width: 100, height: 100)\n\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n    \n    return collectionView\n}"
    },
    {
      "instruction": "Write a Swift function to animate the change of background color of a UIView.",
      "input": "",
      "output": "import UIKit\n\nfunc animateBackgroundColorChange(for view: UIView, to color: UIColor, duration: TimeInterval) {\n    UIView.animate(withDuration: duration) {\n        view.backgroundColor = color\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to create and present a UIActivityViewController with a specified list of activity items.",
      "input": "",
      "output": "import UIKit\n\nfunc presentActivityViewController(with items: [Any], viewController: UIViewController) {\n    let activityViewController= UIActivityViewController(activityItems: items, applicationActivities: nil)\n    viewController.present(activityViewController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": "Write a Swift function to create a UITableView with a custom UITableViewCell for displaying a title and a subtitle.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    static let reuseIdentifier = \"CustomTableViewCell\"\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.font = UIFont.systemFont(ofSize: 18, weight: .bold)\n        return label\n    }()\n    \n    let subtitleLabel: UILabel = {\n        let label = UILabel()\n        label.font = UIFont.systemFont(ofSize: 14, weight: .regular)\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        contentView.addSubview(titleLabel)\n        contentView.addSubview(subtitleLabel)\n        \n        titleLabel.translatesAutoresizingMaskIntoConstraints = false\n        subtitleLabel.translatesAutoresizingMaskIntoConstraints = false\n        \n        NSLayoutConstraint.activate([\n            titleLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\n            \n            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 4),\n            subtitleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            subtitleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\n            subtitleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n\nfunc createCustomTableView() -> UITableView {\n    let tableView = UITableView()\n    tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: CustomTableViewCell.reuseIdentifier)\n    return tableView\n}"
    },
    {
      "instruction": "Write a Swift function to create a UITableView with custom cell class and reuse identifier, and register the cell class",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    // Custom cell implementation\n}\n\nfunc createTableViewWithCustomCell() -> UITableView {\n    let tableView = UITableView()\n    let cellReuseIdentifier = \"CustomCell\"\n    tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)\n    return tableView\n}"
    },
    {
      "instruction": " \n\n\nWrite a Swift function that performs a network request to a given URL, using URLSession, and returns the data using a completion handler",
      "input": "",
      "output": "import Foundation\n\nfunc fetchData(from urlString: String, completion: @escaping (Data?, Error?) -> Void) {\n    guard let url = URL(string: urlString) else {\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { data, _, error in\n        completion(data, error)\n    }\n    \n    task.resume()\n}"
    },
    {
      "instruction": " \n\n\nWrite a Swift function that asynchronously loads an image from a URL and sets it to a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc loadImage(from url: URL, into imageView: UIImageView) {\n    DispatchQueue.global().async {\n        if let data = try? Data(contentsOf: url) {\n            DispatchQueue.main.async {\n                imageView.image = UIImage(data: data)\n            }\n        }\n    }\n}"
    },
    {
      "instruction": "Create a simple UITableView with a custom UITableViewCell that displays an image and two labels.",
      "input": "",
      "output": "import UIKit\n\nstruct CustomData {\n    let image: UIImage\n    let title: String\n    let subtitle: String\n}\n\nclass CustomTableViewCell: UITableViewCell {\n    static let identifier = \"CustomTableViewCell\"\n    \n    private let customImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n    \n    private let titleLabel: UILabel = {\n        let label = UILabel()\n        label.font = .systemFont(ofSize: 18, weight: .medium)\n        return label\n    }()\n    \n    private let subtitleLabel: UILabel = {\n        let label = UILabel()\n        label.font = .systemFont(ofSize: 16, weight: .regular)\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        \n        contentView.addSubview(customImageView)\n        contentView.addSubview(titleLabel)\n        contentView.addSubview(subtitleLabel)\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError()\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        \n        customImageView.frame = CGRect(x: 10, y: 5, width: 70, height: 70)\n        titleLabel.frame = CGRect(x: 90, y: 5, width: contentView.frame.size.width - 100, height: 30)\n        subtitleLabel.frame = CGRect(x: 90, y: 40, width: contentView.frame.size.width - 100, height: 30)\n    }\n    \n    func configure(with data: CustomData) {\n        customImageView.image = data.image\n        titleLabel.text = data.title\n        subtitleLabel.text = data.subtitle\n    }\n}\n\nclass ViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {\n    private let tableView: UITableView = {\n        let tableView = UITableView()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: CustomTableViewCell.identifier)\n        return tableView\n    }()\n    \n    private let data: [CustomData] = [\n        // Add your data here\n    ]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.addSubview(tableView)\n        tableView.delegate = self\n        tableView.dataSource = self\n        tableView.frame = view.bounds\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.identifier, for: indexPath) as! CustomTableViewCell\n        cell.configure(with: data[indexPath.row])\n        return cell\n    }\n    \n    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {\n        return 80\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIView subclass with a UIButton and UILabel. When the UIButton is tapped, update the UILabel with the number of times the button has been tapped.",
      "input": "",
      "output": "import UIKit\n\nclass CustomView: UIView {\n    private var tapCount = 0\n    \n    private let countLabel: UILabel = {\n        let label = UILabel()\n        label.textAlignment = .center\n        label.font = .systemFont(ofSize: 24)\n        label.text = \"0\"\n        return label\n    }()\n    \n    private let tapButton: UIButton = {\n        let button = UIButton(type: .system)\n        button.setTitle(\"Tap me\", for: .normal)\n        button.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n        return button\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        \n        addSubview(countLabel)\n        addSubview(tapButton)\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        \n        countLabel.frame = CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height / 2)\n        tapButton.frame = CGRect(x: 0, y: frame.size.height / 2, width: frame.size.width, height: frame.size.height / 2)\n    }\n    \n    @objc private func buttonTapped() {\n        tapCount += 1\n        countLabel.text = \"\\(tapCount)\"\n    }\n}"
    },
    {
      "instruction": " \nCreate a view controller with a UICollectionView that displays a grid of colored cells. Each cell should have a random background color.",
      "input": "",
      "output": "import UIKit\n\nclass ColorCell: UICollectionViewCell {\n    static let identifier = \"ColorCell\"\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.layer.cornerRadius = 8\n    }\n    \n    requiredinit?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    func configure(with color: UIColor) {\n        contentView.backgroundColor = color\n    }\n}\n\nclass ColorGridViewController: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource {\n    private var colors: [UIColor] = []\n    \n    private let collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        layout.sectionInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)\n        layout.itemSize = CGSize(width: 80, height: 80)\n        layout.minimumLineSpacing = 10\n        layout.minimumInteritemSpacing = 10\n        \n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.register(ColorCell.self, forCellWithReuseIdentifier: ColorCell.identifier)\n        collectionView.backgroundColor = .white\n        return collectionView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.addSubview(collectionView)\n        collectionView.delegate = self\n        collectionView.dataSource = self\n        collectionView.frame = view.bounds\n        \n        generateRandomColors()\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return colors.count\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: ColorCell.identifier, for: indexPath) as! ColorCell\n        cell.configure(with: colors[indexPath.item])\n        return cell\n    }\n    \n    private func generateRandomColors() {\n        for _ in 0..<100 {\n            let red = CGFloat(arc4random_uniform(256)) / 255\n            let green = CGFloat(arc4random_uniform(256)) / 255\n            let blue = CGFloat(arc4random_uniform(256)) / 255\n            \n            let color = UIColor(red: red, green: green, blue: blue, alpha: 1)\n            colors.append(color)\n        }\n    }\n}"
    },
    {
      "instruction": " \nImplement a simple login screen with UITextField for email and password input, and a UIButton for the login action. Validate the input and display an error message if the input is not valid.",
      "input": "",
      "output": "import UIKit\n\nclass LoginViewController: UIViewController {\n    private let emailTextField: UITextField = {\n        let textField = UITextField()\n        textField.placeholder = \"Email\"\n        textField.autocapitalizationType = .none\n        textField.autocorrectionType = .no\n        textField.keyboardType = .emailAddress\n        textField.layer.borderWidth = 1\n        textField.layer.borderColor = UIColor.lightGray.cgColor\n        textField.layer.cornerRadius = 5\n        return textField\n    }()\n    \n    private let passwordTextField: UITextField = {\n        let textField = UITextField()\n        textField.placeholder = \"Password\"\n        textField.isSecureTextEntry = true\n        textField.layer.borderWidth = 1\n        textField.layer.borderColor = UIColor.lightGray.cgColor\n        textField.layer.cornerRadius = 5\n        return textField\n    }()\n    \n    private let loginButton: UIButton = {\n        let button = UIButton(type: .system)\n        button.setTitle(\"Login\", for: .normal)\n        button.addTarget(self, action: #selector(loginButtonTapped), for: .touchUpInside)\n        return button\n    }()\n    \n    private let errorMessageLabel: UILabel = {\n        let label = UILabel()\n        label.textColor = .red\n        label.numberOfLines = 0\n        label.textAlignment = .center\n        label.font = .systemFont(ofSize: 14)\n        label.isHidden = true\n        return label\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n        \n        view.addSubview(emailTextField)\n        view.addSubview(passwordTextField)\n        view.addSubview(loginButton)\n        view.addSubview(errorMessageLabel)\n    }\n    \n    override func viewWillLayoutSubviews() {\n        super.viewWillLayoutSubviews()\n        \n        emailTextField.frame = CGRect(x: 20, y: view.safeAreaInsets.top + 40, width: view.frame.width - 40, height: 40)\n        passwordTextField.frame = CGRect(x: 20, y: emailTextField.frame.maxY + 10, width: view.frame.width - 40, height: 40)\n        loginButton.frame = CGRect(x: 20, y: passwordTextField.frame.maxY + 20, width: view.frame.width - 40, height: 40)\n        errorMessageLabel.frame = CGRect(x: 20, y: loginButton.frame.maxY + 10, width: view.frame.width - 40, height: 80)\n    }\n    \n    @objc private func loginButtonTapped() {\n        let email = emailTextField.text ?? \"\"\n        let password = passwordTextField.text ?? \"\"\n        \n        if validateEmail(email) && validatePassword(password) {\n            errorMessageLabel.isHidden = true\n            // Perform login action\n        } else {\n            errorMessageLabel.isHidden = false\n            errorMessageLabel.text = \"Invalid email or"
    },
    {
      "instruction": "Implement a custom table view cell with a switch and a label, and a table view controller that uses the custom cell",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var switchControl: UISwitch!\n    @IBOutlet weak var titleLabel: UILabel!\n    \n    func configure(with title: String, isOn: Bool) {\n        titleLabel.text = title\n        switchControl.isOn = isOn\n    }\n}\n\nclass CustomTableViewController: UITableViewController {\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomTableViewCell\", for: indexPath) as! CustomTableViewCell\n        let item = items[indexPath.row]\n        cell.configure(with: item.title, isOn: item.isOn)\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIView that contains two labels and a button, and can be used in a storyboard",
      "input": "",
      "output": "import UIKit\n\n@IBDesignable\nclass CustomView: UIView {\n    @IBOutlet weak var label1: UILabel!\n    @IBOutlet weak var label2: UILabel!\n    @IBOutlet weak var button: UIButton!\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        commonInit()\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        commonInit()\n    }\n    \n    private func commonInit() {\n        let view = loadViewFromNib()\n        addSubview(view)\n        view.frame = self.bounds\n        view.autoresizingMask = [.flexibleHeight, .flexibleWidth]\n    }\n    \n    private func loadViewFromNib() -> UIView {\n        let bundle = Bundle(for: type(of: self))\n        let nib = UINib(nibName: String(describing: type(of: self)), bundle: bundle)\n        return nib.instantiate(withOwner: self, options: nil).first as! UIView\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that retrieves the current user's location and prints the latitude and longitude",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n    \n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n    }\n    \n    func getUserLocation() {\n        locationManager.startUpdatingLocation()\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            print(\"Latitude: \\(location.coordinate.latitude), Longitude: \\(location.coordinate.longitude)\")\n        }\n        locationManager.stopUpdatingLocation()\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIViewController that displays a UIWebView and loads a specified URL",
      "input": "",
      "output": "import UIKit\nimport WebKit\n\nclass CustomWebViewController: UIViewController, WKNavigationDelegate {\n    @IBOutlet weak var webView: WKWebView!\n    \n    var urlString: String?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        webView.navigationDelegate = self\n        \n        if let urlString = urlString, let url = URL(string: urlString) {\n            let request = URLRequest(url: url)\n            webView.load(request)\n        }\n    }\n}"
    },
    {
      "instruction": " \nImplement a custom UICollectionViewCell that displays a UILabel and a UIActivityIndicatorView while loading an image from a URL",
      "input": "",
      "output": "import UIKit\n\nclass CustomImageCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!\n    \n    func configure(with title: String, imageURL: URL) {\n        titleLabel.text = title\n        activityIndicator.startAnimating()\n        URLSession.shared.dataTask(with: imageURL) { (data, response, error) in\n            guard let data = data, let image = UIImage(data: data) else {\n                DispatchQueue.main.async {\n                    self.activityIndicator.stopAnimating()\n                }\n                return\n            }\n            DispatchQueue.main.async {\n                self.imageView.image = image\n                self.activityIndicator.stopAnimating()\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIViewController that uses AVPlayer to play a video from a URL",
      "input": "",
      "output": "import UIKit\nimport AVFoundation\n\nclass CustomVideoViewController: UIViewController {\n    @IBOutlet weak var videoView: UIView!\n    \n    var player: AVPlayer?\n    var playerLayer: AVPlayerLayer?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        playVideo(from: \"https://www.example.com/video.mp4\")\n    }\n    \n    func playVideo(from urlString: String) {\n        guard let url = URL(string: urlString) else { return }\n        \n        player = AVPlayer(url: url)\n        playerLayer = AVPlayerLayer(player: player)\n        \n        if let playerLayer = playerLayer {\n            playerLayer.frame = videoView.bounds\n            videoView.layer.addSublayer(playerLayer)\n            player?.play()\n        }\n    }\n    \n    override func viewWillDisappear(_ animated: Bool) {\n        super.viewWillDisappear(animated)\n        player?.pause()\n        playerLayer?.removeFromSuperlayer()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that retrieves data from a JSON API endpoint and decodes it into a custom struct using the Codable protocol",
      "input": "",
      "output": "import Foundation\n\nstruct ExampleModel: Codable {\n    let id: Int\n    let title: String\n    let description: String\n}\n\nfunc fetchData(completion: @escaping ([ExampleModel]?) -> Void) {\n    let urlString = \"https://api.example.com/data\"\n    guard let url = URL(string: urlString) else {\n        completion(nil)\n        return\n    }\n    \n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data else {\n            completion(nil)\n            return\n        }\n        \n        do {\n            let decoder = JSONDecoder()\n            let models = try decoder.decode([ExampleModel].self, from: data)\n            completion(models)\n        } catch {\n            print(\"Error decoding JSON data: \\(error)\")\n            completion(nil)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nCreate a custom UIView that displays a UITextField and a UIButton, and notifies a delegate when the button is tapped",
      "input": "",
      "output": "import UIKit\n\nprotocol CustomTextFieldDelegate: AnyObject {\n    func buttonTapped(with text: String)\n}\n\nclass CustomTextFieldView: UIView {\n    @IBOutlet weak var textField: UITextField!\n    @IBOutlet weak var button: UIButton!\n    \n    weak var delegate: CustomTextFieldDelegate?\n    \n    @IBAction func buttonTapped(_ sender: UIButton) {\n        if let text = textField.text {\n            delegate?.buttonTapped(with: text)\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to implement a UICollectionView with 3 columns and a fixed height for each cell.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UICollectionViewController, UICollectionViewDelegateFlowLayout {\n    \n    private let reuseIdentifier = \"Cell\"\n    private let columns: CGFloat = 3\n    private let cellHeight: CGFloat = 100\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: reuseIdentifier)\n        if let layout = collectionView.collectionViewLayout as? UICollectionViewFlowLayout {\n            layout.minimumInteritemSpacing = 0\n            layout.minimumLineSpacing = 0\n        }\n    }\n\n    override func numberOfSections(in collectionView: UICollectionView) -> Int {\n        return 1\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 30\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath)\n        cell.backgroundColor = .red\n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        let paddingSpace = (columns - 1) * (collectionViewLayout as! UICollectionViewFlowLayout).minimumInteritemSpacing\n        let availableWidth = collectionView.bounds.width - paddingSpace\n        let widthPerItem = availableWidth / columns\n        return CGSize(width: widthPerItem, height: cellHeight)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to asynchronously download an image from a URL and set it as the background of a UIButton.",
      "input": "",
      "output": "import UIKit\n\nextension UIButton {\n    func setBackgroundImageFromURL(_ url: URL) {\n        DispatchQueue.global().async { [weak self] in\n            if let data = try? Data(contentsOf: url), let image = UIImage(data: data) {\n                DispatchQueue.main.async {\n                    self?.setBackgroundImage(image, for: .normal)\n                }\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIView subclass that draws a circle of a given color and radius.",
      "input": "",
      "output": "import UIKit\n\nclass CircleView: UIView {\n    var circleColor: UIColor = .red\n    var circleRadius: CGFloat = 50\n\n    override func draw(_ rect: CGRect) {\n        let circlePath = UIBezierPath(arcCenter: CGPoint(x: bounds.midX, y: bounds.midY), radius: circleRadius, startAngle: 0, endAngle: 2 * .pi, clockwise: true)\n        circleColor.setFill()\n        circlePath.fill()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIAlertController with a title, message, and two buttons: \"Cancel\" and \"OK\". Call a completion handler when the \"OK\" button is pressed.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlertWithCompletion(title: String, message: String, completion: @escaping () -> Void) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    let cancelButton = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n    alertController.addAction(cancelButton)\n    \n    let okButton = UIAlertAction(title: \"OK\", style: .default) { _ in\n        completion()\n    }\n    alertController.addAction(okButton)\n    \n    // Assuming this function is called from a UIViewController subclass\n    present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UITableView subclass that automatically resizes its height based on its content.",
      "input": "",
      "output": "import UIKit\n\nclass AutoSizingTableView: UITableView {\n    override func reloadData() {\n        super.reloadData()\n        self.invalidateIntrinsicContentSize()\n        self.layoutIfNeeded()\n    }\n    \n    override var intrinsicContentSize: CGSize {\n        return CGSize(width: contentSize.width, height: contentSize.height)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UITextField subclass that adds a left padding to the text.",
      "input": "",
      "output": "import UIKit\n\nclass PaddedTextField: UITextField {\n    var padding: CGFloat = 10\n\n    override func textRect(forBounds bounds: CGRect) -> CGRect {\n        return CGRect(x: bounds.origin.x + padding, y: bounds.origin.y, width: bounds.width - padding, height: bounds.height)\n    }\n\n    override func editingRect(forBounds bounds: CGRect) -> CGRect {\n        return textRect(forBounds: bounds)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swiftfunction to create a custom UISlider subclass that allows setting minimum and maximum track tint colors.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTintSlider: UISlider {\n    @IBInspectable var minTrackTintColor: UIColor? {\n        didSet {\n            if let color = minTrackTintColor {\n                self.setMinimumTrackImage(color.image(), for: .normal)\n            }\n        }\n    }\n    \n    @IBInspectable var maxTrackTintColor: UIColor? {\n        didSet {\n            if let color = maxTrackTintColor {\n                self.setMaximumTrackImage(color.image(), for: .normal)\n            }\n        }\n    }\n}\n\nextension UIColor {\n    func image() -> UIImage {\n        let rect = CGRect(x: 0, y: 0, width: 1, height: 1)\n        UIGraphicsBeginImageContext(rect.size)\n        let context = UIGraphicsGetCurrentContext()\n        context?.setFillColor(self.cgColor)\n        context?.fill(rect)\n        let image = UIGraphicsGetImageFromCurrentImageContext()\n        UIGraphicsEndImageContext()\n        return image!\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UIButton subclass that shows a loading indicator while a specified action is being performed.",
      "input": "",
      "output": "import UIKit\n\nclass LoadingButton: UIButton {\n    private var originalTitle: String?\n    private var activityIndicator: UIActivityIndicatorView!\n\n    func showLoading() {\n        originalTitle = self.titleLabel?.text\n        self.setTitle(\"\", for: .normal)\n\n        if (activityIndicator == nil) {\n            activityIndicator = createActivityIndicator()\n        }\n\n        self.addSubview(activityIndicator)\n        self.isUserInteractionEnabled = false\n        activityIndicator.startAnimating()\n    }\n\n    func hideLoading() {\n        self.setTitle(originalTitle, for: .normal)\n        activityIndicator.stopAnimating()\n        self.isUserInteractionEnabled = true\n    }\n\n    private func createActivityIndicator() -> UIActivityIndicatorView {\n        let activityIndicator = UIActivityIndicatorView()\n        activityIndicator.translatesAutoresizingMaskIntoConstraints = false\n        activityIndicator.color = .white\n        self.addSubview(activityIndicator)\n\n        NSLayoutConstraint.activate([\n            activityIndicator.centerXAnchor.constraint(equalTo: self.centerXAnchor),\n            activityIndicator.centerYAnchor.constraint(equalTo: self.centerYAnchor)\n        ])\n\n        return activityIndicator\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a URL string as input, creates a URLSessionDataTask, and prints the HTTP status code of the response.",
      "input": "",
      "output": "import Foundation\n\nfunc printHTTPStatusCode(for urlString: String) {\n    guard let url = URL(string: urlString) else {\n        print(\"Invalid URL\")\n        return\n    }\n\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let httpResponse = response as? HTTPURLResponse {\n            print(\"HTTP Status Code: \\(httpResponse.statusCode)\")\n        } else {\n            print(\"Failed to get HTTP status code\")\n        }\n    }\n\n    task.resume()\n}\n\nprintHTTPStatusCode(for: \"https://www.example.com\")"
    },
    {
      "instruction": "Write a Swift function that asynchronously downloads an image from a URL and sets it as the background image of a UIButton",
      "input": "",
      "output": "import UIKit\n\nfunc setBackgroundImage(url: URL, button: UIButton) {\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, let image = UIImage(data: data) else {\n            print(\"Error downloading image: \\(error?.localizedDescription ?? \"Unknown error\")\")\n            return\n        }\n        DispatchQueue.main.async {\n            button.setBackgroundImage(image, for: .normal)\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": "Write a Swift function that presents a UIAlertController with a title, message, and a custom UIAlertAction",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(title: String, message: String, actionTitle: String, actionStyle: UIAlertAction.Style, on viewController: UIViewController, completionHandler: ((UIAlertAction) -> Void)? = nil) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: actionTitle, style: actionStyle, handler: completionHandler)\n    alertController.addAction(action)\n    viewController.present(alertController, animated: true)\n}"
    },
    {
      "instruction": "Write a Swift function that adds a gradient background color to a UIView",
      "input": "",
      "output": "import UIKit\n\nfunc addGradientBackground(to view: UIView, colors: [CGColor], startPoint: CGPoint, endPoint: CGPoint) {\n    let gradientLayer = CAGradientLayer()\n    gradientLayer.colors = colors\n    gradientLayer.startPoint = startPoint\n    gradientLayer.endPoint = endPoint\n    gradientLayer.frame = view.bounds\n    view.layer.insertSublayer(gradientLayer, at: 0)\n}"
    },
    {
      "instruction": "Write a Swift function that programmatically creates a UICollectionView with a specified layout, delegate, and dataSource",
      "input": "",
      "output": "import UIKit\n\nfunc createCollectionView(layout: UICollectionViewLayout, delegate: UICollectionViewDelegate, dataSource: UICollectionViewDataSource) -> UICollectionView {\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.delegate = delegate\n    collectionView.dataSource = dataSource\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    return collectionView\n}"
    },
    {
      "instruction": "Write a Swift function that saves an UIImage to the user's photo library",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToPhotoLibrary(image: UIImage, completionHandler: @escaping (Bool, Error?) -> Void) {\n    PHPhotoLibrary.requestAuthorization { (status) in\n        if status == .authorized {\n            PHPhotoLibrary.shared().performChanges({\n                PHAssetChangeRequest.creationRequestForAsset(from: image)\n            }, completionHandler: completionHandler)\n        } else {\n            completionHandler(false, nil)\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that registers a UITableViewCell by its class and identifier in a UITableView",
      "input": "",
      "output": "import UIKit\n\nfunc registerCellClass(cellClass: AnyClass, identifier: String, for tableView: UITableView) {\n    tableView.register(cellClass, forCellReuseIdentifier: identifier)\n}"
    },
    {
      "instruction": "Write a Swift function that updates a UILabel's text with a fade-in animation",
      "input": "",
      "output": "import UIKit\n\nfunc updateLabelTextWithFadeIn(label: UILabel, newText: String, duration: TimeInterval) {\n    UIView.transition(with: label, duration: duration, options: .transitionCrossDissolve, animations: {\n        label.text = newText\n    }, completion: nil)\n}"
    },
    {
      "instruction": "Write a Swift function that sends a JSON POST request with a specified URLRequest and parameters",
      "input": "",
      "output": "import Foundation\n\nfunc sendJSONPostRequest(urlRequest: URLRequest, parameters: [String: Any], completionHandler: @escaping (Data?, URLResponse?, Error?) -> Void) {\n    var request = urlRequest\n    request.httpMethod = \"POST\"\n    request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n    request.setValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n    \n    do {\n        let jsonData = try JSONSerialization.data(withJSONObject: parameters, options: [])\n        request.httpBody = jsonData\n    } catch {\n        completionHandler(nil, nil, error)\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: request, completionHandler: completionHandler)\n    task.resume()\n}"
    },
    {
      "instruction": "Write a Swift function that asynchronously fetches an image from a URL and sets it as the image of a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc setImageAsync(for imageView: UIImageView, from url: URL) {\n    DispatchQueue.global(qos: .userInitiated).async {\n        if let data = try? Data(contentsOf: url), let image = UIImage(data: data) {\n            DispatchQueue.main.async {\n                imageView.image = image\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that presents an alert controller with a specified title, message, and an action button.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(in viewController: UIViewController, title: String, message: String, actionTitle: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: actionTitle, style: .default)\n    alertController.addAction(action)\n    viewController.present(alertController, animated: true)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that starts a timer that repeats a specified block of code with a given time interval.",
      "input": "",
      "output": "import Foundation\n\nfunc startRepeatingTimer(interval: TimeInterval, block: @escaping () -> Void) -> Timer {\n    let timer = Timer.scheduledTimer(withTimeInterval: interval, repeats: true) { _ in\n        block()\n    }\n    return timer\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates and returns a custom table view cell with a specified identifier and text label.",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomTableViewCell(withIdentifier identifier: String, labelText: String) -> UITableViewCell {\n    let cell = UITableViewCell(style: .subtitle, reuseIdentifier: identifier)\n    cell.textLabel?.text = labelText\n    return cell\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes an array of CLLocationCoordinate2D and creates a MKPolyline to be added to a MKMapView.",
      "input": "",
      "output": "import MapKit\n\nfunc createPolyline(coordinates: [CLLocationCoordinate2D]) -> MKPolyline {\n    return MKPolyline(coordinates: coordinates, count: coordinates.count)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that converts a date to a string with a specified date format.",
      "input": "",
      "output": "import Foundation\n\nfunc formatDate(_ date: Date, format: String) -> String {\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = format\n    return dateFormatter.string(from: date)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a circular progress view with a specified radius, stroke color, and progress.",
      "input": "",
      "output": "import UIKit\n\nfunc createCircularProgressView(radius: CGFloat, strokeColor: UIColor, progress: CGFloat) -> UIView {\n    let progressView = UIView()\n    let circlePath = UIBezierPath(arcCenter: progressView.center, radius: radius, startAngle: -.pi / 2, endAngle: 2 * .pi - .pi / 2, clockwise: true)\n\n    let backgroundLayer = CAShapeLayer()\n    backgroundLayer.path = circlePath.cgPath\n    backgroundLayer.fillColor = UIColor.clear.cgColor\n    backgroundLayer.strokeColor = strokeColor.withAlphaComponent(0.3).cgColor\n    backgroundLayer.lineWidth = 5\n\n    let progressLayer = CAShapeLayer()\n    progressLayer.path = circlePath.cgPath\n    progressLayer.fillColor = UIColor.clear.cgColor\n    progressLayer.strokeColor = strokeColor.cgColor\n    progressLayer.lineWidth = 5\n    progressLayer.strokeEnd = progress\n    progressLayer.lineCap = .round\n\n    progressView.layer.addSublayer(backgroundLayer)\n    progressView.layer.addSublayer(progressLayer)\n\n    return progressView\n}"
    },
    {
      "instruction": " \nWrite a Swift function that registers a local notification with a specified title, body, and time interval.",
      "input": "",
      "output": "import UserNotifications\n\nfunc scheduleLocalNotification(title: String, body: String, timeInterval: TimeInterval) {\n    let content = UNMutableNotificationContent()\n    content.title = title\n    content.body = body\n\n    let trigger = UNTimeIntervalNotificationTrigger(timeInterval: timeInterval, repeats: false)\n    let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)\n\n    UNUserNotificationCenter.current().add(request)\n}"
    },
    {
      "instruction": "Write a Swift function that fetches data from a remote API, decodes the JSON response, and handles both success and failure cases using a completion handler.",
      "input": "",
      "output": "import Foundation\n\nstruct ApiResponse: Codable {\n    let data: [String: Any]\n}\n\nfunc fetchData(from urlString: String, completion: @escaping (Result<ApiResponse, Error>) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(.failure(NSError(domain: \"Invalid URL\", code: -1, userInfo: nil)))\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let decodedData = try JSONDecoder().decode(ApiResponse.self, from: data)\n            completion(.success(decodedData))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a custom UIButton to a given UIView with specific dimensions and position.",
      "input": "",
      "output": "import UIKit\n\nfunc addButton(to view: UIView, title: String, x: CGFloat, y: CGFloat, width: CGFloat, height: CGFloat) {\n    let button = UIButton(type: .custom)\n    button.frame = CGRect(x: x, y: y, width: width, height: height)\n    button.setTitle(title, for: .normal)\n    view.addSubview(button)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UITableViewCell with a UIImageView and a UILabel.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n\n    let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let cellLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        addSubview(cellImageView)\n        addSubview(cellLabel)\n        \n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 16),\n            cellImageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            cellImageView.widthAnchor.constraint(equalToConstant: 40),\n            cellImageView.heightAnchor.constraint(equalToConstant: 40),\n            \n            cellLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 16),\n            cellLabel.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that starts a timer that repeats every second, updating a UILabel with the elapsed time.",
      "input": "",
      "output": "import UIKit\n\nclass TimeCounter {\n    var timer: Timer?\n    var elapsedTime: Int = 0\n    var timeLabel: UILabel\n    \n    init(timeLabel: UILabel) {\n        self.timeLabel = timeLabel\n    }\n    \n    func startTimer() {\n        timer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { [weak self] _ in\n            guard let self = self else { return }\n            self.elapsedTime += 1\n            self.timeLabel.text = \"\\(self.elapsedTime)\"\n        }\n    }\n    \n    func stopTimer() {\n        timer?.invalidate()\n        timer = nil\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sets up a UICollectionView with a custom UICollectionViewCell and sections.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UICollectionViewController, UICollectionViewDelegateFlowLayout {\n    \n    private let reuseIdentifier = \"CustomCell\"\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: reuseIdentifier)\n    }\n    \n    // MARK: - UICollectionViewDataSource\n    \n    override func numberOfSections(in collectionView: UICollectionView) -> Int {\n        return 3\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as? CustomCollectionViewCell else {\n            fatalError(\"Could not dequeue CustomCollectionViewCell\")\n        }\n        cell.setup(with: \"Item \\(indexPath.item)\")\n        return cell\n    }\n    \n    // MARK: - UICollectionViewDelegateFlowLayout\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: collectionView.bounds.width / 3 - 10, height: collectionView.bounds.width / 3 - 10)\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {\n        return UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {\n        return 10\n    }\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    private let label = UILabel()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        addSubview(label)\n        label.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            label.centerXAnchor.constraint(equalTo: centerXAnchor),\n            label.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n    \n    func setup(with text: String) {\n        label.text = text\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that performs a search query using UISearchController and filters the results in a UITableView.",
      "input": "",
      "output": "import UIKit\n\nclass SearchViewController: UITableViewController, UISearchResultsUpdating {\n    let searchController = UISearchController(searchResultsController: nil)\n    let allItems = [\"Apple\", \"Banana\", \"Orange\", \"Grape\", \"Strawberry\"]\n    var filteredItems: [String] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupSearchController()\n    }\n    \n    func setupSearchController() {\n        searchController.searchResultsUpdater = self\n        searchController.obscuresBackgroundDuringPresentation = false\n        navigationItem.searchController = searchController\n        definesPresentationContext = true\n    }\n    \n    // MARK: - UITableViewDataSource\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return isFiltering() ? filteredItems.count : allItems.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\n        cell.textLabel?.text = isFiltering() ? filteredItems[indexPath.row] : allItems[indexPath.row]\n        return cell\n    }\n    \n    // MARK: - UISearchResultsUpdating\n    \n    func isFiltering() -> Bool {\n        return searchController.isActive && !searchBarIsEmpty()\n    }\n    \n    func searchBarIsEmpty() -> Bool {\n        return searchController.searchBar.text?.isEmpty ?? true\n    }\n    \n    func updateSearchResults(for searchController: UISearchController) {\n        filterContentForSearchText(searchController.searchBar.text!)\n    }\n    \n    func filterContentForSearchText(_ searchText: String) {\n        filteredItems = allItems.filter({( item : String) -> Bool in\n            return item.lowercased().contains(searchText.lowercased())\n        })\n        tableView.reloadData()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that saves a UIImage to the user's photo library and handles both success and failure cases using a completion handler.",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToLibrary(image: UIImage, completion: @escaping (Result<PHAsset, Error>) -> Void) {\n    var assetIdentifier: String?\n    \n    PHPhotoLibrary.shared().performChanges({\n        let creationRequest = PHAssetCreationRequest.forAsset()\n        creationRequest.addResource(with: .photo, data: image.jpegData(compressionQuality: 1.0)!, options: nil)\n        assetIdentifier = creationRequest.placeholderForCreatedAsset?.localIdentifier\n    }) { (success, error) in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        if success, let assetIdentifier = assetIdentifier {\n            let assets = PHAsset.fetchAssets(withLocalIdentifiers: [assetIdentifier], options: nil)\n            if let asset = assets.firstObject {\n                completion(.success(asset))\n            } else {\n                completion(.failure(NSError(domain: \"Asset not found\", code: -1, userInfo: nil)))\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that handles URL scheme deep linking in a mobile app.",
      "input": "",
      "output": "import UIKit\n\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    var window: UIWindow?\n\n    func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {\n        handleDeepLink(url: url)\n        return true\n    }\n    \n    func handleDeepLink(url: URL) {\n        guard let components = URLComponents(url: url, resolvingAgainstBaseURL: false),\n              let host ="
    },
    {
      "instruction": "Write a Swift function that fetches data from an API using URLSession and decodes the JSON response into a specified Swift model structure.",
      "input": "",
      "output": "import Foundation\n\nstruct ApiResponse: Codable {\n    let results: [Result]\n}\n\nstruct Result: Codable {\n    let title: String\n    let description: String\n}\n\nclass ApiManager {\n    \n    let apiURL = \"https://api.example.com/data\"\n    \n    func fetchData(completion: @escaping (Result<[Result], Error>) -> Void) {\n        guard let url = URL(string: apiURL) else {\n            completion(.failure(NSError(domain: \"Invalid URL\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        let task = URLSession.shared.dataTask(with: url) { data, response, error in\n            if let error = error {\n                completion(.failure(error))\n                return\n            }\n            \n            guard let data = data else {\n                completion(.failure(NSError(domain: \"No data\", code: -1, userInfo: nil)))\n                return\n            }\n            \n            do {\n                let decoder = JSONDecoder()\n                let response = try decoder.decode(ApiResponse.self, from: data)\n                completion(.success(response.results))\n            } catch {\n                completion(.failure(error))\n            }\n        }\n        \n        task.resume()\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that adds a UIButton with a specified title and target to a UIScrollView.",
      "input": "",
      "output": "import UIKit\n\nclass ScrollViewButtonController: UIViewController {\n    \n    private lazy var scrollView: UIScrollView = {\n        let scrollView = UIScrollView()\n        scrollView.translatesAutoresizingMaskIntoConstraints = false\n        return scrollView\n    }()\n    \n    private func createButton(title: String, target: Any, action: Selector) -> UIButton {\n        let button = UIButton(type: .system)\n        button.translatesAutoresizingMaskIntoConstraints = false\n        button.setTitle(title, for: .normal)\n        button.addTarget(target, action: action, for: .touchUpInside)\n        return button\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.addSubview(scrollView)\n        NSLayoutConstraint.activate([\n            scrollView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            scrollView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),\n            scrollView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            scrollView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),\n        ])\n        \n        let button = createButton(title: \"Press me\", target: self, action: #selector(buttonTapped))\n        scrollView.addSubview(button)\n        \n        NSLayoutConstraint.activate([\n            button.centerXAnchor.constraint(equalTo: scrollView.centerXAnchor),\n            button.centerYAnchor.constraint(equalTo: scrollView.centerYAnchor),\n        ])\n    }\n    \n    @objc private func buttonTapped() {\n        print(\"Button tapped\")\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that creates a custom UICollectionViewCell with an UIImageView and UILabel, and configures them with a provided image and text.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n\n    private lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n\n    private lazy var label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textAlignment = .center\n        return label\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupSubviews()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupSubviews()\n    }\n\n    private func setupSubviews() {\n        addSubview(imageView)\n        addSubview(label)\n\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n\n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            label.leadingAnchor.constraint(equalTo: leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: trailingAnchor),\n            label.bottomAnchor.constraint(equalTo: bottomAnchor),\n        ])\n    }\n\n    func configure(image: UIImage, text: String) {\n        imageView.image = image\n        label.text = text\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that creates a UITableView and populates it with data from a provided array of strings using a custom UITableViewCell.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    static let reuseIdentifier = \"CustomTableViewCell\"\n\n    private lazy var titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupSubviews()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupSubviews()\n    }\n\n    private func setupSubviews() {\n        addSubview(titleLabel)\n\n        NSLayoutConstraint.activate([\n            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 16),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -16),\n            titleLabel.topAnchor.constraint(equalTo: topAnchor, constant: 8),\n            titleLabel.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -8),\n        ])\n    }\n\n    func configure(title: String) {\n        titleLabel.text = title\n    }\n}\n\nclass TableViewController: UITableViewController {\n    \n    private let items: [String] = [\"Item 1\", \"Item 2\", \"Item 3\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: CustomTableViewCell.reuseIdentifier)\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.reuseIdentifier, for: indexPath) as! CustomTableViewCell\n        cell.configure(title: items[indexPath.row])\n        return cell\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that adds a UISearchBar to the top of a UITableView and filters the data in the table based on the search text.",
      "input": "",
      "output": "import UIKit\n\nclass SearchTableViewController: UITableViewController, UISearchBarDelegate {\n\n    private let items: [String] = [\"Apple\", \"Banana\", \"Orange\", \"Grapes\", \"Watermelon\"]\n    private var filteredItems: [String] = []\n\n    private lazy var searchBar: UISearchBar = {\n        let searchBar = UISearchBar()\n        searchBar.delegate = self\n        return searchBar\n    }()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"Cell\")\n        filteredItems = items\n        navigationItem.titleView = searchBar\n    }\n\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredItems = items\n        } else {\n            filteredItems = items.filter { $0.localizedCaseInsensitiveContains(searchText) }\n        }\n        tableView.reloadData()\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredItems.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\n        cell.textLabel?.text = filteredItems[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that presents a UIAlertController with a text field to gather input from the user and a button to submit the input.",
      "input": "",
      "output": "import UIKit\n\nclass AlertViewController: UIViewController {\n\n    @objc private func showAlert() {\n        let alertController = UIAlertController(title: \"Enter Text\", message: nil, preferredStyle: .alert)\n        alertController.addTextField { textField in\n            textField.placeholder = \"Enter your text here\"\n        }\n\n        let submitAction = UIAlertAction(title: \"Submit\", style: .default) { [weak alertController] _ in\n            if let textField = alertController?.textFields?.first, let text = textField.text {\n                print(\"User input: \\(text)\")\n            }\n        }\n\n        alertController.addAction(submitAction)\n        present(alertController, animated: true, completion: nil)\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        let button = UIButton(type: .system)\n        button.setTitle(\"Show Alert\", for: .normal)\n        button.addTarget(self, action: #selector(showAlert), for: .touchUpInside)\n        button.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(button)\n\n        NSLayoutConstraint.activate([\n            button.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            button.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n        ])\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to download an image from a URL and display it in a UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass ImageDownloader {\n    static func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n        let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let data = data, let image = UIImage(data: data) {\n                DispatchQueue.main.async {\n                    completion(image)\n                }\n            } else {\n                completion(nil)\n            }\n        }\n        task.resume()\n    }\n}\n\nfunc displayImage(from url: URL, in imageView: UIImageView) {\n    ImageDownloader.downloadImage(from: url) { image in\n        imageView.image = image\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to add a UIBarButtonItem programmatically to the navigation bar with a custom image",
      "input": "",
      "output": "func addBarButtonItem(with image: UIImage, target: AnyObject, action: Selector) {\n    let customButton = UIButton(type: .custom)\n    customButton.setImage(image, for: .normal)\n    customButton.addTarget(target, action: action, for: .touchUpInside)\n    let barButtonItem = UIBarButtonItem(customView: customButton)\n    navigationItem.rightBarButtonItem = barButtonItem\n}"
    },
    {
      "instruction": " \nWrite a Swift function to animate the transition between two UIViews in a UIViewController",
      "input": "",
      "output": "func animateTransition(fromView: UIView, toView: UIView, duration: TimeInterval, completion: ((Bool) -> Void)?) {\n    let transition = CATransition()\n    transition.duration = duration\n    transition.type = .push\n    transition.subtype = .fromRight\n    transition.timingFunction = CAMediaTimingFunction(name: .easeInEaseOut)\n    \n    fromView.layer.add(transition, forKey: \"transition\")\n    toView.layer.add(transition, forKey: \"transition\")\n    \n    UIView.animate(withDuration: duration, animations: {\n        fromView.alpha = 0\n        toView.alpha = 1\n    }, completion: completion)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement pull-to-refresh functionality in a UITableView",
      "input": "",
      "output": "func addPullToRefresh(to tableView: UITableView, action: Selector) {\n    let refreshControl = UIRefreshControl()\n    refreshControl.addTarget(self, action: action, for: .valueChanged)\n    tableView.refreshControl = refreshControl\n}\n\n// Usage in UITableViewController\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    addPullToRefresh(to: tableView, action: #selector(refreshData))\n}\n\n@objc func refreshData() {\n    // Fetch new data and reload the table\n    tableView.refreshControl?.endRefreshing()\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UICollectionViewCell with a UIImageView inside",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView\n\n    override init(frame: CGRect) {\n        imageView = UIImageView(frame: .zero)\n        super.init(frame: frame)\n        setupImageView()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupImageView() {\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        contentView.addSubview(imageView)\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to show a UIAlertController with an action sheet style and multiple actions",
      "input": "",
      "output": "func showActionSheet(title: String?, message: String?, actions: [(title: String, style: UIAlertAction.Style, handler: ((UIAlertAction) -> Void)?)]) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .actionSheet)\n\n    for action in actions {\n        let alertAction = UIAlertAction(title: action.title, style: action.style, handler: action.handler)\n        alertController.addAction(alertAction)\n    }\n\n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n    alertController.addAction(cancelAction)\n\n    present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a horizontal UICollectionView with a custom UICollectionViewFlowLayout",
      "input": "",
      "output": "func createHorizontalCollectionView() -> UICollectionView {\n    let layout = UICollectionViewFlowLayout()\n    layout.scrollDirection = .horizontal\n    layout.minimumLineSpacing = 10\n    layout.minimumInteritemSpacing = 10\n    layout.itemSize = CGSize(width: 100, height: 100)\n\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    collectionView.showsHorizontalScrollIndicator = false\n    collectionView.backgroundColor = .clear\n\n    return collectionView\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIStackView with an array of UIViews and custom spacing",
      "input": "",
      "output": "func createStackView(with views: [UIView], axis: NSLayoutConstraint.Axis, spacing: CGFloat) -> UIStackView {\n    let stackView = UIStackView(arrangedSubviews: views)\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    stackView.axis = axis\n    stackView.spacing = spacing\n    return stackView\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UITextField with a left padding view",
      "input": "",
      "output": "import UIKit\n\nclass CustomTextField: UITextField {\n\n    let padding: UIEdgeInsets\n\n    init(padding: UIEdgeInsets) {\n        self.padding = padding\n        super.init(frame: .zero)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func textRect(forBounds bounds: CGRect) -> CGRect {\n        return bounds.inset(by: padding)\n    }\n\n    override func editingRect(forBounds bounds: CGRect) -> CGRect {\n        return bounds.inset(by: padding)\n    }\n\n    override func placeholderRect(forBounds bounds: CGRect) -> CGRect {\n        return bounds.inset(by: padding)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to programmatically create a UIPageViewController with an array of UIViewControllers",
      "input": "",
      "output": "import UIKit\n\nclass CustomPageViewController: UIPageViewController, UIPageViewControllerDataSource, UIPageViewControllerDelegate {\n    \n    let viewControllersList: [UIViewController]\n\n    init(viewControllersList: [UIViewController]) {\n        self.viewControllersList = viewControllersList\n        super.init(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil)\n        self.dataSource = self\n        self.delegate = self\n        if let firstViewController = viewControllersList.first {\n            setViewControllers([firstViewController], direction: .forward, animated: true, completion: nil)\n        }\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n        guard let currentIndex = viewControllersList.firstIndex(of: viewController), currentIndex > 0 else {\n            return nil\n        }\n        return viewControllersList[currentIndex - 1]\n    }\n\n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {\n        guard let currentIndex = viewControllersList.firstIndex(of: viewController), currentIndex < viewControllersList.count - 1 else {\n            return nil\n        }\n        return viewControllersList[currentIndex + 1]\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that takes an image URL, downloads the image asynchronously, and updates a UIImageView with the downloaded image.",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil else {\n            completion(nil)\n            return\n        }\n        \n        DispatchQueue.main.async {\n            completion(UIImage(data: data))\n        }\n    }.resume()\n}\n\nfunc updateImageView(_ imageView: UIImageView, with url: URL) {\n    downloadImage(from: url) { image in\n        imageView.image = image\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift class that represents a custom UITableViewCell with an icon image and a label.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let iconImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n\n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        contentView.addSubview(iconImageView)\n        contentView.addSubview(titleLabel)\n\n        NSLayoutConstraint.activate([\n            iconImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            iconImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            iconImageView.widthAnchor.constraint(equalToConstant: 40),\n            iconImageView.heightAnchor.constraint(equalToConstant: 40),\n\n            titleLabel.leadingAnchor.constraint(equalTo: iconImageView.trailingAnchor, constant: 16),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\n            titleLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor)\n        ])\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a UITableView and a search string, filters the table view's data source based on the search string, and reloads the table view.",
      "input": "",
      "output": "import UIKit\n\nfunc filterAndReloadTableView(_ tableView: UITableView, with searchString: String, originalData: [String], filteredData: inout [String]) {\n    if searchString.isEmpty {\n        filteredData = originalData\n    } else {\n        filteredData = originalData.filter { item in\n            return item.lowercased().contains(searchString.lowercased())\n        }\n    }\n    \n    tableView.reloadData()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that presents a UIAlertController with a specified title, message, and an OK button to dismiss the alert.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(in viewController: UIViewController, title: String, message: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that initializes a UICollectionView with a custom UICollectionViewCell and sets up its layout.",
      "input": "",
      "output": "import UIKit\n\nfunc setupCollectionView(_ collectionView: UICollectionView, cellIdentifier: String) {\n    collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: cellIdentifier)\n\n    let layout = UICollectionViewFlowLayout()\n    layout.itemSize = CGSize(width: 100, height: 100)\n    layout.minimumLineSpacing = 10\n    layout.minimumInteritemSpacing = 10\n    collectionView.setCollectionViewLayout(layout, animated: false)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a UIButton and a specified target, and adds the target to the button for the touchUpInside event.",
      "input": "",
      "output": "import UIKit\n\nfunc addTargetToButton(_ button: UIButton, target: Any, action: Selector) {\n    button.addTarget(target, action: action, for: .touchUpInside)\n}"
    },
    {
      "instruction": "Create a Swift function that adds a UILabel with a specified font size and text color to a UIView.",
      "input": "",
      "output": "func addLabel(to view: UIView, text: String, fontSize: CGFloat, textColor: UIColor) {\n    let label = UILabel()\n    label.text = text\n    label.font = UIFont.systemFont(ofSize: fontSize)\n    label.textColor = textColor\n    label.translatesAutoresizingMaskIntoConstraints = false\n    view.addSubview(label)\n\n    NSLayoutConstraint.activate([\n        label.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n        label.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n    ])\n}"
    },
    {
      "instruction": " \nWrite a Swift function that makes an API GET request and processes the JSON response.",
      "input": "",
      "output": "func makeApiRequest(urlString: String, completion: @escaping (Result<[String: Any], Error>) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(.failure(NSError(domain: \"\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"Invalid URL\"])))\n        return\n    }\n\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else {\n            completion(.failure(NSError(domain: \"\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"No data in response\"])))\n            return\n        }\n\n        do {\n            if let json = try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any] {\n                completion(.success(json))\n            } else {\n                completion(.failure(NSError(domain: \"\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"Invalid JSON format\"])))\n            }\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " \nCreate a Swift function that adds a custom UIButton to a UIView and sets up a target action.",
      "input": "",
      "output": "func createButton(on view: UIView, title: String, target: Any, action: Selector) {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.addTarget(target, action: action, for: .touchUpInside)\n    button.translatesAutoresizingMaskIntoConstraints = false\n    view.addSubview(button)\n\n    NSLayoutConstraint.activate([\n        button.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n        button.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n    ])\n}"
    },
    {
      "instruction": " \nWrite a Swift function that asynchronously downloads an image from a URL and sets it as the image of a UIImageView.",
      "input": "",
      "output": "func downloadImage(from urlString: String, to imageView: UIImageView) {\n    guard let url = URL(string: urlString) else { return }\n\n    DispatchQueue.global().async {\n        if let data = try? Data(contentsOf: url),\n           let image = UIImage(data: data) {\n            DispatchQueue.main.async {\n                imageView.image = image\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function that sets up a UICollectionView with a custom cell and registers a nib.",
      "input": "",
      "output": "func setupCollectionView(_ collectionView: UICollectionView, cellNibName: String, cellReuseIdentifier: String) {\n    let layout = UICollectionViewFlowLayout()\n    collectionView.collectionViewLayout = layout\n    collectionView.register(UINib(nibName: cellNibName, bundle: nil), forCellWithReuseIdentifier: cellReuseIdentifier)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a gradient background for a UIView.",
      "input": "",
      "output": "func applyGradientBackground(to view: UIView, startColor: UIColor, endColor: UIColor) {\n    let gradientLayer = CAGradientLayer()\n    gradientLayer.frame = view.bounds\n    gradientLayer.colors = [startColor.cgColor, endColor.cgColor]\n    gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n    gradientLayer.endPoint = CGPoint(x: 1, y: 1)\n    view.layer.insertSublayer(gradientLayer, at: 0)\n}"
    },
    {
      "instruction": " \nCreate a Swift function that constructs a UIPickerView with a specified data source, delegate and tag.",
      "input": "",
      "output": "func createPickerView(dataSource: UIPickerViewDataSource, delegate: UIPickerViewDelegate, tag: Int) -> UIPickerView {\n    let pickerView = UIPickerView()\n    pickerView.dataSource = dataSource\n    pickerView.delegate = delegate\n    pickerView.tag = tag\n    return pickerView\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates the frame of a UIView to a specified position and size.",
      "input": "",
      "output": "func animateView(_ view: UIView, toFrame frame: CGRect, duration: TimeInterval, completion: ((Bool) -> Void)?) {\n    UIView.animate(withDuration: duration, animations: {\n        view.frame= frame\n    }, completion: completion)\n}"
    },
    {
      "instruction": "Create a custom TableViewCell with an ImageView, a TitleLabel, and a SubtitleLabel.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n\n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.font = UIFont.systemFont(ofSize: 18, weight: .bold)\n        return label\n    }()\n    \n    let subtitleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.font = UIFont.systemFont(ofSize: 14, weight: .regular)\n        label.textColor = .gray\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        \n        contentView.addSubview(imageView)\n        contentView.addSubview(titleLabel)\n        contentView.addSubview(subtitleLabel)\n        \n        NSLayoutConstraint.activate([\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 8),\n            imageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            imageView.widthAnchor.constraint(equalToConstant: 60),\n            imageView.heightAnchor.constraint(equalToConstant: 60),\n            \n            titleLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: imageView.trailingAnchor, constant: 8),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -8),\n            \n            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 4),\n            subtitleLabel.leadingAnchor.constraint(equalTo: titleLabel.leadingAnchor),\n            subtitleLabel.trailingAnchor.constraint(equalTo: titleLabel.trailingAnchor),\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nImplement a function that takes a string as input and displays an alert with the input string as its message.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlertWithMessage(_ message: String, viewController: UIViewController) {\n    let alertController = UIAlertController(title: nil, message: message, preferredStyle: .alert)\n    alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nCreate a custom UIView subclass that displays a circle with a given color.",
      "input": "",
      "output": "import UIKit\n\nclass CircleView: UIView {\n    var circleColor: UIColor = .blue {\n        didSet {\n            setNeedsDisplay()\n        }\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        backgroundColor = .clear\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        backgroundColor = .clear\n    }\n    \n    override func draw(_ rect: CGRect) {\n        let circlePath = UIBezierPath(ovalIn: rect)\n        circleColor.setFill()\n        circlePath.fill()\n    }\n}"
    },
    {
      "instruction": " \nCreate a function that saves an array of strings to UserDefaults using the given key.",
      "input": "",
      "output": "import UIKit\n\nfunc saveStringArrayToUserDefaults(_ array: [String], forKey key: String) {\n    UserDefaults.standard.set(array, forKey: key)\n}"
    },
    {
      "instruction": " \nImplement a function that retrieves an array of strings from UserDefaults using the given key.",
      "input": "",
      "output": "import UIKit\n\nfunc getStringArrayFromUserDefaults(forKey key: String) -> [String]? {\n    return UserDefaults.standard.stringArray(forKey: key)\n}"
    },
    {
      "instruction": " \nCreate a custom UICollectionViewCell with a rounded ImageView and a TitleLabel below it.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    \n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.layer.cornerRadius = 40\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.font = UIFont.systemFont(ofSize: 18, weight: .bold)\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        \n        contentView.addSubview(imageView)\n        contentView.addSubview(titleLabel)\n        \n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.centerXAnchor.constraint(equalTo: contentView.centerXAnchor),\n            imageView.widthAnchor.constraint(equalToConstant: 80),\n            imageView.heightAnchor.constraint(equalToConstant: 80),\n            \n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:)has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nImplement a function that asynchronously downloads an image from a URL and updates an ImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil,\n              let image = UIImage(data: data) else {\n            completion(nil)\n            return\n        }\n        \n        DispatchQueue.main.async {\n            completion(image)\n        }\n    }.resume()\n}\n\nfunc updateImageView(_ imageView: UIImageView, withImageFrom url: URL) {\n    downloadImage(from: url) { image in\n        imageView.image = image\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIButton subclass that displays a filled circle with a given color and an icon image.",
      "input": "",
      "output": "import UIKit\n\nclass CircleIconButton: UIButton {\n    var circleColor: UIColor = .blue {\n        didSet {\n            setNeedsDisplay()\n        }\n    }\n    \n    var iconImage: UIImage? {\n        didSet {\n            setNeedsDisplay()\n        }\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        backgroundColor = .clear\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        backgroundColor = .clear\n    }\n    \n    override func draw(_ rect: CGRect) {\n        let circlePath = UIBezierPath(ovalIn: rect)\n        circleColor.setFill()\n        circlePath.fill()\n        \n        if let iconImage = iconImage {\n            let imageSize = CGSize(width: rect.width / 2, height: rect.height / 2)\n            let imageRect = CGRect(x: (rect.width - imageSize.width) / 2,\n                                   y: (rect.height - imageSize.height) / 2,\n                                   width: imageSize.width,\n                                   height: imageSize.height)\n            iconImage.draw(in: imageRect)\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that fetches data from a JSON API and decodes it into a custom struct using Codable",
      "input": "",
      "output": "import Foundation\nimport UIKit\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let username: String\n    let email: String\n}\n\nclass APIClient {\n    \n    func fetchUsers(completion: @escaping ([User]?, Error?) -> Void) {\n        let urlString = \"https://jsonplaceholder.typicode.com/users\"\n        \n        guard let url = URL(string: urlString) else {\n            completion(nil, NSError(domain: \"Invalid URL\", code: 0, userInfo: nil))\n            return\n        }\n        \n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let error = error {\n                completion(nil, error)\n            } else if let data = data {\n                do {\n                    let decoder = JSONDecoder()\n                    let users = try decoder.decode([User].self, from: data)\n                    completion(users, nil)\n                } catch {\n                    completion(nil, error)\n                }\n            }\n        }.resume()\n    }\n}\n\nclass ViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let apiClient = APIClient()\n        apiClient.fetchUsers { (users, error) in\n            if let error = error {\n                print(\"Error: \\(error.localizedDescription)\")\n            } else if let users = users {\n                for user in users {\n                    print(\"Name: \\(user.name), Email: \\(user.email)\")\n                }\n            }\n        }\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that manages user authentication with Firebase",
      "input": "",
      "output": "import UIKit\nimport FirebaseAuth\n\nclass ViewController: UIViewController {\n    \n    @IBOutlet weak var emailTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n    \n    @IBAction func signIn(_ sender: UIButton) {\n        guard let email = emailTextField.text, let password = passwordTextField.text else {\n            return\n        }\n        \n        Auth.auth().signIn(withEmail: email, password: password) { [weak self] authResult, error in\n            if let error = error {\n                print(\"Error signing in: \\(error.localizedDescription)\")\n            } else {\n                self?.performSegue(withIdentifier: \"signInSuccessful\", sender: self)\n            }\n        }\n    }\n    \n    @IBAction func signUp(_ sender: UIButton) {\n        guard let email = emailTextField.text, let password = passwordTextField.text else {\n            return\n        }\n        \n        Auth.auth().createUser(withEmail: email, password: password) { [weak self] authResult, error in\n            if let error = error {\n                print(\"Error signing up: \\(error.localizedDescription)\")\n            } else {\n                self?.performSegue(withIdentifier: \"signUpSuccessful\", sender: self)\n            }\n        }\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that implements a UICollectionView with custom UICollectionViewCell",
      "input": "",
      "output": "import UIKit\n\nstruct CustomData {\n    let title: String\n    let image: UIImage\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n}\n\nclass ViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {\n    \n    @IBOutlet weak var collectionView: UICollectionView!\n    \n    let data: [CustomData] = [\n        CustomData(title: \"Item 1\", image: UIImage(named: \"image1\")!),\n        CustomData(title: \"Item 2\", image: UIImage(named: \"image2\")!),\n        // Add more data as needed\n    ]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        collectionView.dataSource = self\n        collectionView.delegate = self\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return data.count\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCollectionViewCell\", for: indexPath) as! CustomCollectionViewCell\n        let customData = data[indexPath.item]\n        cell.titleLabel.text = customData.title\n        cell.imageView.image = customData.image\n        return cell\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that implements a custom UITableViewCell with a swipe action to delete rows",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var titleLabel: UILabel!\n}\n\nclass ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    \n    @IBOutlet weak var tableView: UITableView!\n    \n    var data: [String] = [\n        \"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\"\n    ]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        tableView.dataSource = self\n        tableView.delegate = self\n    }\n    \n   func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomTableViewCell\", for: indexPath) as! CustomTableViewCell\n        cell.titleLabel.text = data[indexPath.row]\n        return cell\n    }\n    \n    func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {\n        return true\n    }\n    \n    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {\n        if editingStyle == .delete {\n            data.remove(at: indexPath.row)\n            tableView.deleteRows(at: [indexPath], with: .automatic)\n        }\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that sets up a custom UIPickerView and handles user selection",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController, UIPickerViewDataSource, UIPickerViewDelegate {\n    \n    @IBOutlet weak var pickerView: UIPickerView!\n    \n    let data: [String] = [\n        \"Option 1\", \"Option 2\", \"Option 3\", \"Option 4\"\n    ]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        pickerView.dataSource = self\n        pickerView.delegate = self\n    }\n    \n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return data.count\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return data[row]\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        print(\"User selected: \\(data[row])\")\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that implements a Core Data stack for saving and retrieving objects",
      "input": "",
      "output": "import UIKit\nimport CoreData\n\nclass ViewController: UIViewController {\n    \n    lazy var persistentContainer: NSPersistentContainer = {\n        let container = NSPersistentContainer(name: \"Model\")\n        container.loadPersistentStores { _, error in\n            if let error = error as NSError? {\n                fatalError(\"Unresolved error \\(error), \\(error.userInfo)\")\n            }\n        }\n        return container\n    }()\n    \n    func saveContext() {\n        let context = persistentContainer.viewContext\n        if context.hasChanges {\n            do {\n                try context.save()\n            } catch {\n                let error = error as NSError\n                fatalError(\"Unresolved error \\(error), \\(error.userInfo)\")\n            }\n        }\n    }\n    \n    func fetchObjects() {\n        let context = persistentContainer.viewContext\n        let fetchRequest = NSFetchRequest<NSManagedObject>(entityName: \"Entity\")\n        \n        do {\n            let objects = try context.fetch(fetchRequest)\n            for object in objects {\n                print(\"Object: \\(object)\")\n            }\n        } catch {\n            let error = error as NSError\n            print(\"Could not fetch. \\(error), \\(error.userInfo)\")\n        }\n    }\n    \n    // Use saveContext() and fetchObjects() in your application as needed\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that implements a custom UIAlertController with two actions",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    @IBAction func showAlert(_ sender: UIButton) {\n        let alertController = UIAlertController(title: \"Alert\", message: \"Choose an option\", preferredStyle: .alert)\n        \n        let option1Action = UIAlertAction(title: \"Option 1\", style: .default) { _ in\n            print(\"Option 1 selected\")\n        }\n        alertController.addAction(option1Action)\n        \n        let option2Action = UIAlertAction(title: \"Option 2\", style: .default) { _ in\n            print(\"Option 2 selected\")\n        }\n        alertController.addAction(option2Action)\n        \n        present(alertController, animated: true)\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that implements a custom UIActivityIndicatorView and handles starting and stopping the animation",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    private lazy var activityIndicator: UIActivityIndicatorView = {\n        let activityIndicator = UIActivityIndicatorView(style: .large)\n        activityIndicator.translatesAutoresizingMaskIntoConstraints = false\n        activityIndicator.hidesWhenStopped = true\n        return activityIndicator\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.addSubview(activityIndicator)\n        NSLayoutConstraint.activate([\n            activityIndicator.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            activityIndicator.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n    \n    func startActivityIndicator() {\n        activityIndicator.startAnimating()\n    }\n    \n    func stopActivityIndicator() {\n        activityIndicator.stopAnimating()\n    }\n    \n    // Use startActivityIndicator() and stopActivityIndicator() in"
    },
    {
      "instruction": "Write a Swift function that asynchronously downloads an image from a URL and sets it to a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc setImage(from url: URL, to imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            print(\"Error downloading image: \\(error.localizedDescription)\")\n            return\n        }\n        \n        if let data = data, let image = UIImage(data: data) {\n            DispatchQueue.main.async {\n                imageView.image = image\n            }\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a gradient background for a UIView",
      "input": "",
      "output": "import UIKit\n\nfunc setGradientBackground(view: UIView, colors: [CGColor]) {\n    let gradientLayer = CAGradientLayer()\n    gradientLayer.frame = view.bounds\n    gradientLayer.colors = colors\n    view.layer.insertSublayer(gradientLayer, at: 0)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a shadow to a UIButton",
      "input": "",
      "output": "import UIKit\n\nfunc addShadowToButton(button: UIButton, shadowColor: UIColor, shadowOffset: CGSize, shadowOpacity: Float, shadowRadius: CGFloat) {\n    button.layer.shadowColor = shadowColor.cgColor\n    button.layer.shadowOffset = shadowOffset\n    button.layer.shadowOpacity = shadowOpacity\n    button.layer.shadowRadius = shadowRadius\n}"
    },
    {
      "instruction": " \nWrite a Swift function that presents an UIAlertController with an input textField",
      "input": "",
      "output": "import UIKit\n\nfunc presentInputAlert(title: String, message: String, placeholder: String, viewController: UIViewController, completion: @escaping (String) -> Void) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    alertController.addTextField { (textField) in\n        textField.placeholder = placeholder\n    }\n    \n    let submitAction = UIAlertAction(title: \"Submit\", style: .default) { (_) in\n        if let textField = alertController.textFields?.first, let text = textField.text {\n            completion(text)\n        }\n    }\n    \n    alertController.addAction(submitAction)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UITableViewCell with a UIImageView and UILabel",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let cellLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupCell()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupCell() {\n        addSubview(cellImageView)\n        addSubview(cellLabel)\n        \n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 10),\n            cellImageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            cellImageView.widthAnchor.constraint(equalToConstant: 40),\n            cellImageView.heightAnchor.constraint(equalToConstant: 40),\n            \n            cellLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 10),\n            cellLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -10),\n            cellLabel.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to add a UIButton with a title and target to a UIView programmatically",
      "input": "",
      "output": "func addButton(title: String, target: Any, action: Selector, onView view: UIView) {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.addTarget(target, action: action, for: .touchUpInside)\n    button.translatesAutoresizingMaskIntoConstraints = false\n    view.addSubview(button)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UITableView programmatically and set its delegate and dataSource",
      "input": "",
      "output": "func createTableView(delegate: UITableViewDelegate, dataSource: UITableViewDataSource) -> UITableView {\n    let tableView = UITableView(frame: .zero, style: .plain)\n    tableView.delegate = delegate\n    tableView.dataSource = dataSource\n    tableView.translatesAutoresizingMaskIntoConstraints = false\n    return tableView\n}"
    },
    {
      "instruction": " \nWrite a Swift function that configures a UICollectionViewCell for a UICollectionView",
      "input": "",
      "output": "func configureCell(_ cell: UICollectionViewCell, with data: Any, at indexPath: IndexPath) {\n    // Customize cell based on data and indexPath\n    // Example: Set cell background color based on indexPath\n    cell.backgroundColor = indexPath.row % 2 == 0 ? .gray : .white\n}"
    },
    {
      "instruction": " \nWrite a Swift function to programmatically create a UIPickerView and set its delegate and dataSource",
      "input": "",
      "output": "func createPickerView(delegate: UIPickerViewDelegate, dataSource: UIPickerViewDataSource) -> UIPickerView {\n    let pickerView = UIPickerView()\n    pickerView.delegate = delegate\n    pickerView.dataSource = dataSource\n    pickerView.translatesAutoresizingMaskIntoConstraints = false\n    return pickerView\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIAlertController with a title, message, and an array of UIAlertAction objects",
      "input": "",
      "output": "func createAlertController(title: String, message: String, actions: [UIAlertAction]) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    for action in actions {\n        alertController.addAction(action)\n    }\n    return alertController\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIStackView with an array of UIView objects and set its axis, alignment, and spacing properties",
      "input": "",
      "output": "func createStackView(views: [UIView], axis: NSLayoutConstraint.Axis, alignment: UIStackView.Alignment, spacing: CGFloat) -> UIStackView {\n    let stackView = UIStackView(arrangedSubviews: views)\n    stackView.axis = axis\n    stackView.alignment = alignment\n    stackView.spacing = spacing\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    return stackView\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UITextField with a placeholder, keyboardType, and delegate",
      "input": "",
      "output": "func createTextField(placeholder: String, keyboardType: UIKeyboardType, delegate: UITextFieldDelegate) -> UITextField {\n    let textField = UITextField()\n    textField.placeholder = placeholder\n    textField.keyboardType = keyboardType\n    textField.delegate = delegate\n    textField.translatesAutoresizingMaskIntoConstraints = false\n    return textField\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UILabel with text, font, textColor, and numberOfLines properties",
      "input": "",
      "output": "func createLabel(text: String, font: UIFont, textColor: UIColor, numberOfLines: Int) -> UILabel {\n    let label = UILabel()\n    label.text = text\n    label.font = font\n    label.textColor = textColor\n    label.numberOfLines = numberOfLines\n    label.translatesAutoresizingMaskIntoConstraints = false\n    return label\n}"
    },
    {
      "instruction": "Create a custom UICollectionViewCell subclass called CustomCollectionViewCell with an IBOutlet UIImageView named imageView and an IBOutlet UILabel named label.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n    @IBOutlet weak var label: UILabel!\n    \n    override func awakeFromNib() {\n        super.awakeFromNib()\n    }\n}"
    },
    {
      "instruction": " \nWrite a function that takes a URL string, downloads an image from the URL, and calls a completion handler with the downloaded UIImage.",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from urlString: String, completion: @escaping (UIImage?) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(nil)\n        return\n    }\n\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, let image = UIImage(data: data) else {\n            completion(nil)\n            return\n        }\n        completion(image)\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sets up a UITableView with a specified number of rows and a custom UITableViewCell.",
      "input": "",
      "output": "import UIKit\n\nfunc setupTableView(tableView: UITableView, numberOfRows: Int, customCellIdentifier: String) {\n    tableView.dataSource = tableView as? UITableViewDataSource\n    tableView.delegate = tableView as? UITableViewDelegate\n    tableView.register(UINib(nibName: customCellIdentifier, bundle: nil), forCellReuseIdentifier: customCellIdentifier)\n    \n    class CustomTableView: NSObject, UITableViewDataSource, UITableViewDelegate {\n        private let numberOfRows: Int\n        private let cellIdentifier: String\n        \n        init(numberOfRows: Int, cellIdentifier: String) {\n            self.numberOfRows = numberOfRows\n            self.cellIdentifier = cellIdentifier\n        }\n        \n        func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n            return numberOfRows\n        }\n        \n        func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath)\n            return cell\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a UITableView and a closure, and returns a UITableViewCell configured with the closure.",
      "input": "",
      "output": "import UIKit\n\nfunc tableView<Cell: UITableViewCell>(_ tableView: UITableView, cellForRowAt indexPath: IndexPath, configure: (Cell) -> Void) -> UITableViewCell {\n    let cell = tableView.dequeueReusableCell(withIdentifier: String(describing: Cell.self), for: indexPath) as! Cell\n    configure(cell)\n    return cell\n}"
    },
    {
      "instruction": " \nWrite a Swift function that asynchronously fetches JSON data from a given URL, decodes it into an array of a Codable type, and calls a completion handler with the result.",
      "input": "",
      "output": "import Foundation\n\nfunc fetchJSONArray<T: Codable>(from urlString: String, completion: @escaping (Result<[T], Error>) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(.failure(NSError(domain: \"\", code: -1, userInfo: nil)))\n        return\n    }\n\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"\", code: -2, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let decoder = JSONDecoder()\n            let jsonArray = try decoder.decode([T].self, from: data)\n            completion(.success(jsonArray))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates a UIButton's alpha value to 0 and then back to 1 over a specified duration.",
      "input": "",
      "output": "import UIKit\n\nfunc animateButtonAlpha(button: UIButton, duration: TimeInterval) {\n    UIView.animate(withDuration: duration / 2, animations: {\n        button.alpha = 0\n    }) { _ in\n        UIView.animate(withDuration: duration / 2) {\n            button.alpha = 1\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift class that conforms to the MKMapViewDelegate protocol and implements the viewFor annotation method to display a custom MKAnnotationView.",
      "input": "",
      "output": "import MapKit\n\nclass CustomMapViewDelegate: NSObject, MKMapViewDelegate {\n    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {\n        guard let customAnnotation = annotation as? CustomAnnotation else {\n            return nil\n        }\n\n        let identifier = \"CustomAnnotationView\"\n        var annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: identifier)\n\n        if annotationView == nil {\n            annotationView = MKAnnotationView(annotation: customAnnotation, reuseIdentifier: identifier)\n           annotationView?.canShowCallout = true\n        } else {\n            annotationView?.annotation = customAnnotation\n        }\n\n        annotationView?.image = UIImage(named: customAnnotation.imageName)\n        return annotationView\n    }\n}\n\nclass CustomAnnotation: NSObject, MKAnnotation {\n    let coordinate: CLLocationCoordinate2D\n    let title: String?\n    let imageName: String\n\n    init(coordinate: CLLocationCoordinate2D, title: String, imageName: String) {\n        self.coordinate = coordinate\n        self.title = title\n        self.imageName = imageName\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a UIViewController and a custom UIView subclass, adds the custom view as a subview of the view controller's view, and constrains it to fill the entire view.",
      "input": "",
      "output": "import UIKit\n\nfunc addAndConstrainCustomView(_ customView: UIView, to viewController: UIViewController) {\n    customView.translatesAutoresizingMaskIntoConstraints = false\n    viewController.view.addSubview(customView)\n\n    NSLayoutConstraint.activate([\n        customView.topAnchor.constraint(equalTo: viewController.view.topAnchor),\n        customView.leadingAnchor.constraint(equalTo: viewController.view.leadingAnchor),\n        customView.bottomAnchor.constraint(equalTo: viewController.view.bottomAnchor),\n        customView.trailingAnchor.constraint(equalTo: viewController.view.trailingAnchor)\n    ])\n}"
    },
    {
      "instruction": "Write a Swift function that creates a UIButton with a specified title, target, and action and adds it to a UIView.",
      "input": "",
      "output": "import UIKit\n\nclass MyViewController: UIViewController {\n    \n    private lazy var customButton: UIButton = {\n        let button = UIButton(type: .system)\n        button.translatesAutoresizingMaskIntoConstraints = false\n        button.setTitle(\"Click me!\", for: .normal)\n        button.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n        return button\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(customButton)\n        \n        NSLayoutConstraint.activate([\n            customButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            customButton.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n        ])\n    }\n    \n    @objc func buttonTapped() {\n        print(\"Button tapped!\")\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to fetch data from a REST API using URLSession and handle the response.",
      "input": "",
      "output": "import Foundation\n\nstruct APIResponse: Decodable {\n    let data: String\n}\n\nfunc fetchData(completion: @escaping (APIResponse?, Error?) -> Void) {\n    let url = URL(string: \"https://api.example.com/data\")!\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(nil, error)\n            return\n        }\n        guard let data = data else {\n            completion(nil, NSError(domain: \"\", code: -1, userInfo: nil))\n            return\n        }\n        let decoder = JSONDecoder()\n        do {\n            let response = try decoder.decode(APIResponse.self, from: data)\n            completion(response, nil)\n        } catch {\n            completion(nil, error)\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": "Write a Swift function that creates a UITableView with custom UITableViewCell, registering the cell and setting the delegate and dataSource.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    static let reuseIdentifier = \"CustomTableViewCell\"\n}\n\nclass MyViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {\n    \n    private lazy var tableView: UITableView = {\n        let tableView = UITableView()\n        tableView.translatesAutoresizingMaskIntoConstraints = false\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: CustomTableViewCell.reuseIdentifier)\n        tableView.delegate = self\n        tableView.dataSource = self\n        return tableView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(tableView)\n        \n        NSLayoutConstraint.activate([\n            tableView.topAnchor.constraint(equalTo: view.topAnchor),\n            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n        ])\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 10\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.reuseIdentifier, for: indexPath) as! CustomTableViewCell\n        return cell\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that creates a UICollectionView with custom UICollectionViewCell, registering the cell and setting the delegate and dataSource.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n}\n\nclass MyViewController: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    \n    private lazy var collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n        collectionView.delegate = self\n        collectionView.dataSource = self\n        return collectionView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(collectionView)\n        \n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n        ])\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        return cell\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that sets up a UIStackView with an array of UIViews and custom spacing and alignment.",
      "input": "",
      "output": "import UIKit\n\nclass MyViewController: UIViewController {\n    \n    private lazy var stackView: UIStackView = {\n        let stackView = UIStackView(arrangedSubviews: [])\n        stackView.translatesAutoresizingMaskIntoConstraints = false\n        stackView.axis = .vertical\n        stackView.spacing = 10\n        stackView.alignment = .center\n        return stackView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(stackView)\n        \n        let view1 = UIView()\n        view1.backgroundColor = .red\n        let view2 = UIView()\n        view2.backgroundColor = .green\n        let view3 = UIView()\n        view3.backgroundColor = .blue\n        \n        let views = [view1, view2, view3]\n        \n        for subview in views {\n            stackView.addArrangedSubview(subview)\n            subview.translatesAutoresizingMaskIntoConstraints = false\n            NSLayoutConstraint.activate([\n                subview.widthAnchor.constraint(equalToConstant: 100),\n                subview.heightAnchor.constraint(equalToConstant: 100),\n            ])\n        }\n        \n        NSLayoutConstraint.activate([\n            stackView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            stackView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n        ])\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that presents an UIAlertController with a title, message and two actions: \"Cancel\" and \"OK\".",
      "input": "",
      "output": "import UIKit\n\nclass MyViewController: UIViewController {\n    \n    func showAlert() {\n        let alertController = UIAlertController(title: \"Alert\", message: \"This is an alert message.\", preferredStyle: .alert)\n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel)\n        let okAction = UIAlertAction(title: \"OK\", style: .default) { _ in\n            print(\"OK button tapped\")\n        }\n        \n        alertController.addAction(cancelAction)\n        alertController.addAction(okAction)\n        \n        present(alertController, animated: true)\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        showAlert()\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that creates a UISwitch, sets its initial state, and adds it to a UIView. Attach an action to the switch to handle its value changes.",
      "input": "",
      "output": "import UIKit\n\nclass MyViewController: UIViewController {\n    \n    private lazy var customSwitch: UISwitch = {\n        let customSwitch = UISwitch()\n        customSwitch.translatesAutoresizingMaskIntoConstraints = false\n        customSwitch.isOn = true\n        customSwitch.addTarget(self, action: #selector(switchToggled), for: .valueChanged)\n        return customSwitch\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(customSwitch)\n        \n        NSLayoutConstraint.activate([\n            customSwitch.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            customSwitch.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n        ])\n    }\n    \n    @objc func switchToggled() {\n        print(\"Switch is now: \\(customSwitch.isOn ? \"On\" : \"Off\")\")\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that creates a UIProgressView, sets its initial progress, and adds it to a UIView. Update the progress view's progress value over time.",
      "input": "",
      "output": "import UIKit\n\nclass MyViewController: UIViewController {\n    \n    private lazy var progressView: UIProgressView = {\n        let progressView = UIProgressView(progressViewStyle: .default)\n        progressView.translatesAutoresizingMaskIntoConstraints = false\n        progressView.progress = 0.0\n        return progressView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(progressView)\n        \n        NSLayoutConstraint.activate([\n            progressView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            progressView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            progressView.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.8),\n        ])\n        \n        updateProgress()\n    }\n    \n    func updateProgress() {\n        DispatchQueue.main.asyncAfter(deadline: .now() + 1) { [weak self] in\n            guard let self = self else { return }\n            self.progressView.progress += 0.1\n            if self.progressView.progress < 1.0 {\n                self.updateProgress()\n            }\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that takes in a UITableView and a custom UITableViewCell class, and registers the cell to the table view",
      "input": "",
      "output": "func registerCustomCell<T: UITableViewCell>(tableView: UITableView, cellClass: T.Type) {\n    let identifier = String(describing: cellClass)\n    tableView.register(cellClass, forCellReuseIdentifier: identifier)\n}"
    },
    {
      "instruction": "Write a Swift function to download an image from a URL and set it to a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil,\n              let image = UIImage(data: data) else {\n            completion(nil)\n            return\n        }\n        completion(image)\n    }.resume()\n}\n\nfunc setImage(from url: URL, to imageView: UIImageView) {\n    downloadImage(from: url) { image in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that creates a UIAlertController with a text field and a submit button",
      "input": "",
      "output": "import UIKit\n\nfunc createAlertControllerWithTextField(title: String, message: String, placeholder: String, submitAction: @escaping (String) -> Void) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    alertController.addTextField { textField in\n        textField.placeholder = placeholder\n    }\n    let submitButton = UIAlertAction(title: \"Submit\", style: .default) { _ in\n        if let text = alertController.textFields?.first?.text {\n            submitAction(text)\n        }\n    }\n    alertController.addAction(submitButton)\n    return alertController\n}"
    },
    {
      "instruction": "Write a Swift function that takes a UIViewController and presents a custom UIViewController modally",
      "input": "",
      "output": "import UIKit\n\nfunc presentCustomViewController<T: UIViewController>(from presentingViewController: UIViewController, customViewControllerType: T.Type, animated: Bool, completion: (() -> Void)? = nil) {\n    let customViewController = T()\n    presentingViewController.present(customViewController, animated: animated, completion: completion)\n}"
    },
    {
      "instruction": "Write a Swift function to make an API call using URLSession, decoding the response into a Codable model",
      "input": "",
      "output": "import Foundation\n\nfunc fetchModel<T: Codable>(from url: URL, completion: @escaping (Result<T, Error>) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        guard let data = data else {\n            let error = NSError(domain: \"\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"No data received\"])\n            completion(.failure(error))\n            return\n        }\n        do {\n            let model = try JSONDecoder().decode(T.self, from: data)\n            completion(.success(model))\n        } catch {\n            completion(.failure(error))\n        }\n    }.resume()\n}"
    },
    {
      "instruction": "Write a Swift function that initializes a UICollectionView with a custom UICollectionViewCell class and a flow layout",
      "input": "",
      "output": "import UIKit\n\nfunc createCollectionView<T: UICollectionViewCell>(cellClass: T.Type, layout: UICollectionViewFlowLayout) -> UICollectionView {\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    let identifier = String(describing: cellClass)\n    collectionView.register(cellClass, forCellWithReuseIdentifier: identifier)\n    return collectionView\n}"
    },
    {
      "instruction": "Write a Swift function that takes a UIView and adds a gradient layer with specified colors",
      "input": "",
      "output": "import UIKit\n\nfunc addGradientLayer(to view: UIView, colors: [CGColor], startPoint: CGPoint, endPoint: CGPoint) {\n    let gradientLayer = CAGradientLayer()\n    gradientLayer.colors = colors\n    gradientLayer.startPoint = startPoint\n    gradientLayer.endPoint = endPoint\n    gradientLayer.frame = view.bounds\n    view.layer.insertSublayer(gradientLayer, at: 0)\n}"
    },
    {
      "instruction": "Write a Swift function that takes a UIViewController and adds a child view controller to it, specifying the container view",
      "input": "",
      "output": "import UIKit\n\nfunc addChildViewController<T: UIViewController>(to parentViewController: UIViewController, childViewControllerType: T.Type, containerView: UIView) {\n    let childViewController = T()\n    parentViewController.addChild(childViewController)\n    containerView.addSubview(childViewController.view)\n    childViewController.view.frame = containerView.bounds\n    childViewController.view.autoresizingMask = [.flexibleWidth, .flexibleHeight]\n    childViewController.didMove(toParent: parentViewController)\n}"
    },
    {
      "instruction": "Write a Swift function to create a custom UITableViewCell with an image on the left, a label on the right, and a subtitle label below the main label",
      "input": "",
      "output": "class CustomTableViewCell: UITableViewCell {\n    let imgView: UIImageView = {\n        let img = UIImageView()\n        img.translatesAutoresizingMaskIntoConstraints = false\n        img.contentMode = .scaleAspectFit\n        return img\n    }()\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.font = UIFont.boldSystemFont(ofSize: 18)\n        return label\n    }()\n    \n    let subtitleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.font = UIFont.systemFont(ofSize: 14)\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupLayout()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupLayout() {\n        addSubview(imgView)\n        addSubview(titleLabel)\n        addSubview(subtitleLabel)\n        \n        NSLayoutConstraint.activate([\n            imgView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 10),\n            imgView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            imgView.heightAnchor.constraint(equalToConstant: 50),\n            imgView.widthAnchor.constraint(equalToConstant: 50),\n            \n            titleLabel.leadingAnchor.constraint(equalTo: imgView.trailingAnchor, constant: 10),\n            titleLabel.topAnchor.constraint(equalTo: topAnchor, constant: 10),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -10),\n            \n            subtitleLabel.leadingAnchor.constraint(equalTo: titleLabel.leadingAnchor),\n            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 5),\n            subtitleLabel.trailingAnchor.constraint(equalTo: titleLabel.trailingAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \n\nCreate a Swift function to download an image from a given URL and display it in a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: String, completion: @escaping (UIImage?) -> Void) {\n    guard let imageURL = URL(string: url) else {\n        completion(nil)\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: imageURL) { (data, response, error) in\n        if let error = error {\n            print(\"Error downloading image: \\(error.localizedDescription)\")\n            completion(nil)\n            return\n        }\n        \n        if let data = data, let image = UIImage(data: data) {\n            completion(image)\n        } else {\n            completion(nil)\n        }\n    }\n    task.resume()\n}\n\nlet imageView = UIImageView()\ndownloadImage(from: \"https://example.com/image.jpg\") { image in\n    DispatchQueue.main.async {\n        imageView.image = image\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function to create a UICollectionView with custom UICollectionViewCell containing an image and a label",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n    \n    let imageView: UIImageView = {\n        let img = UIImageView()\n        img.translatesAutoresizingMaskIntoConstraints = false\n        img.contentMode = .scaleAspectFit\n        return img\n    }()\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.font = UIFont.systemFont(ofSize: 14)\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupLayout()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupLayout() {\n        addSubview(imageView)\n        addSubview(titleLabel)\n        \n        NSLayoutConstraint.activate([\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n            \n            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor),\n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 5),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor)\n        ])\n    }\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n    let items = [\"Item 1\", \"Item 2\", \"Item 3\"]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n        collectionView.backgroundColor = .white\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return items.count\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        cell.titleLabel.text = items[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function to create aUIAlertController with a title, message, and two actions: \"OK\" and \"Cancel\"",
      "input": "",
      "output": "import UIKit\n\nfunc showAlertController(title: String, message: String, viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    let okAction = UIAlertAction(title: \"OK\", style: .default) { _ in\n        print(\"OK button tapped\")\n    }\n    \n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel) { _ in\n        print(\"Cancel button tapped\")\n    }\n    \n    alertController.addAction(okAction)\n    alertController.addAction(cancelAction)\n    \n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function to create a UIPageViewController with an array of view controllers as its pages",
      "input": "",
      "output": "import UIKit\n\nclass CustomPageViewController: UIPageViewController, UIPageViewControllerDataSource, UIPageViewControllerDelegate {\n    \n    var pages: [UIViewController] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        dataSource = self\n        delegate = self\n        \n        if let firstViewController = pages.first {\n            setViewControllers([firstViewController], direction: .forward, animated: true, completion: nil)\n        }\n    }\n    \n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n        guard let viewControllerIndex = pages.firstIndex(of: viewController) else {\n            return nil\n        }\n        \n        let previousIndex = viewControllerIndex - 1\n        guard previousIndex >= 0 else {\n            return nil\n        }\n        \n        return pages[previousIndex]\n    }\n    \n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {\n        guard let viewControllerIndex = pages.firstIndex(of: viewController) else {\n            return nil\n        }\n        \n        let nextIndex = viewControllerIndex + 1\n        guard nextIndex < pages.count else {\n            return nil\n        }\n        \n        return pages[nextIndex]\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function to create a UISlider with a custom minimum and maximum value and a custom tint color",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomSlider(minValue: Float, maxValue: Float, tintColor: UIColor) -> UISlider {\n    let slider = UISlider()\n    slider.translatesAutoresizingMaskIntoConstraints = false\n    slider.minimumValue = minValue\n    slider.maximumValue = maxValue\n    slider.tintColor = tintColor\n    return slider\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function to create a UIPickerView with an array of strings as its data source",
      "input": "",
      "output": "import UIKit\n\nclass CustomPickerViewController: UIViewController, UIPickerViewDataSource, UIPickerViewDelegate {\n    \n    let pickerView = UIPickerView()\n    let items = [\"Option 1\", \"Option 2\", \"Option 3\"]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        pickerView.translatesAutoresizingMaskIntoConstraints = false\n        pickerView.dataSource = self\n        pickerView.delegate = self\n        view.addSubview(pickerView)\n        \n        NSLayoutConstraint.activate([\n            pickerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            pickerView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n    \n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return items.count\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return items[row]\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function to create a UIStepper with a custom minimum value, maximum value, and step value",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomStepper(minValue: Double, maxValue: Double, stepValue: Double) -> UIStepper {\n    let stepper = UIStepper()\n    stepper.translatesAutoresizingMaskIntoConstraints = false\n    stepper.minimumValue = minValue\n    stepper.maximumValue = maxValue\n    stepper.stepValue = stepValue\n    return stepper\n}"
    },
    {
      "instruction": "Implement a custom UITableViewController with a search bar to filter a list of strings.",
      "input": "",
      "output": "import UIKit\n\nclass SearchTableViewController: UITableViewController, UISearchBarDelegate {\n\n    let data = [\"Apple\", \"Banana\", \"Orange\", \"Grape\", \"Cherry\", \"Mango\"]\n    var filteredData: [String] = []\n    var searchBar: UISearchBar!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        searchBar = UISearchBar()\n        searchBar.sizeToFit()\n        searchBar.delegate = self\n        \n        navigationItem.titleView = searchBar\n        filteredData = data\n\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"cell\")\n    }\n\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredData = data\n        } else {\n            filteredData = data.filter { $0.lowercased().contains(searchText.lowercased()) }\n        }\n        tableView.reloadData()\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredData.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        cell.textLabel?.text = filteredData[indexPath.row]\n        return cell\n    }\n\n}"
    },
    {
      "instruction": " \nWrite a Swift function that asynchronously downloads an image from a URL and displays it in a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            completion(nil)\n            return\n        }\n        completion(UIImage(data: data))\n    }\n    task.resume()\n}\n\nfunc setImageAsync(url: URL, imageView: UIImageView) {\n    downloadImage(from: url) { image in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " \nImplement a custom UICollectionViewCell with a UIImageView and UILabel.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    \n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        \n        contentView.addSubview(imageView)\n        contentView.addSubview(label)\n        \n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            \n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            label.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n}"
    },
    {
      "instruction": " \nImplement a custom UITextField with left and right padding.",
      "input": "",
      "output": "import UIKit\n\nclass PaddedTextField: UITextField {\n    \n    let padding = UIEdgeInsets(top: 0, left: 10, bottom: 0, right: 10)\n\n    override func textRect(forBounds bounds: CGRect) -> CGRect {\n        return bounds.inset(by: padding)\n    }\n\n    override func placeholderRect(forBounds bounds: CGRect) -> CGRect {\n        return bounds.inset(by: padding)\n    }\n\n    override func editingRect(forBounds bounds: CGRect) -> CGRect {\n        return bounds.inset(by: padding)\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a function that fetches weather data from an API using URLSession and decodes the JSON response.",
      "input": "",
      "output": "import Foundation\n\nstruct WeatherData: Codable {\n    let name: String\n    let main: Main\n}\n\nstruct Main: Codable {\n    let temp: Double\n}\n\nfunc fetchWeatherData(city: String, apiKey: String, completion: @escaping (WeatherData?) -> Void) {\n    guard let url = URL(string: \"https://api.openweathermap.org/data/2.5/weather?q=\\(city)&appid=\\(apiKey)\") else {\n        completion(nil)\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil else {\n            completion(nil)\n            return\n        }\n        \n        do {\n            let weatherData = try JSONDecoder().decode(WeatherData.self, from: data)\n            completion(weatherData)\n        } catch {\n            completion(nil)\n        }\n    }\n   task.resume()\n}"
    },
    {
      "instruction": " \nImplement a function that takes a UIScrollView and a CGPoint, scrolls the view to that point, and animates the process.",
      "input": "",
      "output": "import UIKit\n\nfunc scrollTo(_ scrollView: UIScrollView, to point: CGPoint, animated: Bool) {\n    let contentOffset = CGPoint(x: min(max(point.x, 0), scrollView.contentSize.width - scrollView.bounds.width),\n                                y: min(max(point.y, 0), scrollView.contentSize.height - scrollView.bounds.height))\n    scrollView.setContentOffset(contentOffset, animated: animated)\n}"
    },
    {
      "instruction": " \nWrite a function that creates a gradient background for a UIView using CAGradientLayer.",
      "input": "",
      "output": "import UIKit\n\nfunc createGradientBackground(for view: UIView, colors: [CGColor], startPoint: CGPoint, endPoint: CGPoint) {\n    let gradientLayer = CAGradientLayer()\n    gradientLayer.colors = colors\n    gradientLayer.startPoint = startPoint\n    gradientLayer.endPoint = endPoint\n    gradientLayer.frame = view.bounds\n    view.layer.insertSublayer(gradientLayer, at: 0)\n}"
    },
    {
      "instruction": " \nImplement a custom UIButton that changes its background color when it's highlighted.",
      "input": "",
      "output": "import UIKit\n\nclass HighlightedButton: UIButton {\n\n    var normalBackgroundColor: UIColor = .white\n    var highlightedBackgroundColor: UIColor = .gray\n    \n    override var isHighlighted: Bool {\n        didSet {\n            backgroundColor = isHighlighted ? highlightedBackgroundColor : normalBackgroundColor\n        }\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        backgroundColor = normalBackgroundColor\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        backgroundColor = normalBackgroundColor\n    }\n}"
    },
    {
      "instruction": " \nImplement a custom UIActivityIndicatorView that displays a UILabel with a message below the activity indicator.",
      "input": "",
      "output": "import UIKit\n\nclass MessageActivityIndicatorView: UIView {\n    \n    private let activityIndicator = UIActivityIndicatorView(style: .medium)\n    private let messageLabel = UILabel()\n\n    var message: String? {\n        get {\n            return messageLabel.text\n        }\n        set {\n            messageLabel.text = newValue\n        }\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n    \n    private func setupView() {\n        addSubview(activityIndicator)\n        addSubview(messageLabel)\n        \n        activityIndicator.translatesAutoresizingMaskIntoConstraints = false\n        messageLabel.translatesAutoresizingMaskIntoConstraints = false\n        \n        NSLayoutConstraint.activate([\n            activityIndicator.centerXAnchor.constraint(equalTo: centerXAnchor),\n            activityIndicator.centerYAnchor.constraint(equalTo: centerYAnchor),\n            \n            messageLabel.centerXAnchor.constraint(equalTo: centerXAnchor),\n            messageLabel.topAnchor.constraint(equalTo: activityIndicator.bottomAnchor, constant: 8)\n        ])\n    }\n    \n    func startAnimating() {\n        activityIndicator.startAnimating()\n    }\n    \n    func stopAnimating() {\n        activityIndicator.stopAnimating()\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that implements a custom UICollectionView with a horizontal scrolling layout",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UIViewController {\n    \n    private let reuseIdentifier = \"cell\"\n    \n    private lazy var collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .horizontal\n        layout.itemSize = CGSize(width: 150, height: 150)\n        layout.minimumLineSpacing = 10\n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.backgroundColor = .white\n        collectionView.showsHorizontalScrollIndicator = false\n        collectionView.delegate = self\n        collectionView.dataSource = self\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: reuseIdentifier)\n        return collectionView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.addSubview(collectionView)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n}\n\n// MARK: - UICollectionViewDataSource\nextension CustomCollectionViewController: UICollectionViewDataSource {\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 20 // your number of items here\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        // Configure the cell\n        return cell\n    }\n}\n\n// MARK: - UICollectionViewDelegate\nextension CustomCollectionViewController: UICollectionViewDelegate {\n    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {\n        print(\"Selected item at index: \\(indexPath.item)\")\n    }\n}\n\n// MARK: - CustomCollectionViewCell\nclass CustomCollectionViewCell: UICollectionViewCell {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        // Configure the cell\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that implements a custom UIImagePickerController and allows the user to select an image from their photo library",
      "input": "",
      "output": "import UIKit\n\nclass ImagePickerViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n    \n    private lazy var pickImageButton: UIButton = {\n        let button = UIButton(type: .system)\n        button.setTitle(\"Pick Image\", for: .normal)\n        button.addTarget(self, action: #selector(handlePickImageButton), for: .touchUpInside)\n        button.translatesAutoresizingMaskIntoConstraints = false\n        return button\n    }()\n    \n    private lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFit\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n        \n        view.addSubview(pickImageButton)\n        view.addSubview(imageView)\n        \n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            pickImageButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            pickImageButton.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            \n            imageView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            imageView.bottomAnchor.constraint(equalTo: pickImageButton.topAnchor, constant: -20)\n        ])\n    }\n    \n    @objc private func handlePickImageButton() {\n        let imagePickerController = UIImagePickerController()\n        imagePickerController.delegate = self\n        imagePickerController.sourceType = .photoLibrary\n        present(imagePickerController, animated: true, completion: nil)\n    }\n    \n    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {\n        if let originalImage = info[.originalImage] as? UIImage {\n            imageView.image = originalImage\n        }\n        dismiss(animated: true, completion: nil)\n    }\n    \n    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {\n        dismiss(animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to display an alert with a title, message, and action button",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    func showAlert(title: String, message: String, actionTitle: String) {\n        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n        let action = UIAlertAction(title: actionTitle, style: .default, handler: nil)\n        alertController.addAction(action)\n        present(alertController, animated: true, completion: nil)\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function to present a UIImagePickerController to capture or select an image",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    func presentImagePicker() {\n        let imagePicker = UIImagePickerController()\n        imagePicker.delegate = self\n        imagePicker.sourceType = .photoLibrary\n        \n        present(imagePicker, animated: true, completion: nil)\n    }\n    \n    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {\n        if let selectedImage = info[.originalImage] as? UIImage {\n            // Do something with the image\n        }\n        picker.dismiss(animated: true, completion: nil)\n    }\n    \n    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {\n        picker.dismiss(animated: true, completion: nil)\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UITableView with custom cells",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    // Add custom subviews and layout code here\n}\n\nclass ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    \n    private lazy var tableView: UITableView = {\n        let tableView = UITableView()\n        tableView.dataSource = self\n        tableView.delegate = self\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomCell\")\n        tableView.translatesAutoresizingMaskIntoConstraints = false\n        return tableView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(tableView)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            tableView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),\n            tableView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            tableView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor)\n        ])\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 10\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomCell\", for: indexPath) as! CustomTableViewCell\n        // Configure the cell\n        return cell\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UICollectionView with custom cells",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // Add custom subviews and layout code here\n}\n\nclass ViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    \n    private lazy var collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        return collectionView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(collectionView)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor)\n        ])\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 20\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        // Configure the cell\n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: (view.frame.width - 40) / 2, height: 150)\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function to download an image from a URL and display it in a UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    private lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n       imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(imageView)\n        setupConstraints()\n        downloadImage(from: \"https://www.example.com/image.jpg\")\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            imageView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            imageView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            imageView.widthAnchor.constraint(equalToConstant: 200),\n            imageView.heightAnchor.constraint(equalToConstant: 200)\n        ])\n    }\n    \n    func downloadImage(from urlString: String) {\n        guard let url = URL(string: urlString) else { return }\n        \n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let error = error {\n                print(\"Error downloading image: \\(error.localizedDescription)\")\n                return\n            }\n            \n            guard let data = data, let image = UIImage(data: data) else { return }\n            \n            DispatchQueue.main.async {\n                self.imageView.image = image\n            }\n        }.resume()\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function to handle authentication with Firebase email and password",
      "input": "",
      "output": "import UIKit\nimport FirebaseAuth\n\nclass ViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    func signIn(email: String, password: String) {\n        Auth.auth().signIn(withEmail: email, password: password) { (authResult, error) in\n            if let error = error {\n                print(\"Error signing in: \\(error.localizedDescription)\")\n                return\n            }\n            \n            // Successfully signed in\n            print(\"Signed in successfully\")\n        }\n    }\n    \n    func signUp(email: String, password: String) {\n        Auth.auth().createUser(withEmail: email, password: password) { (authResult, error) in\n            if let error = error {\n                print(\"Error creating user: \\(error.localizedDescription)\")\n                return\n            }\n            \n            // Successfully signed up\n            print(\"User created successfully\")\n        }\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function to save data to UserDefaults",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    func saveData(key: String, value: Any) {\n        UserDefaults.standard.set(value, forKey: key)\n    }\n    \n    func loadData(key: String) -> Any? {\n        return UserDefaults.standard.object(forKey: key)\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function to animate a UIView with a custom spring effect",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    private lazy var customView: UIView = {\n        let view = UIView()\n        view.backgroundColor = .red\n        view.frame = CGRect(x: 0, y: 0, width: 100, height: 100)\n        view.center = self.view.center\n        return view\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(customView)\n    }\n    \n    func animateView() {\n        UIView.animate(withDuration: 0.5, delay: 0, usingSpringWithDamping: 0.5, initialSpringVelocity: 1, options: [], animations: {\n            self.customView.transform = CGAffineTransform(scaleX: 1.5, y: 1.5)\n        }, completion: { _ in\n            UIView.animate(withDuration: 0.5, delay: 0, usingSpringWithDamping: 0.5, initialSpringVelocity: 1, options: [], animations: {\n                self.customView.transform = CGAffineTransform.identity\n            }, completion: nil)\n        })\n    }\n    \n}"
    },
    {
      "instruction": "Write a Swift function to display a UIAlertController with a title, message, and a single \"OK\" button to dismiss the alert.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(title: String, message: String, viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let okAction = UIAlertAction(title: \"OK\", style: .default, handler: nil)\n    alertController.addAction(okAction)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UITableViewCell with a UILabel and an UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let label = UILabel()\n    let imageView = UIImageView()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupSubviews()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    func setupSubviews() {\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        contentView.addSubview(imageView)\n\n        label.translatesAutoresizingMaskIntoConstraints = false\n        contentView.addSubview(label)\n\n        NSLayoutConstraint.activate([\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 8),\n            imageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            imageView.widthAnchor.constraint(equalToConstant: 40),\n            imageView.heightAnchor.constraint(equalToConstant: 40),\n\n            label.leadingAnchor.constraint(equalTo: imageView.trailingAnchor, constant: 8),\n            label.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -8),\n            label.centerYAnchor.constraint(equalTo: contentView.centerYAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to fetch data from a REST API endpoint using URLSession and parse the JSON response into a Swift object.",
      "input": "",
      "output": "import Foundation\n\nstruct ApiResponse: Codable {\n    let data: [String: Any]\n}\n\nfunc fetchData(url: String, completion: @escaping (ApiResponse?, Error?) -> Void) {\n    guard let url = URL(string: url) else {\n        completion(nil, NSError(domain: \"\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"Invalid URL\"]))\n        return\n    }\n\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(nil, error)\n            return\n        }\n\n        guard let data = data else {\n            completion(nil, NSError(domain: \"\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"No data received\"]))\n            return\n        }\n\n        do {\n            let decoder = JSONDecoder()\n            let apiResponse = try decoder.decode(ApiResponse.self, from: data)\n            completion(apiResponse, nil)\n        } catch let error {\n            completion(nil, error)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a gradient background for a UIView using CAGradientLayer.",
      "input": "",
      "output": "import UIKit\n\nfunc applyGradient(view: UIView, startColor: UIColor, endColor: UIColor) {\n    let gradientLayer = CAGradientLayer()\n    gradientLayer.frame = view.bounds\n    gradientLayer.colors = [startColor.cgColor, endColor.cgColor]\n    gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n    gradientLayer.endPoint = CGPoint(x: 1, y: 1)\n    view.layer.insertSublayer(gradientLayer, at: 0)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to register a UITableView cell using a cell class and a cell identifier.",
      "input": "",
      "output": "import UIKit\n\nfunc registerCell(tableView: UITableView, cellClass: AnyClass, cellIdentifier: String) {\n    tableView.register(cellClass, forCellReuseIdentifier: cellIdentifier)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UIButton with a title, background color, and corner radius.",
      "input": "",
      "output": "import UIKit\n\nfunc createButton(title: String, backgroundColor: UIColor, cornerRadius: CGFloat) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.backgroundColor = backgroundColor\n    button.layer.cornerRadius = cornerRadius\n    button.clipsToBounds = true\n    button.translatesAutoresizingMaskIntoConstraints = false\n    return button\n}"
    },
    {
      "instruction": " \nWrite a Swift function to save an UIImage to the user's photo library.",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToPhotoLibrary(image: UIImage, completion: @escaping (Bool, Error?) -> Void) {\n    PHPhotoLibrary.requestAuthorization { status in\n        if status == .authorized {\n            PHPhotoLibrary.shared().performChanges({\n                PHAssetChangeRequest.creationRequestForAsset(from: image)\n            }, completionHandler: { success, error in\n                DispatchQueue.main.async {\n                    completion(success, error)\n                }\n            })\n        } else {\n            DispatchQueue.main.async {\n                completion(false, NSError(domain: \"\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"Authorization denied\"]))\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to animate the change of a UILabel's text color.",
      "input": "",
      "output": "import UIKit\n\nfunc animateLabelTextColorChange(label: UILabel, toColor: UIColor, duration: TimeInterval) {\n    UIView.transition(with: label, duration: duration, options: .transitionCrossDissolve, animations: {\n        label.textColor = toColor\n    }, completion: nil)\n}"
    },
    {
      "instruction": "Write a Swift function to filter a list of employees based on their department and sort them by their salary in descending order",
      "input": "struct Employee {\n    let name: String\n    let department: String\n    let salary: Int\n}\n\nlet employees: [Employee] = [\n    Employee(name: \"Alice\", department: \"Engineering\", salary: 90000),\n    Employee(name: \"Bob\", department: \"Marketing\", salary: 80000),\n    Employee(name: \"Charlie\", department: \"Engineering\", salary: 95000),\n    Employee(name: \"David\", department: \"Sales\", salary: 75000),\n    Employee(name: \"Eve\", department: \"Engineering\", salary: 85000)\n]",
      "output": "func filterAndSortEmployees(employees: [Employee], departmentFilter: String) -> [Employee] {\n    return employees\n        .filter { $0.department == departmentFilter }\n        .sorted(by: { $0.salary > $1.salary })\n}\n\nlet filteredAndSortedEmployees = filterAndSortEmployees(employees: employees, departmentFilter: \"Engineering\")\nprint(filteredAndSortedEmployees)"
    },
    {
      "instruction": "Write a Swift function to download JSON data from a given URL and decode it into an array of `Post` objects using `Codable` and `URLSession`",
      "input": "struct Post: Codable {\n    let id: Int\n    let title: String\n    let body: String\n}",
      "output": "import Foundation\n\nfunc fetchPosts(completion: @escaping (Result<[Post], Error>) -> Void) {\n    let urlString = \"https://jsonplaceholder.typicode.com/posts\"\n    guard let url = URL(string: urlString) else {\n        completion(.failure(NSError(domain: \"\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"Invalid URL\"])))\n        return\n    }\n    \n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"No data received\"])))\n            return\n        }\n        \n        do {\n            let posts = try JSONDecoder().decode([Post].self, from: data)\n            completion(.success(posts))\n        } catch {\n            completion(.failure(error))\n        }\n    }.resume()\n}"
    },
    {
      "instruction": "Write a Swift function to create a custom `UIAlertController` with a text field for user input and a \"Save\" button",
      "input": "class CustomViewController: UIViewController {\n\n}",
      "output": "import UIKit\n\nclass CustomViewController: UIViewController {\n    \n    func presentAlertWithTextField() {\n        let alertController = UIAlertController(title: \"Enter text\", message: nil, preferredStyle: .alert)\n        alertController.addTextField { textField in\n            textField.placeholder = \"Enter text here\"\n        }\n        \n        let saveAction = UIAlertAction(title: \"Save\", style: .default) { _ in\n            if let inputText = alertController.textFields?.first?.text {\n                print(\"User input: \\(inputText)\")\n            }\n        }\n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n        \n        alertController.addAction(saveAction)\n        alertController.addAction(cancelAction)\n        \n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to asynchronously fetch an image from a URL and set it as the background image of a UIButton",
      "input": "class ImageDownloadViewController: UIViewController {\n\n}",
      "output": "import UIKit\n\nclass ImageDownloadViewController: UIViewController {\n    \n    private let button = UIButton()\n    \n    func setBackgroundImageFromURL(urlString: String) {\n        guard let url = URL(string: urlString) else { return }\n        \n        DispatchQueue.global().async {\n            if let data = try? Data(contentsOf: url) {\n                DispatchQueue.main.async {\n                    if let image = UIImage(data: data) {\n                        self.button.setBackgroundImage(image, for: .normal)\n                    }\n                }\n            }\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that takes an array of strings and returns an attributed string with each string on a new line and custom font and color",
      "input": "let strings = [\"Line 1\", \"Line 2\", \"Line 3\"]",
      "output": "import UIKit\n\nfunc createAttributedString(strings: [String]) -> NSAttributedString {\n    let attributedString = NSMutableAttributedString()\n    \n    strings.forEach { string in\n        let attributes: [NSAttributedString.Key: Any] = [\n            .font: UIFont.systemFont(ofSize: 16),\n            .foregroundColor: UIColor.red\n        ]\n        \n        let attributedLine = NSAttributedString(string: string + \"\\n\", attributes: attributes)\n        attributedString.append(attributedString)\n    }\n    \n    return attributedString\n}\n\nlet attributedString = createAttributedString(strings: strings)"
    },
    {
      "instruction": "Write a Swift function that animates a UIView to scale up and down using CGAffineTransform and UIView.animate",
      "input": "class AnimationViewController: UIViewController {\n\n}",
      "output": "import UIKit\n\nclass AnimationViewController: UIViewController {\n    \n    private let animatedView = UIView()\n    \n    func animateViewScaling() {\n        UIView.animate(withDuration: 0.5, animations: {\n            self.animatedView.transform = CGAffineTransform(scaleX: 1.5, y: 1.5)\n        }) { _ in\n            UIView.animate(withDuration: 0.5) {\n                self.animatedView.transform = CGAffineTransform.identity\n            }\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that handles pagination in a UITableView by fetching more data when the user scrolls to the bottom of the table",
      "input": "class PaginationViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n\n}",
      "output": "import UIKit\n\nclass PaginationViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    \n    private let tableView = UITableView()\n    private var dataSource: [String] = []\n    private var currentPage = 1\n    private let itemsPerPage = 20\n    private var isFetching = false\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        tableView.dataSource = self\n        tableView.delegate = self\n        \n        fetchData()\n    }\n    \n    func fetchData() {\n        guard !isFetching else { return }\n        \n        isFetching = true\n        let urlString = \"https://example.com/api/data?page=\\(currentPage)&limit=\\(itemsPerPage)\"\n        // Use URLSession to fetch data and decode it, then update the UI and variables accordingly\n        \n        // ...\n        // Update dataSource with new data\n        // tableView.reloadData()\n        // currentPage += 1\n        // isFetching = false\n    }\n    \n    // UITableViewDataSource methods\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return dataSource.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        cell.textLabel?.text = dataSource[indexPath.row]\n        return cell\n    }\n    \n    // UITableViewDelegate methods\n    \n    func scrollViewDidScroll(_ scrollView: UIScrollView) {\n        let offsetY = scrollView.contentOffset.y\n        let contentHeight = scrollView.contentSize.height\n        let screenHeight = scrollView.frame.height\n        \n        if offsetY > contentHeight - screenHeight * 1.5 {\n            fetchData()\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that uses CoreLocation to get the user's current location and reverse geocode it to a human-readable address",
      "input": "import CoreLocation\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n\n}",
      "output": "import UIKit\nimport CoreLocation\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n    \n    private let locationManager = CLLocationManager()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        locationManager.delegate = self\n        locationManager.requestWhenInUseAuthorization()\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n        if status == .authorizedWhenInUse {\n            locationManager.requestLocation()\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            reverseGeocode(location: location)\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Failed to get location: \\(error)\")\n    }\n    \n    func reverseGeocode(location: CLLocation) {\n        CLGeocoder().reverseGeocodeLocation(location) { placemarks, error in\n            if let error = error {\n                print(\"Failed to reverse geocode location: \\(error)\")\n                return\n            }\n            \n            if let placemark = placemarks?.first {\n                let address = \"\\(placemark.name ?? \"\"), \\(placemark.locality ?? \"\"), \\(placemark.administrativeArea ?? \"\"), \\(placemark.postalCode ?? \"\"), \\(placemark.country ?? \"\")\"\n                print(\"Address: \\(address)\")\n            }\n        }\n    }\n}"
    },
    {
      "instruction": "Write a function in Swift language to calculate the distance between two points in a coordinate plane. The function should take two points as input (x1, y1) and (x2, y2) and return the distance between them.",
      "input": "(3, 4), (6, 8)",
      "output": "import Foundation\n\nfunc distanceBetweenPoints(x1: Double, y1: Double, x2: Double, y2: Double) -> Double {\n    let deltaX = x2 - x1\n    let deltaY = y2 - y1\n    return sqrt(deltaX * deltaX + deltaY * deltaY)\n}\n\nlet distance = distanceBetweenPoints(x1: 3, y1: 4, x2: 6, y2: 8)\nprint(distance)"
    },
    {
      "instruction": " \nWrite a function in Swift language that takes in a string of an email address and returns true if the email address is valid, and false otherwise. Use regular expressions to validate the email address.",
      "input": "\"example@example.com\"",
      "output": "import Foundation\n\nfunc isValidEmail(_ email: String) -> Bool {\n    let pattern = \"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}\"\n    let regex = try? NSRegularExpression(pattern: pattern, options: [])\n    let range = NSRange(location: 0, length: email.utf16.count)\n    return regex?.firstMatch(in: email, options: [], range: range) != nil\n}\n\nlet valid = isValidEmail(\"example@example.com\")\nprint(valid)"
    },
    {
      "instruction": " \nWrite a function in Swift language that takes in a string and returns the number of words in the string. The function should be case-insensitive and should ignore punctuation.",
      "input": "\"This is an example sentence!\"",
      "output": "import Foundation\n\nfunc wordCount(_ text: String) -> Int {\n    let words = text.components(separatedBy: CharacterSet.whitespacesAndNewlines.union(.punctuationCharacters))\n    return words.filter { !$0.isEmpty }.count\n}\n\nlet count = wordCount(\"This is an example sentence!\")\nprint(count)"
    },
    {
      "instruction": " \nWrite a function in Swift language that takes in a sorted array of integers and a target integer. The function should return the index of the target integer in the array, or -1 if the target integer is not in the array. Use binary search to find the target integer.",
      "input": "[1, 3, 4, 6, 8, 9, 11], target: 6",
      "output": "func binarySearch(_ arr: [Int], target: Int) -> Int {\n    var startIndex = 0\n    var endIndex = arr.count - 1\n\n    while startIndex <= endIndex {\n        let middleIndex = (startIndex + endIndex) / 2\n        if arr[middleIndex] == target {\n            return middleIndex\n        } else if arr[middleIndex] < target {\n            startIndex = middleIndex + 1\n        } else {\n            endIndex = middleIndex - 1\n        }\n    }\n\n    return -1\n}\n\nlet index = binarySearch([1, 3, 4, 6, 8, 9, 11], target: 6)\nprint(index)"
    },
    {
      "instruction": " \nWrite a function in Swift language that takes in an array of integers and a target integer. The function should return the indices of the two numbers in the array that add up to the target integer. If there are no such numbers, return an empty array.",
      "input": "[2, 7, 11, 15], target: 9",
      "output": "func twoSum(_ arr: [Int], target: Int) -> [Int] {\n    var hashMap = [Int: Int]()\n\n    for (index, number) in arr.enumerated() {\n        let complement = target - number\n        if let complementIndex = hashMap[complement] {\n            return [complementIndex, index]\n        }\n        hashMap[number] = index\n    }\n    return []\n}\n\nlet result = twoSum([2, 7, 11, 15], target: 9)\nprint(result)"
    },
    {
      "instruction": " \nWrite a function in Swift language that takes in a string and returns a new string with the words reversed, maintaining their original order in the sentence.",
      "input": "\"Hello, world!\"",
      "output": "import Foundation\n\nfunc reverseWords(_ text: String) -> String {\n    let words = text.components(separatedBy: .whitespacesAndNewlines)\n    let reversedWords = words.map { String($0.reversed()) }\n    return reversedWords.joined(separator: \" \")\n}\n\nlet reversed = reverseWords(\"Hello, world!\")\nprint(reversed)"
    },
    {
      "instruction": " \nWrite a function in Swift language that takes in a string and returns a new string with the characters reversed, maintaining their original order within words.",
      "input": "\"Hello, world!\"",
      "output": "import Foundation\n\nfunc reverseCharacters(_ text: String) -> String {\n    let words = text.components(separatedBy: .whitespacesAndNewlines)\n    let reversedWords = words.map { String($0.characters.reversed()) }\n    return reversedWords.joined(separator: \" \")\n}\n\nlet reversed = reverseCharacters(\"Hello, world!\")\nprint(reversed)"
    },
    {
      "instruction": " \nWrite a function in Swift language that takes in an array of integers and returns a new array containing each integer squared.",
      "input": "[1, 2, 3, 4, 5]",
      "output": "func squareArray(_ arr: [Int]) -> [Int] {\n    return arr.map { $0 * $0 }\n}\n\nlet squared = squareArray([1, 2, 3, 4, 5])\nprint(squared)"
    },
    {
      "instruction": " \nWrite a function in Swift language that takes in a string and a character, and returns the number of occurrences of the character in the string. The function should be case-sensitive.",
      "input": "\"hello world\", character: \"l\"",
      "output": "func countCharacterOccurrences(text: String, character: Character) -> Int {\n    let count = text.reduce(0) { $1 == character ? $0 + 1 : $0 }\n    return count\n}\n\nlet count = countCharacterOccurrences(text: \"hello world\", character: \"l\")\nprint(count)"
    },
    {
      "instruction": " \nWrite a function in Swift language that takes in a string and returns a new string with all vowels removed. The function should be case-insensitive.",
      "input": "\"Hello, world!\"",
      "output": "import Foundation\n\nfunc removeVowels(_ text: String) -> String {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    let result = text.filter { !vowels.contains($0) }\n    return result\n}\n\nlet noVowels = removeVowels(\"Hello, world!\")\nprint(noVowels)"
    },
    {
      "instruction": "Write a Swift function that asynchronously fetches an image from a URL and sets it to a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc fetchImageFromURL(urlString: String, imageView: UIImageView) {\n    guard let url = URL(string: urlString) else { return }\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            print(\"Error fetching image: \\(error.localizedDescription)\")\n            return\n        }\n        \n        guard let data = data, let image = UIImage(data: data) else { return }\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }.resume()\n}\n\n// Usage:\n// fetchImageFromURL(urlString: \"https://example.com/image.jpg\", imageView: yourImageView)"
    },
    {
      "instruction": " \nWrite a Swift function that programmatically creates a UIButton and adds it to a given UIView with a specific frame and title.",
      "input": "",
      "output": "import UIKit\n\nfunc createButton(frame: CGRect, title: String, in view: UIView) {\n    let button = UIButton(type: .system)\n    button.frame = frame\n    button.setTitle(title, for: .normal)\n    button.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n    view.addSubview(button)\n}\n\n// Add this function in the same class\n@objc func buttonTapped() {\n    print(\"Button tapped\")\n}\n\n// Usage:\n// createButton(frame: CGRect(x: 50, y: 100, width: 150, height: 40), title: \"Tap me!\", in: view)"
    },
    {
      "instruction": " \nWrite a Swift function that initializes and presents a UIAlertController with a single \"OK\" button.",
      "input": "",
      "output": "import UIKit\n\nfunc presentAlertController(title: String, message: String, viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n    viewController.present(alertController, animated: true, completion: nil)\n}\n\n// Usage:\n// presentAlertController(title: \"Alert\", message: \"This is an alert\", viewController: self)"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UICollectionViewCell with an UIImageView and UILabe inside.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        addSubview(imageView)\n        addSubview(label)\n        \n        NSLayoutConstraint.activate([\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.bottomAnchor.constraint(equalTo: label.topAnchor),\n            \n            label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            label.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that reads a JSON file from the app's main bundle and decodes it into a specific Codable type.",
      "input": "",
      "output": "import Foundation\n\nfunc decodeJSONFile<T: Codable>(fileName: String, ofType type: T.Type) -> T? {\n    guard let url = Bundle.main.url(forResource: fileName, withExtension: \"json\") else {\n        print(\"File not found\")\n        return nil\n    }\n    \n    do {\n        let data = try Data(contentsOf: url)\n        let decoder = JSONDecoder()\n        let decodedData = try decoder.decode(type, from: data)\n        return decodedData\n    } catch {\n        print(\"Error decoding JSON: \\(error.localizedDescription)\")\n        return nil\n    }\n}\n\n// Usage:\n// let decodedData: YourCodableType? = decodeJSONFile(fileName: \"yourJSONFileName\", ofType: YourCodableType.self)"
    },
    {
      "instruction": " \nWrite a Swift function that initializes a Core Data stack with a given data model name.",
      "input": "",
      "output": "import CoreData\n\nfunc initializeCoreDataStack(modelName: String) -> NSPersistentContainer {\n    let container = NSPersistentContainer(name: modelName)\n    container.loadPersistentStores { (storeDescription, error) in\n        if let error = error as NSError? {\n            fatalError(\"Unresolved error \\(error), \\(error.userInfo)\")\n        }\n    }\n    return container\n}\n\n// Usage:\n// let persistentContainer = initializeCoreDataStack(modelName: \"YourDataModelName\")"
    },
    {
      "instruction": " \nWrite a Swift function that sets up an AVPlayerViewController to play a video from a remote URL.",
      "input": "",
      "output": "import AVKit\nimport AVFoundation\n\nfunc setupAVPlayerViewController(urlString: String) -> AVPlayerViewController? {\n    guard let url = URL(string: urlString) else { return nil }\n    let player = AVPlayer(url: url)\n    let playerViewController = AVPlayerViewController()\n    playerViewController.player = player\n    return playerViewController\n}\n\n// Usage:\n// if let playerViewController = setupAVPlayerViewController(urlString: \"https://example.com/video.mp4\") {\n//     present(playerViewController, animated: true) {\n//         playerViewController.player?.play()\n//     }\n// }"
    },
    {
      "instruction": " \nWrite a Swift function that subscribes to a Notification.Name using a selector.",
      "input": "",
      "output": "import Foundation\n\nfunc subscribeToNotification(name: Notification.Name, selector: Selector, object: Any? = nil) {\n    NotificationCenter.default.addObserver(self, selector: selector, name: name, object: object)\n}\n\n// Add this function in the same class\n@objc func handleNotification(notification: Notification) {\n    print(\"Notification received: \\(notification.name)\")\n}\n\n// Usage:\n// subscribeToNotification(name: .UIApplicationDidEnterBackground, selector: #selector(handleNotification(notification:)))"
    },
    {
      "instruction": " \nCreate a Swift extension for the UIImage class to scale an image to a specified size.",
      "input": "",
      "output": "import UIKit\n\nextension UIImage {\n    func scaled(to size: CGSize) -> UIImage? {\n        UIGraphicsBeginImageContextWithOptions(size, false, 0.0)\n        self.draw(in: CGRect(origin: .zero, size: size))\n        let scaledImage = UIGraphicsGetImageFromCurrentImageContext()\n        UIGraphicsEndImageContext()\n        \n        return scaledImage\n    }\n}\n\n// Usage\n// let originalImage = UIImage(named: \"example\")\n// let scaledImage = originalImage?.scaled(to: CGSize(width: 200, height: 200))"
    },
    {
      "instruction": "Write a Swift function to fetch and parse JSON data from a URL using URLSession and display the results in a UITableView.",
      "input": "let url = \"https://api.example.com/data\"",
      "output": "struct Item: Codable {\n    let id: Int\n    let title: String\n}\n\nclass ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    @IBOutlet weak var tableView: UITableView!\n\n    var items: [Item] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        tableView.delegate = self\n        fetchData()\n    }\n\n    func fetchData() {\n        guard let url = URL(string: \"https://api.example.com/data\") else { return }\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            guard let data = data else { return }\n            do {\n                let decodedData = try JSONDecoder().decode([Item].self, from: data)\n                DispatchQueue.main.async {\n                    self.items = decodedData\n                    self.tableView.reloadData()\n                }\n            } catch {\n                print(\"Error decoding data: \\(error)\")\n            }\n        }.resume()\n    }\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"ItemCell\", for: indexPath)\n        cell.textLabel?.text = items[indexPath.row].title\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement pull-to-refresh functionality in a UITableView.",
      "input": "",
      "output": "class ViewController: UITableViewController {\n    var items: [String] = [\"Item 1\", \"Item 2\", \"Item 3\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupRefreshControl()\n    }\n\n    func setupRefreshControl() {\n        let refreshControl = UIRefreshControl()\n        refreshControl.addTarget(self, action: #selector(refreshData(_:)), for: .valueChanged)\n        self.refreshControl = refreshControl\n    }\n\n    @objc func refreshData(_ refreshControl: UIRefreshControl) {\n        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {\n            self.items.append(\"New Item\")\n            self.tableView.reloadData()\n            refreshControl.endRefreshing()\n        }\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"ItemCell\", for: indexPath)\n        cell.textLabel?.text = items[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and display a UIAlertController with a text field and two buttons: \"Save\" and \"Cancel\".",
      "input": "",
      "output": "func presentAlertController() {\n    let alertController = UIAlertController(title: \"Enter Text\", message: nil, preferredStyle: .alert)\n    alertController.addTextField()\n\n    let saveAction = UIAlertAction(title: \"Save\", style: .default) { _ in\n        if let textField = alertController.textFields?.first, let text = textField.text {\n            // Save the entered text\n            print(\"Entered text: \\(text)\")\n        }\n    }\n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n\n    alertController.addAction(saveAction)\n    alertController.addAction(cancelAction)\n\n    present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to programmatically create and display a UIButton with rounded corners and a custom font.",
      "input": "",
      "output": "func createCustomButton() {\n    let button = UIButton(type: .system)\n    button.setTitle(\"Custom Button\", for: .normal)\n    button.titleLabel?.font = UIFont(name: \"HelveticaNeue-Bold\", size: 18)\n    button.backgroundColor = .systemBlue\n    button.setTitleColor(.white, for: .normal)\n    button.layer.cornerRadius = 10\n    button.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n\n    button.translatesAutoresizingMaskIntoConstraints = false\n    view.addSubview(button)\n\n    NSLayoutConstraint.activate([\n        button.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n        button.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n        button.widthAnchor.constraint(equalToConstant: 200),\n        button.heightAnchor.constraint(equalToConstant: 50)\n    ])\n}\n\n@objc func buttonTapped() {\n    print(\"Button tapped\")\n}"
    },
    {
      "instruction": " \nWrite a Swift function that uses Core Location to request the user's current location and display it in a UILabel.",
      "input": "",
      "output": "import CoreLocation\n\nclass ViewController: UIViewController, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n       @IBOutlet weak var locationLabel: UILabel!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupLocationManager()\n    }\n\n    func setupLocationManager() {\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            let latitude = location.coordinate.latitude\n            let longitude = location.coordinate.longitude\n            locationLabel.text = \"Latitude: \\(latitude), Longitude: \\(longitude)\"\n            locationManager.stopUpdatingLocation()\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that plays a sound file from the app bundle using AVFoundation.",
      "input": "",
      "output": "import AVFoundation\n\nclass ViewController: UIViewController {\n    var audioPlayer: AVAudioPlayer?\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupAudioPlayer()\n    }\n\n    func setupAudioPlayer() {\n        guard let path = Bundle.main.path(forResource: \"exampleSound\", ofType: \"mp3\") else { return }\n        let url = URL(fileURLWithPath: path)\n\n        do {\n            audioPlayer = try AVAudioPlayer(contentsOf: url)\n            audioPlayer?.prepareToPlay()\n        } catch {\n            print(\"Error initializing audio player: \\(error)\")\n        }\n    }\n\n    func playSound() {\n        audioPlayer?.play()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a search bar in a UITableView using UISearchController.",
      "input": "",
      "output": "class ViewController: UITableViewController, UISearchBarDelegate, UISearchResultsUpdating {\n    let items = [\"Apple\", \"Banana\", \"Cherry\", \"Grape\", \"Lemon\", \"Orange\", \"Strawberry\"]\n    var filteredItems: [String] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupSearchController()\n    }\n\n    func setupSearchController() {\n        let searchController = UISearchController(searchResultsController: nil)\n        searchController.searchResultsUpdater = self\n        searchController.obscuresBackgroundDuringPresentation = false\n        searchController.searchBar.placeholder = \"Search\"\n        navigationItem.searchController = searchController\n        definesPresentationContext = true\n    }\n\n    func updateSearchResults(for searchController: UISearchController) {\n        if let searchText = searchController.searchBar.text, !searchText.isEmpty {\n            filteredItems = items.filter { $0.lowercased().contains(searchText.lowercased()) }\n        } else {\n            filteredItems = items\n        }\n        tableView.reloadData()\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredItems.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"ItemCell\", for: indexPath)\n        cell.textLabel?.text = filteredItems[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that uses Core Motion to detect device shakes and performs an action.",
      "input": "",
      "output": "import CoreMotion\n\nclass ViewController: UIViewController {\n    let motionManager = CMMotionManager()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupMotionManager()\n    }\n\n    func setupMotionManager() {\n        motionManager.accelerometerUpdateInterval = 0.1\n        motionManager.startAccelerometerUpdates(to: OperationQueue.current!) { (data, error) in\n            if let accelerometerData = data {\n                if self.isShaking(data: accelerometerData) {\n                    print(\"Device is shaking\")\n                }\n            }\n        }\n    }\n\n    func isShaking(data: CMAccelerometerData) -> Bool {\n        let accelerationThreshold: Double = 1.3\n        let userAcceleration = data.acceleration\n        return abs(userAcceleration.x) > accelerationThreshold ||\n               abs(userAcceleration.y) > accelerationThreshold ||\n               abs(userAcceleration.z) > accelerationThreshold\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that captures a screenshot of a specified UIView and returns the image.",
      "input": "",
      "output": "import UIKit\n\nfunc captureScreenshot(of view: UIView) -> UIImage? {\n    UIGraphicsBeginImageContextWithOptions(view.bounds.size, false, UIScreen.main.scale)\n    defer { UIGraphicsEndImageContext() }\n    view.drawHierarchy(in: view.bounds, afterScreenUpdates: true)\n    return UIGraphicsGetImageFromCurrentImageContext()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates the color change of a UIButton background.",
      "input": "",
      "output": "import UIKit\n\nfunc animateColorChange(for button: UIButton, to color: UIColor, duration: TimeInterval) {\n    UIView.animate(withDuration: duration) {\n        button.backgroundColor = color\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sets up an AVCaptureSession with a front-facing camera.",
      "input": "",
      "output": "import AVFoundation\n\nfunc setupFrontFacingCameraSession() -> AVCaptureSession? {\n    let session = AVCaptureSession()\n    session.sessionPreset = .high\n\n    guard let frontCamera = AVCaptureDevice.default(.builtInWideAngleCamera, for: .video, position: .front) else {\n        print(\"Front-facing camera not found\")\n        return nil\n    }\n\n    do {\n        let input = try AVCaptureDeviceInput(device: frontCamera)\n        if session.canAddInput(input) {\n            session.addInput(input)\n        } else {\n            print(\"Cannot add input to session\")\n            return nil\n        }\n    } catch {\n        print(\"Error creating input: \\(error)\")\n        return nil\n    }\n\n    return session\n}"
    },
    {
      "instruction": " \nWrite a Swift function that retrieves the user's current location using CoreLocation.",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    private let locationManager = CLLocationManager()\n\n    func getCurrentLocation(completion: @escaping (CLLocation?, Error?) -> Void) {\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n\n        let locationHandler: (CLLocation?, Error?) -> Void = { location, error in\n            completion(location, error)\n            self.locationManager.stopUpdatingLocation()\n        }\n\n        locationManager.requestLocation(completionHandler: locationHandler)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that loads a remote image from a URL and sets it as a UIImageView's image.",
      "input": "",
      "output": "import UIKit\n\nfunc loadImage(from url: URL, into imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil, let image = UIImage(data: data) else {\n            print(\"Error loading image: \\(error?.localizedDescription ?? \"Unknown error\")\")\n            return\n        }\n        \n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UICollectionView with a custom UICollectionViewCell.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCell: UICollectionViewCell {\n    // Add custom cell properties and methods here\n}\n\nfunc createCustomCollectionView(frame: CGRect) -> UICollectionView {\n    let layout = UICollectionViewFlowLayout()\n    layout.scrollDirection = .vertical\n    layout.itemSize = CGSize(width: 100, height: 100)\n    layout.sectionInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)\n\n    let collectionView = UICollectionView(frame: frame, collectionViewLayout: layout)\n    collectionView.register(CustomCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n    collectionView.backgroundColor = .white\n\n    return collectionView\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a custom UIView as a subview and centers it within its superview.",
      "input": "",
      "output": "import UIKit\n\nfunc addAndCenterSubview(_ subview: UIView, in superview: UIView) {\n    subview.translatesAutoresizingMaskIntoConstraints = false\n    superview.addSubview(subview)\n\n    NSLayoutConstraint.activate([\n        subview.centerXAnchor.constraint(equalTo: superview.centerXAnchor),\n        subview.centerYAnchor.constraint(equalTo: superview.centerYAnchor),\n        subview.widthAnchor.constraint(equalToConstant: subview.bounds.width),\n        subview.heightAnchor.constraint(equalToConstant: subview.bounds.height)\n    ])\n}"
    },
    {
      "instruction": " \nWrite a Swift function that registers a local notification with a specified title, body, and time interval.",
      "input": "",
      "output": "import UserNotifications\n\nfunc scheduleLocalNotification(title: String, body: String, timeInterval: TimeInterval) {\n    let content = UNMutableNotificationContent()\n    content.title = title\n    content.body = body\n\n    let trigger = UNTimeIntervalNotificationTrigger(timeInterval: timeInterval, repeats: false)\n\n    let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)\n\n    UNUserNotificationCenter.current().add(request) { error in\n        if let error = error {\n            print(\"Error scheduling notification: \\(error)\")\n        } else {\n            print(\"Notification scheduled successfully\")\n        }\n    }\n}"
    },
    {
      "instruction": "Create a custom UICollectionViewCell with an UIImageView and UILabel, and configure them in the cellForItemAt delegate method.",
      "input": "",
      "output": "class CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n\n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        addSubview(imageView)\n        addSubview(titleLabel)\n\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n\n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n\n// MARK: - UICollectionViewDataSource\nextension ViewController: UICollectionViewDataSource {\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return dataSource.count\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        cell.imageView.image = dataSource[indexPath.row].image\n        cell.titleLabel.text = dataSource[indexPath.row].title\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nImplement a singleton pattern for a network manager in Swift.",
      "input": "",
      "output": "class NetworkManager {\n    static let shared = NetworkManager()\n\n    private init() { }\n\n    func fetchData(completion: @escaping (Result<Data, Error>) -> Void) {\n        // Implementation of network request\n    }\n}\n\n// Usage\nNetworkManager.shared.fetchData { result in\n    // Handle result\n}"
    },
    {
      "instruction": " \nImplement a function that downloads an image from a URL and sets it to a UIImageView using DispatchQueue asynchronously.",
      "input": "",
      "output": "func downloadImage(url: URL, imageView: UIImageView) {\n    DispatchQueue.global(qos: .userInitiated).async {\n        if let data = try? Data(contentsOf: url) {\n            DispatchQueue.main.async {\n                imageView.image = UIImage(data: data)\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIButton subclass with rounded corners and a gradient background.",
      "input": "",
      "output": "class GradientButton: UIButton {\n    private let gradientLayer = CAGradientLayer()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupGradient()\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        setupGradient()\n    }\n\n    private func setupGradient() {\n        gradientLayer.colors = [UIColor.red.cgColor, UIColor.blue.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 0)\n        layer.insertSublayer(gradientLayer, at: 0)\n        layer.cornerRadius = 10\n        layer.masksToBounds = true\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        gradientLayer.frame = bounds\n    }\n}"
    },
    {
      "instruction": " \nImplement a function that saves data to UserDefaults and another function that retrieves the data.",
      "input": "",
      "output": "func saveDataToUserDefaults(data: Data, key: String) {\n    UserDefaults.standard.set(data, forKey: key)\n}\n\nfunc retrieveDataFromUserDefaults(key: String) -> Data? {\n    return UserDefaults.standard.data(forKey: key)\n}"
    },
    {
      "instruction": " \nCreate a custom UIView subclass that uses autolayout to display a stack view with two UILabels vertically aligned.",
      "input": "",
      "output": "class CustomView: UIView {\n    private let label1: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    private let label2: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    private lazy var stackView: UIStackView = {\n        let stackView = UIStackView(arrangedSubviews: [label1, label2])\n        stackView.translatesAutoresizingMaskIntoConstraints = false\n        stackView.axis = .vertical\n        stackView.spacing = 8\n        return stackView\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        addSubview(stackView)\n\n        NSLayoutConstraint.activate([\n            stackView.leadingAnchor.constraint(equalTo: self.leadingAnchor),\n            stackView.trailingAnchor.constraint(equalTo: self.trailingAnchor),\n            stackView.topAnchor.constraint(equalTo: self.topAnchor),\n            stackView.bottomAnchor.constraint(equalTo: self.bottomAnchor)\n        ])\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n               fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nImplement a function that takes a list of users and filters out users over the age of 18 using the filter function in Swift.",
      "input": "",
      "output": "struct User {\n    let name: String\n    let age: Int\n}\n\nfunc filterAdults(users: [User]) -> [User] {\n    return users.filter { $0.age > 18 }\n}"
    },
    {
      "instruction": " \nImplement an MVVM pattern with a view model that fetches a list of items from a remote API and returns them to the view controller.",
      "input": "",
      "output": "struct Item {\n    let title: String\n    let description: String\n}\n\nclass ItemsViewModel {\n    private(set) var items: [Item] = []\n\n    func fetchItems(completion: @escaping (Bool) -> Void) {\n        // Simulate a network request\n        DispatchQueue.global(qos: .userInitiated).asyncAfter(deadline: .now() + 2) {\n            self.items = [\n                Item(title: \"Item 1\", description: \"Description 1\"),\n                Item(title: \"Item 2\", description: \"Description 2\")\n            ]\n            DispatchQueue.main.async {\n                completion(true)\n            }\n        }\n    }\n}\n\nclass ItemsViewController: UIViewController {\n    private let viewModel = ItemsViewModel()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        viewModel.fetchItems { [weak self] success in\n            if success {\n                self?.updateUI()\n            } else {\n                // Handle error\n            }\n        }\n    }\n\n    private func updateUI() {\n        // Update the view with the new data\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that asynchronously downloads an image from a URL and sets it to a UIImageView",
      "input": "",
      "output": "func setImage(from url: URL, to imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            print(\"Error downloading image: \\(error?.localizedDescription ?? \"No description\")\")\n            return\n        }\n        DispatchQueue.main.async {\n            imageView.image = UIImage(data: data)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIButton with rounded corners, a background color, and a title",
      "input": "",
      "output": "func createCustomButton(title: String, backgroundColor: UIColor, cornerRadius: CGFloat) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.backgroundColor = backgroundColor\n    button.layer.cornerRadius = cornerRadius\n    button.clipsToBounds = true\n    return button\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a shadow to a UIView with a given color, opacity, and offset",
      "input": "",
      "output": "func addShadow(to view: UIView, color: UIColor, opacity: Float, offset: CGSize) {\n    view.layer.shadowColor = color.cgColor\n    view.layer.shadowOpacity = opacity\n    view.layer.shadowOffset = offset\n    view.layer.shadowRadius = 5\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a UISearchBar as a navigation item to a UINavigationController",
      "input": "",
      "output": "func addSearchBar(to navigationController: UINavigationController) {\n    let searchBar = UISearchBar()\n    searchBar.sizeToFit()\n    let searchItem = UIBarButtonItem(customView: searchBar)\n    navigationController.navigationBar.topItem?.setRightBarButton(searchItem, animated: true)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that presents an alert controller with a single action button in a UIViewController",
      "input": "",
      "output": "func presentAlertController(title: String, message: String, actionTitle: String, in viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: actionTitle, style: .default, handler: nil)\n    alertController.addAction(action)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that detects when the keyboard is shown and adjusts a UIScrollView's content inset",
      "input": "",
      "output": "func registerForKeyboardNotifications(scrollView: UIScrollView) {\n    NotificationCenter.default.addObserver(forName: UIResponder.keyboardWillShowNotification, object: nil, queue: nil) { notification in\n        if let keyboardFrame: NSValue = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue {\n            let keyboardRectangle = keyboardFrame.cgRectValue\n            let keyboardHeight = keyboardRectangle.height\n            scrollView.contentInset = UIEdgeInsets(top: 0, left: 0, bottom: keyboardHeight, right: 0)\n        }\n    }\n\n    NotificationCenter.default.addObserver(forName: UIResponder.keyboardWillHideNotification, object: nil, queue: nil) { _ in\n        scrollView.contentInset = UIEdgeInsets.zero\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UICollectionView with a custom layout and registers a UICollectionViewCell",
      "input": "",
      "output": "func createCollectionView(cellIdentifier: String, layout: UICollectionViewLayout) -> UICollectionView {\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: cellIdentifier)\n    return collectionView\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a UITapGestureRecognizer to a UIView and performs a specified action when tapped",
      "input": "",
      "output": "func addTapGestureRecognizer(to view: UIView, target: Any, action: Selector) {\n    let tapGestureRecognizer = UITapGestureRecognizer(target: target, action: action)\n    view.addGestureRecognizer(tapGestureRecognizer)\n    view.isUserInteractionEnabled = true\n}"
    },
    {
      "instruction": "Implement a Swift function 'findLongestWord' that takes an array of strings and returns the longest word in the array. If there are multiple words with the same length, return the first one in the array.",
      "input": "",
      "output": "func findLongestWord(_ words: [String]) -> String {\n    var longestWord = \"\"\n    \n    for word in words {\n        if word.count > longestWord.count {\n            longestWord = word\n        }\n    }\n    \n    return longestWord\n}"
    },
    {
      "instruction": " \nWrite a Swift function 'mergeSortedArrays' that takes two sorted arrays of integers and returns a new sorted array containing the elements of both input arrays.",
      "input": "",
      "output": "func mergeSortedArrays(_ array1: [Int], _ array2: [Int]) -> [Int] {\n    var mergedArray: [Int] = []\n    var index1 = 0\n    var index2 = 0\n    \n    while index1 < array1.count && index2 < array2.count {\n        if array1[index1] < array2[index2] {\n            mergedArray.append(array1[index1])\n            index1 += 1\n        } else {\n            mergedArray.append(array2[index2])\n            index2 += 1\n        }\n    }\n    \n    while index1 < array1.count {\n        mergedArray.append(array1[index1])\n        index1 += 1\n    }\n    \n    while index2 < array2.count {\n        mergedArray.append(array2[index2])\n        index2 += 1\n    }\n    \n    return mergedArray\n}"
    },
    {
      "instruction": " \nImplement a Swift class 'Person' with properties 'firstName', 'lastName', and 'age'. Add a method 'fullName' that returns the person's full name.",
      "input": "",
      "output": "class Person {\n    var firstName: String\n    var lastName: String\n    var age: Int\n\n    init(firstName: String, lastName: String, age: Int) {\n        self.firstName = firstName\n        self.lastName = lastName\n        self.age = age\n    }\n\n    func fullName() -> String {\n        return \"\\(firstName) \\(lastName)\"\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift protocol 'Drawable' with a required function 'draw()'. Implement the protocol in a 'Rectangle' class with properties 'width' and 'height'.",
      "input": "",
      "output": "protocol Drawable {\n    func draw() -> Void\n}\n\nclass Rectangle: Drawable {\n    var width: Double\n    var height: Double\n\n    init(width: Double, height: Double) {\n        self.width = width\n        self.height = height\n    }\n\n    func draw() {\n        print(\"Drawing a rectangle with width: \\(width) and height: \\(height)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function 'fibonacci' that takes an integer 'n' and returns the nth Fibonacci number using recursion.",
      "input": "",
      "output": "func fibonacci(_ n: Int) -> Int {\n    if n <= 1 {\n        return n\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2)\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift enum 'Direction' with cases 'north', 'south', 'east', and 'west'. Add a method 'opposite' that returns the opposite direction.",
      "input": "",
      "output": "enum Direction {\n    case north\n    case south\n    case east\n    case west\n\n    func opposite() -> Direction {\n        switch self {\n        case .north:\n            return .south\n        case .south:\n            return .north\n        case .east:\n            return .west\n        case .west:\n            return .east\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function 'isPalindrome' that takes a string as input and returns true if the string is a palindrome (ignoring case and non-alphanumeric characters) and false otherwise.",
      "input": "",
      "output": "func isPalindrome(_ input: String) -> Bool {\n    let alphanumerics = CharacterSet.alphanumerics\n    let inputFiltered = input.lowercased().unicodeScalars.filter { alphanumerics.contains($0) }\n    let reversed = inputFiltered.reversed()\n\n    return inputFiltered.elementsEqual(reversed)\n}"
    },
    {
      "instruction": " \nCreate a Swift function 'removeDuplicates' that takes an array of integers and removes duplicate elements, preserving the original order of the elements.",
      "input": "",
      "output": "func removeDuplicates(_ array: [Int]) -> [Int] {\n    var uniqueElements: [Int] = []\n    var seen = Set<Int>()\n\n    for element in array {\n        if !seen.contains(element) {\n            uniqueElements.append(element)\n            seen.insert(element)\n        }\n    }\n\n   return uniqueElements\n}"
    },
    {
      "instruction": " \nCreate a Swift class that represents a simple stopwatch with start, stop, and reset functionality and stores elapsed time.",
      "input": "",
      "output": "import Foundation\n\nclass Stopwatch {\n    private var startTime: Date?\n    private(set) var elapsedTime: TimeInterval = 0\n\n    func start() {\n        startTime = Date()\n    }\n\n    func stop() {\n        guard let startTime = startTime else { return }\n        elapsedTime += Date().timeIntervalSince(startTime)\n        self.startTime = nil\n    }\n\n    func reset() {\n        startTime = nil\n        elapsedTime = 0\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift class that represents a simple image downloader that downloads images from a URL and caches them.",
      "input": "",
      "output": "import UIKit\n\nclass ImageDownloader {\n    private var cache: [URL: UIImage] = [:]\n\n    func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n        if let cachedImage = cache[url] {\n            completion(cachedImage)\n            return\n        }\n\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            guard let data = data, let image = UIImage(data: data) else {\n                completion(nil)\n                return\n            }\n\n            self.cache[url] = image\n            completion(image)\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift class that represents a simple network request builder for making HTTP requests with different HTTP methods and parameters.",
      "input": "",
      "output": "import Foundation\n\nenum HttpMethod: String {\n    case get = \"GET\"\n    case post = \"POST\"\n    case put = \"PUT\"\n    case delete = \"DELETE\"\n}\n\nclass NetworkRequestBuilder {\n    private(set) var url: URL\n    private(set) var httpMethod: HttpMethod\n    private(set) var parameters: [String: Any]?\n\n    init(url: URL, httpMethod: HttpMethod, parameters: [String: Any]? = nil) {\n        self.url = url\n        self.httpMethod = httpMethod\n        self.parameters = parameters\n    }\n\n    func build() -> URLRequest {\n        var request = URLRequest(url: url)\n        request.httpMethod = httpMethod.rawValue\n\n        if let parameters = parameters,\n           let data = try? JSONSerialization.data(withJSONObject: parameters, options: []) {\n            request.httpBody = data\n            request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n        }\n\n        return request\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift class that represents a simple data store for saving and retrieving key-value pairs using UserDefaults.",
      "input": "",
      "output": "import Foundation\n\nclass SimpleDataStore {\n    func save(value: Any, forKey key: String) {\n        UserDefaults.standard.set(value, forKey: key)\n    }\n\n    func getValue(forKey key: String) -> Any? {\n        return UserDefaults.standard.value(forKey: key)\n    }\n\n    func removeValue(forKey key: String) {\n        UserDefaults.standard.removeObject(forKey: key)\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift class that represents a simple timer that can be started, paused, resumed, and stopped with a closure-based event handler for tick events.",
      "input": "",
      "output": "import Foundation\n\nclass SimpleTimer {\n    private var timer: Timer?\n    private(set) var isRunning = false\n    var tickHandler: (() -> Void)?\n\n    func start(interval: TimeInterval) {\n        guard !isRunning else { return }\n        timer = Timer.scheduledTimer(withTimeInterval: interval, repeats: true) { _ in\n            self.tickHandler?()\n        }\n        isRunning = true\n    }\n\n    func pause() {\n        guard isRunning else { return }\n        timer?.invalidate()\n        isRunning = false\n    }\n\n    func resume(interval: TimeInterval) {\n        guard !isRunning else { return }\n        start(interval: interval)\n    }\n\n    func stop() {\n        timer?.invalidate()\n        isRunning = false\n    }\n}"
    },
    {
      "instruction": "Create a custom UIView subclass with a gradient background.",
      "input": "",
      "output": "import UIKit\n\nclass GradientView: UIView {\n    \n    private let gradientLayer = CAGradientLayer()\n    \n    var startColor: UIColor = UIColor.white {\n        didSet {\n            updateGradientColors()\n        }\n    }\n    \n    var endColor: UIColor = UIColor.black {\n        didSet {\n            updateGradientColors()\n        }\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup()\n    }\n    \n    private func setup() {\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 1)\n        layer.addSublayer(gradientLayer)\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        gradientLayer.frame = bounds\n    }\n    \n    private func updateGradientColors() {\n        gradientLayer.colors = [startColor.cgColor, endColor.cgColor]\n    }\n}"
    },
    {
      "instruction": " \n\nCreate a Swift function that returns the factorial of a given number using recursion.",
      "input": "",
      "output": "func factorial(_ n: Int) -> Int {\n    if n == 0 || n == 1 {\n        return 1\n    } else {\n        return n * factorial(n - 1)\n    }\n}"
    },
    {
      "instruction": " \n\nImplement a Swift function to merge two sorted arrays into a single sorted array.",
      "input": "",
      "output": "func mergeSortedArrays(array1: [Int], array2: [Int]) -> [Int] {\n    var result: [Int] = []\n    var i = 0\n    var j = 0\n    \n    while i < array1.count && j < array2.count {\n        if array1[i] < array2[j] {\n            result.append(array1[i])\n            i += 1\n        } else {\n            result.append(array2[j])\n            j += 1\n        }\n    }\n    \n    while i < array1.count {\n        result.append(array1[i])\n        i += 1\n    }\n    \n    while j < array2.count {\n        result.append(array2[j])\n        j += 1\n    }\n    \n    return result\n}"
    },
    {
      "instruction": " \n\nCreate a Swift function that takes a string and returns all the unique characters in it.",
      "input": "",
      "output": "func uniqueCharacters(in string: String) -> [Character] {\n    var uniqueCharacters: [Character] = []\n    \n    for character in string {\n        if !uniqueCharacters.contains(character) {\n            uniqueCharacters.append(character)\n        }\n    }\n    \n    return uniqueCharacters\n}"
    },
    {
      "instruction": " \n\nImplement a Swift function that takes an array of integers and returns the sum of all even numbers in the array.",
      "input": "",
      "output": "func sumOfEvenNumbers(in array: [Int]) -> Int {\n    return array.filter { $0 % 2 == 0 }.reduce(0, +)\n}"
    },
    {
      "instruction": " \n\nCreate a Swift function that takes an array of integers and returns an array with the square of each number.",
      "input": "",
      "output": "func squareOfNumbers(in array: [Int]) -> [Int] {\n    return array.map { $0 * $0 }\n}"
    },
    {
      "instruction": " \n\nImplement a Swift function that takes an array of strings and returns the longest string in the array.",
      "input": "",
      "output": "func longestString(in array: [String]) -> String? {\n    return array.max(by: { $0.count < $1.count })\n}"
    },
    {
      "instruction": " \n\nCreate a Swift function that takes a string and returns the number of vowels in it.",
      "input": "",
      "output": "func countVowels(in text: String) -> Int {\n    let vowels = \"aeiouAEIOU\"\n    return text.reduce(0) { count, character in\n        vowels.contains(character) ? count + 1 : count\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to create a custom UITableViewCell with a UILabel and a UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let label = UILabel()\n    let imageView = UIImageView()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupSubviews()\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupSubviews() {\n        label.translatesAutoresizingMaskIntoConstraints = false\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n\n        contentView.addSubview(label)\n        contentView.addSubview(imageView)\n\n        NSLayoutConstraint.activate([\n            label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            label.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),\n            label.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8),\n\n            imageView.leadingAnchor.constraint(equalTo: label.trailingAnchor, constant: 16),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),\n            imageView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8),\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to fetch data from a remote API using URLSession and decode the JSON response",
      "input": "",
      "output": "import Foundation\n\nstruct APIResponse: Codable {\n    let data: [String: Any]\n}\n\nfunc fetchData(completion: @escaping (Result<APIResponse, Error>) -> Void) {\n    let urlString = \"https://api.example.com/data\"\n    guard let url = URL(string: urlString) else {\n        completion(.failure(NSError(domain: \"\", code: -1, userInfo: nil)))\n        return\n    }\n\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else {\n            completion(.failure(NSError(domain: \"\", code: -1, userInfo: nil)))\n            return\n        }\n\n        do {\n            let decodedData = try JSONDecoder().decode(APIResponse.self, from: data)\n            completion(.success(decodedData))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n\n    task.resume()\n}"
    },
    {
      "instruction": "Create a custom UITableViewCell with an image and two labels.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    \n    // Step 1: Define UI Components\n    private let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n    \n    private let titleLabel: UILabel = {\n        let label = UILabel()\n        label.font = UIFont.systemFont(ofSize: 18, weight: .bold)\n        return label\n    }()\n    \n    private let subtitleLabel: UILabel = {\n        let label = UILabel()\n        label.font = UIFont.systemFont(ofSize: 16, weight: .medium)\n        return label\n    }()\n    \n    // Step 2: Initialize the custom cell\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        \n        addSubview(cellImageView)\n        addSubview(titleLabel)\n        addSubview(subtitleLabel)\n        \n        // Step 3: Set up constraints for UI components\n        cellImageView.translatesAutoresizingMaskIntoConstraints = false\n        titleLabel.translatesAutoresizingMaskIntoConstraints = false\n        subtitleLabel.translatesAutoresizingMaskIntoConstraints = false\n        \n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 16),\n            cellImageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            cellImageView.widthAnchor.constraint(equalToConstant: 50),\n            cellImageView.heightAnchor.constraint(equalToConstant: 50),\n            \n            titleLabel.topAnchor.constraint(equalTo: topAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 16),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -16),\n            \n            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 4),\n            subtitleLabel.leadingAnchor.constraint(equalTo: titleLabel.leadingAnchor),\n            subtitleLabel.trailingAnchor.constraint(equalTo: titleLabel.trailingAnchor)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    // Step 4: Configure the custom cell\n    func configure(image: UIImage, title: String, subtitle: String) {\n        cellImageView.image = image\n        titleLabel.text = title\n        subtitleLabel.text = subtitle\n    }\n    \n}"
    },
    {
      "instruction": " \nCreate a function that fetches data from an API and decodes it into a custom Swift struct.",
      "input": "",
      "output": "import Foundation\n\nstruct ApiResponse: Codable {\n    let items: [Item]\n}\n\nstruct Item: Codable {\n    let title: String\n    let imageUrl: String\n}\n\nfunc fetchData(completion: @escaping ([Item]?, Error?) -> Void) {\n    let url = URL(string: \"https://api.example.com/items\")\n    let task = URLSession.shared.dataTask(with: url!) { (data, response, error) in\n        guard let data = data, error == nil else {\n            DispatchQueue.main.async {\n                completion(nil, error)\n            }\n            return\n        }\n        \n        do {\n            let decoder = JSONDecoder()\n            let apiResponse = try decoder.decode(ApiResponse.self, from: data)\n            DispatchQueue.main.async {\n                completion(apiResponse.items, nil)\n            }\n        } catch {\n            DispatchQueue.main.async {\n                completion(nil, error)\n            }\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " \nCreate a UISearchBar and configure it to filter a table view with search results.",
      "input": "",
      "output": "import UIKit\n\nclass SearchableViewController: UIViewController, UISearchBarDelegate, UITableViewDataSource, UITableViewDelegate {\n    \n    private var data: [String] = []\n    private var filteredData: [String] = []\n    \n    private lazy var searchBar: UISearchBar = {\n        let searchBar = UISearchBar()\n        searchBar.delegate = self\n        return searchBar\n    }()\n    \n    private lazy var tableView: UITableView = {\n        let tableView = UITableView()\n        tableView.dataSource = self\n        tableView.delegate = self\n        return tableView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.addSubview(searchBar)\n        view.addSubview(tableView)\n        \n        searchBar.translatesAutoresizingMaskIntoConstraints = false\n        tableView.translatesAutoresizingMaskIntoConstraints = false\n        \n        NSLayoutConstraint.activate([\n            searchBar.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            searchBar.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            searchBar.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            \n            tableView.topAnchor.constraint(equalTo: searchBar.bottomAnchor),\n            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor)\n        ])\n    }\n    \n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredData = data\n        } else {\n            filteredData = data.filter { $0.lowercased().contains(searchText.lowercased()) }\n        }\n        tableView.reloadData()\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredData.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell{\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\n        cell.textLabel?.text = filteredData[indexPath.row]\n        return cell\n    }\n    \n}"
    },
    {
      "instruction": " \nImplement a function that saves an image to the device's photo library.",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToPhotoLibrary(image: UIImage, completion: @escaping (Bool, Error?) -> Void) {\n    PHPhotoLibrary.requestAuthorization { (status) in\n        switch status {\n        case .authorized:\n            PHPhotoLibrary.shared().performChanges({\n                PHAssetChangeRequest.creationRequestForAsset(from: image)\n            }, completionHandler: { (success, error) in\n                DispatchQueue.main.async {\n                    completion(success, error)\n                }\n            })\n        case .denied, .restricted, .notDetermined:\n            DispatchQueue.main.async {\n                completion(false, nil)\n            }\n        @unknown default:\n            fatalError(\"Unknown authorization status\")\n        }\n    }\n}"
    },
    {
      "instruction": " \nCreate a function that animates a view's background color change.",
      "input": "",
      "output": "import UIKit\n\nfunc animateBackgroundColorChange(view: UIView, toColor: UIColor, duration: TimeInterval = 1.0) {\n    UIView.animate(withDuration: duration, animations: {\n        view.backgroundColor = toColor\n    })\n}"
    },
    {
      "instruction": " \nCreate a function that presents a UIAlertController with an action to dismiss it.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlertController(on viewController: UIViewController, title: String, message: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    let dismissAction = UIAlertAction(title: \"Dismiss\", style: .default, handler: nil)\n    alertController.addAction(dismissAction)\n    \n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nCreate a function that sets up a UIPickerView with a custom data source and delegate.",
      "input": "",
      "output": "import UIKit\n\nclass CustomPickerViewController: UIViewController, UIPickerViewDataSource, UIPickerViewDelegate {\n    \n    private let pickerData = [\"Option 1\", \"Option 2\", \"Option 3\"]\n    \n    private lazy var pickerView: UIPickerView = {\n        let pickerView = UIPickerView()\n        pickerView.dataSource = self\n        pickerView.delegate = self\n        return pickerView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.addSubview(pickerView)\n        \n        pickerView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            pickerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            pickerView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n    \n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return pickerData.count\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return pickerData[row]\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        print(\"Selected option: \\(pickerData[row])\")\n    }\n    \n}"
    },
    {
      "instruction": " \nImplement a function that creates a UIStackView with an array of views and sets up the layout.",
      "input": "",
      "output": "import UIKit\n\nfunc createStackViewWithViews(_ views: [UIView], axis: NSLayoutConstraint.Axis = .vertical, distribution: UIStackView.Distribution = .fill, spacing: CGFloat = 8) -> UIStackView {\n    let stackView = UIStackView(arrangedSubviews: views)\n    stackView.axis = axis\n    stackView.distribution = distribution\n    stackView.spacing = spacing\n    \n    return stackView\n}"
    },
    {
      "instruction": "Create a Swift function that reads a text file and returns its content as a string.",
      "input": "",
      "output": "import Foundation\n\nfunc readTextFile(_ fileName: String, fileType: String) -> String? {\n    if let filePath = Bundle.main.path(forResource: fileName, ofType: fileType) {\n        do {\n            let text = try String(contentsOfFile: filePath, encoding: .utf8)\n            return text\n        } catch {\n            print(\"Error reading file: \\(error)\")\n            return nil\n        }\n    } else {\n        print(\"File not found\")\n        return nil\n    }\n}\n\nif let content = readTextFile(\"example\", fileType: \"txt\") {\n    print(content)\n} else {\n    print(\"Could not read the file\")\n}"
    },
    {
      "instruction": "Create a Swift function to register and handle push notifications in your app",
      "input": "",
      "output": "import UserNotifications\n\nfunc registerForPushNotifications() {\n    UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) { granted, _ in\n        guard granted else { return }\n        DispatchQueue.main.async {\n            UIApplication.shared.registerForRemoteNotifications()\n        }\n    }\n}\n\nfunc application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    // Handle device token registration\n}\n\nfunc application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n    // Handle registration failure\n}\n\nfunc application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n    // Handle received push notification\n    completionHandler(.newData)\n}"
    },
    {
      "instruction": " \nImplement a Swift function to download an image asynchronously from a URL and set it to a UIImageView",
      "input": "",
      "output": "import UIKit\n\nextension UIImageView {\n    func setImageFromURL(url: URL, placeholder: UIImage? = nil) {\n        self.image = placeholder\n        URLSession.shared.dataTask(with: url) { (data, _, error) in\n            guard let data = data, error == nil else { return }\n            DispatchQueue.main.async {\n                self.image = UIImage(data: data)\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function to perform a segue from one view controller to another with a custom UIStoryboardSegue",
      "input": "",
      "output": "import UIKit\n\nclass CustomStoryboardSegue: UIStoryboardSegue {\n    override func perform() {\n        let sourceView = source.view!\n        let destinationView = destination.view!\n        \n        destinationView.transform = CGAffineTransform(scaleX: 0.05, y: 0.05)\n        source.view.addSubview(destinationView)\n        \n        UIView.animate(withDuration: 0.5, animations: {\n            destinationView.transform = CGAffineTransform.identity\n        }, completion: { _ in\n            destinationView.removeFromSuperview()\n            let time = DispatchTime.now() + 0.01\n            DispatchQueue.main.asyncAfter(deadline: time) {\n                self.source.present(self.destination, animated: false, completion: nil)\n            }\n        })\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to add and configure a UICollectionView programmatically",
      "input": "",
      "output": "import UIKit\n\nclass MyViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    private var collectionView: UICollectionView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupCollectionView()\n    }\n    \n    private func setupCollectionView() {\n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .vertical\n        layout.minimumLineSpacing = 10\n        layout.minimumInteritemSpacing = 10\n        \n        collectionView = UICollectionView(frame: view.bounds, collectionViewLayout: layout)\n        collectionView.backgroundColor = .white\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: \"MyCell\")\n        view.addSubview(collectionView)\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"MyCell\", for: indexPath)\n        // Configure cell\n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: (view.bounds.width - 30) / 2, height: 150)\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift function to play an audio file using AVFoundation",
      "input": "",
      "output": "import AVFoundation\n\nclass AudioPlayer: NSObject, AVAudioPlayerDelegate {\n    private var audioPlayer: AVAudioPlayer?\n    \n    func playAudioFile(url: URL) {\n        do {\n            audioPlayer = try AVAudioPlayer(contentsOf: url)\n            audioPlayer?.delegate = self\n            audioPlayer?.prepareToPlay()\n            audioPlayer?.play()\n        } catch let error {\n            print(\"Error playing audio: \\(error.localizedDescription)\")\n        }\n    }\n    \n    func audioPlayerDidFinishPlaying(_ player: AVAudioPlayer, successfully flag: Bool) {\n        // Handle audio playback completion\n    }\n    \n    func audioPlayerDecodeErrorDidOccur(_ player: AVAudioPlayer, error: Error?) {\n        // Handle audio playback error\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a custom UIBarButtonItem",
      "input": "",
      "output": "import UIKit\n\nclass MyViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupRightBarButtonItem()\n    }\n    \n    private func setupRightBarButtonItem() {\n        let button = UIButton(type: .custom)\n        button.setTitle(\"Custom\", for: .normal)\n        button.setTitleColor(.systemBlue, for: .normal)\n        button.addTarget(self, action: #selector(customButtonTapped), for: .touchUpInside)\n        \n        let rightBarButtonItem = UIBarButtonItem(customView: button)\n        self.navigationItem.rightBarButtonItem = rightBarButtonItem\n    }\n    \n    @objc private func customButtonTapped() {\n        print(\"Custom UIBarButtonItem tapped\")\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift function to store a value in UserDefaults and retrieve it later",
      "input": "",
      "output": "import Foundation\n\nfunc storeValueInUserDefaults(key: String, value: Any) {\n    UserDefaults.standard.set(value, forKey: key)\n}\n\nfunc getValueFromUserDefaults(key: String) -> Any? {\n    return UserDefaults.standard.value(forKey: key)\n}"
    },
    {
      "instruction": " \nCreate a Swift function to animate the constraint change of a UIView using Auto Layout",
      "input": "",
      "output": "import UIKit\n\nclass MyViewController: UIViewController {\n    private var topConstraint: NSLayoutConstraint!\n    private var myView: UIView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupMyView()\n    }\n    \n    private func setupMyView() {\n        myView = UIView()\n        myView.translatesAutoresizingMaskIntoConstraints = false\n        myView.backgroundColor = .systemBlue\n        view.addSubview(myView)\n        \n        topConstraint = myView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 0)\n        \n        NSLayoutConstraint.activate([\n            topConstraint,\n            myView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            myView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            myView.heightAnchor.constraint(equalToConstant: 50)\n        ])\n    }\n    \n    @objc func animateConstraintChange() {\n        topConstraint.constant = 100\n        UIView.animate(withDuration: 0.3) {\n            self.view.layoutIfNeeded()\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to calculate the factorial of a non-negative integer.",
      "input": "",
      "output": "func factorial(_ n: Int) -> Int {\n    guard n >= 0 else {\n        fatalError(\"Factorial is not defined for negative numbers.\")\n    }\n    \n    if n == 0 || n == 1 {\n        return 1\n    }\n    \n    return n * factorial(n - 1)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that returns the nth number of the Fibonacci sequence.",
      "input": "",
      "output": "func fibonacci(_ n: Int) -> Int {\n    if n == 0 {\n        return 0\n    } else if n == 1 {\n        return 1\n    } else {\n        return fibonacci(n - 1) + fibonacci(n - 2)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes an array of integers and filters out the even numbers.",
      "input": "",
      "output": "func filterEvenNumbers(from array: [Int]) -> [Int] {\n    return array.filter { $0 % 2 == 0 }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a string and reverses its characters.",
      "input": "",
      "output": "func reverseString(_ string: String) -> String {\n    return String(string.reversed())\n}"
    },
    {
      "instruction": " \nWrite a Swift function that returns the length of the longest word in a given string.",
      "input": "",
      "output": "func lengthOfLongestWord(in string: String) -> Int {\n    let words = string.split(separator: \" \")\n    return words.map { $0.count }.max() ?? 0\n}"
    },
    {
      "instruction": " \nWrite a Swift function that determines if a string is a palindrome, ignoring spaces, punctuation, and capitalization.",
      "input": "",
      "output": "func isPalindrome(_ string: String) -> Bool {\n    let cleanedString = string.lowercased().filter { $0.isLetter }\n    return cleanedString == String(cleanedString.reversed())\n}"
    },
    {
      "instruction": " \nWrite a Swift function that merges two sorted arrays into a single sorted array.",
      "input": "",
      "output": "func mergeSortedArrays(_ array1: [Int], _ array2: [Int]) -> [Int] {\n    var mergedArray: [Int] = []\n    var index1 = 0\n    var index2 = 0\n    \n    while index1 < array1.count && index2 < array2.count {\n        if array1[index1] < array2[index2] {\n            mergedArray.append(array1[index1])\n            index1 += 1\n        } else {\n            mergedArray.append(array2[index2])\n            index2 += 1\n        }\n    }\n    \n    while index1 < array1.count {\n        mergedArray.append(array1[index1])\n        index1 += 1\n    }\n    \n    while index2 < array2.count {\n        mergedArray.append(array2[index2])\n        index2 += 1\n    }\n    \n    return mergedArray\n}"
    },
    {
      "instruction": " \nWrite a Swift function that finds and returns the first non-repeated character in a given string.",
      "input": "",
      "output": "func firstNonRepeatedCharacter(in string: String) -> Character? {\n    var characterCount: [Character: Int] = [:]\n    \n    for character in string {\n        characterCount[character, default: 0] += 1\n    }\n    \n    for character in string {\n        if characterCount[character] == 1 {\n            return character\n        }\n    }\n    \n    return nil\n}"
    },
    {
      "instruction": "Write a Swift function to download an image from a URL and display it in a UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass ImageDownloader {\n    static let shared = ImageDownloader()\n    private init() {}\n\n    func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            guard let data = data, error == nil, let image = UIImage(data: data) else {\n                completion(nil)\n                return\n            }\n            DispatchQueue.main.async {\n                completion(image)\n            }\n        }.resume()\n    }\n}\n\nextension UIImageView {\n    func setImage(from url: URL) {\n        ImageDownloader.shared.downloadImage(from: url) { image in\n            self.image = image\n        }\n    }\n}\n\n// Usage\nlet imageView = UIImageView()\nlet imageUrl = URL(string: \"https://example.com/image.jpg\")!\nimageView.setImage(from: imageUrl)"
    },
    {
      "instruction": " \nWrite a Swift function that takes an array of numbers and returns the numbers sorted in ascending order using Merge sort algorithm.",
      "input": "",
      "output": "func mergeSort(_ array: [Int]) -> [Int] {\n    guard array.count > 1 else { return array }\n\n    let middleIndex = array.count / 2\n    let leftArray = mergeSort(Array(array[0..<middleIndex]))\n    let rightArray = mergeSort(Array(array[middleIndex..<array.count]))\n\n    return merge(leftArray, rightArray)\n}\n\nfunc merge(_ left: [Int], _ right: [Int]) -> [Int] {\n    var leftIndex = 0\n    var rightIndex = 0\n    var sortedArray: [Int] = []\n\n    while leftIndex < left.count && rightIndex < right.count {\n        if left[leftIndex] < right[rightIndex] {\n            sortedArray.append(left[leftIndex])\n            leftIndex += 1\n        } else {\n            sortedArray.append(right[rightIndex])\n            rightIndex += 1\n        }\n    }\n\n    while leftIndex < left.count {\n        sortedArray.append(left[leftIndex])\n        leftIndex += 1\n    }\n\n    while rightIndex < right.count {\n        sortedArray.append(right[rightIndex])\n        rightIndex += 1\n    }\n\n    return sortedArray\n}\n\n// Usage\nlet unsortedArray = [64, 34, 25, 12, 22, 11, 90]\nlet sortedArray = mergeSort(unsortedArray)\nprint(sortedArray) // [11, 12, 22, 25, 34, 64, 90]"
    },
    {
      "instruction": "Write a Swift function that takes a string and returns a dictionary with the count of each character in the string",
      "input": "",
      "output": "func characterCount(in string: String) -> [Character: Int] {\n    var characterCountDictionary: [Character: Int] = [:]\n    for character in string {\n        if let count = characterCountDictionary[character] {\n            characterCountDictionary[character] = count + 1\n        } else {\n            characterCountDictionary[character] = 1\n        }\n    }\n    return characterCountDictionary\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a string and reverses the order of its words",
      "input": "",
      "output": "func reverseWords(in string: String) -> String {\n    let words = string.split(separator: \" \")\n    let reversedWords = words.reversed().joined(separator: \" \")\n    return String(reversedWords)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that checks if a given string is a palindrome",
      "input": "",
      "output": "func isPalindrome(_ string: String) -> Bool {\n    let lowercasedString = string.lowercased()\n    let reversedString = String(lowercasedString.reversed())\n    return lowercasedString == reversedString\n}"
    },
    {
      "instruction": " \nWrite a Swift function that finds the longest common prefix of an array of strings",
      "input": "",
      "output": "func longestCommonPrefix(_ strings: [String]) -> String {\n    guard !strings.isEmpty else { return \"\" }\n    var prefix = strings[0]\n\n    for string in strings {\n        while !string.hasPrefix(prefix) {\n            prefix = String(prefix.dropLast())\n            if prefix.isEmpty { return \"\" }\n        }\n    }\n    return prefix\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a list of numbers and returns a list of only the odd numbers in the original list",
      "input": "",
      "output": "func filterOddNumbers(from numbers: [Int]) -> [Int] {\n    return numbers.filter { $0 % 2 != 0 }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes an array of integers and returns the product of all the integers in the array",
      "input": "",
      "output": "func productOfArray(_ array: [Int]) -> Int {\n    return array.reduce(1) { $0 * $1 }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes two arrays of integers and returns a new array containing the pairwise sum of the elements in the input arrays",
      "input": "",
      "output": "func pairwiseSum(array1: [Int], array2: [Int]) -> [Int] {\n    guard array1.count == array2.count else { return [] }\n    var result: [Int] = []\n    for (index, value) in array1.enumerated() {\n        result.append(value + array2[index])\n    }\n    return result\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes an array of strings and returns the longest string in the array",
      "input": "",
      "output": "func longestString(in strings: [String]) -> String? {\n    return strings.max(by: { $0.count < $1.count })\n}"
    },
    {
      "instruction": "Write a Swift function that takes a dictionary of type `[String: Int]` and a closure with two parameters of type `String` and `Int`, then apply the closure to each key-value pair in the dictionary.",
      "input": "",
      "output": "func processDictionary(_ dictionary: [String: Int], with closure: (String, Int) -> Void) {\n    for (key, value) in dictionary {\n        closure(key, value)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that downloads an image from a given URL, then calls a completion closure with the downloaded UIImage or an error.",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (Result<UIImage, Error>) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data, let image = UIImage(data: data) else {\n            completion(.failure(NSError(domain: \"ImageDownloadError\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        completion(.success(image))\n    }\n    \n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes an array of integers and returns the sum of the even numbers in the array.",
      "input": "",
      "output": "func sumOfEvenNumbers(in array: [Int]) -> Int {\n    return array.filter { $0 % 2 == 0 }.reduce(0, +)\n}"
    },
    {
      "instruction": " \nWrite a Swift protocol and a class conforming to the protocol with a property and a method.",
      "input": "",
      "output": "protocol GreetingProtocol {\n    var greeting: String { get }\n    \n    func greet()\n}\n\nclass Greeter: GreetingProtocol {\n    let greeting: String\n    \n    init(greeting: String) {\n        self.greeting = greeting\n    }\n    \n    func greet() {\n        print(greeting)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a string and a closure, then asynchronously executes the closure with the string as its argument.",
      "input": "",
      "output": "import Dispatch\n\nfunc asyncOperation(with string: String, closure: @escaping (String) -> Void) {\n    DispatchQueue.global(qos: .userInitiated).async {\n        closure(string)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes an array of optional integers and returns the sum of the non-nil integers in the array.",
      "input": "",
      "output": "func sumOfNonNilIntegers(in array: [Int?]) -> Int {\n    return array.compactMap { $0 }.reduce(0, +)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a string and returns a string with the first letter of each word capitalized.",
      "input": "",
      "output": "func capitalizeFirstLetters(of string: String) -> String {\n    return string.components(separatedBy: \" \").map { word -> String in\n        guard let firstCharacter = word.first else { return \"\" }\n        return String(firstCharacter).uppercased() + word.dropFirst()\n    }.joined(separator: \" \")\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes an array of strings and a closure with a single string parameter that returns a boolean, then filters the array based on the closure and returns the result.",
      "input": "",
      "output": "func filterStrings(_ array: [String], with closure: (String) -> Bool) -> [String] {\n    return array.filter(closure)\n}"
    },
    {
      "instruction": "Create a custom UIView subclass with a circular progress bar and a UILabel to display the progress percentage.",
      "input": "",
      "output": "import UIKit\n\nclass CircularProgressView: UIView {\n    \n    private var progressLayer = CAShapeLayer()\n    private var backgroundLayer = CAShapeLayer()\n    \n    private let label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textAlignment = .center\n        label.font = UIFont.systemFont(ofSize: 18, weight: .bold)\n        return label\n    }()\n    \n    var progress: CGFloat = 0 {\n        didSet {\n            updateProgress()\n        }\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupLayers()\n        addSubview(label)\n        NSLayoutConstraint.activate([\n            label.centerXAnchor.constraint(equalTo: centerXAnchor),\n            label.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupLayers() {\n        backgroundLayer.path = UIBezierPath(ovalIn: bounds).cgPath\n        backgroundLayer.fillColor = UIColor.clear.cgColor\n        backgroundLayer.strokeColor = UIColor.lightGray.cgColor\n        backgroundLayer.lineWidth = 10\n        layer.addSublayer(backgroundLayer)\n        \n        progressLayer.path = UIBezierPath(arcCenter: CGPoint(x: bounds.midX, y: bounds.midY), radius: bounds.width / 2, startAngle: -CGFloat.pi / 2, endAngle: 3 * CGFloat.pi / 2, clockwise: true).cgPath\n        progressLayer.fillColor = UIColor.clear.cgColor\n        progressLayer.strokeColor = UIColor.red.cgColor\n        progressLayer.lineWidth = 10\n        progressLayer.strokeEnd = 0\n        layer.addSublayer(progressLayer)\n    }\n    \n    private func updateProgress() {\n        progressLayer.strokeEnd = progress\n        label.text = String(format: \"%.0f%%\", progress * 100)\n    }\n}"
    },
    {
      "instruction": " \n\n\nCreate a Swift class that represents a simple stack data structure with push, pop, and peek operations.",
      "input": "",
      "output": "class Stack<T> {\n    private var elements: [T] = []\n    \n    func push(_ element: T) {\n        elements.append(element)\n    }\n    \n    func pop() -> T? {\n        return elements.popLast()\n    }\n    \n    func peek() -> T? {\n        return elements.last\n    }\n    \n    var isEmpty: Bool {\n        return elements.isEmpty\n    }\n    \n    var count: Int {\n        return elements.count\n    }\n}"
    },
    {
      "instruction": " \n\n\nImplement a Swift function that downloads an image from a URL and sets it to a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nextension UIImageView {\n    func loadImage(from url: URL, completionHandler: (() -> Void)? = nil) {\n        DispatchQueue.global().async { [weak self] in\n            if let data = try? Data(contentsOf: url),\n               let image = UIImage(data: data) {\n                DispatchQueue.main.async {\n                    self?.image = image\n                    completionHandler?()\n                }\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \n\n\nCreate a Swift class that encapsulates a URLSession to handle API requests and decode JSON responses.",
      "input": "",
      "output": "import Foundation\n\nclass APIClient {\n    private let session = URLSession.shared\n    \n    func fetch<T: Decodable>(url: URL, completion: @escaping (Result<T, Error>) -> Void) {\n        let task = session.dataTask(with: url) { (data, response, error) in\n            if let error = error {\n                completion(.failure(error))\n                return\n            }\n            \n            guard let data = data else {\n                completion(.failure(NSError(domain: \"No data\", code: -1, userInfo: nil)))\n                return\n            }\n            \n            do {\n                let decodedObject = try JSONDecoder().decode(T.self, from: data)\n                completion(.success(decodedObject))\n            } catch {\n                completion(.failure(error))\n            }\n        }\n        \n        task.resume()\n    }\n}"
    },
    {
      "instruction": " \n\n\nWrite a Swift function that animates the resizing of a UIView.",
      "input": "",
      "output": "import UIKit\n\nextension UIView {\n    func animateResize(to newSize: CGSize, duration: TimeInterval, completion: ((Bool) -> Void)? = nil) {\n        UIView.animate(withDuration: duration, animations: {\n            self.bounds.size = newSize\n            self.layoutIfNeeded()\n        }, completion: completion)\n    }\n}"
    },
    {
      "instruction": " \n\n\nCreate a custom UICollectionViewCell that displays an image and a title label.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    \n    static let reuseIdentifier =\"CustomCollectionViewCell\"\n    \n    private let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFill\n        return imageView\n    }()\n    \n    private let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.font = UIFont.systemFont(ofSize: 14, weight: .bold)\n        label.numberOfLines = 2\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupSubviews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupSubviews() {\n        addSubview(imageView)\n        addSubview(titleLabel)\n        \n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.heightAnchor.constraint(equalTo: heightAnchor, multiplier: 0.75),\n            \n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 8),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -8),\n            titleLabel.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -8)\n        ])\n    }\n    \n    func configure(with image: UIImage?, title: String) {\n        imageView.image = image\n        titleLabel.text = title\n    }\n}"
    },
    {
      "instruction": " \n\n\nImplement a Swift function that filters an array of numbers to only include even numbers.",
      "input": "",
      "output": "func filterEvenNumbers(from numbers: [Int]) -> [Int] {\n    return numbers.filter { $0 % 2 == 0 }\n}"
    },
    {
      "instruction": " \n\n\nCreate a custom UITableViewController subclass that displays a list of contacts with their names and phone numbers.",
      "input": "",
      "output": "import UIKit\n\nstruct Contact {\n    let name: String\n    let phoneNumber: String\n}\n\nclass ContactsTableViewController: UITableViewController {\n    \n    private let cellReuseIdentifier = \"ContactCell\"\n    \n    private var contacts: [Contact] = [\n        Contact(name: \"John Doe\", phoneNumber: \"555-123-4567\"),\n        Contact(name: \"Jane Smith\", phoneNumber: \"555-987-6543\")\n    ]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)\n    }\n    \n    // MARK: - UITableViewDataSource\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return contacts.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier, for: indexPath)\n        \n        let contact = contacts[indexPath.row]\n        cell.textLabel?.text = contact.name\n        cell.detailTextLabel?.text = contact.phoneNumber\n        \n        return cell\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that calculates the factorial of a given integer using recursion.",
      "input": "",
      "output": "func factorial(_ n: Int) -> Int {\n    if n <= 1 {\n        return 1\n    } else {\n        return n * factorial(n - 1)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sorts an array of integers in ascending order using the merge sort algorithm.",
      "input": "",
      "output": "func mergeSort(_ array: [Int]) -> [Int] {\n    if array.count <= 1 {\n        return array\n    }\n    \n    let middleIndex = array.count / 2\n    let leftArray = mergeSort(Array(array[0..<middleIndex]))\n    let rightArray = mergeSort(Array(array[middleIndex..<array.count]))\n    \n    return merge(leftArray, rightArray)\n}\n\nfunc merge(_ left: [Int], _ right: [Int]) -> [Int] {\n    var leftIndex = 0\n    var rightIndex = 0\n    var sortedArray: [Int] = []\n    \n    while leftIndex < left.count && rightIndex < right.count {\n        if left[leftIndex] < right[rightIndex] {\n            sortedArray.append(left[leftIndex])\n            leftIndex += 1\n        } else {\n            sortedArray.append(right[rightIndex])\n            rightIndex += 1\n        }\n    }\n    \n    while leftIndex < left.count {\n        sortedArray.append(left[leftIndex])\n        leftIndex += 1\n    }\n    \n    while rightIndex < right.count {\n        sortedArray.append(right[rightIndex])\n        rightIndex += 1\n    }\n    \n    return sortedArray\n}"
    },
    {
      "instruction": " \nWrite a Swift function that filters an array of strings and returns only the strings that start with a given prefix.",
      "input": "",
      "output": "func stringsStartingWithPrefix(_ strings: [String], prefix: String) -> [String] {\n    return strings.filter { $0.hasPrefix(prefix) }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that finds the longest common prefix of an array of strings.",
      "input": "",
      "output": "func longestCommonPrefix(_ strs: [String]) -> String {\n    if strs.isEmpty {\n        return \"\"\n    }\n    \n    var prefix = strs[0]\n    \n    for str in strs {\n        while !str.hasPrefix(prefix) {\n            prefix = String(prefix.dropLast())\n            if prefix.isEmpty {\n                return \"\"\n            }\n        }\n    }\n    \n    return prefix\n}"
    },
    {
      "instruction": " \nWrite a Swift function that flattens a nested array of integers.",
      "input": "",
      "output": "func flatten(_ nestedArray: [Any]) -> [Int] {\n    var flattenedArray = [Int]()\n    \n    for element in nestedArray {\n        if let intElement = element as? Int {\n            flattenedArray.append(intElement)\n        } else if let arrayElement = element as? [Any] {\n            flattenedArray += flatten(arrayElement)\n        }\n    }\n    \n    return flattenedArray\n}"
    },
    {
      "instruction": " \nWrite a Swift function that checks if a given string is a valid IPv4 address.",
      "input": "",
      "output": "func isValidIPv4Address(_ ipAddress: String) -> Bool {\n    let components = ipAddress.split(separator: \".\")\n    \n    if components.count != 4 {\n        return false\n    }\n    \n    for component in components {\n        if let number = Int(component), number >= 0 && number <= 255 {\n            continue\n        } else {\n            return false\n        }\n    }\n    \n    return true\n}"
    },
    {
      "instruction": " \nWrite a Swift function that finds the first non-repeated character in a string.",
      "input": "",
      "output": "func firstNonRepeatedCharacter(in string: String) -> Character? {\n    var characterCount: [Character: Int] = [:]\n    \n    for character in string {\n        characterCount[character] = (characterCount[character] ?? 0) + 1\n    }\n    \n    for character in string {\n        if characterCount[character] == 1 {\n            return character\n        }\n    }\n    \n    return nil\n}"
    },
    {
      "instruction": " \nWrite a Swift function that generates a random string of a specified length.",
      "input": "",
      "output": "import Foundation\n\nfunc randomString(length: Int) -> String {\n    let characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n    var result = \"\"\n    \n    for _ in 0..<length {\n        let randomIndex = Int(arc4random_uniform(UInt32(characters.count)))\n        let character = characters[characters.index(characters.startIndex, offsetBy: randomIndex)]\n        result.append(character)\n    }\n    \n    return result\n}"
    },
    {
      "instruction": "Create a custom UICollectionViewCell with an imageView and a UILabel",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    \n    static let identifier = \"CustomCollectionViewCell\"\n    \n    private let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    private let label: UILabel = {\n        let label = UILabel()\n        label.textAlignment = .center\n        label.font = UIFont.systemFont(ofSize: 16)\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(imageView)\n        contentView.addSubview(label)\n        setupConstraints()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n            \n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n            label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            label.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift function that fetches data from a REST API and decodes it to a specified model.",
      "input": "",
      "output": "import Foundation\n\nstruct APIResponse: Codable {\n    let id: Int\n    let title: String\n    let description: String\n    let imageURL: String\n}\n\nfunc fetchData(completion: @escaping (Result<[APIResponse], Error>) -> Void) {\n    let urlString = \"https://api.example.com/data\"\n    guard let url = URL(string: urlString) else {\n        completion(.failure(NSError(domain: \"\", code: -1, userInfo: nil)))\n        return\n    }\n\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else {\n            completion(.failure(NSError(domain: \"\", code: -1, userInfo: nil)))\n            return\n        }\n\n        do {\n            let decoder = JSONDecoder()\n            let decodedData = try decoder.decode([APIResponse].self, from: data)\n            completion(.success(decodedData))\n        } catch let error {\n            completion(.failure(error))\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " \nCreate a Swift function to asynchronously download and cache an image using URLSession and NSCache.",
      "input": "",
      "output": "import UIKit\n\nclass ImageDownloader {\n    private let cache = NSCache<NSString, UIImage>()\n\n    func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n        if let cachedImage = cache.object(forKey: url.absoluteString as NSString) {\n            completion(cachedImage)\n            return\n        }\n\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            if let error = error {\n                print(\"Error downloading image: \\(error.localizedDescription)\")\n                completion(nil)\n                return\n            }\n\n            guard let data = data, let image = UIImage(data: data) else {\n                completion(nil)\n                return\n            }\n\n            self.cache.setObject(image, forKey: url.absoluteString as NSString)\n            DispatchQueue.main.async {\n                completion(image)\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nImplement a SwiftUI view that displays a list of users fetched from a remote API.",
      "input": "",
      "output": "import SwiftUI\nimport Combine\n\nstruct User: Codable, Identifiable {\n    let id: Int\n    let name: String\n    let email: String\n}\n\nclass UserListViewModel: ObservableObject {\n    @Published var users: [User] = []\n\n    func fetchUsers() {\n        let url = URL(string: \"https://api.example.com/users\")!\n        URLSession.shared.dataTaskPublisher(for: url)\n            .map { $0.data }\n            .decode(type: [User].self, decoder: JSONDecoder())\n            .replaceError(with: [])\n            .receive(on: DispatchQueue.main)\n            .assign(to: &$users)\n    }\n}\n\nstruct UserListView: View {\n    @StateObject var viewModel = UserListViewModel()\n\n    var body: some View {\n        NavigationView {\n            List(viewModel.users) { user in\n                VStack(alignment: .leading) {\n                    Text(user.name)\n                        .font(.headline)\n                    Text(user.email)\n                        .foregroundColor(.gray)\n                }\n            }\n            .onAppear {\n                viewModel.fetchUsers()\n            }\n            .navigationTitle(\"Users\")\n        }\n    }\n}\n\nstruct UserListView_Previews: PreviewProvider {\n    static var previews: some View {\n        UserListView()\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function to save and retrieve a custom object using Codable and UserDefaults.",
      "input": "",
      "output": "import Foundation\n\nstruct CustomObject: Codable {\n    let id: Int\n    let name: String\n}\n\nclass CustomObjectStorage {\n\n    private let customObjectKey = \"customObjectKey\"\n\n    func save(customObject: CustomObject) {\n        let encoder = JSONEncoder()\n\n        do {\n            let encodedData = try encoder.encode(customObject)\n            UserDefaults.standard.set(encodedData, forKey: customObjectKey)\n        } catch {\n            print(\"Error encoding object: \\(error.localizedDescription)\")\n        }\n    }\n\n    func retrieve() -> CustomObject? {\n        guard let data = UserDefaults.standard.data(forKey: customObjectKey) else {\n            return nil\n        }\n\n        let decoder = JSONDecoder()\n        do {\n            let decodedObject = try decoder.decode(CustomObject.self, from: data)\n            return decodedObject\n        } catch {\n            print(\"Error decoding object: \\(error.localizedDescription)\")\n            return nil\n        }\n    }\n}"
    },
    {
      "instruction": " \nImplement a SwiftUI view that displays a search bar and filters a list of items based on the search query.",
      "input": "",
      "output": "import SwiftUI\n\nstruct SearchBar: UIViewRepresentable {\n    @Binding var text: String\n\n    func makeCoordinator() -> Coordinator {\n        Coordinator(self)\n    }\n\n    func makeUIView(context: Context) -> UISearchBar {\n        let searchBar = UISearchBar()\n        searchBar.delegate = context.coordinator\n        return searchBar\n    }\n\n    func updateUIView(_ uiView: UISearchBar, context: Context) {\n        uiView.text = text\n    }\n\n    class Coordinator: NSObject, UISearchBarDelegate {\n        let parent: SearchBar\n\n        init(_ parent: SearchBar) {\n            self.parent = parent\n        }\n\n        func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n            parent.text = searchText\n        }\n    }\n}\n\nstruct FilteredListView: View {\n    @State private var searchText = \"\"\n\n    let items = [\"Apple\", \"Banana\", \"Orange\", \"Grape\", \"Strawberry\"]\n\n    var body: some View {\n        VStack {\n            SearchBar(text: $searchText)\n            List {\n                ForEach(items.filter { searchText.isEmpty || $0.localizedCaseInsensitiveContains(searchText) }, id: \\.self) { item in\n                    Text(item)\n                }\n            }\n        }\n    }\n}\n\nstruct FilteredListView_Previews: PreviewProvider {\n    static var previews: some View {\n        FilteredListView()\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function that handles push notifications and displays an alert when a notification is received.",
      "input": "",
      "output": "import UserNotifications\n\nclass NotificationManager: NSObject, UNUserNotificationCenterDelegate {\n    \n    static let shared = NotificationManager()\n    \n    func requestAuthorization() {\n        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in\n            if let error = error {\n                print(\"Error requesting authorization: \\(error.localizedDescription)\")\n            }\n        }\n        UNUserNotificationCenter.current().delegate = self\n    }\n    \n    func scheduleNotification() {\n        let content = UNMutableNotificationContent()\n        content.title = \"Reminder\"\n        content.body = \"This is a reminder from your app.\"\n        content.sound = .default\n\n        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 5, repeats: false)\n        let request = UNNotificationRequest(identifier: \"reminder\", content: content, trigger: trigger)\n        UNUserNotificationCenter.current().add(request) { error in\n            if let error = error {\n                print(\"Error scheduling notification: \\(error.localizedDescription)\")\n            }\n        }\n    }\n    \n    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {\n        completionHandler([.banner, .sound])\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift function to authenticate users using OAuth2 and store the access token securely in the Keychain.",
      "input": "",
      "output": "import Foundation\nimport Security\n\nclass OAuth2Manager {\n    private let clientId = \"YOUR_CLIENT_ID\"\n    private let clientSecret = \"YOUR_CLIENT_SECRET\"\n    private let redirectUri = \"YOUR_REDIRECT_URI\"\n    private let tokenUrl = \"https://api.example.com/oauth/token\"\n    \n    func authenticate(code: String, completion: @escaping (Bool) -> Void) {\n        guard let url = URL(string: tokenUrl) else {\n            completion(false)\n            return\n        }\n        \n        let parameters = [\n           "
    },
    {
      "instruction": "Write a Swift function that downloads an image from a URL and sets it as a UIImageView's image.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n\n    let imageView = UIImageView()\n    let imageURL = URL(string: \"https://example.com/image.jpg\")\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        downloadImage(from: imageURL)\n    }\n\n    func downloadImage(from url: URL?) {\n        guard let imageURL = url else { return }\n\n        URLSession.shared.dataTask(with: imageURL) { (data, response, error) in\n            guard let data = data, error == nil else { return }\n\n            DispatchQueue.main.async {\n                let image = UIImage(data: data)\n                self.imageView.image = image\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that saves a string to UserDefaults and retrieves it.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n\n    let key = \"SampleStringKey\"\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        saveString(\"Hello, World!\")\n        let retrievedString = getString()\n        print(retrievedString ?? \"No String Found\")\n    }\n\n    func saveString(_ string: String) {\n        UserDefaults.standard.set(string, forKey: key)\n    }\n\n    func getString() -> String? {\n        return UserDefaults.standard.string(forKey: key)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UITableView with rounded corners and custom cell designs.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    // Add custom design for the cell\n}\n\nclass CustomTableViewController: UITableViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomCell\")\n        tableView.layer.cornerRadius = 10\n        tableView.clipsToBounds = true\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 10\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomCell\", for: indexPath) as! CustomTableViewCell\n        // Customize cell appearance\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that fetches data from a JSON API and decodes it into a custom Swift structure.",
      "input": "",
      "output": "import UIKit\n\nstruct CustomData: Codable {\n    let id: Int\n    let title: String\n}\n\nclass ViewController: UIViewController {\n\n    let apiURL = URL(string: \"https://api.example.com/data\")\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        fetchData()\n    }\n\n    func fetchData() {\n        guard let url = apiURL else { return }\n\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            guard let data = data, error == nil else { return }\n\n            do {\n                let decoder = JSONDecoder()\n                let customData = try decoder.decode(CustomData.self, from: data)\n                print(customData)\n            } catch {\n                print(\"Error decoding data: \\(error)\")\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates and animates a progress bar using UIView and CALayer.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n\n    let progressBar = UIView()\n    let progressLayer = CALayer()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        progressBar.frame = CGRect(x: 50, y: 100, width: 200, height: 20)\n        progressBar.backgroundColor = .lightGray\n        progressBar.layer.cornerRadius = 10\n        progressBar.clipsToBounds = true\n\n        progressLayer.frame = progressBar.bounds\n        progressLayer.backgroundColor = UIColor.blue.cgColor\n        progressBar.layer.addSublayer(progressLayer)\n        \n        view.addSubview(progressBar)\n\n        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n            self.animateProgressBar()\n        }\n    }\n\n    func animateProgressBar() {\n        CATransaction.begin()\n        CATransaction.setAnimationDuration(2.0)\n        progressLayer.bounds.size.width = progressBar.bounds.width * 0.8\n        CATransaction.commit()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that uses CoreLocation to get the user's current location and prints the latitude and longitude.",
      "input": "",
      "output": "import UIKit\nimport CoreLocation\n\nclass ViewController: UIViewController, CLLocationManagerDelegate {\n\n    let locationManager = CLLocationManager()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            let latitude = location.coordinate.latitude            let longitude = location.coordinate.longitude\n            print(\"Latitude: \\(latitude), Longitude: \\(longitude)\")\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that uses a UISearchBar and searches through an array of strings, displaying the results in a UITableView.",
      "input": "",
      "output": "import UIKit\n\nclass SearchViewController: UIViewController, UITableViewDataSource, UITableViewDelegate, UISearchBarDelegate {\n\n    let searchBar = UISearchBar()\n    let tableView = UITableView()\n    let data = [\"Apple\", \"Banana\", \"Orange\", \"Grape\"]\n    var filteredData: [String] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        searchBar.delegate = self\n        searchBar.frame = CGRect(x: 0, y: 0, width: view.frame.width, height: 50)\n        view.addSubview(searchBar)\n\n        tableView.dataSource = self\n        tableView.delegate = self\n        tableView.frame = CGRect(x: 0, y: 50, width: view.frame.width, height: view.frame.height - 50)\n        view.addSubview(tableView)\n    }\n\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        filteredData = data.filter { $0.lowercased().contains(searchText.lowercased()) }\n        tableView.reloadData()\n    }\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredData.count\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = UITableViewCell(style: .default, reuseIdentifier: \"Cell\")\n        cell.textLabel?.text = filteredData[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that uses the MKMapView to display a map centered on the user's current location with a custom annotation.",
      "input": "",
      "output": "import UIKit\nimport MapKit\nimport CoreLocation\n\nclass MapViewController: UIViewController, CLLocationManagerDelegate, MKMapViewDelegate {\n\n    let mapView = MKMapView()\n    let locationManager = CLLocationManager()\n    let annotation = MKPointAnnotation()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        mapView.frame = view.bounds\n        mapView.delegate = self\n        mapView.showsUserLocation = true\n        view.addSubview(mapView)\n\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            let region = MKCoordinateRegion(center: location.coordinate, latitudinalMeters: 1000, longitudinalMeters: 1000)\n            mapView.setRegion(region, animated: true)\n\n            annotation.coordinate = location.coordinate\n            annotation.title = \"You are here\"\n            mapView.addAnnotation(annotation)\n        }\n    }\n\n    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {\n        if annotation is MKUserLocation {\n            return nil\n        }\n\n        let annotationView = MKPinAnnotationView(annotation: annotation, reuseIdentifier: \"CustomAnnotation\")\n        annotationView.pinTintColor = .red\n        annotationView.canShowCallout = true\n        return annotationView\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that validates an email address using a regular expression and returns a boolean result",
      "input": "",
      "output": "import Foundation\n\nfunc isValidEmail(_ email: String) -> Bool {\n    let emailRegex = \"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}\"\n    let emailPredicate = NSPredicate(format: \"SELF MATCHES %@\", emailRegex)\n    return emailPredicate.evaluate(with: email)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that fetches data from a given URL and decodes it into a specific Codable model",
      "input": "",
      "output": "import Foundation\n\nstruct ExampleModel: Codable {\n    let id: Int\n    let title: String\n}\n\nfunc fetchData(from url: String, completion: @escaping (Result<[ExampleModel], Error>) -> Void) {\n    guard let requestUrl = URL(string: url) else {\n        completion(.failure(NSError(domain: \"Invalid URL\", code: -1, userInfo: nil)))\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: requestUrl) { (data, response, error) in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let decoder = JSONDecoder()\n            let decodedData = try decoder.decode([ExampleModel].self, from: data)\n            completion(.success(decodedData))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that calculates and returns the distance between two CLLocationCoordinate2D points",
      "input": "",
      "output": "import CoreLocation\n\nfunc distanceBetweenCoordinates(coord1: CLLocationCoordinate2D, coord2: CLLocationCoordinate2D) -> CLLocationDistance {\n    let location1 = CLLocation(latitude: coord1.latitude, longitude: coord1.longitude)\n    let location2 = CLLocation(latitude: coord2.latitude, longitude: coord2.longitude)\n    return location1.distance(from: location2)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UIButton with rounded corners and a specified background color",
      "input": "",
      "output": "import UIKit\n\nfunc createRoundedButton(withColor color: UIColor) -> UIButton {\n    let button = UIButton(type: .system)\n    button.layer.cornerRadius = 10\n    button.layer.masksToBounds = true\n    button.backgroundColor = color\n    return button\n}"
    },
    {
      "instruction": " \nWrite a Swift function that filters an array of integers and returns a new array containing only even numbers",
      "input": "",
      "output": "func filterEvenNumbers(from numbers: [Int]) -> [Int] {\n    return numbers.filter { $0 % 2 == 0 }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that saves an image to the user's photo library with a completion handler",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToPhotoLibrary(image: UIImage, completion: @escaping (PHAsset?, Error?) -> Void) {\n    var localIdentifier: String?\n    \n    PHPhotoLibrary.shared().performChanges({\n        let request = PHAssetChangeRequest.creationRequestForAsset(from: image)\n        localIdentifier = request.placeholderForCreatedAsset?.localIdentifier\n    }) { success, error in\n        if success, let localIdentifier = localIdentifier {\n            let fetchResult = PHAsset.fetchAssets(withLocalIdentifiers: [localIdentifier], options: nil)\n            let asset = fetchResult.firstObject\n            completion(asset, nil)\n        } else {\n            completion(nil, error)\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a gradient layer to a UIView",
      "input": "",
      "output": "import UIKit\n\nfunc addGradientLayer(to view: UIView, colors: [CGColor], startPoint: CGPoint, endPoint: CGPoint) {\n    let gradientLayer = CAGradientLayer()\n    gradientLayer.colors = colors\n    gradientLayer.startPoint = startPoint\n    gradientLayer.endPoint = endPoint\n    gradientLayer.frame = view.bounds\n    \n    view.layer.insertSublayer(gradientLayer, at: 0)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that asynchronously downloads an image from a URL and sets it to a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc setImage(from url: URL, to imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let data = data, let image = UIImage(data: data) {\n            DispatchQueue.main.async {\n                imageView.image = image\n            }\n        }\n    }.resume()"
    },
    {
      "instruction": " \nWrite a Swift function that presents an UIAlertController with a custom title, message, and an action button with a handler",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(on viewController: UIViewController, title: String, message: String, actionTitle: String, actionHandler: @escaping () -> Void) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: actionTitle, style: .default) { _ in\n        actionHandler()\n    }\n    alertController.addAction(action)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that returns the current device's free disk space in bytes",
      "input": "",
      "output": "import Foundation\n\nfunc getFreeDiskSpaceInBytes() -> Int64? {\n    let fileManager = FileManager.default\n    do {\n        let attributes = try fileManager.attributesOfFileSystem(forPath: NSHomeDirectory())\n        if let freeSpace = attributes[.systemFreeSize] as? NSNumber {\n            return freeSpace.int64Value\n        }\n    } catch {\n        print(\"Error retrieving free disk space: \\(error)\")\n    }\n    \n    return nil\n}"
    },
    {
      "instruction": " \nWrite a Swift function that converts a TimeInterval to a String in the format \"HH:mm:ss\"",
      "input": "",
      "output": "func timeIntervalToString(_ interval: TimeInterval) -> String {\n    let hours = Int(interval) / 3600\n    let minutes = (Int(interval) % 3600) / 60\n    let seconds = Int(interval) % 60\n    return String(format: \"%02d:%02d:%02d\", hours, minutes, seconds)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UICollectionViewCell with a UIImageView and a UILabel",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    var imageView: UIImageView!\n    var label: UILabel!\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        configureSubviews()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        configureSubviews()\n    }\n    \n    private func configureSubviews() {\n        imageView = UIImageView(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height * 0.7))\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        contentView.addSubview(imageView)\n        \n        label = UILabel(frame: CGRect(x: 0, y: imageView.frame.maxY, width: frame.size.width, height: frame.size.height * 0.3))\n        label.textAlignment = .center\n        contentView.addSubview(label)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates a UIView's alpha value from 0 to 1 over a specified duration",
      "input": "",
      "output": "import UIKit\n\nfunc fadeIn(view: UIView, duration: TimeInterval) {\n    view.alpha = 0\n    UIView.animate(withDuration: duration) {\n        view.alpha = 1\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that takes a dictionary of type `[String: [String]]` and returns a dictionary of type `[String: Int]` with the count of values for each key",
      "input": "",
      "output": "func countValuesInDictionary(dictionary: [String: [String]]) -> [String: Int] {\n    var result: [String: Int] = [:]\n    for (key, values) in dictionary {\n        result[key] = values.count\n    }\n    return result\n}"
    },
    {
      "instruction": " \nWrite a Swift function that filters out even numbers from an array of integers and returns the result as a new array",
      "input": "",
      "output": "func filterOutEvenNumbers(from numbers: [Int]) -> [Int] {\n    return numbers.filter { $0 % 2 != 0 }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a string and returns a tuple containing the number of vowels, consonants, and digits in the string",
      "input": "",
      "output": "func countVowelsConsonantsDigits(in string: String) -> (vowels: Int, consonants: Int, digits: Int) {\n    let vowels = \"aeiouAEIOU\"\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    let digits = \"0123456789\"\n\n    var vowelCount = 0\n    var consonantCount = 0\n    var digitCount = 0\n\n    for character in string {\n        if vowels.contains(character) {\n            vowelCount += 1\n        } else if consonants.contains(character) {\n            consonantCount += 1\n        } else if digits.contains(character) {\n            digitCount += 1\n        }\n    }\n\n    return (vowelCount, consonantCount, digitCount)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes an array of integers and returns the sum of the squares of the integers",
      "input": "",
      "output": "func sumOfSquares(numbers: [Int]) -> Int {\n    return numbers.reduce(0) { $0 + $1 * $1 }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a string input and returns a dictionary with the frequency count of each character in the string",
      "input": "",
      "output": "func characterFrequencyCount(in string: String) -> [Character: Int] {\n    var frequencyCount: [Character: Int] = [:]\n    \n    for character in string {\n        if let count = frequencyCount[character] {\n            frequencyCount[character] = count + 1\n        } else {\n            frequencyCount[character] = 1\n        }\n    }\n    \n    return frequencyCount\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a string and returns the string in reverse",
      "input": "",
      "output": "func reverseString(_ string: String) -> String {\n    return String(string.reversed())\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a URL and downloads an image, then calls a completion handler with the downloaded UIImage",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    DispatchQueue.global().async {\n        if let data = try? Data(contentsOf: url), let image = UIImage(data: data) {\n            DispatchQueue.main.async {\n                completion(image)\n            }\n        } else {\n            DispatchQueue.main.async {\n                completion(nil)\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a closure as an argument and executes the closure after a specified delay in seconds",
      "input": "",
      "output": "import Dispatch\n\nfunc executeAfterDelay(delay: TimeInterval, closure: @escaping () -> Void) {\n    DispatchQueue.main.asyncAfter(deadline: .now() + delay, execute: closure)\n}"
    },
    {
      "instruction": "Write a Swift function to implement the merge sort algorithm. The function should take an array of integers as input and return a sorted array of integers.",
      "input": "[4, 2, 5, 1, 3]",
      "output": "func mergeSort(_ array: [Int]) -> [Int] {\n    guard array.count > 1 else { return array }\n    \n    let middleIndex = array.count / 2\n    let leftArray = mergeSort(Array(array[0..<middleIndex]))\n    let rightArray = mergeSort(Array(array[middleIndex..<array.count]))\n    \n    return merge(leftArray, rightArray)\n}\n\nfunc merge(_ left: [Int], _ right: [Int]) -> [Int] {\n    var leftIndex = 0\n    var rightIndex = 0\n    var sortedArray: [Int] = []\n    \n    while leftIndex < left.count && rightIndex < right.count {\n        if left[leftIndex] < right[rightIndex] {\n            sortedArray.append(left[leftIndex])\n            leftIndex += 1\n        } else if left[leftIndex] > right[rightIndex] {\n            sortedArray.append(right[rightIndex])\n            rightIndex += 1\n        } else {\n            sortedArray.append(left[leftIndex])\n            leftIndex += 1\n            sortedArray.append(right[rightIndex])\n            rightIndex += 1\n        }\n    }\n    \n    while leftIndex < left.count {\n        sortedArray.append(left[leftIndex])\n        leftIndex += 1\n    }\n    \n    while rightIndex < right.count {\n        sortedArray.append(right[rightIndex])\n        rightIndex += 1\n    }\n    \n    return sortedArray\n}\n\nlet unsortedArray = [4, 2, 5, 1, 3]\nlet sortedArray = mergeSort(unsortedArray)\nprint(sortedArray)"
    },
    {
      "instruction": " \n\nWrite a Swift class for a binary search tree with methods to insert a new value, delete a value, and search for a value.",
      "input": "let tree = BinarySearchTree()\ntree.insert(5)\ntree.insert(3)\ntree.insert(7)\ntree.insert(1)\ntree.insert(4)\ntree.delete(3)\ntree.search(4)",
      "output": "class TreeNode {\n    var value: Int\n    var leftChild: TreeNode?\n    var rightChild: TreeNode?\n\n    init(value: Int) {\n        self.value = value\n    }\n}\n\nclass BinarySearchTree {\n    private var root: TreeNode?\n\n    func insert(_ value: Int) {\n        root = insert(root, value)\n    }\n\n    private func insert(_ node: TreeNode?, _ value: Int) -> TreeNode {\n        guard let node = node else { return TreeNode(value: value) }\n\n        if value < node.value {\n            node.leftChild = insert(node.leftChild, value)\n        } else {\n            node.rightChild = insert(node.rightChild, value)\n        }\n        return node\n    }\n\n    func delete(_ value: Int) {\n        root = delete(root, value)\n    }\n\n    private func delete(_ node: TreeNode?, _ value: Int) -> TreeNode? {\n        guard let node = node else { return nil }\n\n        if value == node.value {\n            if node.leftChild == nil {\n                return node.rightChild\n            } else if node.rightChild == nil {\n                return node.leftChild\n            } else {\n                node.value = minValue(node.rightChild)\n                node.rightChild = delete(node.rightChild, node.value)\n            }\n        } else if value < node.value {\n            node.leftChild = delete(node.leftChild, value)\n        } else {\n            node.rightChild = delete(node.rightChild, value)\n        }\n        return node\n    }\n\n    private func minValue(_ node: TreeNode?) -> Int {\n        var currentNode = node\n        while let leftChild = currentNode?.leftChild {\n            currentNode = leftChild\n        }\n        return currentNode?.value ?? -1\n    }\n\n    func search(_ value: Int) -> Bool {\n        return search(root, value)\n    }\n\n    private func search(_ node: TreeNode?, _ value: Int) -> Bool {\n        guard let node = node else { return false }\n\n        if value == node.value {\n            return true\n        } else if value < node.value {\n            return search(node.leftChild, value)\n        } else {\n            return search(node.rightChild, value)\n        }\n    }\n}\n\nlet tree = BinarySearchTree()\ntree.insert(5)\ntree.insert(3)\ntree.insert(7)\ntree.insert(1)\ntree.insert(4)\ntree.delete(3)\nprint(tree.search(4))"
    },
    {
      "instruction": " \n\nWrite a Swift function to convert a given Roman numeral string to an integer. The function should take a Roman numeral string as input and return an integer value.",
      "input": "\"MMXXI\"",
      "output": "func romanToInt(_ s: String) -> Int {\n    let romanDict: [Character: Int] = [\n        \"I\": 1, \"V\": 5, \"X\": 10, \"L\": 50, \"C\": 100, \"D\": 500, \"M\": 1000\n    ]\n\n    var total = 0\n    var prevValue = 0\n    for char in s {\n        let value = romanDict[char] ?? 0\n        total += (value > prevValue) ? (value - 2 * prevValue) : value\n        prevValue = value\n    }\n\n    return total\n}\n\nlet romanNumeral = \"MMXXI\"\nprint(romanToInt(romanNumeral))"
    },
    {
      "instruction": " \n\nWrite a Swift function to find the longest common prefix string amongst an array of strings. The function should take an array of strings as input and return a string representing the longest common prefix.",
      "input": "[\"apple\", \"application\", \"apply\"]",
      "output": "func longestCommonPrefix(_ strs: [String]) -> String {\n    guard !strs.isEmpty else { return \"\" }\n    var prefix = strs[0]\n\n    for str in strs {\n        while !str.hasPrefix(prefix) {\n            prefix.removeLast()\n            if prefix.isEmpty {\n                return \"\"\n            }\n        }\n    }\n\n    return prefix\n}\n\nlet inputArray = [\"apple\", \"application\", \"apply\"]\nprint(longestCommonPrefix(inputArray))"
    },
    {
      "instruction": " \n\nWrite a Swift function to determine if a given string is a valid palindrome, considering only alphanumeric characters and ignoring cases. The function should take a string as input and return a Boolean value.",
      "input": "\"A man, a plan, a canal: Panama\"",
      "output": "func isPalindrome(_ s: String) -> Bool {\n    let cleanedString = s.lowercased().filter { $0.isLetter || $0.isNumber }\n    return cleanedString == String(cleanedString.reversed())\n}\n\nlet inputString = \"A man, a plan, a canal: Panama\"\nprint(isPalindrome(inputString))"
    },
    {
      "instruction": " \n\nWrite a Swift function to find the first non-repeated character in a given string. The function should take a string as input and return an optional character representing the first non-repeated character or nil if there is none.",
      "input": "\"helloh\"",
      "output": "func firstNonRepeatedCharacter(_ s: String) -> Character? {\n    var charCountDict: [Character: Int] = [:]\n    for char in s {\n        charCountDict[char] = (charCountDict[char] ?? 0) + 1\n    }\n\n    for char in s {\n        if let count = charCountDict[char], count == 1 {\n            return char\n        }\n    }\n\n    return nil\n}\n\nlet inputString = \"helloh\"\nprint(firstNonRepeatedCharacter(inputString) ?? \"No non-repeated character found\")"
    },
    {
      "instruction": " \n\nWrite a Swift function to implement a basic stack data structure with methods to push, pop, and get the top element of the stack. Use an array for the underlying storage of stack elements.",
      "input": "let stack = Stack()\nstack.push(1)\nstack.push(2)\nstack.push(3)\nstack.pop()\nstack.top()",
      "output": "class Stack {\n    private var elements: [Int] = []\n\n    func push(_ value: Int) {\n        elements.append(value)\n    }\n\n    func pop() -> Int? {\n        return elements.popLast()\n    }\n\n    func top() -> Int? {\n        return elements.last\n    }\n}\n\nlet stack = Stack()\nstack.push(1)\nstack.push(2)\nstack.push(3)\nstack.pop()\nprint(stack.top() ?? \"Empty stack\")"
    },
    {
      "instruction": " \n\nWrite a Swift function to reverse a linked list. The function should take the head node of a singly linked list as input and return the head node of the reversed linked list.",
      "input": "1 -> 2 -> 3 -> 4 -> 5 -> nil",
      "output": "class ListNode {\n    var value: Int\n    var next: ListNode?\n\n    init(_ value: Int) {\n        self.value = value\n        self.next = nil\n    }\n}\n\nfunc reverseLinkedList(_ head: ListNode?) -> ListNode? {\n    var prevNode: ListNode? = nil\n    var currentNode = head\n\n    while currentNode != nil {\n        let nextNode = currentNode?.next\n        currentNode?.next = prevNode\n        prevNode = currentNode\n        currentNode = nextNode\n    }\n\n    return prevNode\n}\n\nlet headNode = ListNode(1)\nlet secondNode = ListNode(2)\nlet thirdNode = ListNode(3)\nlet fourthNode = ListNode(4)\nlet fifthNode = ListNode(5)\n\nheadNode.next = secondNode\nsecondNode.next = thirdNode\nthirdNode.next = fourthNode"
    },
    {
      "instruction": "Write a Swift function that fetches a list of images from a given URL and displays them in a UICollectionView, with pagination support.",
      "input": "",
      "output": "import UIKit\n\nclass ImageGalleryViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {\n    private var collectionView: UICollectionView!\n    private var images: [UIImage] = []\n    private var currentPage = 0\n    private let pageSize = 20\n    private var isLoading = false\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupCollectionView()\n        fetchImages(page: currentPage)\n    }\n\n    private func setupCollectionView() {\n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .vertical\n        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: \"ImageCell\")\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(collectionView)\n\n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)\n        ])\n    }\n\n    private func fetchImages(page: Int) {\n        isLoading = true\n        let urlString = \"https://api.example.com/images?page=\\(page)&size=\\(pageSize)\"\n        guard let url = URL(string: urlString) else { return }\n\n        URLSession.shared.dataTask(with: url) { [weak self] data, response, error in\n            guard let self = self else { return }\n            if let data = data, let imageList = try? JSONDecoder().decode([UIImage].self, from: data) {\n                DispatchQueue.main.async {\n                    self.images.append(contentsOf: imageList)\n                    self.collectionView.reloadData()\n                    self.isLoading = false\n                }\n            }\n        }.resume()\n    }\n\n    // MARK: - UICollectionViewDataSource\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return images.count\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"ImageCell\", for: indexPath)\n        let imageView = UIImageView(image: images[indexPath.item])\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        cell.contentView.addSubview(imageView)\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: cell.contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: cell.contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: cell.contentView.trailingAnchor),\n            imageView.bottomAnchor.constraint(equalTo: cell.contentView.bottomAnchor)\n        ])\n\n        if indexPath.item == images.count - 1 && !isLoading {\n            currentPage += 1\n            fetchImages(page: currentPage)\n        }\n\n        return cell\n    }\n\n    // MARK: - UICollectionViewDelegateFlowLayout\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        let screenWidth = UIScreen.main.bounds.width\n        let numberOfColumns: CGFloat = 3\n        let itemWidth = (screenWidth - (numberOfColumns - 1) * 10) / numberOfColumns\n        return CGSize(width: itemWidth, height: itemWidth)\n    }\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {\n        return 10\n    }\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {\n        return 10\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to download and cache images in a UITableView with asynchronous loading and cache support.",
      "input": "",
      "output": "import UIKit\n\nclass ImageCache {\n    static let shared = ImageCache()\n    private let cache = NSCache<NSString, UIImage>()\n\n    private init() {}\n\n    func getImage(url: String, completion: @escaping (UIImage?) -> Void) {\n        if let cachedImage = cache.object(forKey: url as NSString) {\n            completion(cachedImage)\n            return\n        }\n\n        guard let imageURL = URL(string: url) else {\n            completion(nil)\n            return\n        }\n\n        URLSession.shared.dataTask(with: imageURL) { [weak self] (data, response, error) in\n            guard let data = data, let image = UIImage(data: data) else {\n                completion(nil)\n                return\n            }\n\n            self?.cache.setObject(image, forKey: url as NSString)\n            completion(image)\n        }.resume()\n    }\n}\n\nclass CustomTableViewCell: UITableViewCell {\n    private let imageView = UIImageView()\n\n    func configure(with url: String) {\n        ImageCache.shared.getImage(url: url) { [weak self] (image) in\n            DispatchQueue.main.async {\n                self?.imageView.image = image\n            }\n        }\n    }\n}\n\nclass ImageListViewController: UITableViewController{\n    private var imageURLs: [String] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomCell\")\n        loadImages()\n    }\n\n    private func loadImages() {\n        // Load imageURLs from your data source\n    }\n\n    // MARK: - UITableViewDataSource\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return imageURLs.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomCell\", for: indexPath) as! CustomTableViewCell\n        let imageURL = imageURLs[indexPath.row]\n        cell.configure(with: imageURL)\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom Pull-to-Refresh control in a UITableView.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewController: UITableViewController {\n    private var dataSource: [String] = []\n\n    private lazy var refreshIndicator: UIRefreshControl = {\n        let refreshControl = UIRefreshControl()\n        refreshControl.addTarget(self, action: #selector(handleRefresh), for: .valueChanged)\n        return refreshControl\n    }()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"Cell\")\n        tableView.refreshControl = refreshIndicator\n        loadData()\n    }\n\n    private func loadData() {\n        // Load data from your data source\n    }\n\n    @objc private func handleRefresh() {\n        // Refresh data from your data source\n        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) { [weak self] in\n            self?.loadData()\n            self?.tableView.reloadData()\n            self?.refreshIndicator.endRefreshing()\n        }\n    }\n\n    // MARK: - UITableViewDataSource\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return dataSource.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\n        cell.textLabel?.text = dataSource[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom progress bar that can be added as a subview to any UIView.",
      "input": "",
      "output": "import UIKit\n\nclass CustomProgressBar: UIView {\n    private let progressLayer = CALayer()\n\n    var progress: CGFloat = 0 {\n        didSet {\n            setNeedsLayout()\n        }\n    }\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        configure()\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        configure()\n    }\n\n    private func configure() {\n        layer.addSublayer(progressLayer)\n        progressLayer.backgroundColor = UIColor.green.cgColor\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        let progressWidth = bounds.width * progress\n        progressLayer.frame = CGRect(x: 0, y: 0, width: progressWidth, height: bounds.height)\n    }\n}\n\n// Usage example:\n\nlet progressBar = CustomProgressBar(frame: CGRect(x: 0, y: 0, width: 200, height: 20))\nview.addSubview(progressBar)\nprogressBar.progress = 0.5"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom onboarding flow with three view controllers.",
      "input": "",
      "output": "import UIKit\n\nclass OnboardingViewController: UIViewController {\n    private var pageViewController: UIPageViewController!\n    private var viewControllers: [UIViewController] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupPageViewController()\n    }\n\n    private func setupPageViewController() {\n        pageViewController = UIPageViewController(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil)\n        viewControllers = [\n            createOnboardingStep(title: \"Welcome\", subtitle: \"Step 1\"),\n            createOnboardingStep(title: \"Get Started\", subtitle: \"Step 2\"),\n            createOnboardingStep(title: \"Enjoy\", subtitle: \"Step 3\")\n        ]\n        pageViewController.setViewControllers([viewControllers[0]], direction: .forward, animated: false, completion: nil)\n        pageViewController.dataSource = self\n        addChild(pageViewController)\n        view.addSubview(pageViewController.view)\n        pageViewController.didMove(toParent: self)\n    }\n\n    private func createOnboardingStep(title: String, subtitle: String) -> UIViewController {\n        let viewController = UIViewController()\n        let titleLabel = UILabel()\n        titleLabel.text = title\n        titleLabel.font = UIFont.systemFont(ofSize: 30, weight: .bold)\n        titleLabel.translatesAutoresizingMaskIntoConstraints = false\n        viewController.view.addSubview(titleLabel)\n\n        let subtitleLabel = UILabel()\n        subtitleLabel.text = subtitle\n        subtitleLabel.font ="
    },
    {
      "instruction": "Write a Swift function to fetch data from a JSON API, decode the JSON into a Swift model, and return the result in a completion handler",
      "input": "",
      "output": "import Foundation\n\nstruct Model: Codable {\n    let id: Int\n    let title: String\n}\n\nfunc fetchData(from url: URL, completion: @escaping (Result<Model, Error>) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"NoDataError\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let model = try JSONDecoder().decode(Model.self, from: data)\n            completion(.success(model))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function to create a custom UIPickerView and implement its delegate and datasource methods",
      "input": "",
      "output": "import UIKit\n\nclass CustomPickerView: UIPickerView, UIPickerViewDelegate, UIPickerViewDataSource {\n    var data: [String]\n    \n    init(data: [String]) {\n        self.data = data\n        super.init(frame: .zero)\n        self.delegate = self\n        self.dataSource = self\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return data.count\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return data[row]\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a SwiftUI View that displays a list of items from a data model and allows users to delete items from the list",
      "input": "",
      "output": "import SwiftUI\n\nstruct Item: Identifiable {\n    let id = UUID()\n    let name: String\n}\n\nstruct ContentView: View {\n    @State private var items = [\n        Item(name: \"Item 1\"),\n        Item(name: \"Item 2\"),\n        Item(name: \"Item 3\")\n    ]\n    \n    var body: some View {\n        NavigationView {\n            List {\n                ForEach(items) { item in\n                    Text(item.name)\n                }\n                .onDelete(perform: delete)\n            }\n            .navigationTitle(\"Items\")\n            .toolbar {\n                EditButton()\n            }\n        }\n    }\n    \n    private func delete(at offsets: IndexSet) {\n        items.remove(atOffsets: offsets)\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that receives a URL and a dictionary of parameters, encodes the parameters into the URL, and returns a URLRequest",
      "input": "",
      "output": "import Foundation\n\nfunc createURLRequest(url: URL, parameters: [String: String]) -> URLRequest? {\n    guard var components = URLComponents(url: url, resolvingAgainstBaseURL: false) else {\n        return nil\n    }\n    \n    components.queryItems = parameters.map { key, value in\n        URLQueryItem(name: key, value: value)\n    }\n    \n    guard let finalURL = components.url else {\n        return nil\n    }\n    \n    return URLRequest(url: finalURL)\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that accepts a UIView and a CGPoint, animates the view to move to the CGPoint, and returns the UIView",
      "input": "",
      "output": "import UIKit\n\nfunc moveView(_ view: UIView, to point: CGPoint) -> UIView {\n    UIView.animate(withDuration: 0.5, animations: {\n        view.frame.origin = point\n    })\n    return view\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that takes an array of integers, filters out even numbers, and then maps the result to their square values",
      "input": "",
      "output": "func filterAndMap(numbers: [Int]) -> [Int] {\n    return numbers.filter { $0 % 2 != 0 }.map { $0 * $0 }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that accepts a UITableView, a UITableViewCell, and an IndexPath, dequeues a reusable cell of the given type at the given IndexPath, and returns the dequeued cell",
      "input": "",
      "output": "import UIKit\n\nfunc dequeueReusableCell<T: UITableViewCell>(tableView: UITableView, ofType cellType: T.Type, for indexPath: IndexPath) -> T {\n    guard let cell = tableView.dequeueReusableCell(withIdentifier: String(describing: T.self), for: indexPath) as? T else {\n        fatalError(\"Unable to dequeue reusable cell of type \\(String(describing: T.self))\")\n    }\n    \n    return cell\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that accepts a URLSession, URLRequest, and a completion handler, performs the request, and returns the result as either a success (with Data) or a failure (with Error)",
      "input": "",
      "output": "import Foundation\n\nfunc performRequest(session: URLSession, request: URLRequest, completion: @escaping (Result<Data, Error>) -> Void) {\n    let task = session.dataTask(with: request) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"NoDataError\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        completion(.success(data))\n    }\n    task.resume()\n}"
    },
    {
      "instruction": "Write a Swift function that fetches JSON data from a URL and decodes it into a custom object using Codable",
      "input": "",
      "output": "import Foundation\n\nstruct MyData: Codable {\n    let id: Int\n    let name: String\n}\n\nfunc fetchData(from url: String, completion: @escaping (Result<MyData, Error>) -> Void) {\n    guard let url = URL(string: url) else {\n        completion(.failure(NSError(domain: \"\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"Invalid URL\"])))\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"No data received\"])))\n            return\n        }\n        \n        do {\n            let decoder = JSONDecoder()\n            let myData = try decoder.decode(MyData.self, from: data)\n            completion(.success(myData))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    \n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that converts an array of integers into an array of strings",
      "input": "",
      "output": "func convertIntegersToStrings(_ integers: [Int]) -> [String] {\n    return integers.map { String($0) }\n}"
    },
    {
      "instruction": " \nGenerate a Swift function that displays a UIActivityIndicatorView while a time-consuming task is performed",
      "input": "",
      "output": "import UIKit\n\nfunc performTaskWithActivityIndicator(completion: @escaping () -> Void) {\n    let activityIndicator = UIActivityIndicatorView(style: .large)\n    activityIndicator.center = view.center\n    view.addSubview(activityIndicator)\n    activityIndicator.startAnimating()\n    \n    DispatchQueue.global(qos: .userInitiated).async {\n        // Perform time-consuming task here\n        \n        DispatchQueue.main.async {\n            activityIndicator.stopAnimating()\n            activityIndicator.removeFromSuperview()\n            completion()\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that filters an array of strings based on a search term",
      "input": "",
      "output": "func filterStrings(_ strings: [String], searchTerm: String) -> [String] {\n    return strings.filter { $0.lowercased().contains(searchTerm.lowercased()) }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UILabel with custom font, size, and color",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomLabel(text: String, fontName: String, fontSize: CGFloat, textColor: UIColor) -> UILabel {\n    let label = UILabel()\n    label.text = text\n    label.font = UIFont(name: fontName, size: fontSize)\n    label.textColor = textColor\n    return label\n}"
    },
    {
      "instruction": " \nWrite a Swift function that calculates the factorial of a given number",
      "input": "",
      "output": "func factorial(of number: Int) -> Int {\n    return (1...number).reduce(1, *)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that returns a sorted array of custom objects based on a key path",
      "input": "",
      "output": "struct Person {\n    let name: String\n    let age: Int\n}\n\nfunc sortArrayOfObjects<T: Comparable>(_ array: [Person], by keyPath: KeyPath<Person, T>) -> [Person] {\n    return array.sorted { $0[keyPath: keyPath] < $1[keyPath: keyPath] }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that finds the longest common prefix of an array of strings",
      "input": "",
      "output": "func longestCommonPrefix(_ strings: [String]) -> String {\n    guard !strings.isEmpty else { return \"\" }\n    var prefix = strings[0]\n    \n    for string in strings.dropFirst() {\n        while !string.hasPrefix(prefix) {\n            prefix = String(prefix.dropLast())\n        }\n    }\n    \n    return prefix\n}"
    },
    {
      "instruction": "Create a Swift function that asynchronously downloads an image from a URL and sets it to a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            print(\"Error downloading image: \\(error?.localizedDescription ?? \"Unknown error\")\")\n            return\n        }\n        \n        DispatchQueue.main.async {\n            imageView.image = UIImage(data: data)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nCreate a Swift function to register a UITableViewCell in a UITableView.",
      "input": "",
      "output": "import UIKit\n\nfunc registerCell<T: UITableViewCell>(_ tableView: UITableView, cellType: T.Type, reuseIdentifier: String) {\n    tableView.register(cellType, forCellReuseIdentifier: reuseIdentifier)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that handles a tap gesture on a UIButton and changes the button's title.",
      "input": "",
      "output": "import UIKit\n\nfunc handleButtonTap(_ button: UIButton) {\n    button.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n}\n\n@objc func buttonTapped(_ sender: UIButton) {\n    sender.setTitle(\"Button Tapped\", for: .normal)\n}"
    },
    {
      "instruction": " \nCreate a Swift class for a UICollectionView custom cell with a UIImageView and UILabel.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        \n        contentView.addSubview(imageView)\n        contentView.addSubview(label)\n        \n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            \n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            label.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that retrieves user's current location using CoreLocation.",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n    \n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        guard let location = locations.first else { return }\n        print(\"User's current location: \\(location)\")\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error getting location: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function that saves a key-value pair to UserDefaults.",
      "input": "",
      "output": "func saveToUserDefaults(key: String, value: Any) {\n    UserDefaults.standard.set(value, forKey: key)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that retrieves a value from UserDefaults for a given key.",
      "input": "",
      "output": "func getValueFromUserDefaults<T>(key: String) -> T? {\n    return UserDefaults.standard.object(forKey: key) as? T\n}"
    },
    {
      "instruction": " \nCreate a Swift function that starts animating a UIActivityIndicatorView when a button is tapped.",
      "input": "",
      "output": "import UIKit\n\nfunc handleButtonTap(activityIndicator: UIActivityIndicatorView, button: UIButton) {\n    button.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n}\n\n@objc func buttonTapped(_ sender: UIButton) {\n    activityIndicator.startAnimating()\n}"
    },
    {
      "instruction": "Write a Swift function that asynchronously downloads an image from a URL and sets it to a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil, let image = UIImage(data: data) else {\n            completion(nil)\n            return\n        }\n        DispatchQueue.main.async {\n            completion(image)\n        }\n    }\n    task.resume()\n}\n\nfunc setImage(for imageView: UIImageView, from url: URL) {\n    downloadImage(from: url) { image in\n        imageView.image = image\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that saves a key-value pair to UserDefaults and a function to retrieve the value for a key",
      "input": "",
      "output": "import Foundation\n\nfunc saveToUserDefaults(key: String, value: Any) {\n    let defaults = UserDefaults.standard\n    defaults.set(value, forKey: key)\n}\n\nfunc retrieveFromUserDefaults(key: String) -> Any? {\n    let defaults = UserDefaults.standard\n    return defaults.object(forKey: key)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates a UIButton when tapped",
      "input": "",
      "output": "import UIKit\n\nfunc animateButtonOnTap(_ button: UIButton) {\n    let originalTransform = button.transform\n    let scaledTransform = button.transform.scaledBy(x: 1.1, y: 1.1)\n    \n    UIView.animate(withDuration: 0.1, animations: {\n        button.transform = scaledTransform\n    }, completion: { _ in\n        UIView.animate(withDuration: 0.1, animations: {\n            button.transform = originalTransform\n        })\n    })\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UIAlertController with a text field and a completion handler",
      "input": "",
      "output": "import UIKit\n\nfunc presentAlertWithTextField(on viewController: UIViewController, title: String, message: String, placeholder: String, completion: @escaping (String?) -> Void) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    alertController.addTextField { textField in\n        textField.placeholder = placeholder\n    }\n    \n    let submitAction = UIAlertAction(title: \"Submit\", style: .default) { _ in\n        completion(alertController.textFields?.first?.text)\n    }\n    alertController.addAction(submitAction)\n    \n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n    alertController.addAction(cancelAction)\n    \n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sets up a UITableView with a custom UITableViewCell and a given data source",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    // Add custom UI elements and logic for the cell\n}\n\nfunc setupTableView(tableView: UITableView, dataSource: UITableViewDataSource) {\n    tableView.dataSource = dataSource\n    tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomCell\")\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a UIRefreshControl to a UIScrollView and triggers a given action when pulled",
      "input": "",
      "output": "import UIKit\n\nfunc addRefreshControl(to scrollView: UIScrollView, target: Any, action: Selector) {\n    let refreshControl = UIRefreshControl()\n    refreshControl.addTarget(target, action: action, for: .valueChanged)\n    scrollView.refreshControl = refreshControl\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a UIImage, scales it to a specified size, and returns the scaled image",
      "input": "",
      "output": "import UIKit\n\nfunc scaleImage(_ image: UIImage, toSize size: CGSize) -> UIImage? {\n    UIGraphicsBeginImageContextWithOptions(size, false, 0.0)\n    image.draw(in: CGRect(origin: .zero, size: size))\n    let scaledImage = UIGraphicsGetImageFromCurrentImageContext()\n    UIGraphicsEndImageContext()\n    return scaledImage\n}"
    },
    {
      "instruction": " \nWrite a Swift function that dequeues a UICollectionViewCell with a specified identifier and index path from a UICollectionView",
      "input": "",
      "output": "import UIKit\n\nfunc dequeueReusableCell<T: UICollectionViewCell>(collectionView: UICollectionView, identifier: String, indexPath: IndexPath) -> T {\n    return collectionView.dequeueReusableCell(withReuseIdentifier: identifier, for: indexPath) as! T\n}"
    },
    {
      "instruction": "Create a custom UITableViewCell with a label and an image view.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupSubviews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupSubviews() {\n        contentView.addSubview(label)\n        contentView.addSubview(imageView)\n        \n        NSLayoutConstraint.activate([\n            label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            label.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            \n            imageView.leadingAnchor.constraint(equalTo: label.trailingAnchor, constant: 16),\n            imageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            imageView.widthAnchor.constraint(equalToConstant: 40),\n            imageView.heightAnchor.constraint(equalToConstant: 40)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nImplement a UICollectionView with a custom UICollectionViewCell.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // Custom code for UICollectionViewCell\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n    private let reuseIdentifier = \"CustomCell\"\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: reuseIdentifier)\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 50 // Arbitrary number of items\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        // Configure the cell\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a method for displaying an alert controller with a text field.",
      "input": "",
      "output": "import UIKit\n\nextension UIViewController {\n    func displayAlertWithTextField(title: String, message: String, textFieldPlaceholder: String, completion: @escaping (String) -> Void) {\n        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n        \n        alertController.addTextField { textField in\n            textField.placeholder = textFieldPlaceholder\n        }\n        \n        let submitAction = UIAlertAction(title: \"Submit\", style: .default) { _ in\n            if let text = alertController.textFields?.first?.text {\n                completion(text)\n            }\n        }\n        \n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n        \n        alertController.addAction(submitAction)\n        alertController.addAction(cancelAction)\n        \n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nWrite a method that fetches JSON data from a given URL and decodes it into a specified Swift Codable model.",
      "input": "",
      "output": "import Foundation\n\nfunc fetchJSONData<T: Codable>(from url: URL, completion: @escaping (Result<T, Error>) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let decoder = JSONDecoder()\n            let decodedData = try decoder.decode(T.self, from: data)\n            completion(.success(decodedData))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    \n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a function that animates a UIView's change in width and height.",
      "input": "",
      "output": "import UIKit\n\nfunc animateSizeChange(for view: UIView, newWidth: CGFloat, newHeight: CGFloat, duration: TimeInterval) {\n    UIView.animate(withDuration: duration) {\n        view.frame.size.width = newWidth\n        view.frame.size.height = newHeight\n        view.layoutIfNeeded()\n    }\n}"
    },
    {
      "instruction": " \nWrite a method that saves an image to the user's photo library.",
      "input": "",
      "output": "import Photos\nimport UIKit\n\nextension UIViewController {\n    func saveImageToPhotoLibrary(image: UIImage, completion: @escaping (Result<Void, Error>) -> Void) {\n        PHPhotoLibrary.requestAuthorization { status in\n            if status == .authorized {\n                PHPhotoLibrary.shared().performChanges({\n                    PHAssetChangeRequest.creationRequestForImage(from: image)\n                }, completionHandler: { success, error in\n                    if success {\n                        completion(.success(()))\n                    } else if let error = error {\n                        completion(.failure(error))\n                    }\n                })\n            } else {\n                completion(.failure(NSError(domain: \"Photo library access denied\", code: -1, userInfo: nil)))\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a function that asynchronously downloads an image from a URL and assigns it to a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc setImageFromURL(_ url: URL, to imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { data, _, error in\n        if let error = error {\n            print(\"Error downloading image: \\(error)\")\n            return\n        }\n        \n        guard let data = data else {\n            print(\"No data downloaded\")\n            return\n        }\n        \n        DispatchQueue.main.async {\n            imageView.image = UIImage(data: data)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nImplement a UITableViewController with a search bar that filters data based on user input.",
      "input": "",
      "output": "import UIKit\n\nclass SearchTableViewController: UITableViewController, UISearchBarDelegate {\n    private let reuseIdentifier = \"Cell\"\n    private let data = [\"Apple\", \"Banana\", \"Cherry\", \"Grape\", \"Orange\", \"Strawberry\", \"Watermelon\"] // Sample data\n    private var filteredData: [String] = []\n    \n    private lazy var searchBar: UISearchBar = {\n        let searchBar = UISearchBar()\n        searchBar.delegate = self\n        return searchBar\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: reuseIdentifier)\n        navigationItem.titleView = searchBar\n        filteredData = data\n    }\n    \n    // MARK: - Table view data source\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredData.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: reuseIdentifier, for: indexPath)\n        cell.textLabel?.text = filteredData[indexPath.row]\n        return cell\n    }\n    \n    // MARK: - Search bar delegate\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        filteredData = data.filter { item in\n            item.lowercased().contains(searchText.lowercased())\n        }\n        tableView.reloadData()\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to handle push notifications and register for remote notifications",
      "input": "",
      "output": "import UserNotifications\n\nclass AppDelegate: UIResponder, UIApplicationDelegate, UNUserNotificationCenterDelegate {\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        \n        registerForPushNotifications()\n        \n        return true\n    }\n\n    func registerForPushNotifications() {\n        UNUserNotificationCenter.current().delegate = self\n        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in\n            guard granted else { return }\n            DispatchQueue.main.async {\n                UIApplication.shared.registerForRemoteNotifications()\n            }\n        }\n    }\n\n    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n        // Handle the device token and send it to your server\n    }\n\n    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n        // Handle the error\n    }\n\n    func userNotificationCenter(_ center: UNUserNotificationCenter,\n                                willPresent notification: UNNotification,\n                                withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {\n        completionHandler([.banner, .sound]) // Customize the presentation options\n    }\n\n}"
    },
    {
      "instruction": " \nWrite a Swift function to perform a network request using URLSession and parse the JSON response",
      "input": "",
      "output": "import Foundation\n\nstruct ApiResponse: Codable {\n    let results: [String: Any]\n}\n\nfunc fetchApiData(urlString: String, completion: @escaping (ApiResponse?, Error?) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(nil, NSError(domain: \"\", code: 400, userInfo: [NSLocalizedDescriptionKey: \"Invalid URL\"]))\n        return\n    }\n\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(nil, error)\n            return\n        }\n\n        guard let data = data else {\n            completion(nil, NSError(domain: \"\", code: 400, userInfo: [NSLocalizedDescriptionKey: \"No data received\"]))\n            return\n        }\n\n        do {\n            let decoder = JSONDecoder()\n            let apiResponse = try decoder.decode(ApiResponse.self, from: data)\n            completion(apiResponse, nil)\n        } catch {\n            completion(nil, error)\n        }\n    }\n\n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function to present an UIAlertController with an action",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(withTitle title: String, message: String, inViewController viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let okAction = UIAlertAction(title: \"OK\", style: .default) { _ in\n        // Handle action here\n    }\n    alertController.addAction(okAction)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UICollectionView with a custom UICollectionViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n    \n    // Add your custom UI elements and configure the cell\n}\n\nclass MyViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    \n    private let collectionView = UICollectionView(frame: .zero, collectionViewLayout: UICollectionViewFlowLayout())\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        setupCollectionView()\n    }\n    \n    private func setupCollectionView() {\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.backgroundColor = .clear\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n        \n        view.addSubview(collectionView)\n        \n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.topAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor)\n        ])\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return dataSource.count // your number of items here\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        // Configure the cell with your data\n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: 100, height: 100) // Customize the size of the cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to save and retrieve data using UserDefaults",
      "input": "",
      "output": "import Foundation\n\nfunc saveData(key: String, value: Any) {\n    let userDefaults = UserDefaults.standard\n    userDefaults.set(value, forKey: key)\n    userDefaults.synchronize()\n}\n\nfunc retrieveData(key: String) -> Any? {\n    let userDefaults = UserDefaults.standard\n    return userDefaults.object(forKey: key)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UITableViewController with a search bar using UISearchController",
      "input": "",
      "output": "import UIKit\n\nclass MyTableViewController: UITableViewController, UISearchResultsUpdating {\n    \n    var dataSource = [String]() // your data source here\n    var filteredData = [String]()\n    var searchController = UISearchController(searchResultsController: nil)\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        setupSearchController()\n    }\n\n    private func setupSearchController() {\n        searchController.searchResultsUpdater = self\n        searchController.obscuresBackgroundDuringPresentation = false\n        searchController.searchBar.placeholder = \"Search\"\n        navigationItem.searchController = searchController\n        definesPresentationContext = true\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        if searchController.isActive && !searchController.searchBar.text!.isEmpty {\n            return filteredData.count\n        }\n        return dataSource.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\n        let text: String\n\n        if searchController.isActive && !searchController.searchBar.text!.isEmpty {\n            text = filteredData[indexPath.row]\n        } else {\n            text = dataSource[indexPath.row]\n        }\n\n        cell.textLabel?.text = text\n        return cell\n    }\n\n    func updateSearchResults(for searchController: UISearchController) {\n        filterContentForSearchText(searchController.searchBar.text!)\n    }\n\n    func filterContentForSearchText(_ searchText: String) {\n        filteredData = dataSource.filter { item in\n            return item.lowercased().contains(searchText.lowercased())\n        }\n        tableView.reloadData()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UIView with a UITapGestureRecognizer",
      "input": "",
      "output": "import UIKit\n\nclass CustomView: UIView {\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupTapGestureRecognizer()\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        setupTapGestureRecognizer()\n    }\n\n    private func setupTapGestureRecognizer() {\n        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(handleTap))\n        addGestureRecognizer(tapGestureRecognizer)\n    }\n\n    @objc private func handleTap() {\n        // Handle tap event here\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UIButton with a title, target, and action",
      "input": "",
      "output": "import UIKit\n\nfunc createButton(title: String, target: Any, action: Selector) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.addTarget(target, action: action, for: .touchUpInside)\n    button.translatesAutoresizingMaskIntoConstraints = false\n    return button\n}"
    },
    {
      "instruction": "Write a Swift function that takes two arrays of integers and returns an array containing their intersection.",
      "input": "[1, 3, 5, 7], [2, 3, 6, 7]",
      "output": "func intersectArrays(_ arr1: [Int], _ arr2: [Int]) -> [Int] {\n    let set1 = Set(arr1)\n    let set2 = Set(arr2)\n    let intersection = set1.intersection(set2)\n    return Array(intersection)\n}\nprint(intersectArrays([1, 3, 5, 7], [2, 3, 6, 7]))"
    },
    {
      "instruction": " \nWrite a Swift function to get the factorial of a given number using recursion.",
      "input": "5",
      "output": "func factorial(_ n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * factorial(n - 1)\n    }\n}\nprint(factorial(5))"
    },
    {
      "instruction": " \nWrite a Swift function that takes a string as input and returns a string with all vowels removed.",
      "input": "\"Hello, World!\"",
      "output": "func removeVowels(from input: String) -> String {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    let result = input.filter { !vowels.contains($0) }\n    return result\n}\nprint(removeVowels(from: \"Hello, World!\"))"
    },
    {
      "instruction": " \nWrite a Swift function to find the longest common prefix of an array of strings.",
      "input": "[\"flower\", \"flow\", \"flight\"]",
      "output": "func longestCommonPrefix(_ strs: [String]) -> String {\n    guard !strs.isEmpty else { return \"\" }\n    var prefix = strs[0]\n    for str in strs {\n        while !str.hasPrefix(prefix) {\n            prefix.removeLast()\n            if prefix.isEmpty {\n                return \"\"\n            }\n        }\n    }\n    return prefix\n}\nprint(longestCommonPrefix([\"flower\", \"flow\", \"flight\"]))"
    },
    {
      "instruction": " \nWrite a Swift function that takes an array of integers and returns the maximum product of three numbers in the array.",
      "input": "[-10, -10, 1, 3, 2]",
      "output": "func maximumProduct(_ nums: [Int]) -> Int {\n    let sortedNums = nums.sorted()\n    let n = sortedNums.count\n    let maxProduct = max(sortedNums[0] * sortedNums[1] * sortedNums[n - 1], sortedNums[n - 3] * sortedNums[n - 2] * sortedNums[n - 1])\n    return maxProduct\n}\nprint(maximumProduct([-10, -10, 1, 3, 2]))"
    },
    {
      "instruction": " \nWrite a Swift function that takes a string and returns true if the string is a palindrome, otherwise returns false.",
      "input": "\"level\"",
      "output": "func isPalindrome(_ s: String) -> Bool {\n    let characters = Array(s)\n    let count = characters.count\n    for i in 0..<(count / 2) {\n        if characters[i] != characters[count - i - 1] {\n            return false\n        }\n    }\n    return true\n}\nprint(isPalindrome(\"level\"))"
    },
    {
      "instruction": " \nWrite a Swift function that takes an array of integers and returns the first non-repeated integer in the array.",
      "input": "[2, 3, 4, 2, 3, 5, 4, 6, 7]",
      "output": "func firstNonRepeatedInteger(_ arr: [Int]) -> Int? {\n    var counts: [Int: Int] = [:]\n    for num in arr {\n        counts[num, default: 0] += 1\n    }\n    for num in arr {\n        if let count = counts[num], count == 1 {\n            return num\n        }\n    }\n    return nil\n}\nprint(firstNonRepeatedInteger([2, 3, 4, 2, 3, 5, 4, 6, 7]))"
    },
    {
      "instruction": " \nWrite a Swift function that takes a string and returns the most common character in the string.",
      "input": "\"Hello, World!\"",
      "output": "func mostCommonCharacter(_ input: String) -> Character? {\n    var counts: [Character: Int] = [:]\n    for char in input {\n        counts[char, default: 0] += 1\n    }\n    return counts.max(by: { $0.value < $1.value })?.key\n}\nprint(mostCommonCharacter(\"Hello, World!\"))"
    },
    {
      "instruction": " \nWrite a Swift function that fetches a JSON object from a URL and decodes it into a custom Swift object using the Codable protocol.",
      "input": "",
      "output": "import Foundation\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let username: String\n    let email: String\n}\n\nfunc fetchUser(from url: URL, completion: @escaping (User?, Error?) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(nil, error)\n            return\n        }\n        \n        guard let data = data else {\n            completion(nil, NSError(domain: \"NoData\", code: -1, userInfo: nil))\n            return\n        }\n        \n        let decoder = JSONDecoder()\n        do {\n            let user = try decoder.decode(User.self, from: data)\n            completion(user, nil)\n        } catch {\n            completion(nil, error)\n        }\n    }\n    task.resume()\n}\n\nlet url = URL(string: \"https://jsonplaceholder.typicode.com/users/1\")!\nfetchUser(from: url) { user, error in\n    if let error = error {\n        print(\"Error fetching user: \\(error)\")\n    } else if let user = user {\n        print(\"User fetched: \\(user)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that accepts a filename and file extension, then reads and returns the content of the file as a String.",
      "input": "",
      "output": "import Foundation\n\nfunc readFileContent(filename: String, fileExtension: String) -> String? {\n    guard let fileURL = Bundle.main.url(forResource: filename, withExtension: fileExtension) else {\n        return nil\n    }\n    \n    do {\n        let content = try String(contentsOf: fileURL, encoding: .utf8)\n        return content\n    } catch {\n        print(\"Error reading file: \\(error)\")\n        return nil\n    }\n}\n\nlet filename = \"example\"\nlet fileExtension = \"txt\"\n\nif let content = readFileContent(filename: filename, fileExtension: fileExtension) {\n    print(\"File content: \\(content)\")\n} else {\n    print(\"Error reading file: \\(filename).\\(fileExtension)\")\n}"
    },
    {
      "instruction": " \nWrite a Swift function that generates an array of random integers within a specified range and count.",
      "input": "",
      "output": "import Foundation\n\nfunc generateRandomNumbers(range: ClosedRange<Int>, count: Int) -> [Int] {\n    return (0..<count).map { _ in Int.random(in: range) }\n}\n\nlet range = 1...100\nlet count = 10\nlet randomNumbers =generateRandomNumbers(range: range, count: count)\nprint(\"Random numbers: \\(randomNumbers)\")"
    },
    {
      "instruction": "Write a Swift function to fetch JSON data from a URL and decode it into a Codable model",
      "input": "",
      "output": "import Foundation\n\nstruct SampleModel: Codable {\n    let id: Int\n    let name: String\n}\n\nfunc fetchData(urlString: String, completion: @escaping (Result<SampleModel, Error>) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(.failure(NSError(domain: \"\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"Invalid URL\"])))\n        return\n    }\n\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else {\n            completion(.failure(NSError(domain: \"\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"No data received\"])))\n            return\n        }\n\n        do {\n            let decoder = JSONDecoder()\n            let model = try decoder.decode(SampleModel.self, from: data)\n            completion(.success(model))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n\n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UITableViewCell with an image and two labels",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    let subtitleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        contentView.addSubview(cellImageView)\n        contentView.addSubview(titleLabel)\n        contentView.addSubview(subtitleLabel)\n        \n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 8),\n            cellImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            cellImageView.widthAnchor.constraint(equalToConstant: 50),\n            cellImageView.heightAnchor.constraint(equalToConstant: 50),\n            \n            titleLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 8),\n            titleLabel"
    },
    {
      "instruction": "Implement a Swift function that receives an array of integers and returns the sum of all even numbers.",
      "input": "",
      "output": "func sumOfEvenNumbers(numbers: [Int]) -> Int {\n    var sum = 0\n    for number in numbers {\n        if number % 2 == 0 {\n            sum += number\n        }\n    }\n    return sum\n}\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlet result = sumOfEvenNumbers(numbers: numbers)\nprint(result)"
    },
    {
      "instruction": " \n\nImplement a Swift function that calculates the factorial of a given number using a recursive approach.",
      "input": "",
      "output": "func factorial(_ number: Int) -> Int {\n    if number == 0 {\n        return 1\n    }\n    return number * factorial(number - 1)\n}\n\nlet result = factorial(5)\nprint(result)"
    },
    {
      "instruction": " \n\nImplement a Swift function that receives a string and returns the number of occurrences of a given character.",
      "input": "",
      "output": "func countOccurrences(of character: Character, in string: String) -> Int {\n    var count = 0\n    for char in string {\n        if char == character {\n            count += 1\n        }\n    }\n    return count\n}\n\nlet exampleString = \"Hello, world!\"\nlet characterToCount: Character = \"l\"\nlet result = countOccurrences(of: characterToCount, in: exampleString)\nprint(result)"
    },
    {
      "instruction": " \n\nImplement a Swift function that receives an array of strings and returns a new array with the strings sorted alphabetically.",
      "input": "",
      "output": "func sortStringsAlphabetically(strings: [String]) -> [String] {\n    return strings.sorted()\n}\n\nlet unsortedStrings = [\"banana\", \"apple\", \"orange\", \"kiwi\", \"grape\"]\nlet sortedStrings = sortStringsAlphabetically(strings: unsortedStrings)\nprint(sortedStrings)"
    },
    {
      "instruction": " \n\nImplement a Swift function that merges two dictionaries of the same type.",
      "input": "",
      "output": "func mergeDictionaries<K, V>(dict1: [K: V], dict2: [K: V]) -> [K: V] {\n    var mergedDict = dict1\n    for (key, value) in dict2 {\n        mergedDict[key] = value\n    }\n    return mergedDict\n}\n\nlet dict1 = [\"a\": 1, \"b\": 2, \"c\": 3]\nlet dict2 = [\"d\": 4, \"e\": 5, \"f\": 6]\nlet mergedDict = mergeDictionaries(dict1: dict1, dict2: dict2)\nprint(mergedDict)"
    },
    {
      "instruction": " \n\nImplement a Swift function that filters an array of integers based on a given predicate.",
      "input": "",
      "output": "func filterIntegers(_ numbers: [Int], using predicate: (Int) -> Bool) -> [Int] {\n    var filteredNumbers = [Int]()\n    for number in numbers {\n        if predicate(number) {\n            filteredNumbers.append(number)\n        }\n    }\n    return filteredNumbers\n}\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlet evenNumbers = filterIntegers(numbers, using: { $0 % 2 == 0 })\nprint(evenNumbers)"
    },
    {
      "instruction": " \n\nImplement a Swift function that calculates the area of a circle given its radius.",
      "input": "",
      "output": "func areaOfCircle(radius: Double) -> Double {\n    return Double.pi * pow(radius, 2)\n}\n\nlet radius = 5.0\nlet area = areaOfCircle(radius: radius)\nprint(area)"
    },
    {
      "instruction": " \n\nImplement a Swift function that determines whether a given string is a palindrome.",
      "input": "",
      "output": "func isPalindrome(_ string: String) -> Bool {\n    let characters = Array(string.lowercased())\n    let reversedCharacters = Array(characters.reversed())\n    return characters == reversedCharacters\n}\n\nlet exampleString = \"racecar\"\nlet result = isPalindrome(exampleString)\nprint(result)"
    },
    {
      "instruction": "Write a Swift function that asynchronously downloads an image from a URL and sets it as the UIImageView's image",
      "input": "",
      "output": "func setImageFromURL(url: URL, imageView: UIImageView) {\n    DispatchQueue.global().async {\n        if let data = try? Data(contentsOf: url) {\n            DispatchQueue.main.async {\n                imageView.image = UIImage(data: data)\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to filter an array of integers and return a new array containing only even numbers",
      "input": "",
      "output": "func filterEvenNumbers(numbers: [Int]) -> [Int] {\n    return numbers.filter { $0 % 2 == 0 }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to perform a binary search on a sorted array of integers",
      "input": "",
      "output": "func binarySearch(array: [Int], target: Int) -> Int? {\n    var left = 0\n    var right = array.count - 1\n\n    while left <= right {\n        let middle = (left + right) / 2\n\n        if array[middle] == target {\n            return middle\n        } else if array[middle] < target {\n            left = middle + 1\n        } else {\n            right = middle - 1\n        }\n    }\n    return nil\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes an array of strings and returns a dictionary with the count of each unique string",
      "input": "",
      "output": "func countUniqueStrings(strings: [String]) -> [String: Int] {\n    var uniqueCount: [String: Int] = [:]\n\n    for string in strings {\n        uniqueCount[string] = (uniqueCount[string] ?? 0) + 1\n    }\n\n    return uniqueCount\n}"
    },
    {
      "instruction": " \nWrite a Swift function that finds the longest common prefix of an array of strings",
      "input": "",
      "output": "func longestCommonPrefix(strings: [String]) -> String {\n    guard !strings.isEmpty else { return \"\" }\n    var prefix = strings[0]\n\n    for string in strings {\n        while !string.hasPrefix(prefix) {\n            prefix.removeLast()\n            if prefix.isEmpty { return \"\" }\n        }\n    }\n    return prefix\n}"
    },
    {
      "instruction": " \nWrite a Swift function that returns the factorial of a given integer",
      "input": "",
      "output": "func factorial(_ n: Int) -> Int {\n    guard n > 0 else { return 1 }\n    return n * factorial(n - 1)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that flattens a nested array of integers",
      "input": "",
      "output": "func flattenArray(nestedArray: [Any]) -> [Int] {\n    var flattenedArray: [Int] = []\n\n    for element in nestedArray {\n        if let intElement = element as? Int {\n            flattenedArray.append(intElement)\n        } else if let arrayElement = element as? [Any] {\n            flattenedArray += flattenArray(nestedArray: arrayElement)\n        }\n    }\n\n    return flattenedArray\n}"
    },
    {
      "instruction": " \nWrite a Swift function that calculates the nth Fibonacci number",
      "input": "",
      "output": "func fibonacci(n: Int) -> Int {\n    if n <= 1 {\n        return n\n    }\n    return fibonacci(n: n - 1) + fibonacci(n: n - 2)\n}"
    },
    {
      "instruction": "Write a Swift function that loads data from a JSON file in the app bundle, decodes it into an array of `MobileApp` objects, and calls the completion handler with the loaded data. If there's an error loading or decoding the data, call the completion handler with an empty array.",
      "input": "struct MobileApp: Codable {\n    let id: Int\n    let name: String\n    let description: String\n    let iconName: String\n}\n\nclass MobileAppLoader {\n    func loadMobileApps(completion: @escaping ([MobileApp]) -> ()) {\n        // TODO: Add your code here\n    }\n}",
      "output": "func loadMobileApps(completion: @escaping ([MobileApp]) -> ()) {\n    if let url = Bundle.main.url(forResource: \"MobileApps\", withExtension: \"json\") {\n        do {\n            let data = try Data(contentsOf: url)\n            let decoder = JSONDecoder()\n            let mobileApps = try decoder.decode([MobileApp].self, from: data)\n            completion(mobileApps)\n        } catch {\n            print(\"Error loading or decoding JSON: \\(error)\")\n            completion([])\n        }\n    } else {\n        print(\"Error finding JSON file in app bundle\")\n        completion([])\n    }\n}"
    },
    {
      "instruction": " \n\nImplement a custom `UICollectionViewFlowLayout` subclass that displays cells in a grid with a fixed number of columns and a configurable spacing between cells.",
      "input": "class GridLayout: UICollectionViewFlowLayout {\n    var numberOfColumns: Int = 2\n    var interitemSpacing: CGFloat = 8.0\n    var lineSpacing: CGFloat = 8.0\n}",
      "output": "override func prepare() {\n    super.prepare()\n\n    guard let collectionView = collectionView else { return }\n\n    let availableWidth = collectionView.bounds.width - (CGFloat(numberOfColumns - 1) * interitemSpacing)\n    let itemWidth = availableWidth / CGFloat(numberOfColumns)\n    itemSize = CGSize(width: itemWidth, height: itemWidth)\n\n    minimumInteritemSpacing = interitemSpacing\n    minimumLineSpacing = lineSpacing\n    sectionInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that registers a custom table view cell class in a given UITableView, and dequeue the registered cell with a given identifier.",
      "input": "class CustomTableViewCell: UITableViewCell {\n    static let reuseIdentifier = \"CustomTableViewCell\"\n    // Other implementation\n}\n\nfunc registerAndDequeueCustomCell(for tableView: UITableView, with identifier: String) -> CustomTableViewCell {\n    // TODO: Add your code here\n}",
      "output": "func registerAndDequeueCustomCell(for tableView: UITableView, with identifier: String) -> CustomTableViewCell {\n    tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: identifier)\n    guard let cell = tableView.dequeueReusableCell(withIdentifier: identifier) as? CustomTableViewCell else {\n        fatalError(\"Failed to dequeue CustomTableViewCell\")\n    }\n    return cell\n}"
    },
    {
      "instruction": " \n\nImplement a Swift function that saves an array of `Contact` objects to UserDefaults, and another function that retrieves the saved contacts from UserDefaults.",
      "input": "struct Contact: Codable {\n    let name: String\n    let phoneNumber: String\n}\n\nclass ContactStorage {\n    private let userDefaults = UserDefaults.standard\n    private let contactsKey = \"contacts\"\n\n    func save(contacts: [Contact]) {\n        // TODO: Add your code here\n    }\n\n    func load() -> [Contact] {\n        // TODO: Add your code here\n    }\n}",
      "output": "func save(contacts: [Contact]) {\n    do {\n        let data = try JSONEncoder().encode(contacts)\n        userDefaults.set(data, forKey: contactsKey)\n    } catch {\n        print(\"Error encoding contacts: \\(error)\")\n    }\n}\n\nfunc load() -> [Contact] {\n    guard let data = userDefaults.data(forKey: contactsKey) else { return [] }\n    do {\n        return try JSONDecoder().decode([Contact].self, from: data)\n    } catch {\n        print(\"Error decoding contacts: \\(error)\")\n        return []\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that downloads an image from a given URL and sets it as the image for a UIImageView.",
      "input": "import UIKit\n\nfunc loadImage(from url: URL, into imageView: UIImageView) {\n    // TODO: Add your code here\n}",
      "output": "func loadImage(from url: URL, into imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let data = data, let image = UIImage(data: data) {\n            DispatchQueue.main.async {\n                imageView.image = image\n            }\n        } else {\n            print(\"Error loading image: \\(error?.localizedDescription ?? \"Unknown error\")\")\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \n\nImplement a Swift function that filters a given array of `Restaurant` objects based on a minimum rating and a list of allowed cuisine types.",
      "input": "struct Restaurant {\n    let name: String\n    let rating: Double\n    let cuisine: String\n}\n\nfunc filterRestaurants(_ restaurants: [Restaurant], withMinimumRating minimumRating: Double, allowedCuisines: [String]) -> [Restaurant] {\n    // TODO: Add your code here\n}",
      "output": "func filterRestaurants(_ restaurants: [Restaurant], withMinimumRating minimumRating: Double, allowedCuisines: [String]) -> [Restaurant] {\n    return restaurants.filter { restaurant in\n        restaurant.rating >= minimumRating && allowedCuisines.contains(restaurant.cuisine)\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that takes in a string and returns the string with all vowels removed.",
      "input": "func removeVowels(from text: String) -> String {\n    // TODO: Add your code here\n}",
      "output": "func removeVowels(from text: String) -> String {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    return text.filter { !vowels.contains($0) }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that observes a given `NotificationCenter` notification and calls a completion handler when the notification is triggered.",
      "input": "import Foundation\n\nfunc observeNotification(_ notificationName: Notification.Name, completion: @escaping () -> Void) {\n    // TODO: Add your code here\n}",
      "output": "func observeNotification(_ notificationName: Notification.Name, completion: @escaping () -> Void) {\n    NotificationCenter.default.addObserver(forName: notificationName, object: nil, queue: .main) { _ in\n        completion()\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to download an image from a URL and set it to a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            print(\"Error downloading image: \\(String(describing:error))\")\n            return\n        }\n        \n        DispatchQueue.main.async {\n            imageView.image = UIImage(data: data)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes an array of integers and returns the sum of the even numbers.",
      "input": "",
      "output": "func sumOfEvenNumbers(in numbers: [Int]) -> Int {\n    return numbers.filter { $0 % 2 == 0 }.reduce(0, +)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sorts a list of strings alphabetically and removes duplicates.",
      "input": "",
      "output": "func sortAndRemoveDuplicates(from strings: [String]) -> [String] {\n    return Array(Set(strings)).sorted()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a closure as a parameter and calls it after a specified delay.",
      "input": "",
      "output": "import Dispatch\n\nfunc performAfter(delay: TimeInterval, closure: @escaping () -> Void) {\n    DispatchQueue.main.asyncAfter(deadline: .now() + delay, execute: closure)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that returns the factorial of a given number using recursive approach.",
      "input": "",
      "output": "func factorial(_ number: Int) -> Int {\n    return number == 0 ? 1 : number * factorial(number - 1)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a string and counts the occurrences of each character.",
      "input": "",
      "output": "func countCharacterOccurrences(in string: String) -> [Character: Int] {\n    var characterCounts: [Character: Int] = [:]\n    \n    for character in string {\n        characterCounts[character, default: 0] += 1\n    }\n    \n    return characterCounts\n}"
    },
    {
      "instruction": " \nWrite a Swift function that filters out nil values from an array of optional strings.",
      "input": "",
      "output": "func removeNilValues(from strings: [String?]) -> [String] {\n    return strings.compactMap { $0 }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a dictionary of [String: Double] and returns a new dictionary with only the entries where the value is greater than or equal to a specified threshold.",
      "input": "",
      "output": "func filterDictionaryByValue(_ dictionary: [String: Double], threshold: Double) -> [String: Double] {\n    return dictionary.filter { $0.value >= threshold }\n}"
    },
    {
      "instruction": "Write a Swift function that downloads an image from a URL and assigns it to a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil, let image = UIImage(data: data) else {\n            completion(nil)\n            return\n        }\n        completion(image)\n    }.resume()\n}\n\nfunc setImage(from url: URL, to imageView: UIImageView) {\n    downloadImage(from: url) { image in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that filters an array of integers to only include even numbers",
      "input": "",
      "output": "func filterEvenNumbers(from array: [Int]) -> [Int] {\n    return array.filter { $0 % 2 == 0 }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that calculates the factorial of a given integer using recursion",
      "input": "",
      "output": "func factorial(_ n: Int) -> Int {\n    return n <= 1 ? 1 : n * factorial(n - 1)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UILabel with rounded corners and a specified background color",
      "input": "",
      "output": "import UIKit\n\nfunc createRoundedLabel(backgroundColor: UIColor, cornerRadius: CGFloat) -> UILabel {\n    let label = UILabel()\n    label.backgroundColor = backgroundColor\n    label.layer.cornerRadius = cornerRadius\n    label.clipsToBounds = true\n    return label\n}"
    },
    {
      "instruction": " \nWrite a Swift function that converts a dictionary of [String: Int] to a sorted array of tuples based on values",
      "input": "",
      "output": "func sortedTuples(from dictionary: [String: Int]) -> [(String, Int)] {\n    return dictionary.sorted { $0.value < $1.value }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that finds the first non-repeated character in a string",
      "input": "",
      "output": "func firstNonRepeatedCharacter(in string: String) -> Character? {\n    var characterCount: [Character: Int] = [:]\n    \n    for character in string {\n        characterCount[character] = (characterCount[character] ?? 0) + 1\n    }\n    \n    return string.first(where: { characterCount[$0] == 1 })\n}"
    },
    {
      "instruction": " \nWrite a Swift function that merges two sorted arrays into a single sorted array",
      "input": "",
      "output": "func mergeSortedArrays(_ array1: [Int], _ array2: [Int]) -> [Int] {\n    var mergedArray: [Int] = []\n    var i = 0\n    var j = 0\n\n    while i < array1.count && j < array2.count {\n        if array1[i] < array2[j] {\n            mergedArray.append(array1[i])\n            i += 1\n        } else {\n            mergedArray.append(array2[j])\n            j += 1\n        }\n    }\n\n    while i < array1.count {\n        mergedArray.append(array1[i])\n        i += 1\n    }\n\n    while j < array2.count {\n        mergedArray.append(array2[j])\n        j += 1\n    }\n\n    return mergedArray\n}"
    },
    {
      "instruction": " \nWrite a Swift function that checks if a given word is a palindrome",
      "input": "",
      "output": "func isPalindrome(_ word: String) -> Bool {\n    let characters = Array(word.lowercased())\n    return characters == characters.reversed()\n}"
    },
    {
      "instruction": "Implement a view controller that fetches a list of users from an API and displays them in a table view",
      "input": "import UIKit\n\nclass FetchUsersViewController: UIViewController {\n    @IBOutlet weak var tableView: UITableView!\n    \n    var users: [User] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // TODO: Set up the table view and fetch the users\n    }\n}",
      "output": "import UIKit\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let email: String\n}\n\nclass FetchUsersViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    @IBOutlet weak var tableView: UITableView!\n    \n    var users: [User] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        tableView.delegate = self\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"UserCell\")\n        fetchUsers()\n    }\n    \n    func fetchUsers() {\n        let url = URL(string: \"https://api.example.com/users\")!\n        let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n            guard let data = data, error == nil else {\n                print(\"Error fetching users: \\(error!)\")\n                return\n            }\n            do {\n                let fetchedUsers = try JSONDecoder().decode([User].self, from: data)\n                DispatchQueue.main.async {\n                    self.users = fetchedUsers\n                    self.tableView.reloadData()\n                }\n            } catch {\n                print(\"Error decoding users: \\(error)\")\n            }\n        }\n        task.resume()\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return users.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"UserCell\", for: indexPath)\n        let user = users[indexPath.row]\n        cell.textLabel?.text = user.name\n        return cell\n    }\n}"
    },
    {
      "instruction": " \n\n\nCreate a custom `UITableViewCell` with a `UILabel` and `UIImageView`, and configure it with user data in cellForRowAt indexPath function",
      "input": "import UIKit\n\nclass UserTableViewCell: UITableViewCell {\n    // TODO: Add a UILabel and UIImageView, and create a configuration function\n}",
      "output": "import UIKit\n\nclass UserTableViewCell: UITableViewCell {\n    @IBOutlet weak var nameLabel: UILabel!\n    @IBOutlet weak var avatarImageView: UIImageView!\n    \n    func configure(with user: User) {\n        nameLabel.text = user.name\n        if let url = URL(string: user.avatarURL) {\n            DispatchQueue.global().async {\n                if let data = try? Data(contentsOf: url), let image = UIImage(data: data) {\n                    DispatchQueue.main.async {\n                        self.avatarImageView.image = image\n                    }\n                }\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \n\n\nImplement a custom UICollectionViewFlowLayout for displaying items in a grid",
      "input": "",
      "output": "import UIKit\n\nclass GridCollectionViewFlowLayout: UICollectionViewFlowLayout {\n    let numberOfColumns: Int\n\n    init(numberOfColumns: Int) {\n        self.numberOfColumns = numberOfColumns\n        super.init()\n        self.minimumLineSpacing = 10\n        self.minimumInteritemSpacing = 10\n        self.sectionInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func prepare() {\n        super.prepare()\n        guard let collectionView = collectionView else { return }\n        let availableWidth = collectionView.bounds.width - (sectionInset.left + sectionInset.right + CGFloat(numberOfColumns - 1) * minimumInteritemSpacing)\n        let itemWidth = availableWidth / CGFloat(numberOfColumns)\n        self.itemSize = CGSize(width: itemWidth, height: itemWidth)\n    }\n}"
    },
    {
      "instruction": " \n\n\nImplement a custom UIView that shows a gradient background",
      "input": "",
      "output": "import UIKit\n\n@IBDesignable\nclass GradientView: UIView {\n    @IBInspectable var startColor: UIColor = .white\n    @IBInspectable var endColor: UIColor = .blue\n\n    override class var layerClass: AnyClass {\n        return CAGradientLayer.self\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        updateGradient()\n    }\n\n    private func updateGradient() {\n        let gradientLayer = layer as! CAGradientLayer\n        gradientLayer.colors = [startColor.cgColor, endColor.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 1)\n    }\n}"
    },
    {
      "instruction": " \n\n\nImplement a custom UIPageControl",
      "input": "",
      "output": "import UIKit\n\nclass CustomPageControl: UIPageControl {\n    @IBInspectable var currentPageIndicatorTintColor: UIColor = .white\n    @IBInspectable var pageIndicatorTintColor: UIColor = .gray\n    @IBInspectable var indicatorSize: CGSize = CGSize(width: 8, height: 8)\n\n    override func awakeFromNib() {\n        super.awakeFromNib()\n        setupPageControl()\n    }\n\n    private func setupPageControl() {\n        self.currentPageIndicatorTintColor = currentPageIndicatorTintColor\n        self.pageIndicatorTintColor = pageIndicatorTintColor\n        self.updateIndicatorSize()\n    }\n\n    private func updateIndicatorSize() {\n        let currentImage = createIndicatorImage(with: currentPageIndicatorTintColor)\n        let otherImage = createIndicatorImage(with: pageIndicatorTintColor)\n        setValue(currentImage, forKey: \"_currentPageImage\")\n        setValue(otherImage, forKey: \"_pageImage\")\n    }\n\n    private func createIndicatorImage(with color: UIColor) -> UIImage {\n        let rect = CGRect(origin: .zero, size: indicatorSize)\n        UIGraphicsBeginImageContextWithOptions(rect.size, false, 0)\n        color.setFill()\n        UIBezierPath(roundedRect: rect, cornerRadius: rect.height / 2).fill()\n        let image = UIGraphicsGetImageFromCurrentImageContext()\n        UIGraphicsEndImageContext()\n        return image ?? UIImage()\n    }\n}"
    },
    {
      "instruction": " \n\n\nImplement a custom UIButton with rounded corners and a gradient background",
      "input": "",
      "output": "import UIKit\n\n@IBDesignable\nclass GradientButton: UIButton {\n    @IBInspectable var startColor: UIColor = .white\n    @IBInspectable var endColor: UIColor = .blue\n    @IBInspectable var cornerRadius: CGFloat = 0.0 {\n        didSet {\n            layer.cornerRadius = cornerRadius\n        }\n    }\n\n    private var gradientLayer: CAGradientLayer!\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        if gradientLayer == nil {\n            gradientLayer = CAGradientLayer()\n            gradientLayer.colors = [startColor.cgColor, endColor.cgColor]\n            gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n            gradientLayer.endPoint = CGPoint(x: 1, y: 1)\n            layer.insertSublayer(gradientLayer, at: 0)\n        }\n        gradientLayer.frame = bounds\n        layer.cornerRadius = cornerRadius\n    }\n}"
    },
    {
      "instruction": " \n\n\nImplement a custom UISlider with a custom thumb image and track images",
      "input": "",
      "output": "import UIKit\n\nclass CustomSlider: UISlider {\n    @IBInspectable var thumbImage: UIImage? {\n        didSet {\n            setThumbImage(thumbImage, for: .normal)\n        }\n    }\n\n    @IBInspectable var minimumTrackImage: UIImage? {\n        didSet {\n            setMinimumTrackImage(minimumTrackImage, for: .normal)\n        }\n    }\n\n    @IBInspectable var maximumTrackImage: UIImage? {\n        didSet {\n            setMaximumTrackImage(maximumTrackImage, for: .normal)\n        }\n    }\n}"
    },
    {
      "instruction": " \n\n\nImplement a custom UICollectionViewCell with a UILabel and UIImageView, and configure it with item data",
      "input": "import UIKit\n\nclass ItemCollectionViewCell: UICollectionViewCell {\n    // TODO: Add a UILabel and UIImageView, and create a configuration function\n}",
      "output": "import UIKit\n\nclass ItemCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var titleLabel: UILabel!\n    @IBOutlet weak var imageView: UIImageView!\n    \n    func configure(with item: Item) {\n        titleLabel.text = item.title\n        if let url = URL(string: item.imageURL) {\n            DispatchQueue.global().async {\n                if let data = try? Data(contentsOf: url), let image = UIImage(data: data) {\n                    DispatchQueue.main.async {\n                        self.imageView.image = image\n                    }\n                }\n            }\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that takes a string as input and returns a string with all the vowels removed.",
      "input": "\"Hello, World!\"",
      "output": "func removeVowels(_ input: String) -> String {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    return input.filter { !vowels.contains($0) }\n}\nprint(removeVowels(\"Hello, World!\"))"
    },
    {
      "instruction": " \nWrite a Swift function to find the longest consecutive sequence of integers in an unsorted array of integers. The function should return the length of the longest consecutive sequence.",
      "input": "[100, 4, 200, 1, 3, 2]",
      "output": "func longestConsecutive(_ nums: [Int]) -> Int {\n    let set = Set(nums)\n    var longestStreak = 0\n    \n    for num in set {\n        if !set.contains(num - 1) {\n            var currentNum = num\n            var currentStreak = 1\n            \n            while set.contains(currentNum + 1) {\n                currentNum += 1\n                currentStreak += 1\n            }\n            \n            longestStreak = max(longestStreak, currentStreak)\n        }\n    }\n    \n    return longestStreak\n}\nprint(longestConsecutive([100, 4, 200, 1, 3, 2]))"
    },
    {
      "instruction": " \nWrite a Swift function to find the shortest path in a directed, weighted graph using Dijkstra's algorithm. The function should take a graph represented as an adjacency list, a start node, and an end node as input, and return the shortest path between the two nodes.",
      "input": "graph: [\n    \"A\": [(\"B\", 10), (\"C\", 3)],\n    \"B\": [(\"C\", 1), (\"D\", 2)],\n    \"C\": [(\"B\", 4), (\"D\", 8), (\"E\", 2)],\n    \"D\": [(\"E\", 7)],\n    \"E\": [(\"D\", 9)]\n], start: \"A\", end: \"E\"",
      "output": "import Foundation\n\ntypealias Graph = [String: [(String, Int)]]\n\nfunc dijkstra(graph: Graph, start: String, end: String) -> [String] {\n    var unvisitedNodes = Set(graph.keys)\n    var shortestDistances: [String: Int] = [:]\n    var previousNodes: [String: String] = [:]\n    \n    for node in unvisitedNodes {\n        shortestDistances[node] = Int.max\n    }\n    shortestDistances[start] = 0\n    \n    while !unvisitedNodes.isEmpty {\n        let currentNode = unvisitedNodes.min { a, b in\n            return shortestDistances[a, default: Int.max] < shortestDistances[b, default: Int.max]\n        }\n        guard let current = currentNode else { break }\n        unvisitedNodes.remove(current)\n        \n        for (neighbor, distance) in graph[current, default: []] {\n            let tentativeDistance = shortestDistances[current, default: Int.max] + distance\n            if tentativeDistance < shortestDistances[neighbor, default: Int.max] {\n                shortestDistances[neighbor] = tentativeDistance\n                previousNodes[neighbor] = current\n            }\n        }\n    }\n    \n    var path: [String] = []\n    var currentNode: String? = end\n    while currentNode != nil {\n        path.insert(currentNode!, at: 0)\n        currentNode = previousNodes[currentNode!]\n    }\n    \n    return path\n}\nlet graph: Graph = [\n    \"A\": [(\"B\", 10), (\"C\", 3)],\n    \"B\": [(\"C\", 1), (\"D\", 2)],\n    \"C\": [(\"B\", 4), (\"D\", 8), (\"E\", 2)],\n    \"D\": [(\"E\", 7)],\n    \"E\": [(\"D\", 9)]\n]\nprint(dijkstra(graph: graph, start: \"A\", end: \"E\"))"
    },
    {
      "instruction": " \nWrite a Swift function that takes a string of words separated by spaces and returns a string with the words reversed.",
      "input": "\"This is an example\"",
      "output": "func reverseWords(_ s: String) -> String {\n    return s.split(separator: \" \").reversed().joined(separator: \" \")\n}\nprint(reverseWords(\"This is an example\"))"
    },
    {
      "instruction": " \nWrite a Swift function that takes an array of integers and returns the sum of all the prime numbers in the array.",
      "input": "[2, 5, 11, 17, 4, 8, 10]",
      "output": "func isPrime(_ num: Int) -> Bool {\n    if num <= 1 { return false }\n    if num <="
    },
    {
      "instruction": "Write the code to create a custom UITableViewCell subclass with an UIImageView and UILabel using Auto Layout.",
      "input": "A custom UITableViewCell subclass is created with a UIImageView and UILabel as subviews, constrained using Auto Layout.\nIn the UITableViewCell subclass, the UIImageView and UILabel are created as private lazy variables and given default properties.\nIn the init(style:reuseIdentifier:) initializer, the UIImageView and UILabel are added as subviews to the cell's contentView.\nIn the same initializer, auto layout constraints are activated to position and size the UIImageView and UILabel within the cell, taking into account the cell's margins.",
      "output": "class CustomTableViewCell: UITableViewCell {\n    private lazy var customImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n    \n    private lazy var customLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.numberOfLines = 0\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        contentView.addSubview(customImageView)\n        contentView.addSubview(customLabel)\n        \n        NSLayoutConstraint.activate([\n            customImageView.leadingAnchor.constraint(equalTo: contentView.layoutMarginsGuide.leadingAnchor),\n            customImageView.topAnchor.constraint(equalTo: contentView.layoutMarginsGuide.topAnchor),\n            customImageView.bottomAnchor.constraint(equalTo: contentView.layoutMarginsGuide.bottomAnchor),\n            customImageView.widthAnchor.constraint(equalTo: customImageView.heightAnchor),\n            \n            customLabel.leadingAnchor.constraint(equalTo: customImageView.trailingAnchor, constant: 8),\n            customLabel.trailingAnchor.constraint(equalTo: contentView.layoutMarginsGuide.trailingAnchor),\n            customLabel.topAnchor.constraint(equalTo: contentView.layoutMarginsGuide.topAnchor),\n            customLabel.bottomAnchor.constraint(equalTo: contentView.layoutMarginsGuide.bottomAnchor),\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \n\n\nWrite a Swift function to present an UIAlertController with a single UIAlertAction for dismissal.",
      "input": "A UIViewController extension containing a function that presents an UIAlertController with a specified title, message, and UIAlertAction.\nUIAlertController is initialized with the given title and message, and preferredStyle is set to .alert.\nUIAlertAction is created with a title of \"OK\" and a UIAlertAction.Style.default style, dismissing the alert when tapped.\nThe UIAlertAction is added to the UIAlertController, and the UIViewController presents the UIAlertController.",
      "output": "extension UIViewController {\n    func presentAlert(title: String, message: String) {\n        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n        let okAction = UIAlertAction(title: \"OK\", style: .default, handler: { _ in\n            alertController.dismiss(animated: true, completion: nil)\n        })\n        alertController.addAction(okAction)\n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that accepts an array of strings and returns a dictionary with the count of each character in all the strings combined.",
      "input": "",
      "output": "func characterCount(in strings: [String]) -> [Character: Int] {\n    var charCount: [Character: Int] = [:]\n\n    for string in strings {\n        for char in string {\n            if let count = charCount[char] {\n                charCount[char] = count + 1\n            } else {\n                charCount[char] = 1\n            }\n        }\n    }\n\n    return charCount\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a string and returns true if it is a palindrome, ignoring spaces and capitalization.",
      "input": "",
      "output": "func isPalindrome(_ input: String) -> Bool {\n    let sanitizedInput = input.lowercased().filter { $0 != \" \" }\n    return sanitizedInput == String(sanitizedInput.reversed())\n}"
    },
    {
      "instruction": " \nWrite a Swift function to filter out even numbers from an array of integers and return the filtered array.",
      "input": "",
      "output": "func filterEvenNumbers(from array: [Int]) -> [Int] {\n    return array.filter { $0 % 2 != 0 }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a closure as an argument and executes it after a given delay in seconds.",
      "input": "",
      "output": "func executeAfter(delay: TimeInterval, closure: @escaping () -> Void) {\n    DispatchQueue.main.asyncAfter(deadline: .now() + delay) {\n        closure()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that calculates the factorial of a given integer using recursion.",
      "input": "",
      "output": "func factorial(_ number: Int) -> Int {\n    if number == 0 {\n        return 1\n    } else {\n        return number * factorial(number - 1)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that accepts a string and returns the longest consecutive sequence of repeating characters in the string.",
      "input": "",
      "output": "func longestRepeatingSequence(_ input: String) -> String {\n    var maxLength = 0\n    var currentLength = 0\n    var maxChar: Character?\n    var prevChar: Character?\n\n    for char in input {\n        if char == prevChar {\n            currentLength += 1\n        } else {\n            currentLength = 1\n            prevChar = char\n        }\n\n        if currentLength > maxLength {\n            maxLength = currentLength\n            maxChar = char\n        }\n    }\n\n    return String(repeating: maxChar ?? \" \", count: maxLength)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that accepts an array of integers and returns the largest sum of a contiguous subarray within the array.",
      "input": "",
      "output": "func largestContiguousSum(_ array: [Int]) -> Int {\n    var maxSum = array[0]\n    var currentSum = array[0]\n\n    for i in 1..<array.count {\n        currentSum = max(array[i], currentSum + array[i])\n        maxSum = max(maxSum, currentSum)\n    }\n\n    return maxSum\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a string and a dictionary of letter mappings, and returns the string with each character replaced according to the dictionary.",
      "input": "",
      "output": "func replaceCharacters(in string: String, with mappings: [Character: Character]) -> String {\n    return string.map { mappings[$0] ?? $0 }.joined()\n}"
    },
    {
      "instruction": "Implement a Swift function `loadData` that downloads JSON data from a URL, decodes it into an array of custom `Person` objects, and returns it asynchronously using a completion handler.",
      "input": "struct Person: Codable {\n    let id: Int\n    let name: String\n    let email: String\n    let age: Int\n}",
      "output": "import Foundation\n\nfunc loadData(completion: @escaping ([Person]?) -> Void) {\n    let urlString = \"https://example.com/api/people\"\n    guard let url = URL(string: urlString) else {\n        completion(nil)\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            completion(nil)\n            return\n        }\n        \n        do {\n            let decoder = JSONDecoder()\n            let people = try decoder.decode([Person].self, from: data)\n            completion(people)\n        } catch {\n            completion(nil)\n        }\n    }\n    \n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function called `filterContacts` that accepts an array of `Contact` objects and a predicate closure. The function should return a filtered array of contacts that satisfy the predicate.",
      "input": "struct Contact {\n    let name: String\n    let phoneNumber: String\n}",
      "output": "func filterContacts(contacts: [Contact], predicate: (Contact) -> Bool) -> [Contact] {\n    var filteredContacts: [Contact] = []\n    \n    for contact in contacts {\n        if predicate(contact) {\n            filteredContacts.append(contact)\n        }\n    }\n    \n    return filteredContacts\n}"
    },
    {
      "instruction": " \nCreate a Swift function called `encrypt` that takes a string as input, applies a simple Caesar cipher with a given shift value, and returns the encrypted string.",
      "input": "",
      "output": "func encrypt(input: String, shift: Int) -> String {\n    let upperCaseA = UnicodeScalar(\"A\").value\n    let upperCaseZ = UnicodeScalar(\"Z\").value\n    let lowerCaseA = UnicodeScalar(\"a\").value\n    let lowerCaseZ = UnicodeScalar(\"z\").value\n\n    let shiftValue = UInt32(shift % 26)\n\n    var encryptedString = \"\"\n\n    for char in input.unicodeScalars {\n        var encryptedValue = char.value\n\n        if char.value >= upperCaseA && char.value <= upperCaseZ {\n            encryptedValue = ((char.value - upperCaseA + shiftValue) % 26) + upperCaseA\n        } else if char.value >= lowerCaseA && char.value <= lowerCaseZ {\n            encryptedValue = ((char.value - lowerCaseA + shiftValue) % 26) + lowerCaseA\n        }\n\n        encryptedString.append(String(UnicodeScalar(encryptedValue)!))\n    }\n\n    return encryptedString\n}"
    },
    {
      "instruction": "Write a function in Swift language that filters duplicate elements from an array and returns a new array with unique elements only.",
      "input": "var animals = [\"dog\", \"cat\", \"lion\", \"tiger\", \"dog\", \"lion\"]",
      "output": "func removeDuplicates(from array: [String]) -> [String] {\n    var uniqueElements: [String] = []\n    \n    for element in array {\n        if !uniqueElements.contains(element) {\n            uniqueElements.append(element)\n        }\n    }\n    \n    return uniqueElements\n}\n\nlet animals = [\"dog\", \"cat\", \"lion\", \"tiger\", \"dog\", \"lion\"]\nlet uniqueAnimals = removeDuplicates(from: animals)\nprint(uniqueAnimals)"
    },
    {
      "instruction": " \nWrite a function in Swift language that takes a string and returns a dictionary with the count of each character in the string.",
      "input": "let inputString = \"abracadabra\"",
      "output": "func countCharacters(in string: String) -> [Character: Int] {\n    var characterCount: [Character: Int] = [:]\n    \n    for character in string {\n        if let count = characterCount[character] {\n            characterCount[character] = count + 1\n        } else {\n            characterCount[character] = 1\n        }\n    }\n    \n    return characterCount\n}\n\nlet inputString = \"abracadabra\"\nlet characterCounts = countCharacters(in: inputString)\nprint(characterCounts)"
    },
    {
      "instruction": " \nImplement a custom URLSessionDataTask for unit testing purposes.",
      "input": "",
      "output": "class MockURLSessionDataTask: URLSessionDataTask {\n    private let data: Data?\n    private let urlResponse: URLResponse?\n    private let error: Error?\n    \n    var completionHandler: ((Data?, URLResponse?, Error?) -> Void)?\n    \n    init(data: Data?, urlResponse: URLResponse?, error: Error?) {\n        self.data = data\n        self.urlResponse = urlResponse\n        self.error = error\n    }\n    \n    override func resume() {\n        DispatchQueue.main.async {\n            self.completionHandler?(self.data, self.urlResponse, self.error)\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a function that takes a string and returns true if it is a palindrome, otherwise returns false.",
      "input": "let inputString = \"racecar\"",
      "output": "func isPalindrome(_ string: String) -> Bool {\n    let characters = Array(string)\n    let reversedCharacters = Array(string.reversed())\n    \n    return characters == reversedCharacters\n}\n\nlet inputString = \"racecar\"\nlet result = isPalindrome(inputString)\nprint(result)"
    },
    {
      "instruction": " \nWrite a function that returns the factorial of a given non-negative integer n.",
      "input": "let n = 5",
      "output": "func factorial(_ n: Int) -> Int {\n    if n <= 1 {\n        return 1\n    } else {\n        return n * factorial(n - 1)\n    }\n}\n\nlet n = 5\nlet result = factorial(n)\nprint(result)"
    },
    {
      "instruction": " \nWrite a function that takes an array of integers and returns the sum of all even numbers in the array.",
      "input": "let numbers = [1, 2, 3, 4, 5, 6]",
      "output": "func sumOfEvenNumbers(in array: [Int]) -> Int {\n    return array.filter { $0 % 2 == 0 }.reduce(0, +)\n}\n\nlet numbers = [1, 2, 3, 4, 5, 6]\nlet result = sumOfEvenNumbers(in: numbers)\nprint(result)"
    },
    {
      "instruction": " \nWrite a function that takes two arrays of integers and returns a new array containing the elements of both input arrays sorted in ascending order.",
      "input": "let array1 = [3, 1, 4]\nlet array2 = [5, 2, 6]",
      "output": "func mergeAndSort(_ array1: [Int], _ array2: [Int]) -> [Int] {\n    return (array1 + array2).sorted()\n}\n\nlet array1 = [3, 1, 4]\nlet array2 = [5, 2, 6]\nlet result = mergeAndSort(array1, array2)\nprint(result)"
    },
    {
      "instruction": " \nWrite a function that takes a dictionary of integers as keys and strings as values and returns a new dictionary with keys and values swapped.",
      "input": "let inputDictionary = [1: \"one\", 2: \"two\", 3: \"three\"]",
      "output": "func swapKeysAndValues(_ dictionary: [Int: String]) -> [String: Int] {\n    var swappedDictionary: [String: Int] = [:]\n    \n    for (key, value) in dictionary {\n        swappedDictionary[value] = key\n    }\n    \n    return swappedDictionary\n}\n\nlet inputDictionary = [1: \"one\", 2: \"two\", 3: \"three\"]\nlet result = swapKeysAndValues(inputDictionary)\nprint(result)"
    },
    {
      "instruction": "Write a Swift function that queries a JSON API and decodes the response.",
      "input": "",
      "output": "import Foundation\nimport UIKit\n\nstruct ApiResponse: Codable {\n    let title: String\n    let description: String\n}\n\nclass ApiCallViewController: UIViewController {\n    \n    let apiUrl = \"https://api.example.com/data\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        fetchData()\n    }\n    \n    func fetchData() {\n        guard let url = URL(string: apiUrl) else {\n            print(\"Invalid URL\")\n            return\n        }\n        \n        let task = URLSession.shared.dataTask(with: url) { data, response, error in\n            if let error = error {\n                print(\"Error: \\(error.localizedDescription)\")\n                return\n            }\n            \n            guard let data = data else {\n                print(\"No data received\")\n                return\n            }\n            \n            do {\n                let decoder = JSONDecoder()\n                let apiResponse = try decoder.decode(ApiResponse.self, from: data)\n                print(\"Title: \\(apiResponse.title)\")\n                print(\"Description: \\(apiResponse.description)\")\n            } catch {\n                print(\"Error decoding JSON: \\(error.localizedDescription)\")\n            }\n        }\n        \n        task.resume()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UIView subclass with a rounded corner and shadow effect.",
      "input": "",
      "output": "import UIKit\n\nclass RoundedShadowView: UIView {\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup()\n    }\n    \n    private func setup() {\n        backgroundColor = .white\n        layer.cornerRadius = 10\n        layer.shadowColor = UIColor.black.cgColor\n        layer.shadowOffset = CGSize(width: 0, height: 2)\n        layer.shadowRadius = 4\n        layer.shadowOpacity = 0.25\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that implements a UITableView with a custom UITableViewCell.",
      "input": "",
      "output": "import UIKit\n\nstruct CustomCellData {\n    let title: String\n    let subtitle: String\n}\n\nclass CustomTableViewCell: UITableViewCell {\n    static let reuseIdentifier = \"CustomTableViewCell\"\n    \n    private lazy var titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    private lazy var subtitleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        contentView.addSubview(titleLabel)\n        contentView.addSubview(subtitleLabel)\n        \n        NSLayoutConstraint.activate([\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            titleLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),\n            \n            subtitleLabel.leadingAnchor.constraint(equalTo: titleLabel.leadingAnchor),\n            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 4),\n            subtitleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8),\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    func configure(with data: CustomCellData) {\n        titleLabel.text = data.title\n        subtitleLabel.text = data.subtitle\n    }\n}\n\nclass CustomTableViewController: UITableViewController {\n    \n    private let data = [\n        CustomCellData(title: \"Title 1\", subtitle: \"Subtitle 1\"),\n        CustomCellData(title: \"Title 2\", subtitle: \"Subtitle 2\"),\n        // ... more data ...\n    ]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: CustomTableViewCell.reuseIdentifier)\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.reuseIdentifier, for: indexPath) as! CustomTableViewCell\n        cell.configure(with: data[indexPath.row])\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that implements a UICollectionView with a custom UICollectionViewCell.",
      "input": "",
      "output": "import UIKit\n\nstruct CustomCollectionCellData {\n    let title: String\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n    \n    private lazy var titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(titleLabel)\n        \n        NSLayoutConstraint.activate([\n            titleLabel.centerXAnchor.constraint(equalTo: contentView.centerXAnchor),\n            titleLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n               ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    func configure(with data: CustomCollectionCellData) {\n        titleLabel.text = data.title\n    }\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n    \n    private let data = [\n        CustomCollectionCellData(title: \"Item 1\"),\n        CustomCollectionCellData(title: \"Item 2\"),\n        // ... more data ...\n    ]\n    \n    init() {\n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .vertical\n        layout.minimumLineSpacing = 16\n        layout.minimumInteritemSpacing = 16\n        super.init(collectionViewLayout: layout)\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n        collectionView.backgroundColor = .white\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return data.count\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        cell.configure(with: data[indexPath.item])\n        return cell\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: (collectionView.bounds.width - 32) / 2, height: 150)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that performs a Core Data fetch request and prints the results.",
      "input": "",
      "output": "import UIKit\nimport CoreData\n\nclass CoreDataFetchViewController: UIViewController {\n\n    var context: NSManagedObjectContext!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext\n        fetchData()\n    }\n\n    func fetchData() {\n        let fetchRequest = NSFetchRequest<NSManagedObject>(entityName: \"Person\")\n        \n        do {\n            let results = try context.fetch(fetchRequest)\n            for result in results {\n                if let name = result.value(forKey: \"name\") as? String, let age = result.value(forKey: \"age\") as? Int {\n                    print(\"Name: \\(name), Age: \\(age)\")\n                }\n            }\n        } catch let error as NSError {\n            print(\"Could not fetch. \\(error), \\(error.userInfo)\")\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that saves an image from a URL to the device's photo library.",
      "input": "",
      "output": "import UIKit\n\nclass SaveImageViewController: UIViewController {\n\n    let imageUrl = \"https://example.com/image.jpg\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        saveImageToLibrary(from: imageUrl)\n    }\n\n    func saveImageToLibrary(from url: String) {\n        guard let imageUrl = URL(string: url) else {\n            print(\"Invalid URL\")\n            return\n        }\n        \n        URLSession.shared.dataTask(with: imageUrl) { (data, response, error) in\n            if let error = error {\n                print(\"Error downloading image: \\(error.localizedDescription)\")\n                return\n            }\n            \n            guard let data = data, let image = UIImage(data: data) else {\n                print(\"Error converting data to UIImage\")\n                return\n            }\n            \n            DispatchQueue.main.async {\n                UIImageWriteToSavedPhotosAlbum(image, self, #selector(self.image(_:didFinishSavingWithError:contextInfo:)), nil)\n            }\n        }.resume()\n    }\n    \n    @objc func image(_ image: UIImage, didFinishSavingWithError error: Error?, contextInfo: UnsafeRawPointer) {\n        if let error = error {\n            print(\"Error saving image: \\(error.localizedDescription)\")\n        } else {\n            print(\"Image saved successfully\")\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that plays an audio file from a URL using AVFoundation.",
      "input": "",
      "output": "import UIKit\nimport AVFoundation\n\nclass AudioPlayerViewController: UIViewController {\n\n    let audioUrl = \"https://example.com/audio.mp3\"\n    var audioPlayer: AVAudioPlayer?\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        playAudio(from: audioUrl)\n    }\n\n    func playAudio(from url: String) {\n        guard let audioUrl = URL(string: url) else {\n            print(\"Invalid URL\")\n            return\n        }\n        \n        URLSession.shared.dataTask(with: audioUrl) { (data, response, error) in\n            if let error = error {\n                print(\"Error downloading audio: \\(error.localizedDescription)\")\n                return\n            }\n            \n           "
    },
    {
      "instruction": "Write a Swift function to download an image from a URL and set it as the image of a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let data = data, let image = UIImage(data: data) {\n            DispatchQueue.main.async {\n                imageView.image = image\n            }\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function to fetch JSON data from a given URL and decode it into a given Codable model.",
      "input": "",
      "output": "import Foundation\n\nfunc fetchJSONData<Model: Codable>(from url: URL, completion: @escaping (Result<Model, Error>) -> Void) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        if let data = data {\n            do {\n                let decodedData = try JSONDecoder().decode(Model.self, from: data)\n                completion(.success(decodedData))\n            } catch {\n                completion(.failure(error))\n            }\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function to filter an array of integers and return a new array containing only the even numbers.",
      "input": "",
      "output": "func filterEvenNumbers(from array: [Int]) -> [Int] {\n    return array.filter { $0 % 2 == 0 }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a target and action to a UIButton.",
      "input": "",
      "output": "func addTargetToButton(_ button: UIButton, target: Any?, action: Selector, for event: UIControl.Event) {\n    button.addTarget(target, action: action, for: event)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that converts a string formatted date to a Date object using a specified date format.",
      "input": "",
      "output": "import Foundation\n\nfunc convertStringToDate(_ dateString: String, dateFormat: String) -> Date? {\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = dateFormat\n    return dateFormatter.date(from: dateString)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that calculates the factorial of a given integer.",
      "input": "",
      "output": "func factorial(_ number: Int) -> Int {\n    return (1...number).reduce(1, *)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that returns a tuple containing the minimum and maximum values of an array of integers.",
      "input": "",
      "output": "func minMax(of array: [Int]) -> (min: Int, max: Int)? {\n    guard !array.isEmpty else { return nil }\n    return array.reduce((min: array[0], max: array[0])) { (result, value) -> (min: Int, max: Int) in\n        return (min: min(result.min, value), max: max(result.max, value))\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a closure as an argument and executes it after a specified delay.",
      "input": "",
      "output": "import Dispatch\n\nfunc executeAfterDelay(_ delay: TimeInterval, closure: @escaping () -> Void) {\n    DispatchQueue.main.asyncAfter(deadline: .now() + delay) {\n        closure()\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that adds a UITextField with a placeholder text to a UIView",
      "input": "",
      "output": "func addTextField(placeholder: String, to view: UIView) {\n    let textField = UITextField()\n    textField.translatesAutoresizingMaskIntoConstraints = false\n    textField.placeholder = placeholder\n    view.addSubview(textField)\n\n    NSLayoutConstraint.activate([\n        textField.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),\n        textField.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),\n        textField.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n    ])\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a UIStackView with an array of UIButton objects as arranged subviews",
      "input": "",
      "output": "func createStackViewWithButtons(buttons: [UIButton]) -> UIStackView {\n    let stackView = UIStackView(arrangedSubviews: buttons)\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    stackView.axis = .horizontal\n    stackView.spacing = 10\n    stackView.distribution = .fillEqually\n    return stackView\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a UIImageView with a rounded corner radius",
      "input": "",
      "output": "func addRoundedImageView(image: UIImage?, cornerRadius: CGFloat, to view: UIView) {\n    let imageView = UIImageView(image: image)\n    imageView.translatesAutoresizingMaskIntoConstraints = false\n    imageView.layer.cornerRadius = cornerRadius\n    imageView.clipsToBounds = true\n    view.addSubview(imageView)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UIAlertController with a UIAlertAction to dismiss itself",
      "input": "",
      "output": "func createAlertController(title: String, message: String) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let dismissAction = UIAlertAction(title: \"OK\", style: .default) { _ in\n        alertController.dismiss(animated: true, completion: nil)\n    }\n    alertController.addAction(dismissAction)\n    return alertController\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a UIActivityIndicatorView to a UIView and starts animating it",
      "input": "",
      "output": "func addActivityIndicator(to view: UIView) {\n    let activityIndicator = UIActivityIndicatorView(style: .medium)\n    activityIndicator.translatesAutoresizingMaskIntoConstraints = false\n    view.addSubview(activityIndicator)\n\n    NSLayoutConstraint.activate([\n        activityIndicator.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n        activityIndicator.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n    ])\n\n    activityIndicator.startAnimating()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that asynchronously downloads an image from a URL and sets it as the image of a UIImageView",
      "input": "",
      "output": "func downloadImage(from url: URL, imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            print(\"Error downloading image: \\(error?.localizedDescription ?? \"Unknown error\")\")\n            return\n        }\n\n        DispatchQueue.main.async {\n            let image = UIImage(data: data)\n            imageView.image = image\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UIScrollView with a UIPageControl to display an array of UIViews",
      "input": "",
      "output": "func createPagedScrollView(with views: [UIView]) -> (UIScrollView, UIPageControl) {\n    let scrollView = UIScrollView()\n    scrollView.translatesAutoresizingMaskIntoConstraints = false\n    scrollView.isPagingEnabled = true\n    scrollView.showsHorizontalScrollIndicator = false\n\n    let container = UIStackView(arrangedSubviews: views)\n    container.translatesAutoresizingMaskIntoConstraints = false\n    container.axis = .horizontal\n    container.spacing = 0\n\n    scrollView.addSubview(container)\n\n    NSLayoutConstraint.activate([\n        container.topAnchor.constraint(equalTo: scrollView.topAnchor),\n        container.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),\n        container.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),\n        container.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),\n        container.heightAnchor.constraint(equalTo: scrollView.heightAnchor)\n    ])\n\n    let pageControl = UIPageControl()\n    pageControl.translatesAutoresizingMaskIntoConstraints = false\n    pageControl.numberOfPages = views.count\n\n    return (scrollView, pageControl)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that presents a UIImagePickerController in a UIViewController to choose an image from the photo library",
      "input": "",
      "output": "func presentImagePickerController(in viewController: UIViewController, delegate: (UIImagePickerControllerDelegate & UINavigationControllerDelegate)?) {\n    guard UIImagePickerController.isSourceTypeAvailable(.photoLibrary) else {\n        print(\"Photo library is not available\")\n        return\n    }\n\n    let imagePickerController = UIImagePickerController()\n    imagePickerController.sourceType = .photoLibrary\n    imagePickerController.delegate = delegate\n\n    viewController.present(imagePickerController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": "Write a Swift class that represents a simple bank account with a balance, a deposit method, and a withdrawal method.",
      "input": "A class named \"BankAccount\" should be created with the following properties and methods:\n- A private property named \"balance\" to store the current account balance\n- An initializer that takes an initial balance as a parameter and sets the private balance property\n- A deposit method that takes an amount and adds it to the balance\n- A withdrawal method that takes an amount and subtracts it from the balance if there are sufficient funds, otherwise print an error message\n- A public computed property named \"currentBalance\" that returns the current balance",
      "output": "class BankAccount {\n    private var balance: Double\n\n    init(initialBalance: Double) {\n        self.balance = initialBalance\n    }\n\n    func deposit(amount: Double) {\n        balance += amount\n    }\n\n    func withdraw(amount: Double) {\n        if amount <= balance {\n            balance -= amount\n        } else {\n            print(\"Error: Insufficient funds\")\n        }\n    }\n\n    var currentBalance: Double {\n        return balance\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a string and returns a dictionary with the count of each character in the string.",
      "input": "",
      "output": "func characterCounts(in string: String) -> [Character: Int] {\n    var counts: [Character: Int] = [:]\n    for char in string {\n        counts[char, default: 0] += 1\n    }\n    return counts\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes two arrays of integers and returns an array containing their intersection.",
      "input": "",
      "output": "func arrayIntersection(_ array1: [Int], _ array2: [Int]) -> [Int] {\n    let set1 = Set(array1)\n    let set2 = Set(array2)\n    return Array(set1.intersection(set2))\n}"
    },
    {
      "instruction": " \nWrite a Swift function that receives a positive integer and returns the sum of its digits.",
      "input": "",
      "output": "func sumOfDigits(_ number: Int) -> Int {\n    return String(number).reduce(0) { $0 + Int(String($1))! }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that receives an array of strings and returns a dictionary with the count of words with the same length.",
      "input": "",
      "output": "func wordLengthCounts(in words: [String]) -> [Int: Int] {\n    var counts: [Int: Int] = [:]\n    for word in words {\n        let length = word.count\n        counts[length, default: 0] += 1\n    }\n    return counts\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a string and returns the string with all vowels removed.",
      "input": "",
      "output": "func removeVowels(from string: String) -> String {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    return string.filter { !vowels.contains($0) }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a string and returns a string with the first letter of each word capitalized.",
      "input": "",
      "output": "func capitalizeFirstLetters(in string: String) -> String {\n    return string.components(separatedBy: \" \").map { $0.capitalized }.joined(separator: \" \")\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes an array of integers and returns the array with all even numbers removed.",
      "input": "",
      "output": "func removeEvenNumbers(from array: [Int]) -> [Int] {\n    return array.filter { $0 % 2 != 0 }\n}"
    },
    {
      "instruction": "Write a Swift function to present a UIAlertController with a title, message, and OK button in a UIViewController.",
      "input": "",
      "output": "func showAlert(title: String, message: String, viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let okAction = UIAlertAction(title: \"OK\", style: .default, handler: nil)\n    alertController.addAction(okAction)\n    viewController.present(alertController, animated: true, completion: nil)\n}\n\n// Usage:\n// showAlert(title: \"Error\", message: \"An error occurred\", viewController: self)"
    },
    {
      "instruction": " \nWrite a Swift function to fetch data from a given URL and decode it as a Codable model.",
      "input": "",
      "output": "import Foundation\n\nstruct ExampleModel: Codable {\n    let id: Int\n    let name: String\n}\n\nfunc fetchData(from url: URL, completion: @escaping (Result<ExampleModel, Error>) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let decoder = JSONDecoder()\n            let model = try decoder.decode(ExampleModel.self, from: data)\n            completion(.success(model))\n        } catch {\n            completion(.failure(error))\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIButton with a specific background color, corner radius, and title.",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomButton(title: String, backgroundColor: UIColor, cornerRadius: CGFloat) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.backgroundColor = backgroundColor\n    button.layer.cornerRadius = cornerRadius\n    return button\n}\n\n// Usage:\n// let customButton = createCustomButton(title: \"Click me\", backgroundColor: .blue, cornerRadius: 10)"
    },
    {
      "instruction": " \nWrite a Swift function to validate an email address using a regular expression.",
      "input": "",
      "output": "import Foundation\n\nfunc isValidEmail(_ email: String) -> Bool {\n    let emailPattern = \"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,64}\"\n    let emailPredicate = NSPredicate(format: \"SELF MATCHES %@\", emailPattern)\n    return emailPredicate.evaluate(with: email)\n}\n\n// Usage:\n// print(isValidEmail(\"test@example.com\")) // true"
    },
    {
      "instruction": " \nWrite a Swift function to save an image to the user's photo library.",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToPhotoLibrary(image: UIImage, completion: @escaping (Result<Void, Error>) -> Void) {\n    PHPhotoLibrary.requestAuthorization { status in\n        if status == .authorized {\n            PHPhotoLibrary.shared().performChanges({\n                PHAssetChangeRequest.creationRequestForAsset(from: image)\n            }, completionHandler: { success, error in\n                if success {\n                    completion(.success(()))\n                } else if let error = error {\n                    completion(.failure(error))\n                }\n            })\n        } else {\n            completion(.failure(NSError(domain: \"Not authorized\", code: -1, userInfo: nil)))\n        }\n    }\n}\n\n// Usage:\n// saveImageToPhotoLibrary(image: UIImage(named: \"exampleImage\")!, completion: { result in\n//     switch result {\n//     case .success():\n//         print(\"Image saved successfully\")\n//     case .failure(let error):\n//         print(\"Error saving image: \\(error)\")\n//     }\n// })"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UICollectionViewCell with a UIImageView and a UILabel.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let imageView = UIImageView()\n    let label = UILabel()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupImageView()\n        setupLabel()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    func setupImageView() {\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        contentView.addSubview(imageView)\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.heightAnchor.constraint(equalTo: contentView.heightAnchor, multiplier: 0.75)\n        ])\n    }\n    \n    func setupLabel() {\n        label.textAlignment = .center\n        label.translatesAutoresizingMaskIntoConstraints = false\n        contentView.addSubview(label)\n        NSLayoutConstraint.activate([\n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            label.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n}\n\n// Usage:\n// Register the cell in your UICollectionView\n// collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCollectionViewCell\")"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIViewController with a UITableView that auto resizes its cells based on the cell content.",
      "input": "",
      "output": "import UIKit\n\nclass AutoResizingTableViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    let tableView = UITableView()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        setupTableView()\n    }\n\n    func setupTableView() {\n        tableView.dataSource = self\n        tableView.delegate = self\n        tableView.rowHeight = UITableView.automaticDimension\n        tableView.estimatedRowHeight = 100\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"Cell\")\n        tableView.translatesAutoresizingMaskIntoConstraints = false\n\n        view.addSubview(tableView)\n        NSLayoutConstraint.activate([\n            tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            tableView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            tableView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),\n            tableView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)\n        ])\n    }\n\n    // UITableViewDataSource methods\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 10 // Return the number of rows you want\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\n        cell.textLabel?.text = \"Example text\" // Set your cell's text\n        cell.textLabel?.numberOfLines = 0\n        return cell\n    }\n}\n\n// Usage:\n// Present the AutoResizingTableViewController from another viewController\n// let viewController = AutoResizingTableViewController()\n// present(viewController, animated: true, completion: nil)"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIView with a gradient background.",
      "input": "",
      "output": "import UIKit\n\nclass GradientView: UIView {\n    var startColor: UIColor\n    var endColor: UIColor\n\n    init(startColor: UIColor, endColor: UIColor, frame: CGRect = .zero) {\n        self.startColor = startColor\n        self.endColor = endColor\n        super.init(frame: frame)\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        let gradientLayer = CAGradientLayer()\n        gradientLayer.colors = [startColor.cgColor, endColor.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 1)\n        gradientLayer.frame = bounds\n        layer.insertSublayer(gradientLayer, at: 0)\n    }\n}\n\n// Usage:\n// let gradientView = GradientView(startColor: .red, endColor: .blue)\n// gradientView.frame = CGRect(x: 0, y: 0, width: 100, height: 100)\n// view.addSubview(gradientView)"
    },
    {
      "instruction": "Create a Swift function that adds a custom UICollectionViewCell to a UICollectionView and sets up its delegate and dataSource",
      "input": "",
      "output": "func setupCollectionView() -> UICollectionView {\n    let layout = UICollectionViewFlowLayout()\n    layout.scrollDirection = .vertical\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    collectionView.delegate = self\n    collectionView.dataSource = self\n    collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n    return collectionView\n}\n\n// Make sure to conform to UICollectionViewDelegateFlowLayout, UICollectionViewDelegate & UICollectionViewDataSource\n// extension ViewController: UICollectionViewDelegateFlowLayout, UICollectionViewDelegate, UICollectionViewDataSource {\n//     func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int { return dataSource.count }\n//     func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n//         let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n//         cell.configure(with: dataSource[indexPath.item])\n//         return cell\n//     }\n// }"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIAlertController with multiple actions",
      "input": "",
      "output": "func showAlertController() {\n    let alertController = UIAlertController(title: \"Choose Option\", message: \"Please select an option below\", preferredStyle: .actionSheet)\n\n    let optionOneAction = UIAlertAction(title: \"Option 1\", style: .default) { _ in\n        print(\"Option 1 selected\")\n    }\n    let optionTwoAction = UIAlertAction(title: \"Option 2\", style: .default) { _ in\n        print(\"Option 2 selected\")\n    }\n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel)\n\n    alertController.addAction(optionOneAction)\n    alertController.addAction(optionTwoAction)\n    alertController.addAction(cancelAction)\n\n    present(alertController, animated: true)\n}\n\n// Call the showAlertController function when needed\n// showAlertController()"
    },
    {
      "instruction": " \nCreate a Swift function to initialize a custom UIButton with a closure action",
      "input": "",
      "output": "func createCustomButton(title: String, action: @escaping () -> Void) -> UIButton {\n    let customButton = UIButton(type: .system)\n    customButton.setTitle(title, for: .normal)\n    customButton.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n    objc_setAssociatedObject(customButton, &AssociatedKeys.buttonAction, action, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)\n    return customButton\n}\n\nprivate struct AssociatedKeys {\n    static var buttonAction = \"buttonAction\"\n}\n\n@objc private func buttonTapped(sender: UIButton) {\n    if let action = objc_getAssociatedObject(sender, &AssociatedKeys.buttonAction) as? () -> Void {\n        action()\n    }\n}\n\n// Usage\n// let customButton = createCustomButton(title: \"Tap me!\", action: {\n//     print(\"Button tapped!\")\n// })"
    },
    {
      "instruction": " \nWrite a Swift function to request user's location using CLLocationManager",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    private let locationManager = CLLocationManager()\n\n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n    }\n\n    func requestLocationAuthorization() {\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n        if status == .authorizedWhenInUse {\n            locationManager.startUpdatingLocation()\n        } else {\n            locationManager.stopUpdatingLocation()\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            print(\"User's location: \\(location)\")\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Location error: \\(error)\")\n    }\n}\n\n// Usage\n// let locationManager = LocationManager()\n// locationManager.requestLocationAuthorization()"
    },
    {
      "instruction": " \nCreate a Swift function that downloads an image from a URL and sets it to a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil else {\n            completion(nil)\n            return\n        }\n        DispatchQueue.main.async {\n            completion(UIImage(data: data))\n        }\n    }.resume()\n}\n\n// Usage\n// let imageView = UIImageView()\n// let imageURL = URL(string: \"https://example.com/image.jpg\")!\n// downloadImage(from: imageURL) { image in\n//     imageView.image = image\n// }"
    },
    {
      "instruction": " \nCreate a Swift function that initializes a UIStackView with an array of UIViews and custom alignment and distribution",
      "input": "",
      "output": "func createStackView(views: [UIView], axis: NSLayoutConstraint.Axis, alignment: UIStackView.Alignment, distribution: UIStackView.Distribution) -> UIStackView {\n    let stackView = UIStackView(arrangedSubviews: views)\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    stackView.axis = axis\n    stackView.alignment = alignment\n    stackView.distribution = distribution\n    return stackView\n}\n\n// Usage\n// let view1 = UIView()\n// let view2 = UIView()\n// let view3 = UIView()\n// let stackView = createStackView(views: [view1, view2, view3], axis: .vertical, alignment: .fill, distribution: .equalSpacing)"
    },
    {
      "instruction": " \nCreate a Swift function to play audio from a remote URL using AVPlayer",
      "input": "",
      "output": "import AVFoundation\n\nclass AudioPlayer {\n    private var player: AVPlayer?\n\n    func playAudio(from url: URL) {\n        let playerItem = AVPlayerItem(url: url)\n        player = AVPlayer(playerItem: playerItem)\n        player?.play()\n    }\n\n    func pauseAudio() {\n        player?.pause()\n    }\n}\n\n// Usage\n// let audioPlayer = AudioPlayer()\n// let audioURL = URL(string: \"https://example.com/audio.mp3\")!\n// audioPlayer.playAudio(from: audioURL)"
    },
    {
      "instruction": " \nWrite a Swift function that initializes a UIScrollView and adds a UIView as its content view",
      "input": "",
      "output": "func createScrollView(with contentView: UIView) -> UIScrollView {\n    let scrollView = UIScrollView()\n    scrollView.translatesAutoresizingMaskIntoConstraints = false\n    contentView.translatesAutoresizingMaskIntoConstraints = false\n    scrollView.addSubview(contentView)\n    NSLayoutConstraint.activate([\n        contentView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),\n        contentView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),\n        contentView.topAnchor.constraint(equalTo: scrollView.topAnchor),\n        contentView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),\n        contentView.widthAnchor.constraint(equalTo: scrollView.widthAnchor),\n    ])\n    return scrollView\n}\n\n// Usage\n// let contentView = UIView()\n// let scrollView = createScrollView(with: contentView)"
    },
    {
      "instruction": "Write a Swift function to fetch JSON data from a URL and decode it into a custom data model.",
      "input": "",
      "output": "import Foundation\n\nstruct User: Decodable {\n    let id: Int\n    let name: String\n    let username: String\n}\n\nfunc fetchUserData(url: String, completion: @escaping (Result<[User], Error>) -> Void) {\n    guard let url = URL(string: url) else {\n        completion(.failure(NSError(domain: \"\", code: -1, userInfo: nil)))\n        return\n    }\n    \n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let decoder = JSONDecoder()\n            let users = try decoder.decode([User].self, from: data)\n            completion(.success(users))\n        } catch {\n            completion(.failure(error))\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function to display an alert with a title, message, and a single \"OK\" button.",
      "input": "",
      "output": "import UIKit\n\nclass AlertViewController: UIViewController {\n\n    func showAlert(title: String, message: String) {\n        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n        present(alertController, animated: true, completion: nil)\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UITableViewCell with an imageView and two labels.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    \n    let thumbnailImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    let subtitleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupView()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n    \n    private func setupView() {\n        addSubview(thumbnailImageView)\n        addSubview(titleLabel)\n        addSubview(subtitleLabel)\n        \n        NSLayoutConstraint.activate([\n            thumbnailImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 16),\n            thumbnailImageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            thumbnailImageView.widthAnchor.constraint(equalToConstant: 60),\n            thumbnailImageView.heightAnchor.constraint(equalToConstant: 60),\n            \n            titleLabel.leadingAnchor.constraint(equalTo: thumbnailImageView.trailingAnchor, constant: 16),\n            titleLabel.topAnchor.constraint(equalTo: topAnchor, constant: 16),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -16),\n            \n            subtitleLabel.leadingAnchor.constraint(equalTo: titleLabel.leadingAnchor),\n            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 8),\n            subtitleLabel.trailingAnchor.constraint(equalTo: titleLabel.trailingAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a horizontal UICollectionView with a custom UICollectionViewCell.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {\n    \n    private let reuseIdentifier = \"CustomCell\"\n\n    lazy var collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .horizontal\n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: reuseIdentifier)\n        return collectionView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(collectionView)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            collectionView.topAnchor.constraint(equalTo: view.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor)\n        ])\n    }\n    \n    // MARK: - UICollectionViewDataSource\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        return cell\n    }\n    \n    // MARK: - UICollectionViewDelegateFlowLayout\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: 120, height: collectionView.bounds.height)\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {\n        return 16\n    }\n    \n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n    \n    private func setupView() {\n        addSubview(titleLabel)\n        \n        NSLayoutConstraint.activate([\n            titleLabel.centerXAnchor.constraint(equalTo: centerXAnchor),\n            titleLabel.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIView with rounded corners and a drop shadow.",
      "input": "",
      "output": "import UIKit\n\nclass CustomRoundedShadowView: UIView {\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n    \n    private func setupView() {\n        backgroundColor = .white\n        layer.cornerRadius = 10\n        layer.shadowRadius = 5\n        layer.shadowOpacity = 0.3\n        layer.shadowOffset = CGSize(width: 0, height: 2)\n        layer.shadowColor = UIColor.black.cgColor\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UITextField with a left padding and a clear button.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTextField: UITextField {\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n    \n    private func setupView() {\n        leftView = UIView(frame: CGRect(x: 0, y: 0, width: 8, height: bounds.height))\n        leftViewMode = .always\n        \n        clearButtonMode = .whileEditing\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIButton with a background color, corner radius, and a drop shadow.",
      "input": "",
      "output": "import UIKit\n\nclass CustomButton: UIButton {\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n    \n    private func setupView() {\n        backgroundColor = .systemBlue\n        setTitleColor(.white, for: .normal)\n        layer.cornerRadius = 5\n        layer.shadowRadius = 3\n        layer.shadowOpacity = 0.3\n        layer.shadowOffset = CGSize(width: 0, height: 2)\n        layer.shadowColor = UIColor.black.cgColor\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function to present a modal ViewController with a custom transition animation.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTransitionViewController: UIViewController, UIViewControllerTransitioningDelegate {\n    \n    let modalViewController = UIViewController()\n    \n    func presentModalViewController() {\n        modalViewController.modalPresentationStyle = .custom\n        modalViewController.transitioningDelegate = self\n        present(modalViewController, animated: true, completion: nil)\n    }\n    \n    // MARK: - UIViewControllerTransitioningDelegate\n    func animationController(forPresented presented: UIViewController, presenting: UIViewController, source: UIViewController) -> UIViewControllerAnimatedTransitioning? {\n        return CustomModalTransitionAnimator(isPresenting: true)\n    }\n    \n    func animationController(forDismissed dismissed: UIViewController) -> UIViewControllerAnimatedTransitioning? {\n        return CustomModalTransitionAnimator(isPresenting: false)\n    }\n    \n}\n\nclass CustomModalTransitionAnimator: NSObject, UIViewControllerAnimatedTransitioning {\n    \n    let isPresenting: Bool\n    \n    init(isPresenting: Bool) {\n        self.isPresenting = isPresenting\n    }\n    \n    func transitionDuration(using transitionContext: UIViewControllerContextTransitioning?) -> TimeInterval {\n        return 0.3\n    }\n    \n    func animateTransition(using transitionContext: UIViewControllerContextTransitioning) {\n        let containerView = transitionContext.containerView\n        let toView = transitionContext.view(forKey: .to)\n        let fromView = transitionContext.view(forKey: .from)\n        \n        if isPresenting {\n            toView?.alpha = 0\n            containerView.addSubview(toView!)\n        }\n        \n        let duration = transitionDuration(using: transitionContext)\n        UIView.animate(withDuration: duration"
    },
    {
      "instruction": "Write a Swift function that downloads an image from a URL and sets it to a UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass ImageViewDownloader: NSObject {\n\n    func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n        let task = URLSession.shared.dataTask(with: url) { data, response, error in\n            guard let data = data, error == nil, let image = UIImage(data: data) else {\n                completion(nil)\n                return\n            }\n            completion(image)\n        }\n        task.resume()\n    }\n}\n\nclass CustomImageView: UIImageView {\n    let downloader = ImageViewDownloader()\n    var currentTask: URLSessionDataTask?\n\n    func setImage(from url: URL) {\n        currentTask?.cancel()\n        self.image = nil\n\n        downloader.downloadImage(from: url) { [weak self] image in\n            DispatchQueue.main.async {\n                self?.image = image\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that retrieves the user's location using CoreLocation",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    private let locationManager = CLLocationManager()\n    var currentLocation: CLLocation?\n\n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n    }\n\n    func requestLocation() {\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            currentLocation = location\n            locationManager.stopUpdatingLocation()\n            print(\"Latitude: \\(location.coordinate.latitude), Longitude: \\(location.coordinate.longitude)\")\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error getting location: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates a UIView with a spring effect",
      "input": "",
      "output": "import UIKit\n\nextension UIView {\n    func animateWithSpring(duration: TimeInterval, delay: TimeInterval, dampingRatio: CGFloat, velocity: CGFloat) {\n        self.transform = CGAffineTransform(scaleX: 0.1, y: 0.1)\n        UIView.animate(withDuration: duration, delay: delay, usingSpringWithDamping: dampingRatio, initialSpringVelocity: velocity, options: [], animations: {\n            self.transform = CGAffineTransform.identity\n        }, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift UITableViewController that displays a list of items and supports deletion",
      "input": "",
      "output": "import UIKit\n\nclass ListTableViewController: UITableViewController {\n    var items: [String] = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"cell\")\n        tableView.allowsMultipleSelectionDuringEditing = false\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        cell.textLabel?.text = items[indexPath.row]\n        return cell\n    }\n\n    override func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {\n        return true\n    }\n\n    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {\n        if editingStyle == .delete {\n            items.remove(at: indexPath.row)\n            tableView.deleteRows(at: [indexPath], with: .fade)\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates and presents a UIAlertController with a single \"OK\" button",
      "input": "",
      "output": "import UIKit\n\nextension UIViewController {\n    func showAlert(title: String, message: String) {\n        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n        let okAction = UIAlertAction(title: \"OK\", style: .default, handler: nil)\n        alertController.addAction(okAction)\n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that saves an image to the user's photo library",
      "input": "",
      "output": "import Photos\n\nclass PhotoSaver: NSObject {\n    func saveImageToLibrary(_ image: UIImage, completion: @escaping (Bool, Error?) -> Void) {\n        PHPhotoLibrary.requestAuthorization { status in\n            guard status == .authorized else {\n                completion(false, nil)\n                return\n            }\n\n            PHPhotoLibrary.shared().performChanges({\n                PHAssetChangeRequest.creationRequestForAsset(from: image)\n            }) {(success, error) in\n                DispatchQueue.main.async {\n                    completion(success, error)\n                }\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that registers a custom UITableViewCell class to be used in a UITableView",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    // Custom cell implementation\n}\n\nclass CustomTableViewController: UITableViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomCell\")\n    }\n\n    // UITableViewDataSource methods implementation\n}"
    },
    {
      "instruction": " \nWrite a Swift function that parses a JSON response from a network request and decodes it into a custom Swift object",
      "input": "",
      "output": "import Foundation\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let email: String\n}\n\nclass NetworkManager {\n    func fetchUser(completion: @escaping (User?) -> Void) {\n        guard let url = URL(string: \"https://api.example.com/user\") else {\n            completion(nil)\n            return\n        }\n\n        let task = URLSession.shared.dataTask(with: url) { data, response, error in\n            guard let data = data, error == nil else {\n                completion(nil)\n                return\n            }\n\n            let decoder = JSONDecoder()\n            do {\n                let user = try decoder.decode(User.self, from: data)\n                completion(user)\n            } catch {\n                print(\"Error decoding JSON: \\(error.localizedDescription)\")\n                completion(nil)\n            }\n        }\n        task.resume()\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to create a UITableView with a specified style, delegate, and data source",
      "input": "",
      "output": "func createTableView(style: UITableView.Style, delegate: UITableViewDelegate, dataSource: UITableViewDataSource) -> UITableView {\n    let tableView = UITableView(frame: .zero, style: style)\n    tableView.delegate = delegate\n    tableView.dataSource = dataSource\n    tableView.translatesAutoresizingMaskIntoConstraints = false\n    return tableView\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UICollectionViewCell with a specified identifier and a UILabel as a subview",
      "input": "",
      "output": "class CustomCollectionViewCell: UICollectionViewCell {\n    let label = UILabel()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupLabel()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupLabel() {\n        addSubview(label)\n        label.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            label.centerXAnchor.constraint(equalTo: centerXAnchor),\n            label.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n}\n\nfunc registerCustomCollectionViewCell(for collectionView: UICollectionView, with identifier: String) {\n    collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: identifier)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIAlertController with a specified title, message, and an array of UIAlertAction objects",
      "input": "",
      "output": "func createAlertController(title: String, message: String, actions: [UIAlertAction]) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    for action in actions {\n        alertController.addAction(action)\n    }\n    return alertController\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIButton with a specified title and target action",
      "input": "",
      "output": "func createCustomButton(title: String, target: Any, action: Selector) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.addTarget(target, action: action, for: .touchUpInside)\n    button.translatesAutoresizingMaskIntoConstraints = false\n    return button\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIStackView with a specified axis, distribution, and an array of arranged subviews",
      "input": "",
      "output": "func createStackView(axis: NSLayoutConstraint.Axis, distribution: UIStackView.Distribution, arrangedSubviews: [UIView]) -> UIStackView {\n    let stackView = UIStackView(arrangedSubviews: arrangedSubviews)\n    stackView.axis = axis\n    stackView.distribution = distribution\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    return stackView\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and present a UIImagePickerController with a specified source type, media type, and delegate",
      "input": "",
      "output": "func createAndPresentImagePickerController(sourceType: UIImagePickerController.SourceType, mediaType: String, delegate: (UIImagePickerControllerDelegate & UINavigationControllerDelegate), viewController: UIViewController) {\n    let imagePickerController = UIImagePickerController()\n    imagePickerController.sourceType = sourceType\n    imagePickerController.mediaTypes = [mediaType]\n    imagePickerController.delegate = delegate\n    viewController.present(imagePickerController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UILocalNotification with a specified alert title, alert body, and fire date",
      "input": "",
      "output": "@available(iOS, deprecated: 10.0)\nfunc createLocalNotification(alertTitle: String, alertBody: String, fireDate: Date) -> UILocalNotification {\n    let localNotification = UILocalNotification()\n    localNotification.alertTitle = alertTitle\n    localNotification.alertBody = alertBody\n    localNotification.fireDate = fireDate\n    return localNotification\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UIImageView with a specified image, content mode, and tintColor",
      "input": "",
      "output": "func createImageView(image: UIImage?, contentMode: UIView.ContentMode, tintColor: UIColor) -> UIImageView {\n    let imageView = UIImageView(image: image)\n    imageView.contentMode = contentMode\n    imageView.tintColor = tintColor\n    imageView.translatesAutoresizingMaskIntoConstraints = false\n    return imageView\n}"
    },
    {
      "instruction": "Implement a custom UITableView with UITableViewCell containing a profile image, name, and a short bio.",
      "input": "",
      "output": "import UIKit\n\nstruct Profile {\n    let name: String\n    let bio: String\n    let image: UIImage\n}\n\nclass ProfileTableViewCell: UITableViewCell {\n    @IBOutlet weak var profileImageView: UIImageView!\n    @IBOutlet weak var nameLabel: UILabel!\n    @IBOutlet weak var bioLabel: UILabel!\n}\n\nclass CustomTableView: UITableView, UITableViewDataSource, UITableViewDelegate {\n    var profiles: [Profile] = []\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return profiles.count\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"ProfileTableViewCell\", for: indexPath) as! ProfileTableViewCell\n        let profile = profiles[indexPath.row]\n\n        cell.profileImageView.image = profile.image\n        cell.nameLabel.text = profile.name\n        cell.bioLabel.text = profile.bio\n\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIViewController that displays a collection of images in a UICollectionView",
      "input": "",
      "output": "import UIKit\n\nclass ImageCollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {\n    @IBOutlet weak var collectionView: UICollectionView!\n\n    var images: [UIImage] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.dataSource = self\n        collectionView.delegate = self\n    }\n\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return images.count\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"ImageCollectionViewCell\", for: indexPath) as! ImageCollectionViewCell\n        cell.imageView.image = images[indexPath.item]\n        return cell\n    }\n}\n\nclass ImageCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n}"
    },
    {
      "instruction": " \nImplement a function that downloads an image from a URL and updates a UIImageView asynchronously",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil, let image = UIImage(data: data) else {\n            completion(nil)\n            return\n        }\n        completion(image)\n    }.resume()\n}\n\nfunc updateImageView(_ imageView: UIImageView, with url: URL) {\n    downloadImage(from: url) { image in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " \nDesign a simple login screen with username and password fields and a login button",
      "input": "",
      "output": "import UIKit\n\nclass LoginViewController: UIViewController {\n    @IBOutlet weak var usernameTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n    @IBOutlet weak var loginButton: UIButton!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        loginButton.addTarget(self, action: #selector(loginButtonTapped), for: .touchUpInside)\n    }\n\n    @objc func loginButtonTapped() {\n        guard let username = usernameTextField.text, let password = passwordTextField.text else {\n            return\n        }\n        loginUser(username: username, password: password)\n    }\n\n    func loginUser(username: String, password: String) {\n        // Implement your login logic here\n    }\n}"
    },
    {
      "instruction": " \nCreate a class that manages network requests to a RESTful API",
      "input": "",
      "output": "import Foundation\n\nenum HttpMethod: String {\n    case get = \"GET\"\n    case post = \"POST\"\n    case put = \"PUT\"\n    case delete = \"DELETE\"\n}\n\nclass ApiManager {\n    private let baseUrl: URL\n\n    init(baseUrl: URL) {\n        self.baseUrl = baseUrl\n    }\n\n    func request(_ endpoint: String, method: HttpMethod, parameters: [String: Any]?, completion: @escaping (Result<Data, Error>) -> Void) {\n        let url = baseUrl.appendingPathComponent(endpoint)\n        var request = URLRequest(url: url)\n        request.httpMethod = method.rawValue\n\n        if let parameters = parameters {\n            request.httpBody = try? JSONSerialization.data(withJSONObject: parameters, options: [])\n            request.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n        }\n\n        URLSession.shared.dataTask(with: request) { data, response, error in\n            if let error = error {\n                completion(.failure(error))\n                return\n            }\n            guard let data = data else {\n                completion(.failure(NSError(domain: \"\", code: -1, userInfo: nil)))\n                return\n            }\n            completion(.success(data))\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nImplement a simple UserDefaults wrapper for storing user settings",
      "input": "",
      "output": "import Foundation\n\nclass UserSettings {\n    private let userDefaults: UserDefaults\n\n    init(userDefaults: UserDefaults = .standard) {\n        self.userDefaults = userDefaults\n    }\n\n    var username: String? {\n        get { return userDefaults.string(forKey: \"username\") }\n        set { userDefaults.set(newValue, forKey: \"username\") }\n    }\n\n    var notificationsEnabled: Bool {\n        get { return userDefaults.bool(forKey: \"notificationsEnabled\") }\n        set { userDefaults.set(newValue, forKey: \"notificationsEnabled\") }\n    }\n\n    var darkModeEnabled: Bool {\n        get { return userDefaults.bool(forKey: \"darkModeEnabled\") }\n        set { userDefaults.set(newValue, forKey: \"darkModeEnabled\") }\n    }\n\n    func synchronize() {\n        userDefaults.synchronize()\n    }\n}"
    },
    {
      "instruction": " \nCreate a SwiftUI view that displays a list of contacts with their names and phone numbers",
      "input": "",
      "output": "import SwiftUI\n\nstruct Contact: Identifiable {\n    let id = UUID()\n    let name: String\n    let phoneNumber: String\n}\n\nstruct ContactsListView: View {\n    let contacts: [Contact]\n\n    var body: some View {\n        List(contacts) { contact in\n            VStack(alignment: .leading) {\n                Text(contact.name)\n                    .font(.headline)\n                Text(contact.phoneNumber)\n                    .font(.subheadline)\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nImplement a SwiftUI view that displays a map with annotations for multiple locations",
      "input": "",
      "output": "import SwiftUI\nimport MapKit\n\nstruct Location: Identifiable {\n    let id = UUID()\n    let name: String\n    let coordinate: CLLocationCoordinate2D\n}\n\nstruct MapView: UIViewRepresentable {\n    var locations: [Location]\n\n    func makeUIView(context: Context) -> MKMapView {\n        let mapView = MKMapView()\n        mapView.delegate = context.coordinator\n        return mapView\n    }\n\n    func updateUIView(_ view: MKMapView, context: Context) {\n        view.removeAnnotations(view.annotations)\n        let annotations = locations.map { location -> MKPointAnnotation in\n            let annotation = MKPointAnnotation()\n            annotation.title = location.name\n            annotation.coordinate = location.coordinate\n            return annotation\n        }\n        view.addAnnotations(annotations)\n    }\n\n    func makeCoordinator() -> Coordinator {\n        Coordinator(self)\n    }\n\n    class Coordinator: NSObject, MKMapViewDelegate {\n        var parent: MapView\n\n        init(_ parent: MapView) {\n            self.parent = parent\n        }\n    }\n}"
    },
    {
      "instruction": "Implement a custom table view cell that displays user information and a custom table view controller that uses the custom cell",
      "input": "",
      "output": "import UIKit\n\nclass UserTableViewCell: UITableViewCell {\n    @IBOutlet weak var nameLabel: UILabel!\n    @IBOutlet weak var emailLabel: UILabel!\n    @IBOutlet weak var profileImageView: UIImageView!\n    \n    func configureCell(with user: User) {\n        nameLabel.text = user.name\n        emailLabel.text = user.email\n        profileImageView.image = user.profileImage\n    }\n}\n\nclass CustomTableViewController: UITableViewController {\n    \n    var users: [User] = []\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return users.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"UserTableViewCell\", for: indexPath) as! UserTableViewCell\n        let user = users[indexPath.row]\n        cell.configureCell(with: user)\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nImplement a simple chat UI using UITextView and UITextField",
      "input": "",
      "output": "import UIKit\n\nclass ChatViewController: UIViewController {\n    \n    @IBOutlet weak var chatTextView: UITextView!\n    @IBOutlet weak var messageTextField: UITextField!\n    \n    @IBAction func sendMessage(_ sender: UIButton) {\n        if let message = messageTextField.text, !message.isEmpty {\n            chatTextView.text.append(\"\\(message)\\n\")\n            messageTextField.text = \"\"\n        }\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        chatTextView.isEditable = false\n        messageTextField.delegate = self\n    }\n}\n\nextension ChatViewController: UITextFieldDelegate {\n    func textFieldShouldReturn(_ textField: UITextField) -> Bool {\n        textField.resignFirstResponder()\n        sendMessage(UIButton())\n        return true\n    }\n}"
    },
    {
      "instruction": " \nCreate a function that displays an UIAlertController with an action to dismiss it",
      "input": "",
      "output": "import UIKit\n\nclass AlertViewController: UIViewController {\n    \n    func showAlert(title: String, message: String) {\n        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n        let dismissAction = UIAlertAction(title: \"OK\", style: .default) { _ in\n            alertController.dismiss(animated: true, completion: nil)\n        }\n        alertController.addAction(dismissAction)\n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nCreate a function that takes a UIImage and UIImageView, resizes the UIImage to fit the UIImageView, and sets the resized image to the UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc resizeImage(_ image: UIImage, toFit imageView: UIImageView) {\n    let size = imageView.frame.size\n    let scale = min(size.width / image.size.width, size.height / image.size.height)\n    let newSize = CGSize(width: image.size.width * scale, height: image.size.height * scale)\n\n    UIGraphicsBeginImageContextWithOptions(newSize, false, 0)\n    image.draw(in: CGRect(origin: .zero, size: newSize))\n    let resizedImage = UIGraphicsGetImageFromCurrentImageContext()\n    UIGraphicsEndImageContext()\n\n    imageView.image = resizedImage\n}"
    },
    {
      "instruction": " \nImplement a custom navigation bar with a title and a right bar button item",
      "input": "",
      "output": "import UIKit\n\nclass CustomNavigationBarViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupNavigationBar()\n    }\n    \n    func setupNavigationBar() {\n        navigationItem.title = \"Custom Navigation Bar\"\n        let rightBarButton = UIBarButtonItem(title: \"Action\", style: .plain, target: self, action: #selector(rightBarButtonTapped))\n        navigationItem.rightBarButtonItem = rightBarButton\n    }\n    \n    @objc func rightBarButtonTapped() {\n        print(\"Right bar button tapped\")\n    }\n}"
    },
    {
      "instruction": " \nCreate a simple onboarding flow using UIPageViewController",
      "input": "",
      "output": "import UIKit\n\nclass OnboardingViewController: UIPageViewController, UIPageViewControllerDataSource {\n    \n    lazy var onboardingPages: [UIViewController] = {\n        let firstPage = storyboard!.instantiateViewController(withIdentifier: \"FirstPage\")\n        let secondPage = storyboard!.instantiateViewController(withIdentifier: \"SecondPage\")\n        let thirdPage = storyboard!.instantiateViewController(withIdentifier: \"ThirdPage\")\n\n        return [firstPage, secondPage, thirdPage]\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        dataSource = self\n        setViewControllers([onboardingPages[0]], direction: .forward, animated: true, completion: nil)\n    }\n    \n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n        guard let index =onboardingPages.firstIndex(of: viewController), index > 0 else {\n            return nil\n        }\n        return onboardingPages[index - 1]\n    }\n    \n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {\n        guard let index = onboardingPages.firstIndex(of: viewController), index < onboardingPages.count - 1 else {\n            return nil\n        }\n        return onboardingPages[index + 1]\n    }\n    \n}"
    },
    {
      "instruction": " \nImplement a simple tab bar controller with two view controllers",
      "input": "",
      "output": "import UIKit\n\nclass CustomTabBarController: UITabBarController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupTabBarController()\n    }\n    \n    func setupTabBarController() {\n        let firstVC = FirstViewController()\n        firstVC.tabBarItem = UITabBarItem(title: \"First\", image: UIImage(named: \"first_icon\"), selectedImage: UIImage(named: \"first_icon_selected\"))\n        \n        let secondVC = SecondViewController()\n        secondVC.tabBarItem = UITabBarItem(title: \"Second\", image: UIImage(named: \"second_icon\"), selectedImage: UIImage(named: \"second_icon_selected\"))\n        \n        viewControllers = [firstVC, secondVC]\n    }\n}"
    },
    {
      "instruction": " \nCreate a function that takes a URL and loads it in a WKWebView",
      "input": "",
      "output": "import UIKit\nimport WebKit\n\nclass WebViewController: UIViewController {\n    \n    @IBOutlet weak var webView: WKWebView!\n    \n    func loadWebPage(urlString: String) {\n        guard let url = URL(string: urlString) else {\n            print(\"Invalid URL\")\n            return\n        }\n        let request = URLRequest(url: url)\n        webView.load(request)\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        loadWebPage(urlString: \"https://www.example.com\")\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to create a UITableView with a custom UITableViewCell and populate it with an array of strings",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    static let reuseIdentifier = \"CustomTableViewCell\"\n    @IBOutlet weak var titleLabel: UILabel!\n}\n\nclass CustomTableViewController: UITableViewController {\n    \n    let data = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\"]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UINib(nibName: \"CustomTableViewCell\", bundle: nil), forCellReuseIdentifier: CustomTableViewCell.reuseIdentifier)\n    }\n    \n    // MARK: - UITableViewDataSource\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.reuseIdentifier, for: indexPath) as! CustomTableViewCell\n        cell.titleLabel.text = data[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that implements a UICollectionView with custom UICollectionViewCell and displays images from an array of URL strings",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n    \n    @IBOutlet weak var imageView: UIImageView!\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n    \n    let imageURLs = [\n        \"https://example.com/image1.jpg\",\n        \"https://example.com/image2.jpg\",\n        \"https://example.com/image3.jpg\",\n        \"https://example.com/image4.jpg\",\n        \"https://example.com/image5.jpg\"\n    ]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(UINib(nibName: \"CustomCollectionViewCell\", bundle: nil), forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n    }\n    \n    // MARK: - UICollectionViewDataSource\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return imageURLs.count\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        if let url = URL(string: imageURLs[indexPath.item]) {\n            DispatchQueue.global().async {\n                if let data = try? Data(contentsOf: url) {\n                    DispatchQueue.main.async {\n                        cell.imageView.image = UIImage(data: data)\n                    }\n                }\n            }\n        }\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to programmatically create a UIAlertController with a text field, OK, and Cancel buttons, and handle the input from the text field",
      "input": "",
      "output": "func presentAlertWithTextField() {\n    let alertController = UIAlertController(title: \"Enter Text\", message: nil, preferredStyle: .alert)\n    \n    alertController.addTextField { textField in\n        textField.placeholder = \"Enter your text here\"\n    }\n    \n    let okAction = UIAlertAction(title: \"OK\", style: .default) { _ in\n        if let textField = alertController.textFields?.first, let text = textField.text {\n            print(\"Text entered: \\(text)\")\n        }\n    }\n    alertController.addAction(okAction)\n    \n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n    alertController.addAction(cancelAction)\n    \n    self.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to programmatically create a UIStepper and handle the value changes",
      "input": "",
      "output": "func createStepper() -> UIStepper {\n    let stepper = UIStepper()\n    stepper.translatesAutoresizingMaskIntoConstraints = false\n    stepper.addTarget(self, action: #selector(stepperValueChanged(_:)), for: .valueChanged)\n    return stepper\n}\n\n@objc func stepperValueChanged(_ sender: UIStepper) {\n    print(\"Stepper value changed to: \\(sender.value)\")\n}"
    },
    {
      "instruction": " \nWrite a Swift function to programmatically create a UISlider and handle the value changes",
      "input": "",
      "output": "func createSlider() -> UISlider {\n    let slider = UISlider()\n    slider.translatesAutoresizingMaskIntoConstraints = false\n    slider.addTarget(self, action: #selector(sliderValueChanged(_:)), for: .valueChanged)\n    return slider\n}\n\n@objc func sliderValueChanged(_ sender: UISlider) {\n    print(\"Slider value changed to: \\(sender.value)\")\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a UIRefreshControl in a UITableViewController and handle the refresh action",
      "input": "",
      "output": "class CustomTableViewController: UITableViewController {\n    \n    private let refreshControl = UIRefreshControl()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupRefreshControl()\n    }\n    \n    private func setupRefreshControl() {\n        refreshControl.addTarget(self, action: #selector(refreshData(_:)), for: .valueChanged)\n        tableView.refreshControl = refreshControl\n    }\n    \n    @objc private func refreshData(_ sender: UIRefreshControl) {\n        // Perform your data refreshing logic here\n        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {\n            // End refreshing\n            sender.endRefreshing()\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIImagePickerController with a custom delegate to handle image picking from the photo library",
      "input": "",
      "output": "import UIKit\n\nclass CustomImagePickerDelegate: NSObject, UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n    \n    var didFinishPicking: ((UIImage) -> Void)?\n    \n    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {\n        if let image = info[.originalImage] as? UIImage {\n            didFinishPicking?(image)\n        }\n        picker.dismiss(animated: true, completion: nil)\n    }\n    \n    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {\n        picker.dismiss(animated: true, completion: nil)\n    }\n}\n\nclass CustomViewController: UIViewController {\n    \n    var customImagePickerDelegate: CustomImagePickerDelegate?\n    \n    func presentImagePicker() {\n        let imagePickerController = UIImagePickerController()\n        imagePickerController.sourceType = .photoLibrary\n        customImagePickerDelegate = CustomImagePickerDelegate()\n        imagePickerController.delegate = customImagePickerDelegate\n        customImagePickerDelegate?.didFinishPicking = { image in\n            print(\"Image picked: \\(image)\")\n        }\n        present(imagePickerController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a Timer that updates a UILabel every second",
      "input": "",
      "output": "import UIKit\n\nclass TimerViewController: UIViewController {\n    \n    var timer: Timer?\n    var counter = 0\n    let counterLabel = UILabel()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupCounterLabel()\n        startTimer()\n    }\n    \n    func setupCounterLabel() {\n        counterLabel.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(counterLabel)\n        counterLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true\n        counterLabel.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true\n    }\n    \n    func startTimer() {\n        timer = Timer.scheduledTimer(timeInterval: 1.0, target: self, selector: #selector(updateCounter), userInfo: nil, repeats: true)\n    }\n    \n    @objc func updateCounter() {\n        counter += 1\n        counterLabel.text = \"Counter: \\(counter)\"\n    }\n    \n    deinit {\n        timer?.invalidate()\n    }\n}"
    },
    {
      "instruction": "Implement a LocationManager class that allows requesting the user's current location with a completion handler.",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    private let locationManager = CLLocationManager()\n\n    typealias LocationCompletionHandler = (CLLocation?, Error?) -> Void\n    private var locationCompletionHandler: LocationCompletionHandler?\n\n    override init() {\n        super.init()\n        locationManager.delegate = self\n    }\n\n    func requestCurrentLocation(completion: @escaping LocationCompletionHandler) {\n        locationManager.requestWhenInUseAuthorization()\n        locationCompletionHandler = completion\n        locationManager.requestLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        locationCompletionHandler?(locations.first, nil)\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        locationCompletionHandler?(nil, error)\n    }\n}"
    },
    {
      "instruction": " \nCreate a function that asynchronously downloads an image from a given URL and sets it to a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nextension UIImageView {\n    func setImage(from url: URL) {\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let data = data, let image = UIImage(data: data) {\n                DispatchQueue.main.async {\n                    self.image = image\n                }\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UITableView cell with a profile picture, name label, and status label, and a custom UITableViewController that uses the custom cell.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var profileImageView: UIImageView!\n    @IBOutlet weak var nameLabel: UILabel!\n    @IBOutlet weak var statusLabel: UILabel!\n    \n    func configure(with profileImage: UIImage, name: String, status: String) {\n        profileImageView.image = profileImage\n        nameLabel.text = name\n        statusLabel.text = status\n    }\n}\n\nclass CustomTableViewController: UITableViewController {\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomTableViewCell\", for: indexPath) as! CustomTableViewCell\n        let item = items[indexPath.row]\n        cell.configure(with: item.profileImage, name: item.name, status: item.status)\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nImplement a simple networking layer using URLSession and Codable for fetching and decoding JSON data.",
      "input": "",
      "output": "import Foundation\n\nstruct API {\n    static let baseUrl = \"https://api.example.com\"\n}\n\nenum APIError: Error {\n    case noData\n    case decodingError\n}\n\nclass NetworkManager {\n    func fetchData<T: Codable>(urlString: String, completion: @escaping (Result<T, APIError>) -> Void) {\n        guard let url = URL(string: urlString) else { return }\n        \n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let data = data {\n                do {\n                    let decodedData = try JSONDecoder().decode(T.self, from: data)\n                    completion(.success(decodedData))\n                } catch {\n                    completion(.failure(.decodingError))\n                }\n            } else {\n                completion(.failure(.noData))\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIView with a gradient background.",
      "input": "",
      "output": "import UIKit\n\nclass GradientView: UIView {\n    @IBInspectable var startColor: UIColor = .white\n    @IBInspectable var endColor: UIColor = .black\n\n    override class var layerClass: AnyClass {\n        return CAGradientLayer.self\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        let gradientLayer = layer as! CAGradientLayer\n        gradientLayer.colors = [startColor.cgColor, endColor.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 1)\n    }\n}"
    },
    {
      "instruction": " \nImplement a Core Data stack with a persistent container, and a method for saving and fetching objects.",
      "input": "",
      "output": "import CoreData\n\nclass CoreDataStack {\n    static let shared = CoreDataStack()\n\n    lazy var persistentContainer: NSPersistentContainer = {\n        let container = NSPersistentContainer(name: \"Model\")\n        container.loadPersistentStores(completionHandler: { (storeDescription, error) in\n            if let error = error as NSError? {\n                fatalError(\"Unresolved error \\(error), \\(error.userInfo)\")\n            }\n        })\n        return container\n    }()\n\n    func saveContext () {\n        let context = persistentContainer.viewContext\n        if context.hasChanges {\n            do {\n                try context.save()\n            } catch let error as NSError {\n                fatalError(\"Unresolved error \\(error), \\(error.userInfo)\")\n            }\n        }\n    }\n\n    func fetch<T: NSManagedObject>(_ request: NSFetchRequest<T>) -> [T] {\n        let context = persistentContainer.viewContext\n        do {\n            return try context.fetch(request)\n        } catch {\n            print(\"Fetch error: \\(error.localizedDescription)\")\n            return []\n        }\n    }\n}"
    },
    {
      "instruction": " \nCreate a simple onboarding flow using UIPageViewController with three static content pages.",
      "input": "",
      "output": "import UIKit\n\nclass OnboardingViewController: UIPageViewController, UIPageViewControllerDataSource, UIPageViewControllerDelegate {\n\n    var pages: [UIViewController] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        dataSource = self\n        delegate = self\n\n        let page1 = createContentViewController(title: \"Welcome\", subtitle: \"Discover something new...\")\n        let page2 = createContentViewController(title: \"Get Started\", subtitle: \"Sign up and join the community.\")\n        let page3 = createContentViewController(title: \"Stay Updated\", subtitle: \"Don't miss any updates.\")\n\n        pages = [page1, page2, page3]\n\n        setViewControllers([page1], direction: .forward, animated: true, completion: nil)\n    }\n\n    func createContentViewController(title: String, subtitle: String) -> UIViewController {\n        let viewController = UIViewController()\n        viewController.view.backgroundColor = .white\n\n        let titleLabel = UILabel()\n        titleLabel.text = title\n        titleLabel.font = UIFont.systemFont(ofSize: 24, weight: .bold)\n        titleLabel.translatesAutoresizingMaskIntoConstraints = false\n        viewController.view.addSubview(titleLabel)\n\n        let subtitleLabel = UILabel()\n        subtitleLabel.text = subtitle\n        subtitleLabel.font = UIFont.systemFont(ofSize: 18, weight: .medium)\n        subtitleLabel.numberOfLines = 0\n        subtitleLabel.translatesAutoresizingMaskIntoConstraints = false\n        viewController.view.addSubview(subtitleLabel)\n\n        NSLayoutConstraint.activate([\n            titleLabel.centerXAnchor.constraint(equalTo: viewController.view.centerXAnchor),\n            titleLabel.centerYAnchor.constraint(equalTo: viewController.view.centerYAnchor),\n            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 8),\n            subtitleLabel.leadingAnchor.constraint(equalTo: viewController.view.leadingAnchor, constant: 16),\n            subtitleLabel.trailingAnchor.constraint(equalTo: viewController.view.trailingAnchor, constant: -16)\n        ])\n\n        return viewController\n    }\n\n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n        guard let index = pages.firstIndex(of: viewController) else { return nil }\n        return index > 0 ? pages[index - 1] : nil\n    }\n\n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter"
    },
    {
      "instruction": "Implement a Swift function that takes a URL string, downloads an image asynchronously, and sets it as the image of a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc setImage(from urlString: String, to imageView: UIImageView) {\n    guard let url = URL(string: urlString) else { return }\n    \n    DispatchQueue.global().async {\n        if let data = try? Data(contentsOf: url),\n           let image = UIImage(data: data) {\n            DispatchQueue.main.async {\n                imageView.image = image\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to save a key-value pair to UserDefaults.",
      "input": "",
      "output": "import Foundation\n\nfunc saveToUserDefaults(key: String, value: Any) {\n    let defaults = UserDefaults.standard\n    defaults.set(value, forKey: key)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIAlertController with a single UIAlertAction.",
      "input": "",
      "output": "import UIKit\n\nfunc createAlert(title: String, message: String, actionTitle: String) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: actionTitle, style: .default, handler: nil)\n    alertController.addAction(action)\n    return alertController\n}"
    },
    {
      "instruction": " \nImplement a Swift function that animates the opacity of a UIView to fade in or out.",
      "input": "",
      "output": "import UIKit\n\nfunc animateOpacity(of view: UIView, fadeIn: Bool, duration: TimeInterval) {\n    UIView.animate(withDuration: duration) {\n        view.alpha = fadeIn ? 1 : 0\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that returns the current topmost UIViewController.",
      "input": "",
      "output": "import UIKit\n\nfunc topViewController() -> UIViewController? {\n    var topController = UIApplication.shared.keyWindow?.rootViewController\n    while let presentedViewController = topController?.presentedViewController {\n        topController = presentedViewController\n    }\n    return topController\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a UITapGestureRecognizer to a UIView to dismiss the keyboard.",
      "input": "",
      "output": "import UIKit\n\nfunc addTapGestureToDismissKeyboard(view: UIView) {\n    let tapGesture = UITapGestureRecognizer(target: view, action: #selector(UIView.endEditing(_:)))\n    tapGesture.cancelsTouchesInView = false\n    view.addGestureRecognizer(tapGesture)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that converts a string date in a given format to a Date object.",
      "input": "",
      "output": "import Foundation\n\nfunc convertStringToDate(dateString: String, format: String) -> Date? {\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = format\n    return dateFormatter.date(from: dateString)\n}"
    },
    {
      "instruction": " \nCreate a Swift function that fetches an array of JSON objects from a URL and decodes them into an array of Codable objects.",
      "input": "",
      "output": "import Foundation\n\nfunc fetchJSONObjects<T: Codable>(from urlString: String, completion: @escaping (Result<[T], Error>) -> Void) {\n    guard let url = URL(string: urlString) else { return }\n\n    URLSession.shared.dataTask(with: url) { data, _, error in\n        if let error = error {\n            DispatchQueue.main.async {\n                completion(.failure(error))\n            }\n            return\n        }\n\n        if let data = data {\n            do {\n                let objects = try JSONDecoder().decode([T].self, from: data)\n                DispatchQueue.main.async {\n                    completion(.success(objects))\n                }\n            } catch {\n                DispatchQueue.main.async {\n                    completion(.failure(error))\n                }\n            }\n        }\n    }.resume()\n}"
    },
    {
      "instruction": "Write a Swift function to handle the user's input on a login form and call a completion handler with the result.",
      "input": "",
      "output": "import UIKit\n\nclass LoginFormViewController: UIViewController {\n    \n    @IBOutlet weak var emailTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n    @IBOutlet weak var loginButton: UIButton!\n    \n    var completionHandler: ((Result<User, Error>) -> Void)?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        loginButton.addTarget(self, action: #selector(handleLogin), for: .touchUpInside)\n    }\n    \n    @objc private func handleLogin() {\n        let email = emailTextField.text ?? \"\"\n        let password = passwordTextField.text ?? \"\"\n        \n        loginUser(email: email, password: password) { result in\n            switch result {\n            case .success(let user):\n                print(\"Logged in user: \\(user)\")\n                self.completionHandler?(.success(user))\n            case .failure(let error):\n                print(\"Failed to log in: \\(error)\")\n                self.completionHandler?(.failure(error))\n            }\n        }\n    }\n    \n    private func loginUser(email: String, password: String, completion: @escaping (Result<User, Error>) -> Void) {\n        // Implement your login logic here and call the completion closure with the appropriate result\n    }\n}"
    },
    {
      "instruction": " \n\nCreate a Swift function to fetch and display a list of posts in a table view.",
      "input": "",
      "output": "import UIKit\n\nclass PostsViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    \n    @IBOutlet weak var tableView: UITableView!\n    \n    var posts: [Post] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        tableView.dataSource = self\n        tableView.delegate = self\n        \n        fetchPosts { result in\n            switch result {\n            case .success(let posts):\n                self.posts = posts\n                DispatchQueue.main.async {\n                    self.tableView.reloadData()\n                }\n            case .failure(let error):\n                print(\"Error fetching posts: \\(error)\")\n            }\n        }\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return posts.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"PostCell\", for: indexPath)\n        let post = posts[indexPath.row]\n        cell.textLabel?.text = post.title\n        cell.detailTextLabel?.text = post.body\n        return cell\n    }\n    \n    private func fetchPosts(completion: @escaping (Result<[Post], Error>) -> Void) {\n        // Implement your logic to fetch posts here and call the completion closure with the appropriate result\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that configures a UITableView with a custom UITableViewCell and registers it for reuse.",
      "input": "The function should first create a UITableView instance if it doesn't exist. Then, it should configure the table view's properties, such as the dataSource, delegate, and row height. Next, it should register a custom UITableViewCell class for reuse. Finally, the function should add the table view as a subview to the view controller's main view.",
      "output": "class CustomTableViewCell: UITableViewCell {\n    // Custom cell implementation\n}\n\nprivate lazy var tableView: UITableView = {\n    let tableView = UITableView()\n    tableView.translatesAutoresizingMaskIntoConstraints = false\n    tableView.dataSource = self\n    tableView.delegate = self\n    tableView.rowHeight = UITableView.automaticDimension\n    tableView.estimatedRowHeight = 44\n    tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomTableViewCell\")\n    return tableView\n}()\n\nfunc configureTableView() {\n    view.addSubview(tableView)\n    NSLayoutConstraint.activate([\n        tableView.topAnchor.constraint(equalTo: view.topAnchor),\n        tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n        tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n        tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n    ])\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    configureTableView()\n}\n\nextension ViewController: UITableViewDataSource, UITableViewDelegate {\n    // UITableViewDataSource and UITableViewDelegate methods implemented here\n}"
    },
    {
      "instruction": " \nWrite a Swift function that handles the tap event for a UIButton and presents an UIAlertController with an action sheet.",
      "input": "Create a function that will be called when a UIButton is tapped. In this function, create a UIAlertController with the preferredStyle set to .actionSheet. Add two UIAlertAction instances to the UIAlertController, one with the title \"Option 1\" and style .default, and the other with the title \"Cancel\" and style .cancel. Finally, present the UIAlertController.",
      "output": "@objc func buttonTapped() {\n    let actionSheetController = UIAlertController(title: \"Choose an option\", message: nil, preferredStyle: .actionSheet)\n    \n    let option1Action = UIAlertAction(title: \"Option 1\", style: .default) { _ in\n        print(\"Option 1 selected\")\n    }\n    actionSheetController.addAction(option1Action)\n    \n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n    actionSheetController.addAction(cancelAction)\n    \n    present(actionSheetController, animated: true, completion: nil)\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    let button = UIButton(type: .system)\n    button.setTitle(\"Show Action Sheet\", for: .normal)\n    button.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n    // Add the button to the view and set up constraints as needed\n}"
    },
    {
      "instruction": " \nWrite a Swift function that initializes a UICollectionView with a custom UICollectionViewCell and configures its layout.",
      "input": "Create a function that initializes a UICollectionView and sets its properties, such as the dataSource, delegate, and background color. Configure the layout of the UICollectionView using a UICollectionViewFlowLayout. Register a custom UICollectionViewCell class for reuse. Finally, add the UICollectionView as a subview to the view controller's main view.",
      "output": "class CustomCollectionViewCell: UICollectionViewCell {\n    // Custom cell implementation\n}\n\nprivate lazy var collectionView: UICollectionView = {\n    let layout = UICollectionViewFlowLayout()\n    layout.itemSize = CGSize(width: 100, height: 100)\n    layout.minimumLineSpacing = 10\n    layout.minimumInteritemSpacing = 10\n    layout.sectionInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)\n    \n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    collectionView.dataSource = self\n    collectionView.delegate = self\n    collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCollectionViewCell\")\n    collectionView.backgroundColor = .white\n    return collectionView\n}()\n\nfunc configureCollectionView() {\n    view.addSubview(collectionView)\n    NSLayoutConstraint.activate([\n        collectionView.topAnchor.constraint(equalTo: view.topAnchor),\n        collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n        collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n        collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n    ])\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    configureCollectionView()\n}\n\nextension ViewController: UICollectionViewDataSource, UICollectionViewDelegate {\n    // UICollectionViewDataSource and UICollectionViewDelegate methods implemented here\n}"
    },
    {
      "instruction": " \nWrite a Swift function to fetch JSON data from a URL, decode it into a model object, and update the UI on the main thread.",
      "input": "Create a function that takes a URL string as an input. Use URLSession.shared to make a data task with the URL. Decode the received JSON data into a model object (e.g., `ExampleModel`). After decoding, update the UI on the main thread using DispatchQueue.main.async.",
      "output": "struct ExampleModel: Codable {\n    let title: String\n    let description: String\n}\n\nfunc fetchData(from urlString: String) {\n    guard let url = URL(string: urlString) else {\n        print(\"Invalid URL\")\n        return\n    }\n    \n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            print(\"Error fetching data: \\(error.localizedDescription)\")\n            return\n        }\n        \n        guard let data = data else {\n            print(\"No data received\")\n            return\n        }\n        \n        do {\n            let decoder = JSONDecoder()\n            let model = try decoder.decode(ExampleModel.self, from: data)\n            \n            DispatchQueue.main.async {\n                // Update UI with decoded data\n                self.titleLabel.text = model.title\n                self.descriptionLabel.text = model.description\n            }\n        } catch {\n            print(\"Error decoding JSON: \\(error.localizedDescription)\")\n        }\n    }.resume()\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    fetchData(from: \"https://api.example.com/data\")\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sets up a UIPickerView and displays data from an array.",
      "input": "Create a UIPickerView instance and set its properties, such as the dataSource and delegate. Create an array of strings to be displayed as options in the UIPickerView. Implement the required UIPickerViewDataSource and UIPickerViewDelegate methods to display the data in the UIPickerView.",
      "output": "private lazy var pickerView: UIPickerView = {\n    let pickerView = UIPickerView()\n    pickerView.translatesAutoresizingMaskIntoConstraints = false\n    pickerView.dataSource = self\n    pickerView.delegate = self\n    return pickerView\n}()\n\nlet options = [\"Option 1\", \"Option 2\", \"Option 3\", \"Option 4\"]\n\nfunc setupPickerView() {\n    view.addSubview(pickerView)\n    NSLayoutConstraint.activate([\n        pickerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n        pickerView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n    ])\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    setupPickerView()\n}\n\nextension ViewController: UIPickerViewDataSource, UIPickerViewDelegate {\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return options.count\n    }\n\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return options[row]\n    }\n\n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        print(\"Selected option: \\(options[row])\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates an AVPlayer to play a video from a remote URL.",
      "input": "First, import AVFoundation and AVKit. Then, create a function that takes a video URL string as input. Create an AVPlayer instance with the video URL and configure an AVPlayerViewController to display the video. Finally, present the AVPlayerViewController.",
      "output": "import AVFoundation\nimport AVKit\n\nfunc playVideo(from urlString: String) {\n    guard let url = URL(string: urlString) else {\n        print(\"Invalid URL\")\n        return\n    }\n    \n    let player = AVPlayer(url: url)\n    let playerViewController = AVPlayerViewController()\n    playerViewController.player = player\n    \n    present(playerViewController, animated: true) {\n        playerViewController.player?.play()\n    }\n}\n\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    let button = UIButton(type: .system)\n    button.setTitle(\"Play Video\", for: .normal)\n    button.addTarget(self, action: #selector(playButtonTapped), for: .touchUpInside)\n    // Add the button to the view and set up constraints as needed\n}\n\n@objc func playButtonTapped() {\n    playVideo(from: \"https://example.com/video.mp4\")\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sets up a Core Location manager to request the user's location and updates the UI with the current location.",
      "input": "First, import CoreLocation. Then, create a CLLocationManager instance and set its properties, such as the delegate and desired accuracy. Request authorization for using the user's location and start updating the location. Implement the required CLLocationManagerDelegate methods to handle location updates and update the UI with the current location.",
      "output": "import CoreLocation\n\nclass ViewController: UIViewController, CLLocationManagerDelegate {\n    private let locationManager = CLLocationManager()\n    private let label = UILabel()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupLocationManager()\n    }\n\n    func setupLocationManager() {\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            label.text = \"Latitude: \\(location.coordinate.latitude), Longitude: \\(location.coordinate.longitude)\"\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFail"
    },
    {
      "instruction": "Write a Swift function that fetches a JSON from a URL and decodes it into a specific Codable structure.",
      "input": "let urlString = \"https://api.example.com/data\"",
      "output": "import Foundation\n\nstruct DataItem: Codable {\n    let id: Int\n    let title: String\n    let description: String\n}\n\nfunc fetchData(from urlString: String, completion: @escaping (Result<[DataItem], Error>) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(.failure(NSError(domain: \"\", code: -1, userInfo: nil)))\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"\", code: -2, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let decoder = JSONDecoder()\n            let dataItems = try decoder.decode([DataItem].self, from: data)\n            completion(.success(dataItems))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    \n    task.resume()\n}\n\nfetchData(from: \"https://api.example.com/data\") { result in\n    switch result {\n    case .success(let dataItems):\n        print(dataItems)\n    case .failure(let error):\n        print(\"Error: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UIButton with rounded corners and a background color.",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomButton(title: String, backgroundColor: UIColor, cornerRadius: CGFloat) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.backgroundColor = backgroundColor\n    button.layer.cornerRadius = cornerRadius\n    button.setTitleColor(.white, for: .normal)\n    return button\n}\n\nlet customButton = createCustomButton(title: \"Click me!\", backgroundColor: .blue, cornerRadius: 10)\ncustomButton.frame = CGRect(x: 0, y: 0, width: 150, height: 50)"
    },
    {
      "instruction": " \nWrite a Swift function that asynchronously downloads an image from a URL and sets it to a UIImageView.",
      "input": "let imageUrlString = \"https://example.com/image.jpg\"\nlet imageView = UIImageView()",
      "output": "import UIKit\n\nfunc downloadImage(from urlString: String, to imageView: UIImageView) {\n    guard let url = URL(string: urlString) else { return }\n    \n    DispatchQueue.global().async {\n        if let data = try? Data(contentsOf: url), let image = UIImage(data: data) {\n            DispatchQueue.main.async {\n                imageView.image = image\n            }\n        }\n    }\n}\n\ndownloadImage(from: \"https://example.com/image.jpg\", to: imageView)"
    },
    {
      "instruction": " \nWrite a Swift function that creates and presents an UIAlertController with a given title, message, and UIAlertAction.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(on viewController: UIViewController, title: String, message: String, actionTitle: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: actionTitle, style: .default, handler: nil)\n    alertController.addAction(action)\n    viewController.present(alertController, animated: true, completion: nil)\n}\n\n// Usage\nlet viewController = UIViewController()\nshowAlert(on: viewController, title: \"Alert\", message: \"This is an alert message.\", actionTitle: \"OK\")"
    },
    {
      "instruction": " \nWrite a Swift function that saves a string value to UserDefaults and another function that retrieves the saved value.",
      "input": "",
      "output": "import Foundation\n\nfunc saveStringToUserDefaults(key: String, value: String) {\n    UserDefaults.standard.set(value, forKey: key)\n}\n\nfunc getStringFromUserDefaults(key: String) -> String? {\n    return UserDefaults.standard.string(forKey: key)\n}\n\nlet key = \"exampleKey\"\nlet value = \"exampleValue\"\n\nsaveStringToUserDefaults(key: key, value: value)\nif let retrievedValue = getStringFromUserDefaults(key: key) {\n    print(\"Retrieved value: \\(retrievedValue)\")\n}"
    },
    {
      "instruction": " \nWrite a Swift function that starts a timer that prints \"Hello, World!\" every second.",
      "input": "",
      "output": "import Foundation\n\nfunc startTimer() {\n    Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { _ in\n        print(\"Hello, World!\")\n    }\n}\n\nstartTimer()\nRunLoop.main.run()"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UILabel with a given font size, text color, and number of lines.",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomLabel(fontSize:CGFloat, textColor: UIColor, numberOfLines: Int) -> UILabel {\n    let label = UILabel()\n    label.font = UIFont.systemFont(ofSize: fontSize)\n    label.textColor = textColor\n    label.numberOfLines = numberOfLines\n    return label\n}\n\nlet customLabel = createCustomLabel(fontSize: 14, textColor: .black, numberOfLines: 2)\ncustomLabel.text = \"This is a custom UILabel with a specified font size, text color, and number of lines.\""
    },
    {
      "instruction": " \nWrite a Swift function that creates an instance of a custom UIView subclass with a given frame and adds a gesture recognizer to it.",
      "input": "",
      "output": "import UIKit\n\nclass CustomView: UIView {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        self.backgroundColor = .blue\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n\nfunc createCustomView(with frame: CGRect, tapAction: Selector, target: AnyObject) -> CustomView {\n    let customView = CustomView(frame: frame)\n    let tapGestureRecognizer = UITapGestureRecognizer(target: target, action: tapAction)\n    customView.addGestureRecognizer(tapGestureRecognizer)\n    return customView\n}\n\n// Usage\nclass ViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let customView = createCustomView(with: CGRect(x: 0, y: 0, width: 100, height: 100), tapAction: #selector(viewTapped), target: self)\n        self.view.addSubview(customView)\n    }\n    \n    @objc func viewTapped() {\n        print(\"Custom view tapped\")\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that adds a custom UIButton to a UIView with constraints",
      "input": "",
      "output": "func addCustomButton(to view: UIView) {\n    let customButton = UIButton(type: .system)\n    customButton.setTitle(\"Custom Button\", for: .normal)\n    customButton.translatesAutoresizingMaskIntoConstraints = false\n    view.addSubview(customButton)\n    \n    NSLayoutConstraint.activate([\n        customButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n        customButton.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n        customButton.widthAnchor.constraint(equalToConstant: 200),\n        customButton.heightAnchor.constraint(equalToConstant: 50)\n    ])\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sets up a UICollectionView with a custom UICollectionViewCell subclass",
      "input": "",
      "output": "func setupCollectionView(in view: UIView) {\n    let layout = UICollectionViewFlowLayout()\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCollectionViewCell\")\n    view.addSubview(collectionView)\n    \n    NSLayoutConstraint.activate([\n        collectionView.topAnchor.constraint(equalTo: view.topAnchor),\n        collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n        collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n        collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n    ])\n}\n\n// Make sure to create a UICollectionViewCell subclass called CustomCollectionViewCell\n// class CustomCollectionViewCell: UICollectionViewCell {\n// // Custom cell implementation\n// }"
    },
    {
      "instruction": " \nWrite a Swift function that presents a UIImagePickerController with specified source type and delegate",
      "input": "",
      "output": "func presentImagePickerController(sourceType: UIImagePickerController.SourceType, delegate: (UIImagePickerControllerDelegate & UINavigationControllerDelegate), from viewController: UIViewController) {\n    let imagePickerController = UIImagePickerController()\n    imagePickerController.sourceType = sourceType\n    imagePickerController.delegate = delegate\n    viewController.present(imagePickerController, animated: true)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sets up a UISearchBar with a delegate and adds it to a UIView",
      "input": "",
      "output": "func setupSearchBar(delegate: UISearchBarDelegate, in view: UIView) {\n    let searchBar = UISearchBar()\n    searchBar.delegate = delegate\n    searchBar.translatesAutoresizingMaskIntoConstraints = false\n    view.addSubview(searchBar)\n    \n    NSLayoutConstraint.activate([\n        searchBar.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n        searchBar.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n        searchBar.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n    ])\n}"
    },
    {
      "instruction": " \nWrite a Swift function that initializes a CLLocationManager, sets its delegate, and starts updating the user's location",
      "input": "",
      "output": "func startLocationUpdates(delegate: CLLocationManagerDelegate) {\n    let locationManager = CLLocationManager()\n    locationManager.delegate = delegate\n    locationManager.requestWhenInUseAuthorization()\n    locationManager.startUpdatingLocation()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sets up a UIPickerView with a data source and delegate, and adds it to a UIView",
      "input": "",
      "output": "func setupPickerView(dataSource: UIPickerViewDataSource, delegate: UIPickerViewDelegate, in view: UIView) {\n    let pickerView = UIPickerView()\n    pickerView.dataSource = dataSource\n    pickerView.delegate = delegate\n    pickerView.translatesAutoresizingMaskIntoConstraints = false\n    view.addSubview(pickerView)\n    \n    NSLayoutConstraint.activate([\n        pickerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n        pickerView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n    ])\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UIStackView with an array of UIViews, sets its alignment and distribution, and adds it to a UIView",
      "input": "",
      "output": "func createStackView(views: [UIView], alignment: UIStackView.Alignment, distribution: UIStackView.Distribution, in view: UIView) {\n    let stackView = UIStackView(arrangedSubviews: views)\n    stackView.alignment = alignment\n    stackView.distribution = distribution\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    view.addSubview(stackView)\n    \n    NSLayoutConstraint.activate([\n        stackView.topAnchor.constraint(equalTo: view.topAnchor),\n        stackView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n        stackView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n        stackView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n    ])\n}"
    },
    {
      "instruction": " \nWrite a Swift function that asynchronously downloads an image from a URL and sets it to a UIImageView",
      "input": "",
      "output": "func downloadImage(from url: URL, to imageView: UIImageView) {\n    DispatchQueue.global().async {\n        if let data = try? Data(contentsOf: url),\n           let image = UIImage(data: data) {\n            DispatchQueue.main.async {\n                imageView.image = image\n            }\n        }\n    }\n}"
    },
    {
      "instruction": "Create a Swift function that takes a URL string and asynchronously downloads an image, then displays it in a UIImageView in a given UIViewController.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    @IBOutlet weak var imageView: UIImageView!\n\n    func downloadImage(from urlString: String) {\n        guard let url = URL(string: urlString) else { return }\n\n        URLSession.shared.dataTask(with: url) { (data, _, error) in\n            if let error = error {\n                print(\"Error downloading image: \\(error.localizedDescription)\")\n                return\n            }\n            \n            guard let data = data, let image = UIImage(data: data) else { return }\n            \n            DispatchQueue.main.async {\n                self.imageView.image = image\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UICollectionViewCell class with an image and a label, and register it for use in a UICollectionView.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n\n    override func awakeFromNib() {\n        super.awakeFromNib()\n    }\n}\n\nclass ViewController: UIViewController, UICollectionViewDataSource {\n    @IBOutlet weak var collectionView: UICollectionView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        collectionView.register(UINib(nibName: CustomCollectionViewCell.reuseIdentifier, bundle: nil),\n                                forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n        collectionView.dataSource = self\n    }\n\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath)\n        -> UICollectionViewCell {\n            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n\n            cell.imageView.image = UIImage(named: \"your_image_name\")\n            cell.titleLabel.text = \"Title \\(indexPath.row)\"\n\n            return cell\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that creates a UITableView with custom UITableViewCell and implements UITableViewDelegate and UITableViewDataSource methods.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    static let reuseIdentifier = \"CustomTableViewCell\"\n}\n\nclass MyTableViewController: UITableViewController {\n    \n    private let dataSource = [\"Item 1\", \"Item 2\", \"Item 3\"]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: CustomTableViewCell.reuseIdentifier)\n    }\n    \n    // MARK: - UITableViewDataSource\n    \n    override func numberOfSections(in tableView: UITableView) -> Int {\n        return 1\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return dataSource.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.reuseIdentifier, for: indexPath)\n        cell.textLabel?.text = dataSource[indexPath.row]\n        return cell\n    }\n    \n    // MARK: - UITableViewDelegate\n    \n    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        print(\"Selected item: \\(dataSource[indexPath.row])\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UICollectionView with custom UICollectionViewCell and implements UICollectionViewDelegate and UICollectionViewDataSource methods.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n}\n\nclass MyCollectionViewController: UICollectionViewController {\n    \n    private let dataSource = [\"Item 1\", \"Item 2\", \"Item 3\"]\n    \n    init() {\n        let layout = UICollectionViewFlowLayout()\n        super.init(collectionViewLayout: layout)\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n    }\n    \n    // MARK: - UICollectionViewDataSource\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return dataSource.count\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath)\n        cell.backgroundColor = .systemBlue\n        return cell\n    }\n    \n    // MARK: - UICollectionViewDelegate\n    \n    override func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {\n        print(\"Selected item: \\(dataSource[indexPath.row])\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UIButton with a closure-based action.",
      "input": "",
      "output": "import UIKit\n\nclass ClosureButton: UIButton {\n    private var action: (() -> Void)?\n    \n    func addAction(_ action: @escaping () -> Void) {\n        self.action = action\n        addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n    }\n    \n    @objc private func buttonTapped() {\n        action?()\n    }\n}\n\nclass MyViewController: UIViewController {\n    \n    private lazy var customButton: ClosureButton = {\n        let button = ClosureButton(type: .system)\n        button.translatesAutoresizingMaskIntoConstraints = false\n        button.setTitle(\"Tap me\", for: .normal)\n        button.addAction { [weak self] in\n            self?.buttonTapped()\n        }\n        return button\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(customButton)\n        \n        NSLayoutConstraint.activate([\n            customButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            customButton.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n        ])\n    }\n    \n    private func buttonTapped() {\n        print(\"Button tapped!\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UIView subclass with a UITapGestureRecognizer.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTapView: UIView {\n    \n    private var tapAction: (() -> Void)?\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupTapGesture()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupTapGesture()\n    }\n    \n    private func setupTapGesture() {\n        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(viewTapped))\n        addGestureRecognizer(tapGesture)\n    }\n    \n    func onTapped(_ action: @escaping () -> Void) {\n        tapAction = action\n    }\n    \n    @objc private func viewTapped() {\n        tapAction?()\n    }\n}\n\nclass MyViewController: UIViewController {\n    \n    private lazy var customTapView: CustomTapView = {\n        let view = CustomTapView()\n        view.translatesAutoresizingMaskIntoConstraints = false\n        view.backgroundColor= .systemBlue\n        view.onTapped { [weak self] in\n            self?.viewTapped()\n        }\n        return view\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(customTapView)\n        \n        NSLayoutConstraint.activate([\n            customTapView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            customTapView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            customTapView.widthAnchor.constraint(equalToConstant: 100),\n            customTapView.heightAnchor.constraint(equalToConstant: 100),\n        ])\n    }\n    \n    private func viewTapped() {\n        print(\"View tapped!\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a UISlider to a UIView and listens for value changes.",
      "input": "",
      "output": "import UIKit\n\nclass MyViewController: UIViewController {\n    \n    private lazy var slider: UISlider = {\n        let slider = UISlider()\n        slider.translatesAutoresizingMaskIntoConstraints = false\n        slider.addTarget(self, action: #selector(sliderValueChanged(_:)), for: .valueChanged)\n        return slider\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(slider)\n        \n        NSLayoutConstraint.activate([\n            slider.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            slider.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            slider.widthAnchor.constraint(equalToConstant: 200),\n        ])\n    }\n    \n    @objc private func sliderValueChanged(_ sender: UISlider) {\n        print(\"Slider value changed: \\(sender.value)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that presents a UIAlertController with multiple UIAlertAction options.",
      "input": "",
      "output": "import UIKit\n\nclass MyViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        showActionSheet()\n    }\n    \n    private func showActionSheet() {\n        let alertController = UIAlertController(title: \"Choose an Option\", message: nil, preferredStyle: .actionSheet)\n        \n        let option1Action = UIAlertAction(title: \"Option 1\", style: .default) { _ in\n            print(\"Option 1 selected\")\n        }\n        let option2Action = UIAlertAction(title: \"Option 2\", style: .default) { _ in\n            print(\"Option 2 selected\")\n        }\n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n        \n        alertController.addAction(option1Action)\n        alertController.addAction(option2Action)\n        alertController.addAction(cancelAction)\n        \n        present(alertController, animated: true)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that manages a URLSession data task to fetch data from a URL.",
      "input": "",
      "output": "import UIKit\n\nclass MyViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        fetchData()\n    }\n    \n    private func fetchData() {\n        guard let url = URL(string: \"https://api.example.com/data\") else { return }\n        let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let error = error {\n                print(\"Error: \\(error)\")\n                return\n            }\n            \n            if let data = data {\n                print(\"Data: \\(data)\")\n            }\n        }\n        task.resume()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that decodes JSON data using the Codable protocol and JSONDecoder.",
      "input": "",
      "output": "import UIKit\n\nstruct Person: Codable {\n    let name: String\n    let age: Int\n}\n\nclass MyViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        decodeJSON()\n    }\n    \n    private func decodeJSON() {\n        let jsonString = \"\"\"\n        {\n            \"name\": \"John Doe\",\n            \"age\": 30\n        }\n        \"\"\"\n        \n        guard let jsonData = jsonString.data(using: .utf8) else { return }\n        let decoder = JSONDecoder()\n        \n        do {\n            let person = try decoder.decode(Person.self, from: jsonData)\n            print(\"Name: \\(person.name), Age: \\(person.age)\")\n        } catch {\n            print(\"Error decoding JSON: \\(error)\")\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that adds a new contact to a list of contacts in a UITableViewController.",
      "input": "",
      "output": "import UIKit\n\nclass Contact {\n    var name: String\n    var phoneNumber: String\n\n    init(name: String, phoneNumber: String) {\n        self.name = name\n        self.phoneNumber = phoneNumber\n    }\n}\n\nclass ContactsTableViewController: UITableViewController {\n\n    var contacts: [Contact] = []\n\n    // Add a new contact to the list of contacts\n    func addContact(_ contact: Contact) {\n        contacts.append(contact)\n        tableView.reloadData()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that validates user input for email and password, returning true if both are valid.",
      "input": "",
      "output": "import Foundation\n\nfunc isValidEmail(_ email: String) -> Bool {\n    let emailRegex = \"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,64}\"\n    let emailPredicate = NSPredicate(format: \"SELF MATCHES %@\", emailRegex)\n    return emailPredicate.evaluate(with: email)\n}\n\nfunc isValidPassword(_ password: String) -> Bool {\n    let passwordRegex = \"^(?=.*[A-Za-z])(?=.*\\\\d)[A-Za-z\\\\d]{8,}$\"\n    let passwordPredicate = NSPredicate(format: \"SELF MATCHES %@\", passwordRegex)\n    return passwordPredicate.evaluate(with: password)\n}\n\nfunc validateUserInput(email: String, password: String) -> Bool {\n    return isValidEmail(email) && isValidPassword(password)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that updates the user interface when the device's orientation changes.",
      "input": "",
      "output": "import UIKit\n\nclass OrientationSensitiveViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        NotificationCenter.default.addObserver(self, selector: #selector(orientationDidChange), name: UIDevice.orientationDidChangeNotification, object: nil)\n    }\n\n    @objc func orientationDidChange(_ notification: NSNotification) {\n        updateUIForOrientation()\n    }\n\n    func updateUIForOrientation() {\n        let orientation = UIDevice.current.orientation\n        switch orientation {\n        case .portrait, .portraitUpsideDown:\n            // Update UI for portrait orientation\n            break\n        case .landscapeLeft, .landscapeRight:\n            // Update UI for landscape orientation\n            break\n        default:\n            break\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that requests the user's current location using CoreLocation and prints the coordinates.",
      "input": "",
      "output": "import CoreLocation\nimport UIKit\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n\n    let locationManager = CLLocationManager()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    func requestUserLocation() {\n        locationManager.requestLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            print(\"User's current location: (\\(location.coordinate.latitude), \\(location.coordinate.longitude))\")\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error requesting location: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UICollectionViewCell with an image and a label.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    var imageView: UIImageView!\n    var label: UILabel!\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n\n        imageView = UIImageView(frame: CGRect(x: 0, y: 0, width: frame.size.width, height: frame.size.height * 0.8))\n        imageView.contentMode = .scaleAspectFit\n        addSubview(imageView)\n\n        label = UILabel(frame: CGRect(x: 0, y: frame.size.height * 0.8, width: frame.size.width, height: frame.size.height * 0.2))\n        label.textAlignment = .center\n        addSubview(label)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that receives a string and returns the number of words in the string.",
      "input": "",
      "output": "import Foundation\n\nfunc wordCount(from string: String) -> Int {\n    let components = string.components(separatedBy: .whitespacesAndNewlines)\n    let words = components.filter { !$0.isEmpty }\n    return words.count\n}"
    },
    {
      "instruction": " \nWrite a Swift function to download an image from a URLand display it in a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass ImageDownloader {\n    \n    func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n        let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let data = data, let image = UIImage(data: data) {\n                DispatchQueue.main.async {\n                    completion(image)\n                }\n            } else {\n                print(\"Error downloading image: \\(error?.localizedDescription ?? \"Unknown error\")\")\n                completion(nil)\n            }\n        }\n        task.resume()\n    }\n}\n\nclass ImageViewController: UIViewController {\n    @IBOutlet weak var imageView: UIImageView!\n    \n    func displayImage(from url: String) {\n        guard let imageUrl = URL(string: url) else {\n            print(\"Invalid URL\")\n            return\n        }\n        \n        let imageDownloader = ImageDownloader()\n        imageDownloader.downloadImage(from: imageUrl) { [weak self] (image) in\n            if let image = image {\n                self?.imageView.image = image\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that checks if the user has granted the app permission to access the camera and requests permission if not.",
      "input": "",
      "output": "import AVFoundation\nimport UIKit\n\nclass CameraPermissionViewController: UIViewController {\n\n    func checkCameraPermission() {\n        let cameraAuthorizationStatus = AVCaptureDevice.authorizationStatus(for: .video)\n\n        switch cameraAuthorizationStatus {\n        case .notDetermined:\n            requestCameraPermission()\n        case .authorized:\n            // Camera permission granted\n            break\n        case .denied, .restricted:\n            // Camera permission not granted\n            break\n        @unknown default:\n            fatalError(\"Unknown camera authorization status\")\n        }\n    }\n\n    func requestCameraPermission() {\n        AVCaptureDevice.requestAccess(for: .video) { granted in\n            DispatchQueue.main.async {\n                if granted {\n                    // Camera permission granted\n                } else {\n                    // Camera permission denied\n                }\n            }\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to create and configure a UITableView with a custom cell class and register the cell.",
      "input": "",
      "output": "func createTableView<Cell: UITableViewCell>(cellClass: Cell.Type, reuseIdentifier: String) -> UITableView {\n    let tableView = UITableView(frame: .zero, style: .plain)\n    tableView.translatesAutoresizingMaskIntoConstraints = false\n    tableView.register(cellClass, forCellReuseIdentifier: reuseIdentifier)\n    return tableView\n}"
    },
    {
      "instruction": " \nWrite a Swift function to set up constraints for a view inside a parent view with a given margin.",
      "input": "",
      "output": "func setupConstraints(view: UIView, parentView: UIView, margin: CGFloat) {\n    NSLayoutConstraint.activate([\n        view.topAnchor.constraint(equalTo: parentView.topAnchor, constant: margin),\n        view.leadingAnchor.constraint(equalTo: parentView.leadingAnchor, constant: margin),\n        view.trailingAnchor.constraint(equalTo: parentView.trailingAnchor, constant: -margin),\n        view.bottomAnchor.constraint(equalTo: parentView.bottomAnchor, constant: -margin)\n    ])\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UIButton with a title, background color, and corner radius.",
      "input": "",
      "output": "func createButton(title: String, backgroundColor: UIColor, cornerRadius: CGFloat) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.backgroundColor = backgroundColor\n    button.layer.cornerRadius = cornerRadius\n    button.translatesAutoresizingMaskIntoConstraints = false\n    return button\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UICollectionView with a given layout.",
      "input": "",
      "output": "func createCollectionView(layout: UICollectionViewLayout) -> UICollectionView {\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    return collectionView\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UISegmentedControl with an array of titles.",
      "input": "",
      "output": "func createSegmentedControl(titles: [String]) -> UISegmentedControl {\n    let segmentedControl = UISegmentedControl(items: titles)\n    segmentedControl.translatesAutoresizingMaskIntoConstraints = false\n    return segmentedControl\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UISlider with minimum, maximum, and current values.",
      "input": "",
      "output": "func createSlider(minValue: Float, maxValue: Float, currentValue: Float) -> UISlider {\n    let slider = UISlider()\n    slider.minimumValue = minValue\n    slider.maximumValue = maxValue\n    slider.value = currentValue\n    slider.translatesAutoresizingMaskIntoConstraints = false\n    return slider\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UIActivityIndicatorView with a specific style and color.",
      "input": "",
      "output": "func createActivityIndicatorView(style: UIActivityIndicatorView.Style, color: UIColor) -> UIActivityIndicatorView {\n    let activityIndicator = UIActivityIndicatorView(style: style)\n    activityIndicator.color = color\n    activityIndicator.translatesAutoresizingMaskIntoConstraints = false\n    return activityIndicator\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UIProgressView with a progressTintColor and trackTintColor.",
      "input": "",
      "output": "func createProgressView(progressTintColor: UIColor, trackTintColor: UIColor) -> UIProgressView {\n    let progressView = UIProgressView(progressViewStyle: .default)\n    progressView.progressTintColor = progressTintColor\n    progressView.trackTintColor = trackTintColor\n    progressView.translatesAutoresizingMaskIntoConstraints = false\n    return progressView\n}"
    },
    {
      "instruction": "Write a swift function that fetches current location and display it in a UILabel",
      "input": "",
      "output": "import UIKit\nimport CoreLocation\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n    \n    let locationManager = CLLocationManager()\n    let locationLabel = UILabel()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        setupLocationManager()\n        setupLocationLabel()\n    }\n    \n    func setupLocationManager() {\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n    \n    func setupLocationLabel() {\n        locationLabel.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(locationLabel)\n        \n        NSLayoutConstraint.activate([\n            locationLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            locationLabel.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            locationLabel.text = \"Latitude: \\(location.coordinate.latitude), Longitude: \\(location.coordinate.longitude)\"\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a swift function that plays a video from a local file using AVPlayer",
      "input": "",
      "output": "import UIKit\nimport AVKit\nimport AVFoundation\n\nclass VideoPlayerViewController: UIViewController {\n    \n    var player: AVPlayer?\n    var playerLayer: AVPlayerLayer?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        setupPlayer()\n    }\n    \n    func setupPlayer() {\n        guard let videoUrl = Bundle.main.url(forResource: \"video\", withExtension: \"mp4\") else {\n            print(\"Video file not found\")\n            return\n        }\n        \n        player = AVPlayer(url: videoUrl)\n        playerLayer = AVPlayerLayer(player: player)\n        \n        if let playerLayer = playerLayer {\n            playerLayer.frame = view.bounds\n            view.layer.addSublayer(playerLayer)\n        }\n        \n        player?.play()\n    }\n    \n    override func viewDidDisappear(_ animated: Bool) {\n        super.viewDidDisappear(animated)\n        player?.pause()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to load images asynchronously using URLSession",
      "input": "",
      "output": "import UIKit\n\nclass AsyncImageViewController: UIViewController {\n    \n    let imageView = UIImageView()\n    let imageUrlString = \"https://example.com/image.jpg\"\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        setupImageView()\n        loadImageAsync(with: imageUrlString)\n    }\n    \n    func setupImageView() {\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(imageView)\n        \n        NSLayoutConstraint.activate([\n            imageView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            imageView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            imageView.widthAnchor.constraint(equalToConstant: 200),\n            imageView.heightAnchor.constraint(equalToConstant: 200)\n        ])\n    }\n    \n    func loadImageAsync(with urlString: String) {\n        guard let url = URL(string: urlString) else { return }\n        \n        URLSession.shared.dataTask(with: url) { [weak self] (data, response, error) in\n            guard let data = data, error == nil else { return }\n            \n            DispatchQueue.main.async {\n                self?.imageView.image = UIImage(data: data)\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to display a UIAlertController with multiple actions",
      "input": "",
      "output": "import UIKit\n\nclass AlertViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        displayAlert()\n    }\n    \n    func displayAlert() {\n        let alertController = UIAlertController(title: \"Choose an Option\", message: \"Please select an option below\", preferredStyle: .alert)\n        \n        let optionOneAction = UIAlertAction(title: \"Option One\", style: .default) { _ in\n            print(\"Option One selected\")\n        }\n        \n        let optionTwoAction = UIAlertAction(title: \"Option Two\", style: .default) { _ in\n            print(\"Option Two selected\")\n        }\n        \n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n        \n        alertController.addAction(optionOneAction)\n        alertController.addAction(optionTwoAction)\n        alertController.addAction(cancelAction)\n        \n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UICollectionView with custom UICollectionViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {\n\n    let collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .vertical\n        layout.itemSize = CGSize(width: 100, height: 100)\n        layout.sectionInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)\n        \n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.backgroundColor = .white\n        return collectionView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.addSubview(collectionView)\n        collectionView.delegate = self\n        collectionView.dataSource = self\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n        \n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor)\n        ])\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 20\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        cell.backgroundColor = .red\n        return cell\n    }\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        \n        // Customize the cell\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to search for text in a UITextView and highlight the found occurrences",
      "input": "",
      "output": "import UIKit\n\nclass SearchTextViewController: UIViewController {\n    \n    let textView = UITextView()\n    let searchButton = UIButton(type: .system)\n    let searchString = \"example\"\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        setupTextView()\n        setupSearchButton()\n    }\n    \n    func setupTextView() {\n        textView.translatesAutoresizingMaskIntoConstraints = false\n        textView.text = \"This is an example text. This example will help demonstrate how to search and highlight text in UITextView.\"\n        view.addSubview(textView)\n        \n        NSLayoutConstraint.activate([\n            textView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            textView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),\n            textView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),\n            textView.heightAnchor.constraint(equalToConstant: 200)\n        ])\n    }\n    \n    func setupSearchButton() {\n        searchButton.translatesAutoresizingMaskIntoConstraints = false\n        searchButton.setTitle(\"Search and Highlight\", for: .normal)\n        searchButton.addTarget(self, action: #selector(searchAndHighlight), for: .touchUpInside)\n        view.addSubview(searchButton)\n        \n        NSLayoutConstraint.activate([\n            searchButton.topAnchor.constraint(equalTo: textView.bottomAnchor, constant: 16),\n            searchButton.centerXAnchor.constraint(equalTo: view.centerXAnchor)\n        ])\n    }\n    \n    @objc func searchAndHighlight() {\n        let attributedText = NSMutableAttributedString(string: textView.text)\n        let range = NSRange(location: 0, length: textView.text.count)\n        let regex = try? NSRegularExpression(pattern: searchString, options: .caseInsensitive)\n        \n        regex?.enumerateMatches(in: textView.text, options: [], range: range) { (result, flags, stop) in\n            if let matchRange = result?.range {\n                let highlightAttributes: [NSAttributedString.Key: Any] = [\n                    .backgroundColor: UIColor.yellow\n                ]\n                attributedText.addAttributes(highlightAttributes, range: matchRange)\n            }\n        }\n        \n        textView.attributedText = attributedText\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UITableView with collapsible sections",
      "input": "",
      "output": "import UIKit\n\nclass CollapsibleTableViewController: UITableViewController {\n    \n    struct Section {\n        var title: String\n        var items: [String]\n        var isExpanded: Bool\n    }\n    \n    var sections: [Section] = [\n        Section(title: \"Section 1\", items: [\"Item 1\", \"Item 2\", \"Item 3\"], isExpanded: false),\n        Section(title: \"Section 2\", items: [\"Item 4\", \"Item 5\", \"Item 6\"], isExpanded: false),\n        Section(title: \"Section 3\", items: [\"Item 7\", \"Item 8\", \"Item 9\"], isExpanded: false)\n    ]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"cell\")\n    }\n    \n    override func numberOfSections(in tableView: UITableView) -> Int {\n        return sections.count\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        if sections[section].isExpanded {\n            return sections[section].items.count\n        }\n        return "
    },
    {
      "instruction": "Write a Swift function to display an alert with a title, message, and action in a view controller.",
      "input": "",
      "output": "func showAlert(in viewController: UIViewController, title: String, message: String, actionTitle: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let alertAction = UIAlertAction(title: actionTitle, style: .default, handler: nil)\n    alertController.addAction(alertAction)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UITableViewCell with a UILabel and UIImageView.",
      "input": "",
      "output": "class CustomTableViewCell: UITableViewCell {\n    let titleLabel = UILabel()\n    let thumbnailImageView = UIImageView()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        addSubview(titleLabel)\n        addSubview(thumbnailImageView)\n        configureConstraints()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func configureConstraints() {\n        titleLabel.translatesAutoresizingMaskIntoConstraints = false\n        thumbnailImageView.translatesAutoresizingMaskIntoConstraints = false\n\n        NSLayoutConstraint.activate([\n            thumbnailImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 8),\n            thumbnailImageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            titleLabel.leadingAnchor.constraint(equalTo: thumbnailImageView.trailingAnchor, constant: 8),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -8),\n            titleLabel.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and display a UICollectionView with custom UICollectionViewCell.",
      "input": "",
      "output": "class CustomCollectionViewController: UICollectionViewController {\n    private let reuseIdentifier = \"CustomCell\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: reuseIdentifier)\n        collectionView.backgroundColor = .white\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        cell.configureCell()\n        return cell\n    }\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    func configureCell() {\n        backgroundColor = .blue\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to handle user location updates using CLLocationManager.",
      "input": "",
      "output": "class LocationHandler: NSObject, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n\n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        guard let location = locations.last else { return }\n        print(\"Current location: \\(location)\")\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error updating location: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to store and retrieve data using UserDefaults.",
      "input": "",
      "output": "func storeData(key: String, value: String) {\n    UserDefaults.standard.set(value, forKey: key)\n}\n\nfunc retrieveData(key: String) -> String? {\n    return UserDefaults.standard.string(forKey: key)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to download an image from a URL and display it in an UIImageView.",
      "input": "",
      "output": "func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            completion(nil)\n            return\n        }\n        let image = UIImage(data: data)\n        completion(image)\n    }.resume()\n}\n\nfunc displayImageInImageView(imageView: UIImageView, url: URL) {\n    downloadImage(from: url) { image in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a login flow using Firebase Authentication.",
      "input": "",
      "output": "import FirebaseAuth\n\nfunc loginUser(email: String, password: String, completion: @escaping (Result<User, Error>) -> Void) {\n    Auth.auth().signIn(withEmail: email, password: password) { [weak self] authResult, error in\n        guard let strongSelf = self else { return }\n        if let error = error {\n            completion(.failure(error))\n        } else if let authResult = authResult {\n            completion(.success(authResult.user))\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swiftfunction to create and display a UITableView with a custom UITableViewCell.",
      "input": "",
      "output": "class CustomTableViewController: UITableViewController {\n    private let reuseIdentifier = \"CustomTableViewCell\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: reuseIdentifier)\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 10\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: reuseIdentifier, for: indexPath) as! CustomTableViewCell\n        cell.titleLabel.text = \"Example \\(indexPath.row + 1)\"\n        cell.thumbnailImageView.image = UIImage(named: \"example_image\")\n        return cell\n    }\n}\n\nclass CustomTableViewCell: UITableViewCell {\n    let titleLabel = UILabel()\n    let thumbnailImageView = UIImageView()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        addSubview(titleLabel)\n        addSubview(thumbnailImageView)\n        configureConstraints()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func configureConstraints() {\n        titleLabel.translatesAutoresizingMaskIntoConstraints = false\n        thumbnailImageView.translatesAutoresizingMaskIntoConstraints = false\n\n        NSLayoutConstraint.activate([\n            thumbnailImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 8),\n            thumbnailImageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            titleLabel.leadingAnchor.constraint(equalTo: thumbnailImageView.trailingAnchor, constant: 8),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -8),\n            titleLabel.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to configure and display a table view with custom cells that show a user's name, profile image, and status update in a UITableViewCell.",
      "input": "class CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var profileImageView: UIImageView!\n    @IBOutlet weak var nameLabel: UILabel!\n    @IBOutlet weak var statusLabel: UILabel!\n}\n\nstruct User {\n    let name: String\n    let profileImage: UIImage\n    let statusUpdate: String\n}\n\nclass ViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {\n    @IBOutlet weak var tableView: UITableView!\n\n    private var users: [User] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        configureTableView()\n    }\n\n    func configureTableView() {\n        tableView.delegate = self\n        tableView.dataSource = self\n        tableView.register(UINib(nibName: \"CustomTableViewCell\", bundle: nil), forCellReuseIdentifier: \"CustomTableViewCell\")\n    }\n    // other code\n}",
      "output": "    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return users.count\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        guard let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomTableViewCell\", for: indexPath) as? CustomTableViewCell else {\n            fatalError(\"Unable to dequeue CustomTableViewCell\")\n        }\n        \n        let user = users[indexPath.row]\n        cell.nameLabel.text = user.name\n        cell.profileImageView.image = user.profileImage\n        cell.statusLabel.text = user.statusUpdate\n        \n        return cell\n    }"
    },
    {
      "instruction": " \n\nWrite a Swift function to create a UICollectionView with custom UICollectionViewCell to display a list of movies with their title, poster image, and release date.",
      "input": "class MovieCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var posterImageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n    @IBOutlet weak var releaseDateLabel: UILabel!\n}\n\nstruct Movie {\n    let title: String\n    let posterImage: UIImage\n    let releaseDate: String\n}\n\nclass ViewController: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource {\n    @IBOutlet weak var collectionView: UICollectionView!\n\n    private var movies: [Movie] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        configureCollectionView()\n    }\n\n    func configureCollectionView() {\n        collectionView.delegate = self\n        collectionView.dataSource = self\n        collectionView.register(UINib(nibName: \"MovieCollectionViewCell\", bundle: nil), forCellWithReuseIdentifier: \"MovieCollectionViewCell\")\n    }\n    // other code\n}",
      "output": "    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return movies.count\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"MovieCollectionViewCell\", for: indexPath) as? MovieCollectionViewCell else {\n            fatalError(\"Unable to dequeue MovieCollectionViewCell\")\n        }\n        \n        let movie = movies[indexPath.row]\n        cell.titleLabel.text = movie.title\n        cell.posterImageView.image = movie.posterImage\n        cell.releaseDateLabel.text = movie.releaseDate\n        \n        return cell\n    }"
    },
    {
      "instruction": " \n\nWrite a Swift function to create a custom UIView with a circular progress bar that represents the percentage of a task completed.",
      "input": "class CircleProgressView: UIView {\n    private var circleLayer = CAShapeLayer()\n    private var progressLayer = CAShapeLayer()\n\n    var progress: CGFloat = 0 {\n        didSet {\n            progressLayer.strokeEnd = progress\n        }\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        createCircularPath()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        createCircularPath()\n    }\n    \n    private func createCircularPath() {\n        // code to create path\n    }\n}",
      "output": "    private func createCircularPath() {\n        let circularPath = UIBezierPath(arcCenter: CGPoint(x: frame.size.width / 2.0, y: frame.size.height / 2.0), radius: frame.size.width / 2.0, startAngle: -.pi / 2, endAngle: 3 * .pi / 2, clockwise: true)\n        \n        circleLayer.path = circularPath.cgPath\n        circleLayer.fillColor = UIColor.clear.cgColor\n        circleLayer.lineCap = .round\n        circleLayer.lineWidth = 10.0\n        circleLayer.strokeColor = UIColor.lightGray.cgColor\n        \n        progressLayer.path = circularPath.cgPath\n        progressLayer.fillColor = UIColor.clear.cgColor\n        progressLayer.lineCap = .round\n        progressLayer.lineWidth = 10.0\n        progressLayer.strokeColor = UIColor.red.cgColor\n        progressLayer.strokeEnd = 0\n        \n        layer.addSublayer(circleLayer)\n        layer.addSublayer(progressLayer)\n    }"
    },
    {
      "instruction": " \n\nWrite a Swift function to implement a custom UISlider with a custom thumb image and custom track colors.",
      "input": "class CustomSlider: UISlider {\n\n    override func awakeFromNib() {\n        super.awakeFromNib()\n        configureCustomSlider()\n    }\n    \n    func configureCustomSlider() {\n        setThumbImage(UIImage(named: \"customThumbImage\"), for: .normal)\n        setMinimumTrackTintColor(UIColor.red)\n        setMaximumTrackTintColor(UIColor.green)\n    }\n}",
      "output": "// Use the CustomSlider in your view controller's storyboard or programmatically initialize it.\n// Make sure to add the \"customThumbImage\" in your project's assets."
    },
    {
      "instruction": " \n\nWrite a Swift function to implement a custom UITextField that shows a UIPickerView instead of a keyboard, allowing users to select one option from a list of strings.",
      "input": "class CustomPickerTextField: UITextField, UIPickerViewDataSource, UIPickerViewDelegate {\n\n    private var pickerData: [String] = []\n    private var pickerView: UIPickerView?\n\n    func configure(with data: [String]) {\n        pickerData = data\n        createPickerView()\n    }\n    \n    private func createPickerView() {\n        // code to create UIPickerView\n    }\n}",
      "output": "    private func createPickerView() {\n        pickerView = UIPickerView()\n        pickerView?.delegate = self\n        pickerView?.dataSource = self\n        inputView = pickerView\n    }\n    \n    // UIPickerViewDataSource and UIPickerViewDelegate methods\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return pickerData.count\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return pickerData[row]\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        text = pickerData[row]\n    }"
    },
    {
      "instruction": " \n\nWrite a Swift function to create a custom UIButton with a gradient background and rounded corners.",
      "input": "class GradientButton: UIButton {\n    \n    override func awakeFromNib() {\n        super.awakeFromNib()\n        configureGradientBackground()\n    }\n    \n    func configureGradientBackground() {\n        // code to create gradient background and rounded corners\n    }\n}",
      "output": "    func configureGradientBackground() {\n        let gradientLayer = CAGradientLayer()\n        gradientLayer.frame = bounds\n        gradientLayer.colors = [UIColor.red.cgColor, UIColor.blue.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 1)\n        \n        layer.insertSublayer(gradientLayer, at: 0)\n        layer.cornerRadius = bounds.height / 2\n        clipsToBounds = true\n    }"
    },
    {
      "instruction": " \n\nWrite a Swift function to implement a custom UIViewController transition animation when presenting a new view controller.",
      "input": "class CustomTransition: NSObject, UIViewControllerAnimatedTransitioning {\n\n    func transitionDuration(using transitionContext: UIViewControllerContextTransitioning?) -> TimeInterval {\n        return 0.5\n    }\n    \n    func animateTransition(using transitionContext: UIViewControllerContextTransitioning) {\n        // code to animate custom transition\n    }\n}\n\nclass ViewController: UIViewController, UIViewControllerTransitioningDelegate {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    @IBAction func presentNewViewController(_ sender: UIButton) {\n        let newViewController = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"NewViewController\")\n        newViewController.modalPresentationStyle = .custom\n        newViewController.transitioningDelegate = self\n        present(newViewController, animated: true, completion: nil)\n    }\n    // other code\n}",
      "output": "    func animationController(forPresented presented: UIViewController, presenting: UIViewController, source: UIViewController) -> UIViewControllerAnimatedTransitioning? {\n        return CustomTransition()\n    }\n\n    func animateTransition(using transitionContext: UIViewControllerContextTransitioning) {\n        guard let toViewController = transitionContext.viewController(forKey: .to) else {\n            return\n        }\n        \n        let containerView = transitionContext.containerView\n        containerView.addSubview(toViewController.view)\n        \n        toViewController.view.alpha = 0.0\n        UIView.animate(withDuration: transitionDuration(using: transitionContext), animations: {\n            toViewController.view.alpha = 1.0\n        }, completion: { _ in\n            transitionContext.completeTransition(true)\n        })\n    }"
    },
    {
      "instruction": " \n\nWrite a Swift function to implement a custom pull-to-refresh control in a UITableView.",
      "input": "class ViewController: UITableViewController {\n\n    private let refresh = UIRefreshControl()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        configureRefreshControl()\n    }\n    \n    func configureRefreshControl() {\n        // code to create custom pull-to-refresh control\n    }\n    \n    @objc func refreshData(_ sender: AnyObject) {\n        // code to refresh data\n    }\n}",
      "output": "    func configureRefreshControl() {\n        refresh.addTarget(self, action: #selector(refreshData(_:)), for: .valueChanged"
    },
    {
      "instruction": "Write a Swift function to configure and display a UIAlertController with a title, message, and a single \"OK\" button",
      "input": "",
      "output": "func showAlert(title: String, message: String, viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let okAction = UIAlertAction(title: \"OK\", style: .default, handler: nil)\n    alertController.addAction(okAction)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UICollectionViewCell with an ImageView and a UILabel",
      "input": "",
      "output": "class CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView = {\n        let iv = UIImageView()\n        iv.contentMode = .scaleAspectFill\n        iv.clipsToBounds = true\n        iv.translatesAutoresizingMaskIntoConstraints = false\n        return iv\n    }()\n\n    let label: UILabel = {\n        let lbl = UILabel()\n        lbl.textAlignment = .center\n        lbl.translatesAutoresizingMaskIntoConstraints = false\n        return lbl\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(imageView)\n        contentView.addSubview(label)\n\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.heightAnchor.constraint(equalTo: contentView.heightAnchor, multiplier: 0.7),\n\n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            label.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to register a custom UITableViewCell and dequeue it for use in a UITableView",
      "input": "",
      "output": "class CustomTableViewCell: UITableViewCell {\n    // Custom cell content\n}\n\nextension UITableViewController {\n    func registerAndDequeueCustomCell(tableView: UITableView) -> CustomTableViewCell {\n        let cellIdentifier = \"CustomTableViewCell\"\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: cellIdentifier)\n        guard let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier) as? CustomTableViewCell else {\n            fatalError(\"CustomTableViewCell not found\")\n        }\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIButton with a custom title and target action",
      "input": "",
      "output": "func createButton(title: String, target: Any, action: Selector) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.addTarget(target, action: action, for: .touchUpInside)\n    button.translatesAutoresizingMaskIntoConstraints = false\n    return button\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UIPickerView with a custom data source and delegate",
      "input": "",
      "output": "class CustomPickerView: UIPickerView, UIPickerViewDataSource, UIPickerViewDelegate {\n    var data: [String] = []\n\n    init(data: [String]) {\n        super.init(frame: .zero)\n        self.data = data\n        self.delegate = self\n        self.dataSource = self\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    // UIPickerViewDataSource\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return data.count\n    }\n\n    // UIPickerViewDelegate\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return data[row]\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UIPageControl with a custom number of pages and tint colors",
      "input": "",
      "output": "func createPageControl(numberOfPages: Int, currentPageIndicatorTintColor: UIColor, pageIndicatorTintColor: UIColor) -> UIPageControl {\n    let pageControl = UIPageControl()\n    pageControl.numberOfPages = numberOfPages\n    pageControl.currentPageIndicatorTintColor = currentPageIndicatorTintColor\n    pageControl.pageIndicatorTintColor = pageIndicatorTintColor\n    pageControl.translatesAutoresizingMaskIntoConstraints = false\n    return pageControl\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UISlider with a custom minimum, maximum, and current value",
      "input": "",
      "output": "func createSlider(minimumValue: Float, maximumValue: Float, currentValue: Float) -> UISlider {\n    let slider = UISlider()\n    slider.minimumValue = minimumValue\n    slider.maximumValue = maximumValue\n    slider.value = currentValue\n    slider.translatesAutoresizingMaskIntoConstraints = false\n    return slider\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UISwitch with acustom onTintColor and initial state",
      "input": "",
      "output": "func createSwitch(onTintColor: UIColor, isOn: Bool) -> UISwitch {\n    let switchControl = UISwitch()\n    switchControl.onTintColor = onTintColor\n    switchControl.isOn = isOn\n    switchControl.translatesAutoresizingMaskIntoConstraints = false\n    return switchControl\n}"
    },
    {
      "instruction": "Write the code to implement a custom UITableViewCell with an UIImageView and a UILabel for displaying an image and text in a UITableView.",
      "input": "Create a subclass of UITableViewCell called CustomTableViewCell that includes an image view and a label.\nConfigure the image view and label in the cell's init method using private lazy initialization.\nAdd the image view and label as subviews of the cell's contentView.\nImplement the required init?(coder:) method.\nIn the layoutSubviews() method, update the frame of the image view and the label and set their autoresizing masks.",
      "output": "class CustomTableViewCell: UITableViewCell {\n    \n    private lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n    \n    private lazy var label: UILabel = {\n        let label = UILabel()\n        label.numberOfLines = 0\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        contentView.addSubview(imageView)\n        contentView.addSubview(label)\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        imageView.frame = CGRect(x: 10, y: 5, width: 60, height: 60)\n        imageView.autoresizingMask = [.flexibleRightMargin, .flexibleBottomMargin]\n        \n        let labelX = imageView.frame.maxX + 10\n        label.frame = CGRect(x: labelX, y: 5, width: contentView.frame.width - labelX - 10, height: contentView.frame.height - 10)\n        label.autoresizingMask = [.flexibleWidth, .flexibleHeight]\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to asynchronously fetch an image from a URL and set it as the image of a UIImageView.",
      "input": "Create a function called `loadImage(from url: URL, into imageView: UIImageView)`.\nUse URLSession to create a data task that fetches data from the given URL.\nIn the data task's completion handler, check for data and no error.\nCreate a UIImage instance from the data.\nOn the main queue, set the image view's image property to the fetched image.",
      "output": "func loadImage(from url: URL, into imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil else { return }\n        \n        if let image = UIImage(data: data) {\n            DispatchQueue.main.async {\n                imageView.image = image\n            }\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite the code to implement a custom UIView with a circular progress indicator.",
      "input": "Create a subclass of UIView called CircularProgressView.\nAdd a CAShapeLayer instance variable called progressLayer.\nOverride the init(frame:) method to configure the progressLayer with a stroke color, line width, and stroke end.\nAdd the progressLayer as a sublayer of the view's layer.\nImplement the required init?(coder:) method.\nOverride the layoutSubviews() method to update the progressLayer's frame and path.\nCreate a function called setProgress(_:animated:) to update the progressLayer's stroke end.",
      "output": "class CircularProgressView: UIView {\n    \n    private var progressLayer = CAShapeLayer()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        progressLayer.strokeColor = UIColor.blue.cgColor\n        progressLayer.lineWidth = 5\n        progressLayer.strokeEnd = 0\n        layer.addSublayer(progressLayer)\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        progressLayer.frame = bounds\n        let path = UIBezierPath(ovalIn: bounds.insetBy(dx: progressLayer.lineWidth / 2, dy: progressLayer.lineWidth / 2))\n        progressLayer.path = path.cgPath\n    }\n    \n    func setProgress(_ progress: CGFloat, animated: Bool) {\n        let strokeEnd = min(max(progress, 0), 1)\n        if animated {\n            let animation = CABasicAnimation(keyPath: \"strokeEnd\")\n            animation.fromValue = progressLayer.strokeEnd\n            animation.toValue = strokeEnd\n            animation.duration = 0.25\n            progressLayer.add(animation, forKey: \"strokeEnd\")\n        }\n        progressLayer.strokeEnd = strokeEnd\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to register a UITableView for a custom UITableViewCell and dequeue the custom cell.",
      "input": "Create a function called `registerAndDequeueCustomCell(for tableView: UITableView, indexPath: IndexPath) -> UITableViewCell`.\nRegister the custom UITableViewCell (CustomTableViewCell from Example 3) for the table viewusing a reuseIdentifier.\nDequeue a reusable cell with the reuseIdentifier, passing the index path.\nCast the dequeued cell as the custom UITableViewCell subclass and return it.",
      "output": "func registerAndDequeueCustomCell(for tableView: UITableView, indexPath: IndexPath) -> CustomTableViewCell {\n    let reuseIdentifier = \"CustomTableViewCell\"\n    tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: reuseIdentifier)\n    guard let cell = tableView.dequeueReusableCell(withIdentifier: reuseIdentifier, for: indexPath) as? CustomTableViewCell else {\n        fatalError(\"Unable to dequeue CustomTableViewCell.\")\n    }\n    return cell\n}"
    },
    {
      "instruction": " \nWrite the code to implement a UICollectionView custom layout that displays items in a grid with a fixed number of columns and variable row heights.",
      "input": "Create a subclass of UICollectionViewLayout called GridCollectionViewLayout.\nAdd a constant for the number of columns and a variable for the item heights.\nOverride the prepare() method to calculate the item heights.\nOverride the collectionViewContentSize property to return the content size.\nOverride the layoutAttributesForElements(in:) method to return the layout attributes for all the items.\nOverride the layoutAttributesForItem(at:) method to return the layout attributes for a specific item.",
      "output": "class GridCollectionViewLayout: UICollectionViewLayout {\n    \n    private let numberOfColumns = 3\n    private var itemHeights: [CGFloat] = []\n    \n    override func prepare() {\n        guard let collectionView = collectionView else { return }\n        itemHeights = (0..<collectionView.numberOfItems(inSection: 0)).map { _ in CGFloat(arc4random_uniform(50) + 50) }\n    }\n    \n    override var collectionViewContentSize: CGSize {\n        guard let collectionView = collectionView else { return .zero }\n        let contentWidth = collectionView.bounds.width\n        let numberOfRows = ceil(CGFloat(itemHeights.count) / CGFloat(numberOfColumns))\n        let contentHeight = numberOfRows * itemSize.height\n        return CGSize(width: contentWidth, height: contentHeight)\n    }\n    \n    override func layoutAttributesForElements(in rect: CGRect) -> [UICollectionViewLayoutAttributes]? {\n        return (0..<itemHeights.count).compactMap { index in\n            let indexPath = IndexPath(item: index, section: 0)\n            return layoutAttributesForItem(at: indexPath)\n        }\n    }\n    \n    override func layoutAttributesForItem(at indexPath: IndexPath) -> UICollectionViewLayoutAttributes? {\n        guard let collectionView = collectionView else { return nil }\n        let row = indexPath.item / numberOfColumns\n        let column = indexPath.item % numberOfColumns\n        let x = CGFloat(column) * itemSize.width\n        let y = CGFloat(row) * itemSize.height\n        let frame = CGRect(x: x, y: y, width: itemSize.width, height: itemHeights[indexPath.item])\n        let attributes = UICollectionViewLayoutAttributes(forCellWith: indexPath)\n        attributes.frame = frame\n        return attributes\n    }\n    \n    private var itemSize: CGSize {\n        guard let collectionView = collectionView else { return .zero }\n        let itemWidth = collectionView.bounds.width / CGFloat(numberOfColumns)\n        let itemHeight: CGFloat = 100\n        return CGSize(width: itemWidth, height: itemHeight)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to display a UIAlertController with a text field, and retrieve the input text when the user taps the \"OK\" button.",
      "input": "Create a function called `presentAlertWithTextField(on viewController: UIViewController, completion: @escaping (String) -> Void)`.\nInstantiate a UIAlertController with a title, message, and preferredStyle.\nAdd a UITextField to the UIAlertController.\nAdd a UIAlertAction with the title \"OK\" and a handler that retrieves the text from the UITextField and calls the completion closure.\nAdd a UIAlertAction with the title \"Cancel\" and a nil handler.\nPresent the UIAlertController on the given view controller.",
      "output": "func presentAlertWithTextField(on viewController: UIViewController, completion: @escaping (String) -> Void) {\n    let alertController = UIAlertController(title: \"Enter Text\", message: nil, preferredStyle: .alert)\n    \n    alertController.addTextField()\n    \n    let okAction = UIAlertAction(title: \"OK\", style: .default) { _ in\n        if let textField = alertController.textFields?.first, let text = textField.text {\n            completion(text)\n        }\n    }\n    alertController.addAction(okAction)\n    \n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel)\n    alertController.addAction(cancelAction)\n    \n    viewController.present(alertController, animated: true)\n}"
    },
    {
      "instruction": "Create a custom table view cell with a profile image view, name label, and a bio label, and a custom table view controller that uses the custom cell",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var profileImageView: UIImageView!\n    @IBOutlet weak var nameLabel: UILabel!\n    @IBOutlet weak var bioLabel: UILabel!\n\n    func configure(with profileImage: UIImage, name: String, bio: String) {\n        profileImageView.image = profileImage\n        nameLabel.text = name\n        bioLabel.text = bio\n    }\n}\n\nclass CustomTableViewController: UITableViewController {\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return users.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomTableViewCell\", for: indexPath) as! CustomTableViewCell\n        let user = users[indexPath.row]\n        cell.configure(with: user.profileImage, name: user.name, bio: user.bio)\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nImplement a view controller that allows the user to enter their name in a text field and then display it on a label after tapping a button",
      "input": "",
      "output": "import UIKit\n\nclass NameInputViewController: UIViewController {\n    @IBOutlet weak var nameTextField: UITextField!\n    @IBOutlet weak var nameLabel: UILabel!\n    \n    @IBAction func updateNameButtonTapped(_ sender: UIButton) {\n        nameLabel.text = nameTextField.text\n    }\n}"
    },
    {
      "instruction": " \nCreate a view controller that handles adding and displaying items to a shopping cart",
      "input": "",
      "output": "import UIKit\n\nclass ShoppingCart {\n    private(set) var items: [String] = []\n\n    func addItem(_ item: String) {\n        items.append(item)\n    }\n}\n\nclass ShoppingCartViewController: UIViewController, UITableViewDataSource {\n    @IBOutlet weak var tableView: UITableView!\n    @IBOutlet weak var newItemTextField: UITextField!\n    \n    private let shoppingCart = ShoppingCart()\n\n    @IBAction func addItemButtonTapped(_ sender: UIButton) {\n        guard let newItem = newItemTextField.text, !newItem.isEmpty else { return }\n        shoppingCart.addItem(newItem)\n        tableView.reloadData()\n        newItemTextField.text = \"\"\n    }\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return shoppingCart.items.count\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"ItemCell\", for: indexPath)\n        cell.textLabel?.text = shoppingCart.items[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIView with a gradient background",
      "input": "",
      "output": "import UIKit\n\nclass GradientView: UIView {\n    @IBInspectable var startColor: UIColor = .white\n    @IBInspectable var endColor: UIColor = .black\n\n    override class var layerClass: AnyClass {\n        return CAGradientLayer.self\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        let gradientLayer = layer as! CAGradientLayer\n        gradientLayer.colors = [startColor.cgColor, endColor.cgColor]\n    }\n}"
    },
    {
      "instruction": " \nCreate a view controller that displays a list of images in a UICollectionView and allows users to delete images by long-pressing on them",
      "input": "",
      "output": "import UIKit\n\nclass ImageGalleryViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {\n    @IBOutlet weak var collectionView: UICollectionView!\n    \n    var images: [UIImage] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let longPressGesture = UILongPressGestureRecognizer(target: self, action: #selector(handleLongPress(_:)))\n        collectionView.addGestureRecognizer(longPressGesture)\n    }\n\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return images.count\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"ImageCell\", for: indexPath) as! CustomCollectionViewCell\n        cell.configure(with: images[indexPath.item], title: \"\")\n        return cell\n    }\n    \n    @objc func handleLongPress(_ gesture: UILongPressGestureRecognizer) {\n        guard gesture.state == .began, let indexPath = collectionView.indexPathForItem(at: gesture.location(in: collectionView)) else { return }\n        \n        let alertController = UIAlertController(title: \"Delete Image\", message: \"Are you sure you want to delete this image?\", preferredStyle: .alert)\n        alertController.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n        alertController.addAction(UIAlertAction(title: \"Delete\", style: .destructive, handler: { _ in\n            self.images.remove(at: indexPath.item)\n            self.collectionView.deleteItems(at: [indexPath])\n        }))\n        \n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nCreate a view controller that utilizes a UIPickerView to select a color and then updates a UIView's background color with the selected color",
      "input": "",
      "output": "import UIKit\n\nclass ColorPickerViewController: UIViewController, UIPickerViewDataSource, UIPickerViewDelegate {\n    @IBOutlet weak var colorPickerView: UIPickerView!\n    @IBOutlet weak var colorDisplayView: UIView!\n    \n    let colors: [String: UIColor] = [\n        \"Red\": .red,\n        \"Green\": .green,\n        \"Blue\": .blue,\n        \"Yellow\": .yellow,\n        \"Orange\": .orange,\n        \"Purple\": .purple\n    ]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        colorPickerView.dataSource = self\n        colorPickerView.delegate = self\n    }\n\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return colors.count\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return Array(colors.keys)[row]\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        let selectedColor = Array(colors.values)[row]\n        colorDisplayView.backgroundColor = selectedColor\n    }\n}"
    },
    {
      "instruction": " \nCreate a view controller that displays a list of tasks in a UITableView and allows users to add tasks by entering text in a UITextField and tapping a button",
      "input": "",
      "output": "import UIKit\n\nclass TaskListViewController: UIViewController, UITableViewDataSource {\n    @IBOutlet weak var tableView: UITableView!\n    @IBOutlet weak var taskTextField: UITextField!\n    \n    var tasks: [String] = []\n\n    @IBAction func addTaskButtonTapped(_ sender: UIButton) {\n        guard let newTask = taskTextField.text, !newTask.isEmpty else { return }\n        tasks.append(newTask)\n        tableView.reloadData()\n        taskTextField.text = \"\"\n    }\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return tasks.count\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"TaskCell\", for: indexPath)\n        cell.textLabel?.text = tasks[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nCreate a view controller that displays a countdown timer, and allows users to set the timer duration with a UIDatePicker",
      "input": "",
      "output": "import UIKit\n\nclass CountdownTimerViewController: UIViewController {\n    @IBOutlet weak var datePicker: UIDatePicker!\n    @IBOutlet weak var timeRemainingLabel: UILabel!\n    \n    private var timer: Timer?\n    private var timeRemaining: TimeInterval = 0\n    \n    @IBAction func setTimerButtonTapped(_ sender: UIButton) {\n        timer?.invalidate()\n        timeRemaining = datePicker.countDownDuration\n        updateTimeDisplay()\n        \n        timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { [weak self] _ in\n            guard let self = self else { return }\n            \n            if self.timeRemaining > 0 {\n                self.timeRemaining -= 1\n            } else {\n                self.timer?.invalidate()\n            }\n            self.updateTimeDisplay()\n        }\n    }\n    \n    private func updateTimeDisplay() {\n        let minutes = Int(timeRemaining / 60)\n        let seconds = Int(timeRemaining.truncatingRemainder(dividingBy: 60))\n        timeRemainingLabel.text = String(format: \"%02d:%02d\", minutes, seconds)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that asynchronously downloads an image from a URL and displays it in a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            completion(nil)\n            return\n        }\n        completion(UIImage(data: data))\n    }\n    task.resume()\n}\n\nfunc setImageFromURL(_ url: URL, to imageView: UIImageView) {\n    downloadImage(from: url) { image in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that plays a sound file with a given filename and file extension",
      "input": "",
      "output": "import AVFoundation\n\nfunc playSound(filename: String, fileExtension: String) {\n    guard let url = Bundle.main.url(forResource: filename, withExtension: fileExtension) else { return }\n\n    do {\n        let audioPlayer = try AVAudioPlayer(contentsOf: url)\n        audioPlayer.prepareToPlay()\n        audioPlayer.play()\n    } catch let error {\n        print(\"Error playing sound: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates a UIView to fade in with a specified duration",
      "input": "",
      "output": "import UIKit\n\nfunc fadeIn(view: UIView, duration: TimeInterval) {\n    view.alpha = 0\n    UIView.animate(withDuration: duration) {\n        view.alpha = 1\n    }\n}"
    },
    {
      "instruction": " \nWrite a custom Swift UITableViewController class that displays a list of items with custom UITableViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var titleLabel: UILabel!\n}\n\nclass CustomTableViewController: UITableViewController {\n    let items = [\"Item 1\", \"Item 2\", \"Item 3\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UINib(nibName: \"CustomTableViewCell\", bundle: nil), forCellReuseIdentifier: \"customCell\")\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"customCell\", for: indexPath) as! CustomTableViewCell\n        cell.titleLabel.text = items[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a gradient background to a UIView",
      "input": "",
      "output": "import UIKit\n\nfunc addGradientBackground(to view: UIView, colors: [CGColor], locations: [NSNumber]) {\n    let gradientLayer = CAGradientLayer()\n    gradientLayer.frame = view.bounds\n    gradientLayer.colors = colors\n    gradientLayer.locations = locations\n    view.layer.insertSublayer(gradientLayer, at: 0)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that encodes a dictionary into a JSON string",
      "input": "",
      "output": "import Foundation\n\nfunc jsonString(from dictionary: [String: Any]) -> String? {\n    do {\n        let data = try JSONSerialization.data(withJSONObject: dictionary, options: .prettyPrinted)\n        return String(data: data, encoding: .utf8)\n    } catch let error {\n        print(\"Error converting dictionary to JSON: \\(error.localizedDescription)\")\n        return nil\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that decodes a JSON string into a dictionary",
      "input": "",
      "output": "import Foundation\n\nfunc dictionary(from jsonString: String) -> [String: Any]? {\n    guard let data = jsonString.data(using: .utf8) else { return nil }\n    do {\n        let jsonObject = try JSONSerialization.jsonObject(with: data, options: .mutableContainers)\n        return jsonObject as? [String: Any]\n    } catch let error {\n        print(\"Error converting JSON to dictionary: \\(error.localizedDescription)\")\n        return nil\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that fetches data from a RESTful API using Codable for JSON decoding",
      "input": "",
      "output": "import Foundation\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let email: String\n}\n\nfunc fetchUser(withID id: Int, completion: @escaping (User?) -> Void) {\n    let url = URL(string: \"https://jsonplaceholder.typicode.com/users/\\(id)\")!\n    URLSession.shared.dataTask(with: url){ (data, response, error) in\n        guard let data = data, error == nil else {\n            completion(nil)\n            return\n        }\n        do {\n            let user = try JSONDecoder().decode(User.self, from: data)\n            completion(user)\n        } catch let error {\n            print(\"Error decoding JSON: \\(error.localizedDescription)\")\n            completion(nil)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that saves a UIImage to the device's photo library",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToLibrary(_ image: UIImage, completion: @escaping (Bool, Error?) -> Void) {\n    PHPhotoLibrary.requestAuthorization { status in\n        guard status == .authorized else {\n            completion(false, nil)\n            return\n        }\n\n        PHPhotoLibrary.shared().performChanges({\n            PHAssetChangeRequest.creationRequestForAsset(from: image)\n        }, completionHandler: { success, error in\n            completion(success, error)\n        })\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that retrieves the user's current location using CoreLocation",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    private let locationManager = CLLocationManager()\n    private var currentLocation: CLLocation?\n\n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n\n    func getCurrentLocation() -> CLLocation? {\n        return currentLocation\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        currentLocation = locations.first\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error getting location: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that presents a UIAlertController with a given title, message, and action",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(title: String, message: String, from viewController: UIViewController, action: ((UIAlertAction) -> Void)?) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let okAction = UIAlertAction(title: \"OK\", style: .default, handler: action)\n    alertController.addAction(okAction)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": "Write a Swift function to create a custom UITableViewCell with a label and a switch",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n\n    let label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    let switchControl: UISwitch = {\n        let switchControl = UISwitch()\n        switchControl.translatesAutoresizingMaskIntoConstraints = false\n        return switchControl\n    }()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupViews()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupViews() {\n        addSubview(label)\n        addSubview(switchControl)\n\n        NSLayoutConstraint.activate([\n            label.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 16),\n            label.centerYAnchor.constraint(equalTo: centerYAnchor),\n            switchControl.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -16),\n            switchControl.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to fetch user's current location using CoreLocation",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    static let shared = LocationManager()\n\n    private let locationManager = CLLocationManager()\n\n    private override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n    }\n\n    func requestLocationPermission() {\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    func getUserLocation(completion: @escaping (CLLocation) -> Void) {\n        locationManager.requestLocation()\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager,\n                         didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            print(\"User's location: \\(location)\")\n            locationManager.stopUpdatingLocation()\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager,\n                         didFailWithError error: Error) {\n        print(\"Error fetching user's location: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a horizontal UICollectionView with a custom UICollectionViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    private let reuseIdentifier = \"CustomCell\"\n    private var collectionView: UICollectionView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .horizontal\n        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: reuseIdentifier)\n\n        view.addSubview(collectionView)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n\n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            collectionView.heightAnchor.constraint(equalToConstant: 200)\n        ])\n    }\n\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        // Configure the cell\n        return cell\n    }\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: 150, height: 150)\n    }\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // Add custom subviews and layout here\n}"
    },
    {
      "instruction": " \nWrite a Swift function to store and retrieve data from UserDefaults",
      "input": "",
      "output": "import Foundation\n\nclass UserDefaultsManager {\n    static let shared = UserDefaultsManager()\n\n    private let userDefaults = UserDefaults.standard\n\n    private let usernameKey = \"username\"\n    private let ageKey = \"age\"\n\n    func saveUsername(_ username: String) {\n        userDefaults.setValue(username, forKey: usernameKey)\n    }\n\n    func getUsername() -> String? {\n        return userDefaults.string(forKey: usernameKey)\n    }\n\n    func saveAge(_ age: Int) {\n        userDefaults.set(age, forKey: ageKey)\n    }\n\n    func getAge() -> Int? {\n        return userDefaults.integer(forKey: ageKey)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a simple network request using URLSession",
      "input": "",
      "output": "import Foundation\n\nclass NetworkManager {\n    static let shared = NetworkManager()\n\n    func fetchData(urlString: String, completion: @escaping (Data?, Error?) -> Void) {\n        guard let url = URL(string: urlString) else {\n           completion(nil, NSError(domain: \"NetworkManager\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"Invalid URL\"]))\n            return\n        }\n\n        let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n            completion(data, error)\n        }\n        task.resume()\n    }\n}\n\n// Example usage:\n// NetworkManager.shared.fetchData(urlString: \"https://api.example.com/data\") { (data, error) in\n//     if let error = error {\n//         print(\"Error fetching data: \\(error)\")\n//     } else if let data = data {\n//         print(\"Fetched data: \\(data)\")\n//     }\n// }"
    },
    {
      "instruction": " \nWrite a Swift function to create and present an UIAlertController with a text field and two buttons: \"Cancel\" and \"Submit\"",
      "input": "",
      "output": "import UIKit\n\nclass CustomAlertViewController: UIViewController {\n    \n    func presentCustomAlert() {\n        let alertController = UIAlertController(title: \"Enter a message\", message: nil, preferredStyle: .alert)\n        \n        alertController.addTextField { textField in\n            textField.placeholder = \"Your message\"\n        }\n        \n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n        alertController.addAction(cancelAction)\n        \n        let submitAction = UIAlertAction(title: \"Submit\", style: .default) { [unowned alertController] _ in\n            if let textField = alertController.textFields?.first, let message = textField.text {\n                print(\"Submitted message: \\(message)\")\n            }\n        }\n        alertController.addAction(submitAction)\n        \n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIView with a gradient background",
      "input": "",
      "output": "import UIKit\n\nclass GradientView: UIView {\n\n    private let gradientLayer = CAGradientLayer()\n\n    init(startColor: UIColor, endColor: UIColor) {\n        super.init(frame: .zero)\n        gradientLayer.colors = [startColor.cgColor, endColor.cgColor]\n        layer.insertSublayer(gradientLayer, at: 0)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        gradientLayer.frame = bounds\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UINavigationController with a custom root view controller and a custom appearance",
      "input": "",
      "output": "import UIKit\n\nclass CustomNavigationController: UINavigationController {\n\n    init(rootViewController: UIViewController, tintColor: UIColor, barTintColor: UIColor, titleTextAttributes: [NSAttributedString.Key: Any]) {\n        super.init(rootViewController: rootViewController)\n\n        navigationBar.tintColor = tintColor\n        navigationBar.barTintColor = barTintColor\n        navigationBar.titleTextAttributes = titleTextAttributes\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n\n// Example usage:\n// let rootViewController = UIViewController()\n// let tintColor = UIColor.white\n// let barTintColor = UIColor.blue\n// let titleTextAttributes: [NSAttributedString.Key: Any] = [.foregroundColor: UIColor.white]\n// let customNavigationController = CustomNavigationController(rootViewController: rootViewController, tintColor: tintColor, barTintColor: barTintColor, titleTextAttributes: titleTextAttributes)"
    },
    {
      "instruction": "Write a function to authenticate a user with email and password using Firebase",
      "input": "",
      "output": "import UIKit\nimport FirebaseAuth\n\nclass AuthenticationViewController: UIViewController {\n    \n    @IBOutlet weak var emailTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n    \n    @IBAction func loginButtonTapped(_ sender: UIButton) {\n        guard let email = emailTextField.text, !email.isEmpty,\n              let password = passwordTextField.text, !password.isEmpty else {\n            // Show an error message\n            return\n        }\n        \n        Auth.auth().signIn(withEmail: email, password: password) { authResult, error in\n            if let error = error {\n                print(\"Error occurred: \\(error.localizedDescription)\")\n                // Handle the error\n            } else {\n                // Proceedto the next view controller\n                self.performSegue(withIdentifier: \"loginSuccessful\", sender: self)\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a function to fetch JSON data from a URL and decode it into a custom Swift model",
      "input": "",
      "output": "import UIKit\n\nstruct CustomModel: Codable {\n    let id: Int\n    let title: String\n}\n\nclass ViewController: UIViewController {\n    \n    func fetchData(from url: URL, completion: @escaping (Result<[CustomModel], Error>) -> Void) {\n        let task = URLSession.shared.dataTask(with: url) { data, response, error in\n            if let error = error {\n                completion(.failure(error))\n                return\n            }\n            \n            guard let data = data else {\n                completion(.failure(NSError(domain: \"\", code: -1, userInfo: nil)))\n                return\n            }\n            \n            do {\n                let decoder = JSONDecoder()\n                let models = try decoder.decode([CustomModel].self, from: data)\n                completion(.success(models))\n            } catch {\n                completion(.failure(error))\n            }\n        }\n        task.resume()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UITableViewCell programmatically",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupView()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    func setupView() {\n        contentView.addSubview(titleLabel)\n        \n        NSLayoutConstraint.activate([\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\n            titleLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),\n            titleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a function to present a UIAlertController with custom actions",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    func presentAlert() {\n        let alertController = UIAlertController(title: \"Choose an option\", message: nil, preferredStyle: .actionSheet)\n        \n        let option1Action = UIAlertAction(title: \"Option 1\", style: .default) { _ in\n            // Handle option 1 action\n        }\n        \n        let option2Action = UIAlertAction(title: \"Option 2\", style: .default) { _ in\n            // Handle option 2 action\n        }\n        \n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n        \n        alertController.addAction(option1Action)\n        alertController.addAction(option2Action)\n        alertController.addAction(cancelAction)\n        \n        self.present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nWrite a function to play a video from a remote URL using AVPlayerViewController",
      "input": "",
      "output": "import UIKit\nimport AVKit\nimport AVFoundation\n\nclass ViewController: UIViewController {\n    \n    func playVideo(from url: URL) {\n        let player = AVPlayer(url: url)\n        let playerViewController = AVPlayerViewController()\n        playerViewController.player = player\n        \n        present(playerViewController, animated: true) {\n            playerViewController.player?.play()\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a function to capture an image using UIImagePickerController",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n    \n    @IBOutlet weak var imageView: UIImageView!\n    \n    @IBAction func captureImageButtonTapped(_ sender: UIButton) {\n        let imagePickerController = UIImagePickerController()\n        imagePickerController.sourceType = .camera\n        imagePickerController.delegate = self\n        \n        present(imagePickerController, animated: true, completion: nil)\n    }\n    \n    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {\n        if let image = info[UIImagePickerController.InfoKey.originalImage] as? UIImage {\n            imageView.image = image\n        }\n        dismiss(animated: true, completion: nil)\n    }\n    \n    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {\n        dismiss(animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nWrite a function to save an image to the user's photo library using PHPhotoLibrary",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nclass ViewController: UIViewController {\n    \n    func saveImageToPhotoLibrary(image: UIImage) {\n        PHPhotoLibrary.shared().performChanges({\n            PHAssetChangeRequest.creationRequestForAsset(from: image)\n        }) { success, error in\n            if success {\n                DispatchQueue.main.async {\n                    // Show a success message\n                }\n            } else if let error = error {\n                DispatchQueue.main.async {\n                    print(\"Error occurred: \\(error.localizedDescription)\")\n                    // Show an error message\n                }\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a function to implement Apple Sign In using ASAuthorizationController",
      "input": "",
      "output": "import UIKit\nimport AuthenticationServices\n\nclass ViewController: UIViewController, ASAuthorizationControllerDelegate, ASAuthorizationControllerPresentationContextProviding {\n    \n    func appleSignIn() {\n        let appleIDProvider = ASAuthorizationAppleIDProvider()\n        let request = appleIDProvider.createRequest()\n        request.requestedScopes = [.fullName, .email]\n        \n        let authorizationController = ASAuthorizationController(authorizationRequests: [request])\n        authorizationController.delegate = self\n        authorizationController.presentationContextProvider = self\n        authorizationController.performRequests()\n    }\n    \n    func authorizationController(controller: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization) {\n        if let appleIDCredential = authorization.credential as? ASAuthorizationAppleIDCredential {\n            // Handle the Apple ID credential\n        }\n    }\n    \n    func authorizationController(controller: ASAuthorizationController, didCompleteWithError error: Error) {\n        // Handle the error\n    }\n    \n    func presentationAnchor(for controller: ASAuthorizationController) -> ASPresentationAnchor {\n        return self.view.window!\n    }\n}"
    },
    {
      "instruction": "Create a custom UICollectionViewCell with an UIImageView and UILabel inside.",
      "input": "",
      "output": "class CustomCollectionViewCell: UICollectionViewCell {\n    // UIImageView\n    let imageView: UIImageView = {\n        let imgView = UIImageView()\n        imgView.translatesAutoresizingMaskIntoConstraints = false\n        return imgView\n    }()\n    \n    // UILabel\n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    // Init\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupViews()\n    }\n    \n    // Setup views\n    private func setupViews() {\n        addSubview(imageView)\n        addSubview(titleLabel)\n        \n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n            \n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nImplement a custom UIViewController that has a UICollectionView with a custom UICollectionViewCell.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UIViewController {\n    // CollectionView\n    private let collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.backgroundColor = .white\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n        return collectionView\n    }()\n    \n    // ViewDidLoad\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.addSubview(collectionView)\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        \n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),\n        ])\n    }\n}\n\n// MARK: - UICollectionViewDataSource\nextension CustomCollectionViewController: UICollectionViewDataSource {\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 20 // your number of cell here\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        cell.imageView.image = UIImage(named: \"your_image_name\")\n        cell.titleLabel.text = \"Your text here\"\n        return cell\n    }\n}\n\n// MARK: - UICollectionViewDelegateFlowLayout\nextension CustomCollectionViewController: UICollectionViewDelegateFlowLayout {\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: view.bounds.width / 2, height: 200)\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UITableViewCell with an UIImageView and UILabel inside.",
      "input": "",
      "output": "class CustomTableViewCell: UITableViewCell {\n    // UIImageView\n    let imageViewCustom: UIImageView = {\n        let imgView = UIImageView()\n        imgView.translatesAutoresizingMaskIntoConstraints = false\n        return imgView\n    }()\n    \n    // UILabel\n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    // Setup views\n    private func setupViews() {\n        addSubview(imageViewCustom)\n        addSubview(titleLabel)\n        \n        NSLayoutConstraint.activate([\n            imageViewCustom.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageViewCustom.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageViewCustom.widthAnchor.constraint(equalToConstant: 100),\n            imageViewCustom.heightAnchor.constraint(equalToConstant: 100),\n            \n            titleLabel.centerYAnchor.constraint(equalTo: imageViewCustom.centerYAnchor),\n            titleLabel.leadingAnchor.constraint(equalTo: imageViewCustom.trailingAnchor, constant: 10),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor)\n        ])\n    }\n    \n    // Init\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupViews()\n    }\n}"
    },
    {
      "instruction": " \nImplement a custom UIViewController that has a UITableView with a custom UITableViewCell.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewController: UIViewController {\n    // UITableView\n    private let tableView: UITableView = {\n        let tableView = UITableView()\n        tableView.translatesAutoresizingMaskIntoConstraints = false\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomCell\")\n        return tableView\n    }()\n    \n    // ViewDidLoad\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n       view.addSubview(tableView)\n        tableView.dataSource = self\n        tableView.delegate = self\n        \n        NSLayoutConstraint.activate([\n            tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            tableView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),\n            tableView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            tableView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),\n        ])\n    }\n}\n\n// MARK: - UITableViewDataSource\nextension CustomTableViewController: UITableViewDataSource {\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 20 // your number of cell here\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomCell\", for: indexPath) as! CustomTableViewCell\n        cell.imageViewCustom.image = UIImage(named: \"your_image_name\")\n        cell.titleLabel.text = \"Your text here\"\n        return cell\n    }\n}\n\n// MARK: - UITableViewDelegate\nextension CustomTableViewController: UITableViewDelegate {\n    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {\n        return 100\n    }\n}"
    },
    {
      "instruction": " \nCreate a protocol for a custom delegate to handle user interaction events in a view controller.",
      "input": "",
      "output": "protocol CustomDelegate: AnyObject {\n    func onButtonTapped()\n    func onSwitchChanged(isOn: Bool)\n}\n\nclass CustomViewController: UIViewController {\n    weak var delegate: CustomDelegate?\n    \n    // UIButton\n    let button: UIButton = {\n        let button = UIButton()\n        button.translatesAutoresizingMaskIntoConstraints = false\n        button.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n        return button\n    }()\n    \n    // UISwitch\n    let switchControl: UISwitch = {\n        let switchControl = UISwitch()\n        switchControl.translatesAutoresizingMaskIntoConstraints = false\n        switchControl.addTarget(self, action: #selector(switchValueChanged), for: .valueChanged)\n        return switchControl\n    }()\n    \n    @objc private func buttonTapped() {\n        delegate?.onButtonTapped()\n    }\n    \n    @objc private func switchValueChanged() {\n        delegate?.onSwitchChanged(isOn: switchControl.isOn)\n    }\n}"
    },
    {
      "instruction": " \nImplement a custom UIView subclass that contains a UIScrollView and UIImageView for zoomable image viewing.",
      "input": "",
      "output": "import UIKit\n\nclass ZoomableImageView: UIView, UIScrollViewDelegate {\n    // UIScrollView\n    private let scrollView: UIScrollView = {\n        let scrollView = UIScrollView()\n        scrollView.translatesAutoresizingMaskIntoConstraints = false\n        scrollView.minimumZoomScale = 1.0\n        scrollView.maximumZoomScale = 5.0\n        return scrollView\n    }()\n    \n    // UIImageView\n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFit\n        return imageView\n    }()\n    \n    // Init\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupViews()\n    }\n    \n    // Setup views\n    private func setupViews() {\n        addSubview(scrollView)\n        scrollView.addSubview(imageView)\n        scrollView.delegate = self\n        \n        NSLayoutConstraint.activate([\n            scrollView.topAnchor.constraint(equalTo: topAnchor),\n            scrollView.bottomAnchor.constraint(equalTo: bottomAnchor),\n            scrollView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            scrollView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            \n            imageView.topAnchor.constraint(equalTo: scrollView.topAnchor),\n            imageView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),\n            imageView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),\n            imageView.centerXAnchor.constraint(equalTo: scrollView.centerXAnchor),\n            imageView.centerYAnchor.constraint(equalTo: scrollView.centerYAnchor),\n        ])\n    }\n    \n    // UIScrollViewDelegate\n    func viewForZooming(in scrollView: UIScrollView) -> UIView? {\n        return imageView\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIAlertController with a text field and two actions: \"Save\" and \"Cancel\".",
      "input": "",
      "output": "import UIKit\n\nclass CustomAlertController {\n    static func createTextFieldAlert(completion: @escaping (String) -> Void) -> UIAlertController {\n        let alertController = UIAlertController(title: \"Enter Text\", message: nil, preferredStyle: .alert)\n        \n        alertController.addTextField { textField in\n            textField.placeholder = \"Enter your text here\"\n        }\n        \n        let saveAction = UIAlertAction(title: \"Save\", style: .default) { _ in\n            if let textField = alertController.textFields.first, let text = textField.text {\n                completion(text)\n            }\n        }\n        \n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n        \n        alertController.addAction(saveAction)\n        alertController.addAction(cancelAction)\n        \n        return alertController\n    }\n}\n\n// Usage example\nclass CustomViewController: UIViewController {\n    override func viewDidLoad() {\n        super"
    },
    {
      "instruction": "Create a custom UIView subclass that represents a reusable button with rounded corners and custom title and background colors.",
      "input": "",
      "output": "import UIKit\n\nclass RoundedButton: UIButton {\n    var titleColor: UIColor = .white\n    var backgroundColor: UIColor = .blue\n    var cornerRadius: CGFloat = 8.0\n\n    init(title: String, titleColor: UIColor? = nil, backgroundColor: UIColor? = nil, cornerRadius: CGFloat? = nil) {\n        super.init(frame: .zero)\n        self.setTitle(title, for: .normal)\n        if let titleColor = titleColor {\n            self.titleColor = titleColor\n        }\n        if let backgroundColor = backgroundColor {\n            self.backgroundColor = backgroundColor\n        }\n        if let cornerRadius = cornerRadius {\n            self.cornerRadius = cornerRadius\n        }\n        configure()\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        configure()\n    }\n    \n    private func configure() {\n        self.setTitleColor(titleColor, for: .normal)\n        self.backgroundColor = backgroundColor\n        self.layer.cornerRadius = cornerRadius\n        self.clipsToBounds = true\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function that takes a URL and downloads an image from that URL, displaying the image in a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc loadImage(from url: URL, into imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, _, error) in\n        guard let data = data, error == nil else {\n            print(\"Error loading image: \\(String(describing: error))\")\n            return\n        }\n        DispatchQueue.main.async {\n            imageView.image = UIImage(data: data)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nCreate a UITableView with custom cells that display a user's profile image and username.",
      "input": "",
      "output": "import UIKit\n\nclass UserCell: UITableViewCell {\n    static let reuseIdentifier = \"UserCell\"\n\n    let profileImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.layer.cornerRadius = 25\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n\n    let usernameLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.font = UIFont.systemFont(ofSize: 16, weight: .medium)\n        return label\n    }()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        contentView.addSubview(profileImageView)\n        contentView.addSubview(usernameLabel)\n        setupConstraints()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            profileImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            profileImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            profileImageView.widthAnchor.constraint(equalToConstant: 50),\n            profileImageView.heightAnchor.constraint(equalToConstant: 50),\n\n            usernameLabel.leadingAnchor.constraint(equalTo: profileImageView.trailingAnchor, constant: 16),\n            usernameLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            usernameLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16)\n        ])\n    }\n}\n\nclass UsersTableViewController: UITableViewController {\n    var users: [User] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UserCell.self, forCellReuseIdentifier: UserCell.reuseIdentifier)\n        loadUsers()\n    }\n    \n    func loadUsers() {\n        // Load user data\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return users.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: UserCell.reuseIdentifier, for: indexPath) as! UserCell\n        let user = users[indexPath.row]\n        cell.usernameLabel.text = user.username\n        loadImage(from: user.profileImageURL, into: cell.profileImageView)\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function that saves a string to UserDefaults and another function that retrieves the saved string.",
      "input": "",
      "output": "import Foundation\n\nfunc saveString(_ string: String, forKey key: String) {\n    UserDefaults.standard.set(string, forKey: key)\n}\n\nfunc getString(forKey key: String) -> String? {\n    return UserDefaults.standard.string(forKey: key)\n}"
    },
    {
      "instruction": " \nCreate a Swift function that asynchronously fetches JSON data from a given URL and decodes it into a specified Codable type.",
      "input": "",
      "output": "import Foundation\n\nfunc fetchJSON<T: Codable>(url: URL, completion: @escaping (Result<T, Error>) -> Void) {\n   URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            let error = NSError(domain: \"FetchJSONError\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"Data not received\"])\n            completion(.failure(error))\n            return\n        }\n        \n        do {\n            let decoder = JSONDecoder()\n            let decodedData = try decoder.decode(T.self, from: data)\n            completion(.success(decodedData))\n        } catch {\n            completion(.failure(error))\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nCreate a simple Swift function to animate the frame of a UIView.",
      "input": "",
      "output": "import UIKit\n\nfunc animateViewFrameChange(_ view: UIView, to newFrame: CGRect, duration: TimeInterval = 0.3, completion: ((Bool) -> Void)? = nil) {\n    UIView.animate(withDuration: duration, animations: {\n        view.frame = newFrame\n    }, completion: completion)\n}"
    },
    {
      "instruction": " \nCreate a Swift function that takes a string of comma-separated values and converts it into an array of strings.",
      "input": "",
      "output": "import Foundation\n\nfunc convertCSVStringToArray(_ csvString: String) -> [String] {\n    return csvString.components(separatedBy: \",\")\n}"
    },
    {
      "instruction": " \nCreate a UIViewController that presents a UIAlertController with an action sheet containing a list of options.",
      "input": "",
      "output": "import UIKit\n\nclass ActionSheetViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        showActionSheet()\n    }\n    \n    func showActionSheet() {\n        let alertController = UIAlertController(title: \"Choose an option\", message: nil, preferredStyle: .actionSheet)\n        \n        let option1 = UIAlertAction(title: \"Option 1\", style: .default) { _ in\n            print(\"Option 1 selected\")\n        }\n        \n        let option2 = UIAlertAction(title: \"Option 2\", style: .default) { _ in\n            print(\"Option 2 selected\")\n        }\n        \n        let cancel = UIAlertAction(title: \"Cancel\", style: .cancel)\n        \n        alertController.addAction(option1)\n        alertController.addAction(option2)\n        alertController.addAction(cancel)\n        \n        present(alertController, animated: true)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that presents an alert with a title, message, and a single \"OK\" button.",
      "input": "",
      "output": "func showAlert(title: String, message: String, viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that downloads an image from a URL and sets it to a UIImageView.",
      "input": "",
      "output": "func setImageFromURL(url: URL, imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else { return }\n        DispatchQueue.main.async {\n            imageView.image = UIImage(data: data)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates a UIView to fade in.",
      "input": "",
      "output": "func fadeInView(_ view: UIView, duration: TimeInterval = 0.3) {\n    view.alpha = 0\n    UIView.animate(withDuration: duration) {\n        view.alpha = 1\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that saves a UIImage to the user's photo library.",
      "input": "",
      "output": "import Photos\n\nfunc saveImageToLibrary(image: UIImage) {\n    PHPhotoLibrary.shared().performChanges({\n        PHAssetChangeRequest.creationRequestForAsset(from: image)\n    }, completionHandler: { (success, error) in\n        if let error = error {\n            print(\"Error saving image: \\(error.localizedDescription)\")\n        } else {\n            print(\"Image saved successfully\")\n        }\n    })\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a blur effect to a UIView.",
      "input": "",
      "output": "import UIKit\n\nfunc addBlurEffect(to view: UIView, style: UIBlurEffect.Style) {\n    let blurEffect = UIBlurEffect(style: style)\n    let blurEffectView = UIVisualEffectView(effect: blurEffect)\n    blurEffectView.frame = view.bounds\n    blurEffectView.autoresizingMask = [.flexibleWidth, .flexibleHeight]\n    view.addSubview(blurEffectView)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that detects orientation changes and performs a closure in response.",
      "input": "",
      "output": "import UIKit\n\nfunc onOrientationChange(_ viewController: UIViewController, action: @escaping () -> Void) {\n    NotificationCenter.default.addObserver(forName: UIDevice.orientationDidChangeNotification, object: nil, queue: .main) { (notification) in\n        action()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates and returns a UIBarButtonItem with an image and target-action.",
      "input": "",
      "output": "func createBarButtonItem(withImage image: UIImage, target: AnyObject, action: Selector) -> UIBarButtonItem {\n    return UIBarButtonItem(image: image, style: .plain, target: target, action: action)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that plays a sound using AVAudioPlayer from a file URL.",
      "input": "",
      "output": "import AVFoundation\n\nfunc playSound(fromURL url: URL) {\n    var audioPlayer: AVAudioPlayer?\n    do {\n        audioPlayer = try AVAudioPlayer(contentsOf: url)\n        audioPlayer?.play()\n    } catch {\n        print(\"Error playing sound: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that retrieves the user's current location using CLLocationManager and displays it as a pin on a MKMapView.",
      "input": "",
      "output": "import UIKit\nimport MapKit\nimport CoreLocation\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate, MKMapViewDelegate {\n    \n    private let locationManager = CLLocationManager()\n    private let mapView = MKMapView()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(mapView)\n        mapView.translatesAutoresizingMaskIntoConstraints = false\n        \n        NSLayoutConstraint.activate([\n            mapView.topAnchor.constraint(equalTo: view.topAnchor),\n            mapView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            mapView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            mapView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n        ])\n        \n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n        \n        mapView.delegate = self\n        mapView.showsUserLocation = true\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            let center = CLLocationCoordinate2D(latitude: location.coordinate.latitude, longitude: location.coordinate.longitude)\n            let region = MKCoordinateRegion(center: center, latitudinalMeters: 1000, longitudinalMeters: 1000)\n            mapView.setRegion(region, animated: true)\n        }\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates a UIButton's width and height to create a pulsating effect.",
      "input": "",
      "output": "import UIKit\n\nclass PulsatingButton: UIButton {\n    \n    func pulsate() {\n        UIView.animate(withDuration: 0.5, delay: 0, options: [.autoreverse, .repeat, .allowUserInteraction], animations: {\n            self.transform = CGAffineTransform(scaleX: 1.2, y: 1.2)\n        }, completion: { _ in\n            self.transform = CGAffineTransform.identity\n        })\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that displays an alert with a title, message, and an OK button to dismiss the alert.",
      "input": "",
      "output": "import UIKit\n\nextension UIViewController {\n    \n    func showAlert(title: String, message: String) {\n        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n        let okAction = UIAlertAction(title: \"OK\", style: .default, handler: nil)\n        alertController.addAction(okAction)\n        present(alertController, animated: true, completion: nil)\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that uses URLSession to make a GET request to a given URL and returns the response as a JSON object.",
      "input": "",
      "output": "import Foundation\n\nfunc fetchJSONData(url: String, completion: @escaping (Result<Any, Error>) -> Void) {\n    guard let requestURL = URL(string: url) else {\n        completion(.failure(NSError(domain: \"\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"Invalid URL\"])))\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: requestURL) { (data, response, error) in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"No data received\"])))\n            return\n        }\n        \n        do {\n            let json = try JSONSerialization.jsonObject(with: data, options: [])\n            completion(.success(json))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    \n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that saves a UIImage to the user's photo library using UIImageWriteToSavedPhotosAlbum.",
      "input": "",
      "output": "import UIKit\n\nextension UIImage {\n    \n    func saveToPhotoLibrary(completion: @escaping (Error?) -> Void) {\n        UIImageWriteToSavedPhotosAlbum(self, self, #selector(image(_:didFinishSavingWithError:contextInfo:)), nil)\n    }\n    \n    @objc private func image(_ image: UIImage, didFinishSavingWithError error: Error?, contextInfo: UnsafeRawPointer) {\n        completion(error)\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that fetches an image from a remote URL and assigns it to a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nextension UIImageView {\n    \n    func loadImage(from url: URL, completion: ((Error?) -> Void)? = nil) {\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let error = error {\n                DispatchQueue.main.async { completion?(error) }\n                return\n            }\n            \n            guard let data = data else {\n                DispatchQueue.main.async { completion?(NSError(domain: \"\",code: -1, userInfo: [NSLocalizedDescriptionKey: \"No data received\"])) }\n                return\n            }\n            \n            DispatchQueue.main.async {\n                self.image = UIImage(data: data)\n                completion?(nil)\n            }\n        }.resume()\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that implements a UITableView with a custom UITableViewCell containing a UILabel and UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    \n    let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let cellLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        addSubview(cellImageView)\n        addSubview(cellLabel)\n        \n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 16),\n            cellImageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            cellImageView.heightAnchor.constraint(equalToConstant: 40),\n            cellImageView.widthAnchor.constraint(equalToConstant: 40),\n            \n            cellLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 16),\n            cellLabel.centerYAnchor.constraint(equalTo: centerYAnchor),\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n}\n\nclass CustomTableViewController: UITableViewController {\n    \n    let cellReuseIdentifier = \"customCell\"\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 10  // Replace with the desired number of rows\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier, for: indexPath) as! CustomTableViewCell\n        cell.cellLabel.text = \"Row \\(indexPath.row)\"\n        // Configure the cell.imageView with the desired image\n        return cell\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that implements a UICollectionView with a custom UICollectionViewCell containing a UILabel and UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    \n    let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let cellLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        addSubview(cellImageView)\n        addSubview(cellLabel)\n        \n        NSLayoutConstraint.activate([\n            cellImageView.centerXAnchor.constraint(equalTo: centerXAnchor),\n            cellImageView.topAnchor.constraint(equalTo: topAnchor),\n            cellImageView.heightAnchor.constraint(equalToConstant: 40),\n            cellImageView.widthAnchor.constraint(equalToConstant: 40),\n            \n            cellLabel.topAnchor.constraint(equalTo: cellImageView.bottomAnchor, constant: 8),\n            cellLabel.centerXAnchor.constraint(equalTo: centerXAnchor),\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n    \n    let cellReuseIdentifier = \"customCell\"\n    \n    init() {\n        let layout = UICollectionViewFlowLayout()\n        layout.itemSize = CGSize(width: 100, height: 100) // Set the desired cell size\n        super.init(collectionViewLayout: layout)\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: cellReuseIdentifier)\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10  // Replace with the desired number of items\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellReuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        cell.cellLabel.text = \"Item \\(indexPath.item)\"\n        // Configure the cell.imageView with the desired image\n        return cell\n    }\n    \n}"
    },
    {
      "instruction": "Create a Swift function to play a video file in a UIView using AVPlayer",
      "input": "",
      "output": "import AVFoundation\nimport AVKit\n\nclass VideoPlayerViewController: UIViewController {\n    \n    private lazy var playerView: UIView = {\n        let view = UIView()\n        view.translatesAutoresizingMaskIntoConstraints = false\n        return view\n    }()\n    \n    private var player: AVPlayer?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupPlayerView()\n        setupConstraints()\n        playVideo(videoFileName: \"example\", fileType: \"mp4\")\n    }\n    \n    private func setupPlayerView() {\n        view.addSubview(playerView)\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            playerView.topAnchor.constraint(equalTo: view.topAnchor),\n            playerView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            playerView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            playerView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    func playVideo(videoFileName: String, fileType: String) {\n        guard let videoURL = Bundle.main.url(forResource: videoFileName, withExtension: fileType) else {\n            print(\"Video file not found\")\n            return\n        }\n        \n        player = AVPlayer(url: videoURL)\n        let playerLayer = AVPlayerLayer(player: player)\n        playerLayer.frame = playerView.bounds\n        playerView.layer.addSublayer(playerLayer)\n        \n        NotificationCenter.default.addObserver(self, selector: #selector(videoDidEnd), name: .AVPlayerItemDidPlayToEndTime, object: player?.currentItem)\n        \n        player?.play()\n    }\n    \n    @objc func videoDidEnd() {\n        player?.seek(to: .zero)\n        player?.play()\n    }\n    \n}"
    },
    {
      "instruction": "Write a Swift function that creates a custom table view cell with a UILabel and a UIImageView, and configures it with data from a given model object.",
      "input": " ``",
      "output": "    import UIKit\n\n    class CustomTableViewCell: UITableViewCell {\n        static let reuseIdentifier = \"CustomTableViewCell\"\n        \n        private let titleLabel: UILabel = {\n            let label = UILabel()\n            label.translatesAutoresizingMaskIntoConstraints = false\n            return label\n        }()\n        \n        private let iconImageView: UIImageView = {\n            let imageView = UIImageView()\n            imageView.translatesAutoresizingMaskIntoConstraints = false\n            return imageView\n        }()\n        \n        override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n            super.init(style: style, reuseIdentifier: reuseIdentifier)\n            setupViews()\n        }\n        \n        required init?(coder: NSCoder) {\n            fatalError(\"init(coder:) has not been implemented\")\n        }\n        \n        private func setupViews() {\n            contentView.addSubview(titleLabel)\n            contentView.addSubview(iconImageView)\n            \n            NSLayoutConstraint.activate([\n                iconImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n                iconImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n                iconImageView.widthAnchor.constraint(equalToConstant: 40),\n                iconImageView.heightAnchor.constraint(equalToConstant: 40),\n                \n                titleLabel.leadingAnchor.constraint(equalTo: iconImageView.trailingAnchor, constant: 16),\n                titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\n                titleLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor)\n            ])\n        }\n        \n        func configure(with model: CustomModel) {\n            titleLabel.text = model.title\n            iconImageView.image = UIImage(named: model.iconName)\n        }\n    }"
    },
    {
      "instruction": " \nWrite a Swift function that logs in a user with email and password using Firebase.",
      "input": " ``",
      "output": "    import FirebaseAuth\n\n    func loginUser(email: String, password: String, completion: @escaping (Result<AuthDataResult, Error>) -> Void) {\n        Auth.auth().signIn(withEmail: email, password: password) { authResult, error in\n            if let error = error {\n                completion(.failure(error))\n                return\n            }\n            \n            if let authResult = authResult {\n                completion(.success(authResult))\n            }\n        }\n    }"
    },
    {
      "instruction": " \nWrite a Swift function that fetches an array of user's favorite items from a remote API and decodes the JSON response into a list of custom objects.",
      "input": " ``",
      "output": "    import Foundation\n\n    struct FavoriteItem: Codable {\n        let id: Int\n        let title: String\n        let imageUrl: String\n    }\n\n    class APIManager {\n        static let shared = APIManager()\n        \n        func fetchFavoriteItems(completion: @escaping (Result<[FavoriteItem], Error>) -> Void) {\n            let url = URL(string: \"https://api.example.com/favorites\")!\n            URLSession.shared.dataTask(with: url) { data, response, error in\n                if let error = error {\n                    completion(.failure(error))\n                    return\n                }\n                \n                if let data = data {\n                    do {\n                        let items = try JSONDecoder().decode([FavoriteItem].self, from: data)\n                        completion(.success(items))\n                    } catch {\n                        completion(.failure(error))\n                    }\n                }\n            }.resume()\n        }\n    }"
    },
    {
      "instruction": " \nWrite a Swift function that paginates fetched data from a remote API and adds a loading indicator to the bottom of a UITableView.",
      "input": " ``",
      "output": "    import UIKit\n    import Alamofire\n\n    class PaginationViewController: UITableViewController {\n        private var items: [Item] = []\n        private var currentPage = 1\n        private var isLoading = false\n        private let spinner = UIActivityIndicatorView(style: .medium)\n\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"cell\")\n            loadMoreData()\n        }\n\n        override func numberOfSections(in tableView: UITableView) -> Int {\n            return 1\n        }\n\n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n            return items.count\n        }\n\n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n            cell.textLabel?.text = items[indexPath.row].title\n            return cell\n        }\n\n        override func scrollViewDidScroll(_ scrollView: UIScrollView) {\n            let offsetY = scrollView.contentOffset.y\n            let contentHeight = scrollView.contentSize.height\n            if offsetY > contentHeight - scrollView.frame.height * 4 {\n                loadMoreData()\n            }\n        }\n\n        private func loadMoreData() {\n            if isLoading { return }\n            isLoading = true\n            spinner.startAnimating()\n            tableView.tableFooterView = spinner\n\n            let url = \"https://api.example.com/items?page=\\(currentPage)\"\n            Alamofire.request(url).responseJSON { response in\n                if let data = response.data {\n                    do {\n                        let newItems = try JSONDecoder().decode([Item].self, from: data)\n                        self.items.append(contentsOf: newItems)\n                        self.currentPage += 1\n                        self.tableView.reloadData()\n                    } catch {\n                        print(\"Error decoding data: \\(error)\")\n                    }\n                }\n                self.isLoading = false\n                self.spinner.stopAnimating()\n                self.tableView.tableFooterView = nil\n            }\n        }\n    }\n\n    struct Item: Codable {\n        let id: Int\n        let title: String\n    }"
    },
    {
      "instruction": " \nWrite a Swift function that adds a custom annotation to a MKMapView with a custom callout, including an image and a label.",
      "input": " ``",
      "output": "    import MapKit\n    import UIKit\n\n    class CustomAnnotation: NSObject, MKAnnotation {\n        var coordinate: CLLocationCoordinate2D\n        var title: String?\n        var image: UIImage?\n        \n        init(coordinate: CLLocationCoordinate2D, title: String, image: UIImage?) {\n            self.coordinate = coordinate\n            self.title = title\n            self.image = image\n        }\n    }\n\n    class CustomCalloutView: UIView {\n        private let titleLabel: UILabel = {\n            let label = UILabel()\n            label.translatesAutoresizingMaskIntoConstraints = false\n            return label\n        }()\n        \n        private let imageView: UIImageView = {\n            let imageView = UIImageView()\n            imageView.translatesAutoresizingMaskIntoConstraints = false\n            return imageView\n        }()\n        \n        init(annotation: CustomAnnotation) {\n            super.init(frame: .zero)\n            \n            titleLabel.text = annotation.title\n            imageView.image = annotation.image\n            \n            addSubview(titleLabel)\n            addSubview(imageView)\n            \n            NSLayoutConstraint.activate([\n                imageView.topAnchor.constraint(equalTo: topAnchor),\n                imageView.centerXAnchor.constraint(equalTo: centerXAnchor),\n                imageView.widthAnchor.constraint(equalToConstant: 40),\n                imageView.heightAnchor.constraint(equalToConstant: 40),\n                \n                titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n                titleLabel.centerXAnchor.constraint(equalTo: centerXAnchor),\n                titleLabel.bottomAnchor.constraint(equalTo: bottomAnchor)\n            ])\n        }\n        \n        required init?(coder: NSCoder) {\n            fatalError(\"init(coder:) has not been implemented\")\n        }\n    }\n\n    class MapViewController: UIViewController, MKMapViewDelegate {\n        private let mapView = MKMapView()\n\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            mapView.delegate = self\n            \n            let coordinate = CLLocationCoordinate2D(latitude: 37.7749, longitude: -122.4194)\n            let annotation = CustomAnnotation(coordinate: coordinate, title: \"San Francisco\", image: UIImage(named: \"sf\"))\n            mapView.addAnnotation(annotation)\n        }\n        \n        func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {\n            guard let customAnnotation = annotation as? CustomAnnotation else { return nil }\n            \n            let reuseIdentifier = \"CustomAnnotation\"\n            var annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: reuseIdentifier)\n            \n            if annotationView == nil {\n                annotationView = MKAnnotationView(annotation: customAnnotation, reuseIdentifier: reuseIdentifier)\n                annotationView?.canShowCallout = false\n            } else {\n                annotationView?.annotation = customAnnotation\n            }\n            \n            annotationView?.image = customAnnotation.image\n            return annotationView\n        }\n        \n        func mapView(_ mapView: MKMapView, didSelect view: MKAnnotationView) {\n            guard let customAnnotation = view.annotation as? CustomAnnotation else { return }\n            \n            let calloutView = CustomCalloutView(annotation: customAnnotation)\n            calloutView.center = CGPoint(x: view.bounds.midX, y: -(calloutView.bounds.height * 0.5))\n            view.addSubview(calloutView)\n        }\n        \n        func mapView(_ mapView: MKMapView, didDeselect view: MKAnnotationView) {\n            if let customCalloutView = view.subviews.first(where: { $0 is CustomCalloutView }) {\n                customCalloutView.removeFromSuperview()\n            }\n        }\n    }"
    },
    {
      "instruction": " \nWrite a Swift function that asynchronously downloads an image from a given URL and sets it to a UIImageView.",
      "input": " ``",
      "output": "    import UIKit\n\n    extension UIImageView {\n        func setImage(from url: URL, placeholder: UIImage? = nil) {\n            self.image = placeholder\n            \n            URLSession.shared.dataTask(with: url) { data, response, error in\n                if let error = error {\n                    print(\"Error downloading image: \\(error)\")\n                    return\n                }\n                \n                if let data = data, let image = UIImage(data: data) {\n                    DispatchQueue.main.async {\n                        self.image = image\n                    }\n                }\n            }.resume()\n        }\n    }"
    },
    {
      "instruction": " \nWrite a Swift function that adds swipe gestures (left and right) to a UIView and performs different actions based on the swipe direction.",
      "input": " ``",
      "output": "    import UIKit\n\n    class SwipeViewController: UIViewController {\n        private let customView = UIView()\n\n        override func viewDidLoad() {\n           "
    },
    {
      "instruction": "Create a Swift function to register a UITableViewCell for a UITableView with a given reuse identifier and custom UITableViewCell subclass",
      "input": "",
      "output": "func registerTableViewCell(tableView: UITableView, reuseIdentifier: String, cellClass: UITableViewCell.Type) {\n    tableView.register(cellClass, forCellReuseIdentifier: reuseIdentifier)\n}"
    },
    {
      "instruction": " \nCreate a Swift function to handle the user tapping on a UIButton and changing the background color of a UIView",
      "input": "",
      "output": "@objc func buttonTapped(sender: UIButton, viewToChangeColor: UIView) {\n    viewToChangeColor.backgroundColor = UIColor.random()\n}\n\nextension UIColor {\n    static func random() -> UIColor {\n        return UIColor(red: CGFloat.random(in: 0...1),\n                       green: CGFloat.random(in: 0...1),\n                       blue: CGFloat.random(in: 0...1),\n                       alpha: 1.0)\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function to download an image from a URL and set it to a UIImageView",
      "input": "",
      "output": "func downloadImage(from url: URL, imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else { return }\n        DispatchQueue.main.async {\n            imageView.image = UIImage(data: data)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nCreate a Swift function to save a key-value pair in UserDefaults",
      "input": "",
      "output": "func saveToUserDefaults(key: String, value: Any) {\n    UserDefaults.standard.set(value, forKey: key)\n}"
    },
    {
      "instruction": " \nCreate a Swift function to fetch data from a REST API, decode the JSON, and pass the decoded data to a completion handler",
      "input": "",
      "output": "func fetchData<T: Decodable>(url: URL, completion: @escaping (Result<T, Error>) -> Void) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let decodedData = try JSONDecoder().decode(T.self, from: data)\n            completion(.success(decodedData))\n        } catch {\n            completion(.failure(error))\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nCreate a Swift function to filter an array of strings based on a search term",
      "input": "",
      "output": "func filterStrings(strings: [String], searchTerm: String) -> [String] {\n    return strings.filter { $0.lowercased().contains(searchTerm.lowercased()) }\n}"
    },
    {
      "instruction": " \nCreate a Swift function to animate the rotation of a UIView by a specified angle",
      "input": "",
      "output": "func rotateView(view: UIView, angle: CGFloat, duration: TimeInterval, completion: ((Bool) -> Void)?) {\n    UIView.animate(withDuration: duration, animations: {\n        view.transform = view.transform.rotated(by: angle)\n    }, completion: completion)\n}"
    },
    {
      "instruction": " \nCreate a Swift function to validate an email address using a regular expression",
      "input": "",
      "output": "func isValidEmail(email: String) -> Bool {\n    let emailRegex = \"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,64}\"\n    let emailPredicate = NSPredicate(format: \"SELF MATCHES %@\", emailRegex)\n    return emailPredicate.evaluate(with: email)\n}"
    },
    {
      "instruction": "Write a Swift function to create a reusable table view cell with an image and label",
      "input": "",
      "output": "class CustomTableViewCell: UITableViewCell {\n    let customImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let customLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        \n        contentView.addSubview(customImageView)\n        contentView.addSubview(customLabel)\n        \n        NSLayoutConstraint.activate([\n            customImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            customImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            customImageView.widthAnchor.constraint(equalToConstant: 40),\n            customImageView.heightAnchor.constraint(equalToConstant: 40),\n            \n            customLabel.leadingAnchor.constraint(equalTo: customImageView.trailingAnchor, constant: 16),\n            customLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\n            customLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to download an image from a URL and set it to an UIImageView",
      "input": "",
      "output": "import UIKit\n\nextension UIImageView {\n    func downloadImage(from url: URL, completion: ((UIImage?) -> Void)? = nil) {\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            guard let data = data, error == nil, let image = UIImage(data: data) else {\n                DispatchQueue.main.async { completion?(nil) }\n                return\n            }\n            \n            DispatchQueue.main.async {\n                self.image = image\n                completion?(image)\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to request user's location and update a UILabel with the current city name",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n    let locationLabel = UILabel()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        locationManager.delegate = self\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.desiredAccuracy = kCLLocationAccuracyKilometer\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        guard let location = locations.last else { return }\n        locationManager.stopUpdatingLocation()\n        CLGeocoder().reverseGeocodeLocation(location) { (placemarks, error) in\n            if let error = error {\n                print(\"Error: \\(error.localizedDescription)\")\n            } else if let placemark = placemarks?.first {\n                DispatchQueue.main.async {\n                    self.locationLabel.text = placemark.locality\n                }\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UICollectionView with a custom UICollectionViewCell with an image and a label",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UICollectionViewController, UICollectionViewDelegateFlowLayout {\n    private let reuseIdentifier = \"CustomCell\"\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: reuseIdentifier)\n        collectionView.backgroundColor = .white\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return dataSource.count\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        cell.customImageView.image = UIImage(named: dataSource[indexPath.item].imageName)\n        cell.customLabel.text = dataSource[indexPath.item].title\n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: view.frame.width / 2 - 16, height: view.frame.width / 2 - 16)\n    }\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let customImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let customLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        addSubview(customImageView)\n        addSubview(customLabel)\n        \n        NSLayoutConstraint.activate([\n            customImageView.topAnchor.constraint(equalTo: topAnchor),\n            customImageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            customImageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            customImageView.heightAnchor.constraint(equalTo: widthAnchor),\n            \n            customLabel.topAnchor.constraint(equalTo: customImageView.bottomAnchor, constant: 8),\n            customLabel.leadingAnchor.constraint(equalTo: leadingAnchor),\n           customLabel.trailingAnchor.constraint(equalTo: trailingAnchor),\n            customLabel.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to authenticate users with Apple Sign In",
      "input": "",
      "output": "import AuthenticationServices\nimport UIKit\n\nclass AppleSignInViewController: UIViewController, ASAuthorizationControllerDelegate {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupAppleSignInButton()\n    }\n\n    func setupAppleSignInButton() {\n        let appleSignInButton = ASAuthorizationAppleIDButton()\n        appleSignInButton.translatesAutoresizingMaskIntoConstraints = false\n        appleSignInButton.addTarget(self, action: #selector(handleAppleSignInTapped), for: .touchUpInside)\n\n        view.addSubview(appleSignInButton)\n\n        NSLayoutConstraint.activate([\n            appleSignInButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            appleSignInButton.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            appleSignInButton.widthAnchor.constraint(equalToConstant: 200),\n            appleSignInButton.heightAnchor.constraint(equalToConstant: 40)\n        ])\n    }\n\n    @objc func handleAppleSignInTapped() {\n        let appleIDProvider = ASAuthorizationAppleIDProvider()\n        let request = appleIDProvider.createRequest()\n        request.requestedScopes = [.fullName, .email]\n\n        let authorizationController = ASAuthorizationController(authorizationRequests: [request])\n        authorizationController.delegate = self\n        authorizationController.performRequests()\n    }\n\n    func authorizationController(controller: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization) {\n        guard let appleIDCredential = authorization.credential as? ASAuthorizationAppleIDCredential else { return }\n        // Handle the received data (full name, email, user identifier) as needed.\n    }\n\n    func authorizationController(controller: ASAuthorizationController, didCompleteWithError error: Error) {\n        // Handle error.\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to play an audio file using AVFoundation",
      "input": "",
      "output": "import AVFoundation\nimport UIKit\n\nclass AudioPlayerViewController: UIViewController {\n    var audioPlayer: AVAudioPlayer?\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupAudioPlayer()\n    }\n\n    func setupAudioPlayer() {\n        guard let audioURL = Bundle.main.url(forResource: \"example\", withExtension: \"mp3\") else { return }\n\n        do {\n            audioPlayer = try AVAudioPlayer(contentsOf: audioURL)\n        } catch {\n            print(\"Error: \\(error)\")\n        }\n    }\n\n    func playAudio() {\n        audioPlayer?.play()\n    }\n\n    func pauseAudio() {\n        audioPlayer?.pause()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to display a modal view controller with a custom transition",
      "input": "",
      "output": "import UIKit\n\nclass CustomTransitionViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupModalButton()\n    }\n\n    func setupModalButton() {\n        let showModalButton = UIButton(type: .system)\n        showModalButton.setTitle(\"Show Modal\", for: .normal)\n        showModalButton.addTarget(self, action: #selector(showModalTapped), for: .touchUpInside)\n        showModalButton.translatesAutoresizingMaskIntoConstraints = false\n\n        view.addSubview(showModalButton)\n\n        NSLayoutConstraint.activate([\n            showModalButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            showModalButton.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n\n    @objc func showModalTapped() {\n        let modalViewController = ModalViewController()\n        modalViewController.modalPresentationStyle = .custom\n        modalViewController.transitioningDelegate = self\n        present(modalViewController, animated: true, completion: nil)\n    }\n}\n\nextension CustomTransitionViewController: UIViewControllerTransitioningDelegate {\n    func animationController(forPresented presented: UIViewController, presenting: UIViewController, source: UIViewController) -> UIViewControllerAnimatedTransitioning? {\n        return CustomPresentAnimationController()\n    }\n\n    func animationController(forDismissed dismissed: UIViewController) -> UIViewControllerAnimatedTransitioning? {\n        return CustomDismissAnimationController()\n    }\n}\n\nclass CustomPresentAnimationController: NSObject, UIViewControllerAnimatedTransitioning {\n    func transitionDuration(using transitionContext: UIViewControllerContextTransitioning?) -> TimeInterval {\n        return 0.5\n    }\n\n    func animateTransition(using transitionContext: UIViewControllerContextTransitioning) {\n        guard let toViewController = transitionContext.viewController(forKey: .to),\n              let toView = transitionContext.view(forKey: .to) else { return }\n\n        let containerView = transitionContext.containerView\n        containerView.addSubview(toView)\n        toView.frame = CGRect(x: 0, y: containerView.bounds.height, width: containerView.bounds.width, height: containerView.bounds.height)"
    },
    {
      "instruction": "Create a Swift function to download an image from a given URL and display it in a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass ImageViewController: UIViewController {\n    \n    private lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFit\n        return imageView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(imageView)\n        setupConstraints()\n        downloadImage(from: \"https://www.example.com/image.jpg\")\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            imageView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            imageView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            imageView.widthAnchor.constraint(equalToConstant: 200),\n            imageView.heightAnchor.constraint(equalToConstant: 200)\n        ])\n    }\n    \n    func downloadImage(from urlString: String) {\n        guard let url = URL(string: urlString) else { return }\n        \n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let data = data, let image = UIImage(data: data) {\n                DispatchQueue.main.async {\n                    self.imageView.image = image\n                }\n            }\n        }.resume()\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function to authenticate a user using biometric authentication.",
      "input": "",
      "output": "import LocalAuthentication\n\nfunc authenticateUser(completion: @escaping (Bool) -> Void) {\n    let context = LAContext()\n    var error: NSError?\n    \n    if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {\n        context.evaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, localizedReason: \"Please authenticate\") { success, authenticationError in\n            DispatchQueue.main.async {\n                if success {\n                    completion(true)\n                } else {\n                    completion(false)\n                }\n            }\n        }\n    } else {\n        DispatchQueue.main.async {\n            completion(false)\n        }\n    }\n}"
    },
    {
      "instruction": " \nImplement a UICollectionView with custom UICollectionViewCell.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    \n    private lazy var collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.backgroundColor = .white\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n        return collectionView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(collectionView)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 20\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        cell.configure(with: \"Item \\(indexPath.row + 1)\")\n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: collectionView.bounds.width / 2 - 10, height: collectionView.bounds.width / 2 - 10)\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {\n        return 10\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {\n        return 10\n    }\n    \n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    \n    private lazy var label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textAlignment = .center\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(label)\n        setupConstraints()\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            label.topAnchor.constraint(equalTo: contentView.topAnchor),\n            label.bottomAnchor.constraint(equalTo: contentView.bottomAnchor),\n            label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: contentView.trailingAnchor)\n        ])\n    }\n    \n    func configure(with text: String) {\n        label.text = text\n    }\n    \n}"
    },
    {
      "instruction": " \nImplement a pull-to-refresh functionality in a UITableView.",
      "input": "",
      "output": "import UIKit\n\nclass RefreshTableViewController: UITableViewController {\n    \n    private let cellReuseIdentifier = \"RefreshCell\"\n    \n    private var data: [String] = [\"Item 1\", \"Item 2\", \"Item 3\"]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)\n        setupRefreshControl()\n    }\n    \n    private func setupRefreshControl() {\n        let refreshControl = UIRefreshControl()\n        refreshControl.addTarget(self, action: #selector(refreshData), for: .valueChanged)\n        tableView.refreshControl = refreshControl\n    }\n    \n    @objc private func refreshData() {\n        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n            self.data = [\"New Item 1\", \"New Item 2\", \"New Item 3\"]\n            self.tableView.reloadData()\n            self.tableView.refreshControl?.endRefreshing()\n        }\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier, for: indexPath)\n        cell.textLabel?.text = data[indexPath.row]\n        return cell\n    }\n    \n}"
    },
    {
      "instruction": " \nImplement a custom UIAlert with a text field.",
      "input": "",
      "output": "import UIKit\n\nclass CustomAlertViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    @IBAction func showAlertButtonTapped(_ sender: UIButton) {\n        showCustomAlert()\n    }\n    \n    func showCustomAlert() {\n        let alertController = UIAlertController(title: \"Custom Alert\", message: \"Enter text:\", preferredStyle: .alert)\n        \n        alertController.addTextField { (textField) in\n            textField.placeholder = \"Enter text here\"\n        }\n        \n        let confirmAction = UIAlertAction(title: \"Confirm\", style: .default) { (_) in\n            if let textField = alertController.textFields?.first {\n                print(\"Text: \\(textField.text ?? \"\")\")\n            }\n        }\n        \n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n        \n        alertController.addAction(confirmAction)\n        alertController.addAction(cancelAction)\n        \n        present(alertController, animated: true, completion: nil)\n    }\n    \n}"
    },
    {
      "instruction": " \nImplement a search functionality in a UITableView.",
      "input": "",
      "output": "import UIKit\n\nclass SearchTableViewController: UITableViewController, UISearchBarDelegate {\n    \n    private let cellReuseIdentifier = \"SearchCell\"\n    \n    private let data: [String] = [\"Apple\", \"Banana\", \"Cherry\", \"Grape\", \"Lemon\", \"Mango\", \"Orange\", \"Peach\", \"Plum\", \"Strawberry\", \"Watermelon\"]\n    private var filteredData: [String] = []\n    \n    private lazy var searchBar: UISearchBar = {\n        let searchBar = UISearchBar()\n        searchBar.delegate = self\n        return searchBar\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)\n        tableView.tableHeaderView = searchBar\n        \n        filteredData = data\n    }\n    \n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredData = data\n        } else {\n            filteredData = data.filter { $0.lowercased().contains(searchText.lowercased()) }\n        }\n        tableView.reloadData()\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredData.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier, for: indexPath)\n        cell.textLabel?.text = filteredData[indexPath.row]\n        return cell\n    }\n    \n}"
    },
    {
      "instruction": " \nImplement a function to request and parse a JSON response using URLSession and Codable.",
      "input": "",
      "output": "import Foundation\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let username: String\n    let email: String\n}\n\nfunc fetchUsers(completion: @escaping ([User]?) -> Void) {\n    let url = URL(string: \"https://jsonplaceholder.typicode.com/users\")!\n    \n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            completion(nil)\n            return\n        }\n        \n        do {\n            let users = try JSONDecoder().decode([User].self, from: data)\n            completion(users)\n        } catch {\n            print(\"Error decoding JSON: \\(error.localizedDescription)\")\n            completion(nil)\n        }\n    }.resume"
    },
    {
      "instruction": "Write a Swift function that implements a UITableView with a custom UITableViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    // Add custom UI elements and constraints here\n}\n\nclass CustomTableViewController: UITableViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomCell\")\n    }\n\n    override func numberOfSections(in tableView: UITableView) -> Int {\n        return 1\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return dataList.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomCell\", for: indexPath) as! CustomTableViewCell\n        let data = dataList[indexPath.row]\n        // Configure the custom cell with data\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that downloads an image from a URL and sets it to a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil else {\n            completion(nil)\n            return\n        }\n        completion(UIImage(data: data))\n    }.resume()\n}\n\nfunc setImage(url: URL, imageView: UIImageView) {\n    downloadImage(from: url) { image in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to handle user location updates using CLLocationManager",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManagerDelegate: NSObject, CLLocationManagerDelegate {\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            print(\"Current location: \\(location)\")\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Location update failed: \\(error.localizedDescription)\")\n    }\n}\n\nclass LocationHandler: NSObject {\n    private let locationManager = CLLocationManager()\n    private let delegate = LocationManagerDelegate()\n\n    override init() {\n        super.init()\n        locationManager.delegate = delegate\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n    }\n\n    func requestLocationPermission() {\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    func startUpdatingLocation() {\n        locationManager.startUpdatingLocation()\n    }\n\n    func stopUpdatingLocation() {\n        locationManager.stopUpdatingLocation()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UICollectionView with a custom UICollectionViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // Add custom UI elements and constraints here\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return dataList.count\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        let data = dataList[indexPath.row]\n        // Configure the custom cell with data\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a UIPickerView with a custom data source",
      "input": "",
      "output": "import UIKit\n\nclass CustomPickerViewDataSource: NSObject, UIPickerViewDataSource, UIPickerViewDelegate {\n    let dataList: [String]\n\n    init(dataList: [String]) {\n        self.dataList = dataList\n    }\n\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return dataList.count\n    }\n\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return dataList[row]\n    }\n\n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        print(\"Selected: \\(dataList[row])\")\n    }\n}\n\nclass CustomPickerViewController: UIViewController {\n    let pickerView = UIPickerView()\n    let pickerViewDataSource: CustomPickerViewDataSource\n\n    init(dataList: [String]) {\n        self.pickerViewDataSource = CustomPickerViewDataSource(dataList: dataList)\n        super.init(nibName: nil, bundle: nil)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        pickerView.dataSource= pickerViewDataSource\n        pickerView.delegate = pickerViewDataSource\n        view.addSubview(pickerView)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a UITextField with a custom delegate to handle text changes",
      "input": "",
      "output": "import UIKit\n\nclass CustomTextFieldDelegate: NSObject, UITextFieldDelegate {\n    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {\n        // Handle text changes\n        print(\"Text changed: \\(string)\")\n        return true\n    }\n}\n\nclass CustomTextFieldViewController: UIViewController {\n    let textField = UITextField()\n    let textFieldDelegate = CustomTextFieldDelegate()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        textField.delegate = textFieldDelegate\n        view.addSubview(textField)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sends an HTTP GET request to a URL and handles JSON response",
      "input": "",
      "output": "import Foundation\n\nfunc sendGetRequest(url: URL, completion: @escaping (Result<Data, Error>) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        if let data = data {\n            completion(.success(data))\n        }\n    }.resume()\n}\n\nfunc handleJSONResponse(data: Data) {\n    do {\n        let jsonObject = try JSONSerialization.jsonObject(with: data, options: [])\n        print(\"JSON Object: \\(jsonObject)\")\n    } catch {\n        print(\"Error: \\(error)\")\n    }\n}\n\nif let url = URL(string: \"https://jsonplaceholder.typicode.com/todos/1\") {\n    sendGetRequest(url: url) { result in\n        switch result {\n        case .success(let data):\n            handleJSONResponse(data: data)\n        case .failure(let error):\n            print(\"Error: \\(error)\")\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a UITapGestureRecognizer to a UIView and handles the tap gesture",
      "input": "",
      "output": "import UIKit\n\nclass CustomTapGestureRecognizer: UITapGestureRecognizer {\n    var action: (() -> Void)?\n\n    @objc func handleTap() {\n        action?()\n    }\n}\n\nclass CustomTapGestureViewController: UIViewController {\n    let customView = UIView()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        let tapGestureRecognizer = CustomTapGestureRecognizer(target: self, action: #selector(handleTapGesture))\n        tapGestureRecognizer.action = {\n            print(\"View tapped\")\n        }\n        customView.addGestureRecognizer(tapGestureRecognizer)\n        view.addSubview(customView)\n    }\n\n    @objc func handleTapGesture(sender: UITapGestureRecognizer) {\n        sender.action?()\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that adds a gradient background to a UIButton.",
      "input": "",
      "output": "import UIKit\n\nextension UIButton {\n    func applyGradient(colors: [CGColor], startPoint: CGPoint, endPoint: CGPoint) {\n        let gradientLayer = CAGradientLayer()\n        gradientLayer.colors = colors\n        gradientLayer.startPoint = startPoint\n        gradientLayer.endPoint = endPoint\n        gradientLayer.frame = self.bounds\n        gradientLayer.cornerRadius = self.layer.cornerRadius\n        self.layer.insertSublayer(gradientLayer, at: 0)\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UICollectionViewFlowLayout for a UICollectionView with equal spacing between cells and a given number of columns.",
      "input": "",
      "output": "import UIKit\n\nclass CustomFlowLayout: UICollectionViewFlowLayout {\n    var numberOfColumns: Int = 2\n\n    override func prepare() {\n        super.prepare()\n\n        guard let collectionView = collectionView else { return }\n\n        let availableWidth = collectionView.bounds.width - sectionInset.left - sectionInset.right\n        let itemWidth = (availableWidth / CGFloat(numberOfColumns)).rounded(.down)\n        let itemHeight = itemWidth\n        \n        itemSize = CGSize(width: itemWidth, height: itemHeight)\n        minimumLineSpacing = 0\n        minimumInteritemSpacing = 0\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that fetches JSON data from a given URL and decodes it into a specific model object using Codable.",
      "input": "",
      "output": "import Foundation\n\nstruct MyModel: Codable {\n    let id: Int\n    let name: String\n    // Add other properties as needed\n}\n\nfunc fetchData(from url: String, completion: @escaping (Result<MyModel, Error>) -> Void) {\n    guard let url = URL(string: url) else { return }\n\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else { return }\n\n        do {\n            let decoder = JSONDecoder()\n            let model = try decoder.decode(MyModel.self, from: data)\n            completion(.success(model))\n        } catch {\n            completion(.failure(error))\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a rounded border with a custom color and width to a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nextension UIImageView {\n    func applyRoundedBorder(color: UIColor, borderWidth: CGFloat) {\n        self.layer.cornerRadius = self.bounds.height / 2\n        self.layer.masksToBounds = true\n        self.layer.borderColor = color.cgColor\n        self.layer.borderWidth = borderWidth\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UITableViewCell subclass containing a UILabel and a UISwitch, and add Auto Layout constraints programmatically.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    let toggleSwitch: UISwitch = {\n        let toggle = UISwitch()\n        toggle.translatesAutoresizingMaskIntoConstraints = false\n        return toggle\n    }()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupViews()\n        setupConstraints()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupViews() {\n        addSubview(titleLabel)\n        addSubview(toggleSwitch)\n    }\n\n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 16),\n            titleLabel.centerYAnchor.constraint(equalTo: centerYAnchor),\n\n            toggleSwitch.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -16),\n            toggleSwitch.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates the transition between two UIViews using cross-dissolve.",
      "input": "",
      "output": "import UIKit\n\nfunc crossDissolveTransition(from view1: UIView, to view2: UIView, duration: TimeInterval) {\n    view2.alpha = 0\n    view2.isHidden = false\n    UIView.animate(withDuration: duration, animations: {\n        view1.alpha = 0\n        view2.alpha = 1\n    }) { _ in\n        view1.isHidden = true\n        view1.alpha = 1\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that validates an email address using a regular expression.",
      "input": "",
      "output": "import Foundation\n\nfunc isValidEmail(email: String) -> Bool {\n    let regexPattern = \"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,64}\"\n    let regex = try! NSRegularExpression(pattern: regexPattern)\n    let range = NSRange(location: 0, length: email.utf16.count)\n    return regex.firstMatch(in: email, options: [], range: range) != nil\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UIAlertController with a text field and a submit button, and returns the text from the text field when the submit button is tapped.",
      "input": "",
      "output": "import UIKit\n\nfunc presentTextInputAlertController(title: String, message: String, submitTitle: String, in viewController: UIViewController, completion: @escaping (String?) -> Void) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    alertController.addTextField()\n\n    let submitAction = UIAlertAction(title: submitTitle, style: .default) { _ in\n        let inputText = alertController.textFields?.first?.text\n        completion(inputText)\n    }\n\n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel) { _ in\n        completion(nil)\n    }\n\n    alertController.addAction(submitAction)\n    alertController.addAction(cancelAction)\n\n    viewController.present(alertController, animated: true)\n}"
    },
    {
      "instruction": "Implement a custom UITableView with a custom UITableViewCell that displays an image, title, and subtitle.",
      "input": "",
      "output": "import UIKit\n\nstruct CustomCellData {\n    let image: UIImage?\n    let title: String\n    let subtitle: String\n}\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var cellImage: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n    @IBOutlet weak var subtitleLabel: UILabel!\n\n    func configureCell(data: CustomCellData) {\n        cellImage.image = data.image\n        titleLabel.text = data.title\n        subtitleLabel.text = data.subtitle\n    }\n}\n\nclass CustomTableViewController: UITableViewController {\n    private let cellReuseIdentifier = \"CustomTableViewCell\"\n    \n    private var cellData: [CustomCellData] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UINib(nibName: cellReuseIdentifier, bundle: nil), forCellReuseIdentifier: cellReuseIdentifier)\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return cellData.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier, for: indexPath) as! CustomTableViewCell\n        cell.configureCell(data: cellData[indexPath.row])\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UICollectionViewCell with an UIImageView and UILabel, and a UICollectionView that displays the cells.",
      "input": "",
      "output": "import UIKit\n\nstruct CollectionCellData {\n    let image: UIImage?\n    let title: String\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n\n    func configureCell(data: CollectionCellData) {\n        imageView.image = data.image\n        titleLabel.text = data.title\n    }\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n    private let cellReuseIdentifier = \"CustomCollectionViewCell\"\n    \n    private var cellData: [CollectionCellData] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(UINib(nibName: cellReuseIdentifier, bundle: nil), forCellWithReuseIdentifier: cellReuseIdentifier)\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return cellData.count\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellReuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        cell.configureCell(data: cellData[indexPath.row])\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nImplement an image caching system for a UIImageView extension to download and cache images from a URL.",
      "input": "",
      "output": "import UIKit\n\nclass ImageCache {\n    private var cache = NSCache<NSString, UIImage>()\n\n    static let shared = ImageCache()\n\n    func getImage(forKey key: NSString) -> UIImage? {\n        return cache.object(forKey: key)\n    }\n\n    func setImage(_ image: UIImage, forKey key: NSString) {\n        cache.setObject(image, forKey: key)\n    }\n}\n\nextension UIImageView {\n    func setImage(withURL url: URL) {\n        let cacheKey = url.absoluteString as NSString\n        if let cachedImage = ImageCache.shared.getImage(forKey: cacheKey) {\n            self.image = cachedImage\n            return\n        }\n\n        URLSession.shared.dataTask(with: url) { [weak self] data, _, error in\n            guard let self = self, let data = data, error == nil, let image = UIImage(data: data) else { return }\n            DispatchQueue.main.async {\n                ImageCache.shared.setImage(image, forKey: cacheKey)\n                self.image = image\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nCreate an AppCoordinator class to manage app navigation using UINavigationController.",
      "input": "",
      "output": "import UIKit\n\nclass AppCoordinator {\n    private let navigationController: UINavigationController\n\n    init(navigationController: UINavigationController) {\n        self.navigationController = navigationController\n    }\n\n    func start() {\n        let viewController = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"FirstViewController\")\n        navigationController.pushViewController(viewController, animated: true)\n    }\n\n    func showSecondViewController() {\n        let viewController = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"SecondViewController\")\n        navigationController.pushViewController(viewController, animated: true)\n    }\n\n    func goBack() {\n        navigationController.popViewController(animated: true)\n    }\n}"
    },
    {
      "instruction": " \nImplement an MVVM pattern for a UIViewController that displays a list of movies fetched from a JSON API.",
      "input": "",
      "output": "import UIKit\n\nstruct Movie: Decodable {\n    let title: String\n}\n\nclass MovieViewModel {\n    private(set) var movies: [Movie] = []\n\n    func fetchMovies(completion: @escaping () -> Void) {\n        let url = URL(string: \"https://api.example.com/movies\")\n        URLSession.shared.dataTask(with: url!) { [weak self] data, _, error in\n            guard let self = self, let data = data, error == nil else { return }\n            do {\n                let movies = try JSONDecoder().decode([Movie].self, from: data)\n                self.movies = movies\n                completion()\n            } catch {\n                print(\"Error decoding JSON\")\n            }\n        }.resume()\n    }\n}\n\nclass MovieListViewController: UITableViewController {\n    private let movieViewModel = MovieViewModel()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        movieViewModel.fetchMovies { [weak self] in\n            DispatchQueue.main.async {\n                self?.tableView.reloadData()\n            }\n        }\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return movieViewModel.movies.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"MovieCell\", for: indexPath)\n        cell.textLabel?.text = movieViewModel.movies[indexPath.row].title\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIView that can display a circular progress bar with a percentage label in the center.",
      "input": "",
      "output": "import UIKit\n\nclass CircularProgressView: UIView {\n    private let progressLayer = CAShapeLayer()\n    private let percentageLabel = UILabel()\n\n    var progress: CGFloat = 0 {\n        didSet {\n            updateProgress()\n        }\n    }\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup()\n    }\n\n    private func setup() {\n        progressLayer.strokeColor = UIColor.blue.cgColor\n        progressLayer.fillColor = UIColor.clear.cgColor\n        progressLayer.lineWidth = 10\n        layer.addSublayer(progressLayer)\n\n        percentageLabel.textAlignment = .center\n        addSubview(percentageLabel)\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        progressLayer.frame = bounds\n        percentageLabel.frame = bounds\n\n        let radius = min(bounds.width, bounds.height) / 2 - progressLayer.lineWidth / 2\n        let center = CGPoint(x: bounds.width / 2, y: bounds.height / 2)\n        let startAngle = -CGFloat.pi / 2\n        let endAngle = startAngle + CGFloat.pi * 2 * progress\n        progressLayer.path = UIBezierPath(arcCenter: center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true).cgPath\n\n        percentageLabel.text = \"\\(Int(progress * 100))%\"\n    }\n\n    private func updateProgress() {\n        setNeedsLayout()\n    }\n}"
    },
    {
      "instruction": " \nCreate a LocationManager class that handles requesting location permissions and providing the current user's location.",
      "input": "",
      "output": "import CoreLocation\n\nprotocol LocationManagerDelegate: AnyObject {\n    func didUpdateLocation(_ location: CLLocation)\n}\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    static let shared = LocationManager()\n\n    private let locationManager = CLLocationManager()\n    weak var delegate: LocationManagerDelegate?\n\n    private override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n    }\n\n    func requestPermission() {\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    func startUpdatingLocation() {\n        locationManager.startUpdatingLocation()\n    }\n\n    func stopUpdatingLocation() {\n        locationManager.stopUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        guard let location = locations.last else { return }\n        delegate?.didUpdateLocation(location)\n    }\n}"
    },
    {
      "instruction": " \nCreate a reusable UIAlertController helper class that handles displaying alert dialogs with different styles and actions.",
      "input": "",
      "output": "import UIKit\n\nclass AlertHelper {\n    static func showAlert(title: String, message: String, preferredStyle: UIAlertController.Style, actions: [UIAlertAction], on viewController: UIViewController) {\n        let alertController = UIAlertController(title: title, message: message, preferredStyle: preferredStyle)\n\n        for action in actions {\n            alertController.addAction(action)\n        }\n\n        viewController.present(alertController, animated: true)\n    }\n\n    static func showConfirmationAlert(title: String, message: String, on viewController: UIViewController, confirmAction: @escaping () -> Void) {\n        let confirm = UIAlertAction(title: \"OK\", style: .default) { _ in\n            confirmAction()\n        }\n\n        let cancel = UIAlertAction(title: \"Cancel\", style: .cancel)\n\n        showAlert(title: title, message: message, preferredStyle: .alert, actions: [confirm,"
    },
    {
      "instruction": "Write a Swift function that asynchronously downloads and caches images in a UICollectionView. The function should take a URL as input and return the cached image or download the image and cache it if it hasn't been downloaded before.",
      "input": "let imageUrl = URL(string: \"https://example.com/image.jpg\")",
      "output": "import UIKit\n\nclass ImageCache {\n    private var cache = NSCache<NSURL, UIImage>()\n    \n    static let shared = ImageCache()\n    \n    func downloadImage(from url: URL, completion: @escaping (UIImage?) -> ()) {\n        if let cachedImage = cache.object(forKey: url as NSURL) {\n            DispatchQueue.main.async {\n                completion(cachedImage)\n            }\n            return\n        }\n        \n        let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n            guard let data = data, let image = UIImage(data: data) else {\n                DispatchQueue.main.async {\n                    completion(nil)\n                }\n                return\n            }\n            \n            self.cache.setObject(image, forKey: url as NSURL)\n            DispatchQueue.main.async {\n                completion(image)\n            }\n        }\n        task.resume()\n    }\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n    \n    func configure(with url: URL) {\n        ImageCache.shared.downloadImage(from: url) { [weak self] (image) in\n            self?.imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to create a custom UIAlertController with a TextField. The UIAlertController should have two UIAlertAction (Cancel and Add), and the Add button should be disabled until the user enters text in the TextField.",
      "input": "let title = \"Add Item\"\nlet message = \"Enter the name of the new item.\"",
      "output": "func createAlertController(title: String, message: String, completion: @escaping (String) -> ()) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    alertController.addTextField { (textField) in\n        textField.placeholder = \"Item name\"\n        NotificationCenter.default.addObserver(forName: UITextField.textDidChangeNotification, object: textField, queue: OperationQueue.main) { (notification) in\n            alertController.actions[1].isEnabled = textField.text?.isEmpty == false\n        }\n    }\n    \n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n    alertController.addAction(cancelAction)\n    \n    let addAction = UIAlertAction(title: \"Add\", style: .default) { (_) in\n        if let textField = alertController.textFields?.first, let text = textField.text {\n            completion(text)\n        }\n    }\n    addAction.isEnabled = false\n    alertController.addAction(addAction)\n    \n    self.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": "Write a Swift function to implement pagination in a UITableView. The function should load the next set of data when the user scrolls to the bottom of the table view.",
      "input": "tableViewData: [SomeModel]",
      "output": "var currentPage = 1\nlet pageSize = 20\nvar isLoadingData = false\n\nfunc loadNextPage() {\n    guard !isLoadingData else { return }\n    \n    isLoadingData = true\n    SomeModel.fetchData(page: currentPage, pageSize: pageSize) { [weak self] (newData) in\n        guard let newData = newData else {\n            self?.isLoadingData = false\n            return\n        }\n        \n        self?.tableViewData.append(contentsOf: newData)\n        self?.currentPage += 1\n        self?.isLoadingData = false\n        DispatchQueue.main.async {\n            self?.tableView.reloadData()\n        }\n    }\n}\n\nfunc scrollViewDidScroll(_ scrollView: UIScrollView) {\n    let offsetY = scrollView.contentOffset.y\n    let contentHeight = scrollView.contentSize.height\n    let scrollViewHeight = scrollView.frame.size.height\n    if offsetY > contentHeight - scrollViewHeight {\n        loadNextPage()\n    }\n}"
    },
    {
      "instruction": "Create a Swift function to implement a custom UIButton that has a gradient background and rounded corners.",
      "input": "let gradientColors = [UIColor.red, UIColor.orange]",
      "output": "class GradientButton: UIButton {\n    private var gradientLayer: CAGradientLayer!\n\n    func configureGradient(colors: [UIColor]) {\n        gradientLayer = CAGradientLayer()\n        gradientLayer.frame = bounds\n        gradientLayer.colors = colors.map { $0.cgColor }\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 0)\n        layer.insertSublayer(gradientLayer, at: 0)\n        layer.cornerRadius = 10\n        clipsToBounds = true\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        gradientLayer.frame = bounds\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to implement a custom UICollectionViewCell with a circular UIImageView.",
      "input": "cellImage: UIImage",
      "output": "class CircularImageCollectionViewCell: UICollectionViewCell {\n    @IBOutlet privateweak var imageView: UIImageView!\n    \n    func configure(with image: UIImage) {\n        imageView.image = image\n        imageView.layer.cornerRadius = imageView.bounds.width / 2\n        imageView.clipsToBounds = true\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to implement a custom UITableViewHeaderFooterView with a UILabel and UIButton. The UIButton should trigger a delegate method when tapped.",
      "input": "headerTitle: String",
      "output": "protocol CustomTableViewHeaderDelegate: AnyObject {\n    func didTapButton(in header: CustomTableViewHeader)\n}\n\nclass CustomTableViewHeader: UITableViewHeaderFooterView {\n    @IBOutlet private weak var titleLabel: UILabel!\n    @IBOutlet private weak var actionButton: UIButton!\n    \n    weak var delegate: CustomTableViewHeaderDelegate?\n    \n    func configure(with title: String) {\n        titleLabel.text = title\n    }\n    \n    @IBAction private func actionButtonTapped(_ sender: UIButton) {\n        delegate?.didTapButton(in: self)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to implement a custom UISearchBar with a clear button that clears the search text and resigns the search bar's first responder status.",
      "input": "",
      "output": "class CustomSearchBar: UISearchBar {\n    override func awakeFromNib() {\n        super.awakeFromNib()\n        showsCancelButton = true\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        if let cancelButton = self.value(forKey: \"cancelButton\") as? UIButton {\n            cancelButton.setTitle(\"Clear\", for: .normal)\n        }\n    }\n    \n    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {\n        searchBar.text = \"\"\n        searchBar.resignFirstResponder()\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to implement a custom UISlider with a UILabel above the slider's thumb displaying the current value.",
      "input": "",
      "output": "class CustomSlider: UISlider {\n    private let valueLabel = UILabel()\n    \n    override func awakeFromNib() {\n        super.awakeFromNib()\n        valueLabel.textAlignment = .center\n        valueLabel.font = .systemFont(ofSize: 14)\n        addSubview(valueLabel)\n        addTarget(self, action: #selector(sliderValueChanged), for: .valueChanged)\n    }\n    \n    @objc private func sliderValueChanged() {\n        let trackRect = self.trackRect(forBounds: bounds)\n        let thumbRect = self.thumbRect(forBounds: bounds, trackRect: trackRect, value: value)\n        valueLabel.frame = CGRect(x: thumbRect.origin.x, y: thumbRect.origin.y - 30, width: thumbRect.size.width, height: 20)\n        valueLabel.text = String(format: \"%.0f\", value)\n    }\n}"
    },
    {
      "instruction": "Implement a Swift function that adds a custom UIButton to a UIView with a specified title, color, and action",
      "input": "",
      "output": "func createCustomButton(title: String, color: UIColor, action: Selector, target: Any, in view: UIView) {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.setTitleColor(color, for: .normal)\n    button.addTarget(target, action: action, for: .touchUpInside)\n    button.translatesAutoresizingMaskIntoConstraints = false\n    view.addSubview(button)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to register a UITableView cell with a given identifier, using a custom UITableViewCell subclass",
      "input": "",
      "output": "func registerCustomTableViewCell(tableView: UITableView, cellIdentifier: String, cellClass: UITableViewCell.Type) {\n    tableView.register(cellClass, forCellReuseIdentifier: cellIdentifier)\n}"
    },
    {
      "instruction": " \nImplement a Swift function that validates and formats a phone number entered in a UITextField",
      "input": "",
      "output": "func validateAndFormatPhoneNumber(textField: UITextField) -> String? {\n    let phoneNumberKit = PhoneNumberKit()\n    \n    do {\n        let phoneNumber = try phoneNumberKit.parse(textField.text ?? \"\")\n        let formattedPhoneNumber = phoneNumberKit.format(phoneNumber, toType: .international)\n        return formattedPhoneNumber\n    } catch {\n        return nil\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function that returns a UIAlertController with a specified title, message, and button title",
      "input": "",
      "output": "func createAlertController(title: String, message: String, buttonTitle: String) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: buttonTitle, style: .default, handler: nil)\n    alertController.addAction(action)\n    return alertController\n}"
    },
    {
      "instruction": " \nImplement a Swift function that starts an activity indicator in a specified UIView",
      "input": "",
      "output": "func startActivityIndicator(in view: UIView) -> UIActivityIndicatorView {\n    let activityIndicator = UIActivityIndicatorView(style: .large)\n    activityIndicator.center = view.center\n    activityIndicator.startAnimating()\n    view.addSubview(activityIndicator)\n    return activityIndicator\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UICollectionView with a specified layout and delegate",
      "input": "",
      "output": "func createCollectionView(layout: UICollectionViewLayout, delegate: UICollectionViewDelegate & UICollectionViewDataSource) -> UICollectionView {\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.delegate = delegate\n    collectionView.dataSource = delegate\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    return collectionView\n}"
    },
    {
      "instruction": " \nImplement a Swift function that sets up a UITapGestureRecognizer for a specified UIView with a given action",
      "input": "",
      "output": "func setupTapGestureRecognizer(for view: UIView, action: Selector, target: AnyObject) {\n    let tapRecognizer = UITapGestureRecognizer(target: target, action: action)\n    view.addGestureRecognizer(tapRecognizer)\n    view.isUserInteractionEnabled = true\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UILabel with a specified font, text color, and text alignment",
      "input": "",
      "output": "func createCustomLabel(font: UIFont, textColor: UIColor, textAlignment: NSTextAlignment) -> UILabel {\n    let label = UILabel()\n    label.font = font\n    label.textColor = textColor\n    label.textAlignment = textAlignment\n    label.translatesAutoresizingMaskIntoConstraints = false\n    return label\n}"
    },
    {
      "instruction": "Write a function that downloads an image from a URL and sets it as the background for a UIButton.",
      "input": "",
      "output": "    import UIKit\n\n    func setBackgroundImageForButton(from url: URL, button: UIButton) {\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            guard let imageData = data, let image = UIImage(data: imageData) else {\n                print(\"Error downloading image: \\(error?.localizedDescription ?? \"Unknown error\")\")\n                return\n            }\n\n            DispatchQueue.main.async {\n                button.setBackgroundImage(image, for: .normal)\n            }\n        }.resume()\n    }\n    // Usage: setBackgroundImageForButton(from: imageURL, button: yourButton)"
    },
    {
      "instruction": " \nWrite a function that creates a UICollectionView with a custom cell containing a UILabel and UIImageView.",
      "input": "",
      "output": "    import UIKit\n\n    class CustomCollectionViewCell: UICollectionViewCell {\n        static let identifier = \"CustomCollectionViewCell\"\n\n        let label: UILabel = {\n            let label = UILabel()\n            label.translatesAutoresizingMaskIntoConstraints = false\n            return label\n        }()\n\n        let imageView: UIImageView = {\n            let imageView = UIImageView()\n            imageView.translatesAutoresizingMaskIntoConstraints = false\n            return imageView\n        }()\n\n        override init(frame: CGRect) {\n            super.init(frame: frame)\n            contentView.addSubview(label)\n            contentView.addSubview(imageView)\n            setupConstraints()\n        }\n\n        required init?(coder: NSCoder) {\n            fatalError(\"init(coder:) has not been implemented\")\n        }\n\n        private func setupConstraints() {\n            NSLayoutConstraint.activate([\n                label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n                label.topAnchor.constraint(equalTo: contentView.topAnchor),\n                imageView.leadingAnchor.constraint(equalTo: label.trailingAnchor, constant: 8),\n                imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n                imageView.widthAnchor.constraint(equalToConstant: 50),\n                imageView.heightAnchor.constraint(equalToConstant: 50)\n            ])\n        }\n    }\n\n    class CustomCollectionViewController: UICollectionViewController {\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.identifier)\n        }\n\n        override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n            return 10\n        }\n\n        override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.identifier, for: indexPath) as! CustomCollectionViewCell\n            cell.label.text = \"Item \\(indexPath.item)\"\n            cell.imageView.image = UIImage(named: \"exampleImage\")\n            return cell\n        }\n    }"
    },
    {
      "instruction": " \nWrite a function that saves a string to UserDefaults and another function that retrieves the saved string",
      "input": "",
      "output": "    import Foundation\n\n    func saveStringToUserDefaults(key: String, value: String) {\n        UserDefaults.standard.set(value, forKey: key)\n    }\n\n    func getStringFromUserDefaults(key: String) -> String? {\n        return UserDefaults.standard.string(forKey: key)\n    }\n\n    // Usage: saveStringToUserDefaults(key: \"exampleKey\", value: \"exampleValue\")\n    // Usage: let retrievedString = getStringFromUserDefaults(key: \"exampleKey\")"
    },
    {
      "instruction": " \nWrite a function that fetches JSON data from a URL and decodes it into a custom Swift object.",
      "input": "",
      "output": "    import Foundation\n\n    struct CustomData: Codable {\n        let title: String\n        let description: String\n    }\n\n    func fetchJSONData(from url: URL, completion: @escaping (Result<CustomData, Error>) -> Void) {\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let error = error {\n                completion(.failure(error))\n                return\n            }\n\n            guard let data = data else {\n                completion(.failure(NSError(domain: \"No data received\", code: -1, userInfo: nil)))\n                return\n            }\n\n            do {\n                let decodedData = try JSONDecoder().decode(CustomData.self, from: data)\n                completion(.success(decodedData))\n            } catch {\n                completion(.failure(error))\n            }\n        }.resume()\n    }\n\n    // Usage: fetchJSONData(from: yourURL) { result in ... }"
    },
    {
      "instruction": " \nWrite a function to authenticate a user with Firebase Authentication using email and password.",
      "input": "",
      "output": "    import FirebaseAuth\n\n    func authenticateUser(email: String, password: String, completion: @escaping (Result<User, Error>) -> Void) {\n        Auth.auth().signIn(withEmail: email, password: password) { (authResult, error) in\n            if let error = error {\n                completion(.failure(error))\n                return\n            }\n\n            guard let user = authResult?.user else {\n                completion(.failure(NSError(domain: \"No user found\", code: -1, userInfo: nil)))\n                return\n            }\n\n           completion(.success(user))\n        }\n    }\n\n    // Usage: authenticateUser(email: \"example@email.com\", password: \"examplePassword\") { result in ... }"
    },
    {
      "instruction": " \nWrite a function to perform a search query using the MKLocalSearch API in MapKit and return the results.",
      "input": "",
      "output": "    import MapKit\n\n    func searchForPlaces(near coordinate: CLLocationCoordinate2D, query: String, completion: @escaping (Result<[MKMapItem], Error>) -> Void) {\n        let request = MKLocalSearch.Request()\n        request.naturalLanguageQuery = query\n        request.region = MKCoordinateRegion(center: coordinate, latitudinalMeters: 1000, longitudinalMeters: 1000)\n\n        let search = MKLocalSearch(request: request)\n        search.start { (response, error) in\n            if let error = error {\n                completion(.failure(error))\n                return\n            }\n\n            guard let response = response else {\n                completion(.failure(NSError(domain: \"No response received\", code: -1, userInfo: nil)))\n                return\n            }\n\n            completion(.success(response.mapItems))\n        }\n    }\n\n    // Usage: searchForPlaces(near: yourCLLocationCoordinate2D, query: \"coffee\") { result in ... }"
    },
    {
      "instruction": " \nWrite a function to display an alert with a title, message, and an OK button that dismisses the alert.",
      "input": "",
      "output": "    import UIKit\n\n    func showAlert(on viewController: UIViewController, title: String, message: String) {\n        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: { _ in\n            alertController.dismiss(animated: true, completion: nil)\n        }))\n        viewController.present(alertController, animated: true, completion: nil)\n    }\n\n    // Usage: showAlert(on: yourViewController, title: \"Alert Title\", message: \"This is an example alert.\")"
    },
    {
      "instruction": " \nWrite a function to animate a UIView's scale and opacity using UIViewPropertyAnimator.",
      "input": "",
      "output": "    import UIKit\n\n    func animateScaleAndOpacity(for view: UIView, duration: TimeInterval, scaleX: CGFloat, scaleY: CGFloat, alpha: CGFloat) {\n        let animator = UIViewPropertyAnimator(duration: duration, curve: .easeInOut) {\n            view.transform = CGAffineTransform(scaleX: scaleX, y: scaleY)\n            view.alpha = alpha\n        }\n        animator.startAnimation()\n    }\n\n    // Usage: animateScaleAndOpacity(for: yourView, duration: 0.5, scaleX: 1.2, scaleY: 1.2, alpha: 0.5)"
    },
    {
      "instruction": "Write a Swift function that registers a custom UICollectionViewCell with a UICollectionView.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // Add custom cell properties and methods here\n}\n\nclass MyViewController: UIViewController {\n\n    let collectionView: UICollectionView\n\n    init() {\n        let layout = UICollectionViewFlowLayout()\n        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        super.init(nibName: nil, bundle: nil)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.dataSource = self\n        collectionView.delegate = self\n\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n    }\n}\n\nextension MyViewController: UICollectionViewDataSource {\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return dataSource.count // your number of cell here\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        // Configure custom cell properties here\n        return cell\n    }\n}\n\nextension MyViewController: UICollectionViewDelegate {\n    // Add UICollectionViewDelegate methods here if needed\n}"
    },
    {
      "instruction": " \nWrite a Swift function that gets the user's current location using CoreLocation and prints the latitude and longitude.",
      "input": "",
      "output": "import CoreLocation\nimport UIKit\n\nclass MyLocationViewController: UIViewController, CLLocationManagerDelegate {\n\n    let locationManager = CLLocationManager()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            print(\"Latitude: \\(location.coordinate.latitude), Longitude: \\(location.coordinate.longitude)\")\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that presents a UIAlertController with a text field and a submit button.",
      "input": "",
      "output": "import UIKit\n\nclass AlertWithTextFieldViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    func presentAlertWithTextField() {\n        let alertController = UIAlertController(title: \"Enter Text\", message: nil, preferredStyle: .alert)\n\n        alertController.addTextField { (textField) in\n            textField.placeholder = \"Enter your text here\"\n        }\n\n        let submitAction = UIAlertAction(title: \"Submit\", style: .default) { [weak alertController] _ in\n            if let textField = alertController?.textFields?[0] {\n                print(\"Text: \\(textField.text ?? \"\")\")\n            }\n        }\n\n        alertController.addAction(submitAction)\n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that saves a string to UserDefaults and retrieves it.",
      "input": "",
      "output": "import UIKit\n\nclass UserDefaultsExampleViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        let key = \"exampleKey\"\n        let value = \"exampleValue\"\n\n        saveStringToUserDefaults(value: value, forKey: key)\n        if let retrievedValue = getStringFromUserDefaults(forKey: key) {\n            print(\"Retrieved value: \\(retrievedValue)\")\n        }\n    }\n\n    func saveStringToUserDefaults(value: String, forKey key: String) {\n        UserDefaults.standard.set(value, forKey: key)\n    }\n\n    func getStringFromUserDefaults(forKey key: String) -> String? {\n        return UserDefaults.standard.string(forKey: key)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that plays a sound file using AVFoundation.",
      "input": "",
      "output": "import AVFoundation\nimport UIKit\n\nclass SoundPlayerViewController: UIViewController {\n    var audioPlayer: AVAudioPlayer?\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        playSound()\n    }\n\n    func playSound() {\n        if let soundURL = Bundle.main.url(forResource: \"exampleSound\", withExtension: \"mp3\") {\n            do {\n                audioPlayer = try AVAudioPlayer(contentsOf: soundURL)\n                audioPlayer?.play()\n            } catch {\n                print(\"Error playing sound: \\(error)\")\n            }\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that fetches JSON data from a URL using URLSession and decodes it.",
      "input": "",
      "output": "import UIKit\n\nstruct ExampleData: Codable {\n    let id: Int\n    let title: String\n}\n\nclass FetchJSONViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        fetchData()\n    }\n\n    funcfetchData() {\n        guard let url = URL(string: \"https://example.com/data.json\") else { return }\n\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            guard let data = data else {\n                print(\"Error fetching data: \\(error?.localizedDescription ?? \"Unknown error\")\")\n                return\n            }\n\n            do {\n                let decoder = JSONDecoder()\n                let decodedData = try decoder.decode(ExampleData.self, from: data)\n                print(\"Decoded data: \\(decodedData)\")\n            } catch {\n                print(\"Error decoding data: \\(error.localizedDescription)\")\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that animates the change of a view's background color.",
      "input": "",
      "output": "import UIKit\n\nclass AnimateBackgroundColorViewController: UIViewController {\n\n    let targetView = UIView()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        targetView.frame = CGRect(x: 0, y: 0, width: 100, height: 100)\n        targetView.center = view.center\n        view.addSubview(targetView)\n\n        animateBackgroundColor()\n    }\n\n    func animateBackgroundColor() {\n        UIView.animate(withDuration: 2.0, animations: {\n            self.targetView.backgroundColor = .red\n        }) { _ in\n            self.targetView.backgroundColor = .clear\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that shows a custom loading indicator using a UIActivityIndicatorView.",
      "input": "",
      "output": "import UIKit\n\nclass LoadingIndicatorViewController: UIViewController {\n\n    let loadingIndicator = UIActivityIndicatorView(style: .large)\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        view.addSubview(loadingIndicator)\n        loadingIndicator.center = view.center\n        showLoadingIndicator()\n    }\n\n    func showLoadingIndicator() {\n        loadingIndicator.startAnimating()\n    }\n\n    func hideLoadingIndicator() {\n        loadingIndicator.stopAnimating()\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that uses the Core Location framework to get the user's current latitude and longitude coordinates.",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    static let shared = LocationManager()\n\n    private let locationManager = CLLocationManager()\n\n    private override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    func getCurrentLocation(completion: @escaping (CLLocationCoordinate2D?) -> Void) {\n        if CLLocationManager.locationServicesEnabled() {\n            locationManager.requestLocation()\n            locationManager.startUpdatingLocation()\n            locationManager.stopUpdatingLocation()\n            if let location = locationManager.location {\n                completion(location.coordinate)\n            } else {\n                completion(nil)\n            }\n        } else {\n            completion(nil)\n        }\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that presents an UIAlert with a given title, message, and an OK button.",
      "input": "",
      "output": "func presentAlert(title: String, message: String, viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let okAction = UIAlertAction(title: \"OK\", style: .default, handler: nil)\n    alertController.addAction(okAction)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that takes a UIImage and saves it to the user's photo library.",
      "input": "",
      "output": "import Photos\n\nfunc saveImageToLibrary(_ image: UIImage) {\n    PHPhotoLibrary.shared().performChanges({\n        PHAssetChangeRequest.creationRequestForAsset(from: image)\n    }, completionHandler: { success, error in\n        if success {\n            print(\"Image saved to the library\")\n        } else {\n            print(\"Error saving image: \\(String(describing: error))\")\n        }\n    })\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function to initiate a network request and parse the JSON response.",
      "input": "",
      "output": "import Foundation\n\nfunc fetchDataFromAPI(url: String, completion: @escaping (Result<Any, Error>) -> Void) {\n    guard let url = URL(string: url) else { return }\n\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else { return }\n        do {\n            let jsonObject = try JSONSerialization.jsonObject(with: data, options: [])\n            completion(.success(jsonObject))\n        } catch {\n            completion(.failure(error))\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that creates a custom UIButton with rounded corners and a specific background color.",
      "input": "",
      "output": "import UIKit\n\nfunc createRoundedButton(backgroundColor: UIColor, title: String) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.backgroundColor = backgroundColor\n    button.layer.cornerRadius = 10\n    button.clipsToBounds = true\n    return button\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that changes the status bar style (light or dark content) in a specific view controller.",
      "input": "",
      "output": "import UIKit\n\nfunc setStatusBarStyle(viewController: UIViewController, style: UIStatusBarStyle) {\n    viewController.overrideUserInterfaceStyle = style == .lightContent ? .dark : .light\n    viewController.setNeedsStatusBarAppearanceUpdate()\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that adds a gesture recognizer to a UIView to dismiss the keyboard when the user taps outside of the UITextField.",
      "input": "",
      "output": "import UIKit\n\nfunc addTapToDismissKeyboardGesture(view: UIView) {\n    let tapGesture = UITapGestureRecognizer(target: view, action: #selector(UIView.endEditing))\n    tapGesture.cancelsTouchesInView = false\n    view.addGestureRecognizer(tapGesture)\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function that creates a timer that repeats a specific task every N seconds.",
      "input": "",
      "output": "import Foundation\n\nfunc createRepeatingTimer(interval: TimeInterval, task: @escaping () -> Void) -> Timer {\n    let timer = Timer.scheduledTimer(withTimeInterval: interval, repeats: true) { _ in\n        task()\n    }\n    return timer\n}"
    },
    {
      "instruction": "Create a custom UICollectionViewCell with an image view and a label.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    \n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n    \n    private lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFill\n        return imageView\n    }()\n    \n    private lazy var titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textAlignment = .center\n        label.numberOfLines = 0\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        addSubview(imageView)\n        addSubview(titleLabel)\n        \n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n            \n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n    \n    func configure(with image: UIImage, title: String) {\n        imageView.image = image\n        titleLabel.text = title\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function that presents a UIAlertController with a custom UIAlertAction.",
      "input": "",
      "output": "import UIKit\n\nextension UIViewController {\n    \n    func presentAlertController(title: String, message: String, actionTitle: String, actionHandler: @escaping () -> Void) {\n        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n        \n        let customAction = UIAlertAction(title: actionTitle, style: .default) { _ in\n            actionHandler()\n        }\n        alertController.addAction(customAction)\n        \n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n        alertController.addAction(cancelAction)\n        \n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nImplement a UITableView with a custom UITableViewCell that displays a title and a subtitle.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    \n    static let reuseIdentifier = \"CustomTableViewCell\"\n    \n    private lazy var titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.font = UIFont.boldSystemFont(ofSize: 18)\n        return label\n    }()\n    \n    private lazy var subtitleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.font = UIFont.systemFont(ofSize: 14)\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        contentView.addSubview(titleLabel)\n        contentView.addSubview(subtitleLabel)\n        \n        NSLayoutConstraint.activate([\n            titleLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\n            \n            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 4),\n            subtitleLabel.leadingAnchor.constraint(equalTo: titleLabel.leadingAnchor),\n            subtitleLabel.trailingAnchor.constraint(equalTo: titleLabel.trailingAnchor),\n            subtitleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8),\n        ])\n    }\n    \n    func configure(title: String, subtitle: String) {\n        titleLabel.text = title\n        subtitleLabel.text = subtitle\n    }\n}\n\nclass CustomTableViewController: UITableViewController {\n    \n    private let data = [(\"Title 1\", \"Subtitle 1\"), (\"Title 2\", \"Subtitle 2\"), (\"Title 3\", \"Subtitle 3\")]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: CustomTableViewCell.reuseIdentifier)\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.reuseIdentifier, for: indexPath) as! CustomTableViewCell\n        let item = data[indexPath.row]\n        cell.configure(title: item.0, subtitle: item.1)\n        \n        return cell\n    }\n}"
    },
    {
      "instruction": "Create a Swift function to download an image from a URL and set it as the UIImage of a UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass ImageDownloader {\n    func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            guard let data = data, error == nil, let image = UIImage(data: data) else {\n                completion(nil)\n                return\n            }\n            completion(image)\n        }.resume()\n    }\n}\n\nfunc setImageFromUrl(url: URL, imageView: UIImageView) {\n    let imageDownloader = ImageDownloader()\n    imageDownloader.downloadImage(from: url) { image in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to request user's location permission and start updating their location using CLLocationManager",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    private let locationManager = CLLocationManager()\n\n    func requestLocationPermissionsAndUpdate() {\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n\n        switch CLLocationManager.authorizationStatus() {\n        case .notDetermined:\n            locationManager.requestWhenInUseAuthorization()\n        case .restricted, .denied:\n            // Handle the case when user denies the permission\n            break\n        case .authorizedWhenInUse, .authorizedAlways:\n            locationManager.startUpdatingLocation()\n        @unknown default:\n            break\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            print(\"User's location: \\(location)\")\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n        if status == .authorizedWhenInUse || status == .authorizedAlways {\n            locationManager.startUpdatingLocation()\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that fetches data from a JSON API and decodes it into a Codable model",
      "input": "",
      "output": "import Foundation\n\nstruct MyDataModel: Codable {\n    let id: Int\n    let title: String\n    // Add other properties as needed\n}\n\nfunc fetchData(completion: @escaping (Result<MyDataModel, Error>) -> Void) {\n    let urlString = \"https://api.example.com/data\"\n    guard let url = URL(string: urlString) else { return }\n\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else {\n            completion(.failure(NSError(domain: \"\", code: -1, userInfo: nil)))\n            return\n        }\n\n        do {\n            let decodedData = try JSONDecoder().decode(MyDataModel.self, from: data)\n            completion(.success(decodedData))\n        } catch {\n            completion(.failure(error))\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a pull-to-refresh feature in a UITableView",
      "input": "",
      "output": "import UIKit\n\nclass MyTableViewController: UITableViewController {\n    private let refresh = UIRefreshControl()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        refresh.addTarget(self, action: #selector(handleRefresh), for: .valueChanged)\n        tableView.refreshControl = refresh\n    }\n\n    @objc private func handleRefresh() {\n        // Fetch new data and reload the table view\n        fetchData { [weak self] result in\n            DispatchQueue.main.async {\n                self?.refresh.endRefreshing()\n                switch result {\n                case .success(let newData):\n                    // Update data source and reload table view\n                    break\n                case .failure(let error):\n                    print(\"Error fetching data: \\(error)\")\n                }\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to save an image to the user's photo library using UIImageWriteToSavedPhotosAlbum",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToPhotoLibrary(image: UIImage, completion: @escaping (Result<Void, Error>) -> Void) {\n    PHPhotoLibrary.requestAuthorization { status in\n        if status == .authorized {\n            UIImageWriteToSavedPhotosAlbum(image, self, #selector(image(_:didFinishSavingWithError:contextInfo:)), nil)\n        } else {\n            DispatchQueue.main.async {\n                completion(.failure(NSError(domain: \"PhotoLibraryAccessDenied\", code: -1, userInfo: nil)))\n            }\n        }\n    }\n}\n\n@objc private func image(_ image: UIImage, didFinishSavingWithError error: NSError?, contextInfo: UnsafeRawPointer) {\n    if let error = error {\n        print(\"Error saving photo: \\(error)\")\n    } else {\n        print(\"Photo saved successfully\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to play an audio file using AVAudioPlayer",
      "input": "",
      "output": "import AVFoundation\n\nclass AudioPlayer: NSObject, AVAudioPlayerDelegate {\n    private var audioPlayer: AVAudioPlayer?\n\n    func playAudioFile(url: URL) {\n        do {\n            audioPlayer = try AVAudioPlayer(contentsOf: url)\n            audioPlayer?.delegate = self\n            audioPlayer?.prepareToPlay()\n            audioPlayer?.play()\n        } catch {\n            print(\"Error initializing audio player: \\(error)\")\n        }\n    }\n\n    func audioPlayerDidFinishPlaying(_ player: AVAudioPlayer, successfully flag: Bool) {\n        if flag {\n            print(\"Audio finished playing successfully\")\n        } else {\n            print(\"Audio did not finish playing successfully\")\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a search bar in a UITableView using UISearchController",
      "input": "",
      "output": "import UIKit\n\nclass MyTableViewController: UITableViewController, UISearchResultsUpdating {\n    private let searchController = UISearchController(searchResultsController: nil)\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        searchController.searchResultsUpdater = self\n        searchController.obscuresBackgroundDuringPresentation = false\n        searchController.searchBar.placeholder = \"Search\"\n        navigationItem.searchController = searchController\n        definesPresentationContext = true\n    }\n\n    func updateSearchResults(for searchController: UISearchController) {\n        if let searchText = searchController.searchBar.text {\n            // Filter your data based on searchText and reload the table view\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UICollectionViewCell and register it for use in a UICollectionView",
      "input": "",
      "output": "import UIKit\n\nclass MyCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"MyCollectionViewCell\"\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        configureCell()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        configureCell()\n    }\n\n    private func configureCell() {\n        // Add subviews and set up the layout\n    }\n}\n\nclass MyCollectionViewController: UICollectionViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        collectionView.register(MyCollectionViewCell.self, forCellWithReuseIdentifier: MyCollectionViewCell.reuseIdentifier)\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: MyCollectionViewCell.reuseIdentifier, for: indexPath) as! MyCollectionViewCell\n        // Configure cell\n        return cell\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to fetch data from a REST API and decode it into a Codable model",
      "input": "",
      "output": "import Foundation\n\nstruct ApiResponse: Codable {\n    let results: [Result]\n}\n\nstruct Result: Codable {\n    let title: String\n    let description: String\n}\n\nclass ApiClient {\n    \n    func fetchData(completion: @escaping (Result<[Result], Error>) -> Void) {\n        let urlString = \"https://api.example.com/results\"\n        guard let url = URL(string: urlString) else { return }\n        \n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let error = error {\n                completion(.failure(error))\n                return\n            }\n            \n            guard let data = data else { return }\n            \n            do {\n                let apiResponse = try JSONDecoder().decode(ApiResponse.self, from: data)\n                completion(.success(apiResponse.results))\n            } catch {\n                completion(.failure(error))\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that displays an image from a remote URL using UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass ImageViewerController: UIViewController {\n    \n    private lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFit\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(imageView)\n        setupConstraints()\n        loadImage(urlString: \"https://www.example.com/image.jpg\")\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: view.topAnchor),\n            imageView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            imageView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    func loadImage(urlString: String) {\n        guard let url = URL(string: urlString) else { return }\n        \n        DispatchQueue.global().async { [weak self] in\n            if let data = try? Data(contentsOf: url), let image = UIImage(data: data) {\n                DispatchQueue.main.async {\n                    self?.imageView.image = image\n                }\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom TableViewCell with an imageView and two labels",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    \n    private lazy var cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFit\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    private lazy var titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    private lazy var descriptionLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        contentView.addSubview(cellImageView)\n        contentView.addSubview(titleLabel)\n        contentView.addSubview(descriptionLabel)\n        setupConstraints()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 8),\n            cellImageView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),\n            cellImageView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8),\n            cellImageView.widthAnchor.constraint(equalTo: cellImageView.heightAnchor),\n            \n            titleLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 8),\n            titleLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -8),\n            \n            descriptionLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 8),\n            descriptionLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 4),\n            descriptionLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -8),\n            descriptionLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8)\n        ])\n    }\n    \n    func configure(image: UIImage, title: String, description: String) {\n        cellImageView.image = image\n        titleLabel.text = title\n        descriptionLabel.text = description\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom view with a UICollectionView and a search bar",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource, UISearchBarDelegate {\n    \n    private lazy var collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .vertical\n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.delegate = self\n        collectionView.dataSource = self\n        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: \"cell\")\n        return collectionView\n    }()\n    \n    private lazy var searchBar: UISearchBar = {\n        let searchBar = UISearchBar()\n        searchBar.translatesAutoresizingMaskIntoConstraints = false\n        searchBar.delegate = self\n        return searchBar\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(searchBar)\n        view.addSubview(collectionView)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            searchBar.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            searchBar.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            searchBar.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            \n            collectionView.topAnchor.constraint(equalTo: searchBar.bottomAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    // MARK: - UICollectionViewDelegate & UICollectionViewDataSource\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 20\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"cell\", for: indexPath)\n        cell.backgroundColor = .red\n        return cell\n    }\n    \n    // MARK: - UISearchBarDelegate\n    \n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        // Perform search or filter based on searchText\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom button with rounded corners and shadow",
      "input": "",
      "output": "import UIKit\n\nclass CustomButton: UIButton {\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n    \n    private func setupView() {\n        layer.cornerRadius = 10\n        layer.shadowColor = UIColor.black.cgColor\n        layer.shadowOffset = CGSize(width: 0, height: 2)\n        layer.shadowRadius = 4\n        layer.shadowOpacity = 0.3\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIControl with a UISlider and a UILabel",
      "input": "",
      "output": "import UIKit\n\nclass SliderControl: UIControl {\n    \n    private lazy var slider: UISlider = {\n        let slider = UISlider()\n        slider.translatesAutoresizingMaskIntoConstraints = false\n        slider.addTarget(self, action: #selector(sliderValueChanged), for: .valueChanged)\n        return slider\n    }()\n    \n    private lazy var valueLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        addSubview(slider)\n        addSubview(valueLabel)\n        setupConstraints()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        addSubview(slider)\n        addSubview(valueLabel)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            slider.leadingAnchor.constraint(equalTo: leadingAnchor),\n            slider.trailingAnchor.constraint(equalTo: trailingAnchor),\n            slider.centerYAnchor.constraint(equalTo: centerYAnchor),\n            \n            valueLabel.centerXAnchor.constraint(equalTo: centerXAnchor),\n            valueLabel.bottomAnchor.constraint(equalTo: slider.topAnchor, constant: -8)\n        ])\n    }\n    \n    @objc private func sliderValueChanged() {\n        let value = slider.value\n        valueLabel.text = String(format: \"%.2f\", value)\n        sendActions(for: .valueChanged)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIViewController that allows the user to pick a date with UIDatePicker",
      "input": "",
      "output": "import UIKit\n\nclass DatePickerViewController: UIViewController {\n    \n    private lazy var datePicker: UIDatePicker = {\n        let datePicker = UIDatePicker()\n        datePicker.translatesAutoresizingMaskIntoConstraints = false\n        datePicker.datePickerMode = .date\n        datePicker.addTarget(self, action: #selector(datePickerValueChanged), for: .valueChanged)\n        return datePicker\n    }()\n    \n    private lazy var selectedDateLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(datePicker)\n        view.addSubview(selectedDateLabel)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            datePicker.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            datePicker.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            \n            selectedDateLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            selectedDateLabel.bottomAnchor.constraint(equalTo: datePicker.topAnchor, constant: -8)\n        ])\n    }\n    \n    @objc private func datePickerValueChanged() {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateStyle = .medium\n        let dateString = dateFormatter.string(from: datePicker.date)\n        selectedDate"
    },
    {
      "instruction": "Write a Swift function to download and cache an image from a given URL and set it as the background of a UIButton",
      "input": "",
      "output": "import UIKit\n\nclass ImageCache {\n    static let shared = ImageCache()\n    private let cache = NSCache<NSString, UIImage>()\n\n    func image(forKey key: String) -> UIImage? {\n        return cache.object(forKey: key as NSString)\n    }\n\n    func setImage(_ image: UIImage, forKey key: String) {\n        cache.setObject(image, forKey: key as NSString)\n    }\n}\n\nfunc setBackgroundImage(url: URL, for button: UIButton) {\n    let urlString = url.absoluteString\n\n    if let cachedImage = ImageCache.shared.image(forKey: urlString) {\n        button.setBackgroundImage(cachedImage, for: .normal)\n    } else {\n        URLSession.shared.dataTask(with: url) { (data, _, _) in\n            guard let data = data, let image = UIImage(data: data) else { return }\n\n            DispatchQueue.main.async {\n                ImageCache.shared.setImage(image, forKey: urlString)\n                button.setBackgroundImage(image, for: .normal)\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UITableViewCell with a UIImageView and two UILabels",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n\n    let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n\n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    let subtitleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupView()\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupView() {\n        addSubview(cellImageView)\n        addSubview(titleLabel)\n        addSubview(subtitleLabel)\n\n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 16),\n            cellImageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            cellImageView.widthAnchor.constraint(equalToConstant: 40),\n            cellImageView.heightAnchor.constraint(equalToConstant: 40),\n\n            titleLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 16),\n            titleLabel.topAnchor.constraint(equalTo: topAnchor, constant: 8),\n\n            subtitleLabel.leadingAnchor.constraint(equalTo: titleLabel.leadingAnchor),\n            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 8)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to fetch the user's current location using CoreLocation and return a CLLocationCoordinate2D",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    static let shared = LocationManager()\n\n    private let locationManager = CLLocationManager()\n\n    private var locationCompletion: ((CLLocationCoordinate2D?) -> Void)?\n\n    private override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n    }\n\n    func fetchCurrentLocation(completion: @escaping (CLLocationCoordinate2D?) -> Void) {\n        locationManager.requestWhenInUseAuthorization()\n        locationCompletion = completion\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            locationCompletion?(location.coordinate)\n            locationManager.stopUpdatingLocation()\n        } else {\n            locationCompletion?(nil)\n        }\n        locationCompletion = nil\n    }\n}\n\nfunc getCurrentLocation(completion: @escaping (CLLocationCoordinate2D?) -> Void) {\n    LocationManager.shared.fetchCurrentLocation(completion: completion)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to display an alert with a title, message, and OK button in a UIViewController",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(in viewController: UIViewController, title: String, message: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let okAction = UIAlertAction(title: \"OK\", style: .default, handler: nil)\n    alertController.addAction(okAction)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UITableView with a given data source and delegate",
      "input": "",
      "output": "import UIKit\n\nfunc createTableView(dataSource: UITableViewDataSource, delegate: UITableViewDelegate) -> UITableView {\n    let tableView = UITableView()\n    tableView.translatesAutoresizingMaskIntoConstraints = false\n    tableView.dataSource = dataSource\n    tableView.delegate = delegate\n    return tableView\n}"
    },
    {
      "instruction": " \nWrite a Swift function to convert a JSON string into a Swift dictionary",
      "input": "",
      "output": "import Foundation\n\nfunc jsonStringToDictionary(jsonString: String) -> [String: Any]? {\n    guard let data = jsonString.data(using: .utf8) else { return nil }\n    do {\n        let jsonObject = try JSONSerialization.jsonObject(with: data, options: .allowFragments)\n        guard let dictionary = jsonObject as? [String: Any] else { return nil }\n        return dictionary\n    } catch {\n        print(\"Error converting JSON string to dictionary: \\(error.localizedDescription)\")\n        return nil\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a horizontal UIScrollView with an array of UIImageViews",
      "input": "",
      "output": "import UIKit\n\nfunc createHorizontalScrollView(images: [UIImage]) -> UIScrollView {\n    let scrollView = UIScrollView()\n    scrollView.translatesAutoresizingMaskIntoConstraints = false\n    scrollView.isPagingEnabled = true\n    scrollView.showsHorizontalScrollIndicator = false\n    \n    let contentView = UIView()\n    contentView.translatesAutoresizingMaskIntoConstraints = false\n    scrollView.addSubview(contentView)\n    \n    var previousImageView: UIImageView?\n\n    for image in images {\n        let imageView = UIImageView(image: image)\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFit\n\n        contentView.addSubview(imageView)\n\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor),\n            imageView.widthAnchor.constraint(equalTo: scrollView.widthAnchor)\n        ])\n\n        if let previousImageView = previousImageView {\n            imageView.leadingAnchor.constraint(equalTo: previousImageView.trailingAnchor).isActive = true\n        } else {\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor).isActive = true\n        }\n\n        previousImageView = imageView\n    }\n\n    if let lastImageView = previousImageView {\n        lastImageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor).isActive = true\n    }\n\n    NSLayoutConstraint.activate([\n        contentView.topAnchor.constraint(equalTo: scrollView.topAnchor),\n        contentView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),\n        contentView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),\n        contentView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),\n        contentView.heightAnchor.constraint(equalTo: scrollView.heightAnchor)\n    ])\n\n    return scrollView\n}"
    },
    {
      "instruction": " \nWrite a Swift function to programmatically create a UIStackView with an array of views and a specified axis and spacing",
      "input": "",
      "output": "import UIKit\n\nfunc createStackView(views: [UIView], axis: NSLayoutConstraint.Axis, spacing: CGFloat) -> UIStackView {\n    let stackView = UIStackView(arrangedSubviews: views)\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    stackView.axis = axis\n    stackView.spacing = spacing\n    stackView.alignment = .fill\n    stackView.distribution = .fillEqually\n    return stackView\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UITableView with a custom UITableViewCell that displays an image and a label.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    static let identifier = \"CustomTableViewCell\"\n    \n    private let customImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    private let customLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        contentView.addSubview(customImageView)\n        contentView.addSubview(customLabel)\n        \n        NSLayoutConstraint.activate([\n            customImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            customImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            customLabel.leadingAnchor.constraint(equalTo: customImageView.trailingAnchor, constant: 16),\n            customLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    func configure(image: UIImage, text: String) {\n        customImageView.image = image\n        customLabel.text = text\n    }\n}\n\nclass MyTableViewController: UITableViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: CustomTableViewCell.identifier)\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 10\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.identifier, for: indexPath) as! CustomTableViewCell\n        cell.configure(image: UIImage(named: \"exampleImage\")!, text: \"Example Text\")\n        return cell\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a simple login flow using a UIAlertController with two text fields for username and password, and a \"Login\" button.",
      "input": "",
      "output": "import UIKit\n\nclass LoginViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        showLoginAlert()\n    }\n    \n    func showLoginAlert() {\n        let alertController = UIAlertController(title: \"Login\", message: \"Enter your username and password\", preferredStyle: .alert)\n        \n        alertController.addTextField { textField in\n            textField.placeholder = \"Username\"\n        }\n        \n        alertController.addTextField { textField in\n            textField.placeholder = \"Password\"\n            textField.isSecureTextEntry = true\n        }\n        \n        let loginAction = UIAlertAction(title: \"Login\", style: .default) { _ in\n            let username = alertController.textFields?[0].text ?? \"\"\n            let password = alertController.textFields?[1].text ?? \"\"\n            \n            // Perform login with the provided username and password.\n            print(\"Username: \\(username), Password: \\(password)\")\n        }\n        \n        alertController.addAction(loginAction)\n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIPickerView with a custom data source and delegate.",
      "input": "",
      "output": "import UIKit\n\nclass CustomPickerViewController: UIViewController, UIPickerViewDataSource, UIPickerViewDelegate {\n    \n    private let data = [\"Option 1\", \"Option 2\", \"Option 3\"]\n    \n    private lazy var pickerView: UIPickerView = {\n        let pickerView = UIPickerView()\n        pickerView.translatesAutoresizingMaskIntoConstraints = false\n        pickerView.dataSource = self\n        pickerView.delegate = self\n        return pickerView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(pickerView)\n        \n        NSLayoutConstraint.activate([\n            pickerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            pickerView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n        ])\n    }\n    \n    // UIPickerViewDataSource\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return data.count\n    }\n    \n    // UIPickerViewDelegate\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return data[row]\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        print(\"Selected option: \\(data[row])\")\n   }"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UICollectionView with a custom UICollectionViewCell that displays an image and a label.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let identifier = \"CustomCollectionViewCell\"\n    \n    private let customImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    private let customLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(customImageView)\n        contentView.addSubview(customLabel)\n        \n        NSLayoutConstraint.activate([\n            customImageView.centerXAnchor.constraint(equalTo: contentView.centerXAnchor),\n            customImageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            customLabel.topAnchor.constraint(equalTo: customImageView.bottomAnchor, constant: 8),\n            customLabel.centerXAnchor.constraint(equalTo: contentView.centerXAnchor),\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    func configure(image: UIImage, text: String) {\n        customImageView.image = image\n        customLabel.text = text\n    }\n}\n\nclass MyCollectionViewController: UICollectionViewController {\n    \n    init() {\n        let layout = UICollectionViewFlowLayout()\n        super.init(collectionViewLayout: layout)\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.identifier)\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.identifier, for: indexPath) as! CustomCollectionViewCell\n        cell.configure(image: UIImage(named: \"exampleImage\")!, text: \"Example Text\")\n        return cell\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UIStackView containing a UILabel and a UIButton, with custom spacing and alignment.",
      "input": "",
      "output": "import UIKit\n\nclass StackViewController: UIViewController {\n    \n    private lazy var label: UILabel = {\n        let label = UILabel()\n        label.text = \"Example Label\"\n        return label\n    }()\n    \n    private lazy var button: UIButton = {\n        let button = UIButton(type: .system)\n        button.setTitle(\"Example Button\", for: .normal)\n        return button\n    }()\n    \n    private lazy var stackView: UIStackView = {\n        let stackView = UIStackView(arrangedSubviews: [label, button])\n        stackView.translatesAutoresizingMaskIntoConstraints = false\n        stackView.axis = .vertical\n        stackView.spacing = 16\n        stackView.alignment = .center\n        return stackView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(stackView)\n        \n        NSLayoutConstraint.activate([\n            stackView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            stackView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UISlider and responds to value changes by updating a UILabel.",
      "input": "",
      "output": "import UIKit\n\nclass SliderViewController: UIViewController {\n    \n    private lazy var label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    private lazy var slider: UISlider = {\n        let slider = UISlider()\n        slider.translatesAutoresizingMaskIntoConstraints = false\n        slider.addTarget(self, action: #selector(sliderValueChanged), for: .valueChanged)\n        return slider\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(label)\n        view.addSubview(slider)\n        \n        NSLayoutConstraint.activate([\n            label.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            label.bottomAnchor.constraint(equalTo: slider.topAnchor, constant: -16),\n            slider.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            slider.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n        ])\n        \n        sliderValueChanged()\n    }\n    \n    @objc private func sliderValueChanged() {\n        label.text = String(format: \"Slider value: %.2f\", slider.value)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UITapGestureRecognizer to dismiss the keyboard when the user taps outside a UITextField.",
      "input": "",
      "output": "import UIKit\n\nclass TapToDismissViewController: UIViewController {\n    \n    private lazy var textField: UITextField = {\n        let textField = UITextField()\n        textField.translatesAutoresizingMaskIntoConstraints = false\n        textField.placeholder = \"Tap outside to dismiss keyboard\"\n        return textField\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(textField)\n        \n        NSLayoutConstraint.activate([\n            textField.centerXAnchor.constraint(equalTo"
    },
    {
      "instruction": "Write a Swift function that downloads an image from a URL and displays it in a UIImageView within a ViewController.",
      "input": "",
      "output": "import UIKit\n\nclass ImageViewController: UIViewController {\n\n    let imageView = UIImageView()\n    let imageURL = \"https://example.com/image.jpg\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupImageView()\n        downloadImage(from: imageURL)\n    }\n\n    func setupImageView() {\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(imageView)\n        NSLayoutConstraint.activate([\n            imageView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            imageView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            imageView.widthAnchor.constraint(equalToConstant: 200),\n            imageView.heightAnchor.constraint(equalToConstant: 200)\n        ])\n    }\n\n    func downloadImage(from urlString: String) {\n        guard let url = URL(string: urlString) else { return }\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            guard let data = data, error == nil else { return }\n            DispatchQueue.main.async {\n                let image = UIImage(data: data)\n                self.imageView.image = image\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UITableView with custom UITableViewCell containing an image and labels.",
      "input": "",
      "output": "import UIKit\n\nstruct CustomCellData {\n    let image: UIImage\n    let title: String\n    let subtitle: String\n}\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var cellImageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n    @IBOutlet weak var subtitleLabel: UILabel!\n}\n\nclass CustomTableViewController: UITableViewController {\n\n    let cellData: [CustomCellData] = [\n        CustomCellData(image: UIImage(named: \"example1\")!, title: \"Title 1\", subtitle: \"Subtitle 1\"),\n        CustomCellData(image: UIImage(named: \"example2\")!, title: \"Title 2\", subtitle: \"Subtitle 2\")\n    ]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UINib(nibName: \"CustomTableViewCell\", bundle: nil), forCellReuseIdentifier: \"customCell\")\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return cellData.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"customCell\", for: indexPath) as! CustomTableViewCell\n        let data = cellData[indexPath.row]\n        cell.cellImageView.image = data.image\n        cell.titleLabel.text = data.title\n        cell.subtitleLabel.text = data.subtitle\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UICollectionView with custom UICollectionViewCell containing an image and a label.",
      "input": "",
      "output": "import UIKit\n\nstruct CustomCollectionCellData {\n    let image: UIImage\n    let title: String\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var cellImageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n\n    let cellData: [CustomCollectionCellData] = [\n        CustomCollectionCellData(image: UIImage(named: \"example1\")!, title: \"Title 1\"),\n        CustomCollectionCellData(image: UIImage(named: \"example2\")!, title: \"Title 2\")\n    ]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(UINib(nibName: \"CustomCollectionViewCell\", bundle: nil), forCellWithReuseIdentifier: \"customCell\")\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return cellData.count\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"customCell\", for: indexPath) as! CustomCollectionViewCell\n        let data = cellData[indexPath.row]\n        cell.cellImageView.image = data.image\n        cell.titleLabel.text = data.title\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a local notification in an iOS app with a given title and body.",
      "input": "",
      "output": "import UserNotifications\n\nfunc scheduleLocalNotification(withTitle title: String, body: String) {\n    let center = UNUserNotificationCenter.current()\n    let content = UNMutableNotificationContent()\n    content.title = title\n    content.body = body\n    content.sound = UNNotificationSound.default\n\n    let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 5, repeats: false)\n    let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)\n    center.add(request) { (error) in\n        if let error = error {\n            print(\"Error scheduling notification: \\(error.localizedDescription)\")\n        }\n    }\n}\n\n// Don't forget to request notification permission from the user.\nfunc requestNotificationPermission() {\n    let center = UNUserNotificationCenter.current()\n    center.requestAuthorization(options: [.alert, .sound]) { granted, error in\n        if let error = error {\n            print(\"Error requesting notification permission: \\(error.localizedDescription)\")\n        }\n    }\n}\n\n// Call requestNotificationPermission() before trying to schedule a local notification.\nrequestNotificationPermission()\nscheduleLocalNotification(withTitle: \"Example Title\", body: \"Example Body\")"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIView with rounded corners and a shadow.",
      "input": "",
      "output": "import UIKit\n\nclass CustomRoundedShadowView: UIView {\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n\n    private func setupView() {\n        layer.cornerRadius = 10\n        layer.shadowColor = UIColor.black.cgColor\n        layer.shadowOpacity = 0.2\n        layer.shadowOffset = CGSize(width: 0, height: 2)\n        layer.shadowRadius = 4\n    }\n}\n\n// Usage\nlet customView = CustomRoundedShadowView()\ncustomView.backgroundColor = .systemBlue"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIButton with a gradient background.",
      "input": "",
      "output": "import UIKit\n\nclass GradientButton: UIButton {\n    private let gradientLayer = CAGradientLayer()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupButton()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupButton()\n    }\n\n    private func setupButton() {\n        gradientLayer.colors = [UIColor.systemBlue.cgColor, UIColor.systemGreen.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0.5)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 0.5)\n        layer.insertSublayer(gradientLayer, at: 0)\n        layer.cornerRadius = 10\n        clipsToBounds = true\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        gradientLayer.frame = bounds\n    }\n}\n\n// Usage\nlet customButton = GradientButton(type: .system)\ncustomButton.setTitle(\"Gradient Button\", for: .normal)"
    },
    {
      "instruction": " \nWrite a Swift function to create a horizontal UIScrollView containing a dynamic number of UIButtons.",
      "input": "",
      "output": "import UIKit\n\nclass HorizontalButtonScrollViewController: UIViewController {\n    let scrollView = UIScrollView()\n    let buttonTitles = [\"Button 1\", \"Button 2\", \"Button 3\", \"Button 4\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupScrollView()\n        addButtonsToScrollView()\n    }\n\n    func setupScrollView() {\n        scrollView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(scrollView)\n        NSLayoutConstraint.activate([\n            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            scrollView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            scrollView.heightAnchor.constraint(equalToConstant: 50)\n        ])\n    }\n\n    func addButtonsToScrollView() {\n        var previousButton: UIButton?\n\n        for title in buttonTitles {\n            let button = UIButton(type: .system)\n            button.setTitle(title, for: .normal)\n            button.translatesAutoresizingMaskIntoConstraints = false\n            scrollView.addSubview(button)\n\n            NSLayoutConstraint.activate([\n                button.topAnchor.constraint(equalTo: scrollView.topAnchor),\n                button.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),\n                button.widthAnchor.constraint(equalToConstant: 100)\n            ])\n\n            if let previousButton = previousButton {\n                button.leadingAnchor.constraint(equalTo: previousButton.trailingAnchor, constant: 10).isActive = true\n            } else {\n                button.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor, constant: 10).isActive = true\n            }\n\n            previousButton = button\n        }\n\n        if let previousButton = previousButton {\n            previousButton.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor, constant: -10).isActive = true\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that saves a string to UserDefaults and retrieves it later.",
      "input": "",
      "output": "func saveStringToUserDefaults(string: String, forKey key: String) {\n    UserDefaults.standard.set(string, forKey: key)\n}\n\nfunc getStringFromUserDefaults(forKey key: String) -> String? {\n    return UserDefaults.standard.string(forKey: key)\n}\n\n// Usage\nlet key = \"exampleKey\"\nlet stringValue = \"Example String\"\nsaveStringToUserDefaults(string: stringValue, forKey: key)\n\nif let retrievedString = getStringFromUserDefaults(forKey: key) {\n    print(\"Retrieved string: \\(retrievedString)\")\n} else {\n    print(\"No string found for key: \\(key)\")\n}"
    },
    {
      "instruction": "Write a Swift function to create a UITableView with a custom UITableViewCell, implementing UITableViewDataSource and UITableViewDelegate",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    // Add custom subviews and layout code here\n}\n\nclass CustomTableViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    private let tableView = UITableView()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupTableView()\n    }\n\n    private func setupTableView() {\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomCell\")\n        tableView.dataSource = self\n        tableView.delegate = self\n        tableView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(tableView)\n\n        NSLayoutConstraint.activate([\n            tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            tableView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            tableView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),\n            tableView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)\n        ])\n    }\n\n    // MARK: - UITableViewDataSource\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        // Return the number of rows\n        return 0\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomCell\", for: indexPath) as! CustomTableViewCell\n        // Configure the cell\n        return cell\n    }\n\n    // MARK: - UITableViewDelegate\n\n    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        // Handle row selection\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UICollectionView with a custom UICollectionViewCell, implementing UICollectionViewDataSource and UICollectionViewDelegateFlowLayout",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // Add custom subviews and layout code here\n}\n\nclass CustomCollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    private let collectionView: UICollectionView\n\n    init() {\n        let layout = UICollectionViewFlowLayout()\n        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        super.init(nibName: nil, bundle: nil)\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupCollectionView()\n    }\n\n    private func setupCollectionView() {\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(collectionView)\n\n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)\n        ])\n    }\n\n    // MARK: - UICollectionViewDataSource\n\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        // Return the number of items\n        return 0\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        // Configure the cell\n        return cell\n    }\n\n    // MARK: - UICollectionViewDelegateFlowLayout\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        // Return the size for the cell\n        return CGSize(width: 100, height: 100)\n    }\n}"
    },
    {
      "instruction": "Create a view controller with search bar functionality that filters a table view based on the user's input.",
      "input": "",
      "output": "import UIKit\n\nclass SearchViewController: UIViewController, UITableViewDataSource, UITableViewDelegate, UISearchBarDelegate {\n    @IBOutlet weak var tableView: UITableView!\n    @IBOutlet weak var searchBar: UISearchBar!\n    \n    var data: [String] = []\n    var filteredData: [String] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        searchBar.delegate = self\n        tableView.dataSource = self\n        tableView.delegate = self\n        \n        filteredData = data\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredData.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        cell.textLabel?.text = filteredData[indexPath.row]\n        return cell\n    }\n    \n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredData = data\n        } else {\n            filteredData = data.filter { $0.lowercased().contains(searchText.lowercased()) }\n        }\n        tableView.reloadData()\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIViewController that allows users to pick an image from their photo library and display it in an UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass ImagePickerViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n    @IBOutlet weak var imageView: UIImageView!\n\n    @IBAction func pickImage(_ sender: UIButton) {\n        let imagePickerController = UIImagePickerController()\n        imagePickerController.delegate = self\n        imagePickerController.sourceType = .photoLibrary\n        present(imagePickerController, animated: true, completion: nil)\n    }\n\n    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {\n        if let selectedImage = info[.originalImage] as? UIImage {\n            imageView.image = selectedImage\n        }\n        dismiss(animated: true, completion: nil)\n    }\n\n    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {\n        dismiss(animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nCreate a view controller that displays a list of contacts using a table view and allows users to add new contacts with a modal presentation.",
      "input": "",
      "output": "import UIKit\n\nstruct Contact {\n    let name: String\n    let phoneNumber: String\n}\n\nclass ContactsViewController: UIViewController, UITableViewDataSource, UITableViewDelegate, AddContactDelegate {\n    @IBOutlet weak var tableView: UITableView!\n    \n    var contacts: [Contact] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        tableView.delegate = self\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return contacts.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"ContactCell\", for: indexPath)\n        let contact = contacts[indexPath.row]\n        cell.textLabel?.text = contact.name\n        cell.detailTextLabel?.text = contact.phoneNumber\n        return cell\n    }\n    \n    @IBAction func addContact(_ sender: UIBarButtonItem) {\n        let addContactVC = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"AddContactViewController\") as! AddContactViewController\n        addContactVC.delegate = self\n        present(addContactVC, animated: true, completion: nil)\n    }\n    \n    func addContact(_ contact: Contact) {\n        contacts.append(contact)\n        tableView.reloadData()\n    }\n}\n\nprotocol AddContactDelegate: AnyObject {\n    func addContact(_ contact: Contact)\n}"
    },
    {
      "instruction": " \nCreate a custom UICollectionView layout with horizontally-scrolling sections and sticky section headers.",
      "input": "",
      "output": "import UIKit\n\nclass StickyHeadersCollectionViewLayout: UICollectionViewFlowLayout {\n    override func layoutAttributesForElements(in rect: CGRect) -> [UICollectionViewLayoutAttributes]? {\n        let layoutAttributes = super.layoutAttributesForElements(in: rect)?.map { $0.copy() } as? [UICollectionViewLayoutAttributes]\n        guard let collectionView = collectionView, let attributes = layoutAttributes else { return layoutAttributes }\n\n        for attribute in attributes {\n            if attribute.representedElementKind == UICollectionView.elementKindSectionHeader {\n                let section = attribute.indexPath.section\n                let numberOfItemsInSection = collectionView.numberOfItems(inSection: section)\n\n                let firstCellIndexPath = IndexPath(item: 0, section: section)\n                let lastCellIndexPath = IndexPath(item: max(0, numberOfItemsInSection - 1), section: section)\n\n                let firstCellAttributes = layoutAttributesForItem(at: firstCellIndexPath)\n                let lastCellAttributes = layoutAttributesForItem(at: lastCellIndexPath)\n\n                let leftEdge = collectionView.contentInset.left\n                let rightEdge = collectionView.frame.width - collectionView.contentInset.right\n\n                let headerWidth = attribute.frame.width\n                let minX = firstCellAttributes?.frame.minX ?? 0\n                let maxX = (lastCellAttributes?.frame.maxX ?? 0) - headerWidth\n\n                let leftAlignedX = max(minX, leftEdge)\n                let rightAlignedX = min(maxX, rightEdge - headerWidth)\n\n                attribute.frame.origin.x = leftAlignedX + (rightAlignedX - leftAlignedX) * collectionView.contentOffset.x / (collectionView.contentSize.width - collectionView.frame.width)\n                attribute.zIndex = 1024\n            }\n        }\n\n        return attributes\n    }\n\n    override func shouldInvalidateLayout(forBoundsChange newBounds: CGRect) -> Bool {\n        return true\n    }\n}"
    },
    {
      "instruction": " \nCreate a view controller that shows a list of events and allows users to filter the list by date using a segmented control.",
      "input": "",
      "output": "import UIKit\n\nstruct Event {\n    let name: String\n    let date: Date\n}\n\nclass EventsViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    @IBOutlet weak var tableView: UITableView!\n    @IBOutlet weak var segmentedControl: UISegmentedControl!\n    \n    var events: [Event] = []\n    var filteredEvents: [Event] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        tableView.delegate = self\n        filterEvents(segmentedControl)\n    }\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredEvents.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"EventCell\", for: indexPath)\n        let event = filteredEvents[indexPath.row]\n        cell.textLabel?.text = event.name\n        return cell\n    }\n\n    @IBAction func filterEvents(_ sender: UISegmentedControl) {\n        let now = Date()\n        let calendar = Calendar.current\n        let oneDayAgo = calendar.date(byAdding: .day, value: -1, to: now)\n        let oneWeekAgo = calendar.date(byAdding: .weekOfYear, value: -1, to: now)\n\n        switch sender.selectedSegmentIndex {\n        case 0:\n            filteredEvents = events\n        case 1:\n            filteredEvents = events.filter { $0.date >= (oneDayAgo ?? now) }\n        case 2:\n            filteredEvents = events.filter { $0.date >= (oneWeekAgo ?? now) }\n        default:\n            break\n        }\n        tableView.reloadData()\n    }\n}"
    },
    {
      "instruction": " \nCreate a view controller that allows users to sign in using their email and password, and displays an error message if the credentials are incorrect.",
      "input": "",
      "output": "import UIKit\n\nclass SignInViewController: UIViewController {\n    @IBOutlet weak var emailTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n    @IBOutlet weak var errorLabel: UILabel!\n    \n    let validEmail = \"example@example.com\"\n    let validPassword = \"password123\"\n\n    @IBAction func signIn(_ sender: UIButton) {\n        guard let email = emailTextField.text, let password = passwordTextField.text else { return }\n        \n        if email == validEmail && password == validPassword {\n            // Perform sign-in action, e.g. navigate to the main app screen\n            errorLabel.isHidden = true\n        } else {\n            errorLabel.text = \"Invalid email or password.\"\n            errorLabel.isHidden = false\n        }\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UITableViewCell with a text label, detail text label, and a switch control.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var titleLabel: UILabel!\n    @IBOutlet weak var detailLabel: UILabel!\n    @IBOutlet weak var switchControl: UISwitch!\n\n    func configure(withTitle title: String, detailText: String, isSwitchOn: Bool) {\n        titleLabel.text = title\n        detailLabel.text = detailText\n        switchControl.isOn = isSwitchOn\n    }\n}"
    },
    {
      "instruction": " \nCreate a view controller that displays a list of to-do items in a table view, allows users to add new items, and supports swipe-to-delete functionality.",
      "input": "",
      "output": "import UIKit\n\nclass TodoListViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    @IBOutlet weak var tableView: UITableView!\n    @IBOutlet weak var textField: UITextField!\n\n    var todoItems: [String] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        tableView.delegate = self\n    }\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return todoItems.count\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"TodoItemCell\", for:"
    },
    {
      "instruction": "Create a UITableView with custom cells that display an image and a label",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var customImageView: UIImageView!\n    @IBOutlet weak var customLabel: UILabel!\n}\n\nclass CustomTableViewController: UITableViewController {\n    let cellReuseIdentifier = \"CustomTableViewCell\"\n    var data: [(image: UIImage, text: String)] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UINib(nibName: cellReuseIdentifier, bundle: nil), forCellReuseIdentifier: cellReuseIdentifier)\n    }\n\n    override func numberOfSections(in tableView: UITableView) -> Int {\n        return 1\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier, for: indexPath) as! CustomTableViewCell\n\n        let rowData = data[indexPath.row]\n        cell.customImageView.image = rowData.image\n        cell.customLabel.text = rowData.text\n\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to download an image from a URL and set it to an UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let data = data, let image = UIImage(data: data) {\n            completion(image)\n        } else {\n            completion(nil)\n        }\n    }\n    task.resume()\n}\n\nfunc setImage(from url: URL, to imageView: UIImageView) {\n    downloadImage(from: url) { image in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " \nImplement a Singleton pattern to manage user settings in a mobile application",
      "input": "",
      "output": "class UserSettings {\n    static let shared = UserSettings()\n    private init() {}\n\n    var userName: String?\n    var notificationsEnabled: Bool = false\n}\n\n// Usage example\nlet settings = UserSettings.shared\nsettings.userName = \"John Doe\"\nsettings.notificationsEnabled = true"
    },
    {
      "instruction": " \nWrite a Swift function to save data to a plist file and read it back",
      "input": "",
      "output": "import Foundation\n\nfunc saveDataToPlist<T: Encodable>(_ data: T, fileName: String) {\n    let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!\n    let fileURL = documentsDirectory.appendingPathComponent(fileName).appendingPathExtension(\"plist\")\n\n    do {\n        let data = try PropertyListEncoder().encode(data)\n        try data.write(to: fileURL)\n    } catch {\n        print(\"Error saving data to plist: \\(error)\")\n    }\n}\n\nfunc loadDataFromPlist<T: Decodable>(_ type: T.Type, fileName: String) -> T? {\n    let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!\n    let fileURL = documentsDirectory.appendingPathComponent(fileName).appendingPathExtension(\"plist\")\n\n    do {\n        let data = try Data(contentsOf: fileURL)\n        let decodedData = try PropertyListDecoder().decode(type, from: data)\n        return decodedData\n    } catch {\n        print(\"Error loading data from plist: \\(error)\")\n        return nil\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to animate the transition between two views",
      "input": "",
      "output": "import UIKit\n\nfunc animateTransition(from view1: UIView, to view2: UIView, duration: TimeInterval, completion: ((Bool) -> Void)? = nil) {\n    view2.alpha = 0\n    view2.isHidden = false\n    UIView.animate(withDuration: duration, animations: {\n        view1.alpha = 0\n        view2.alpha = 1\n    }, completion: { finished in\n        view1.isHidden = true\n        view1.alpha = 1\n        completion?(finished)\n    })\n}"
    },
    {
      "instruction": " \nWrite a Swift function to display an alert with a custom message and a single button to dismiss the alert",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(withTitle title: String, message: String, viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nInstruction:Write a Swift function to handle user location updates using CoreLocation",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    static let shared = LocationManager()\n    private let locationManager = CLLocationManager()\n    private var currentLocation: CLLocation?\n\n    private override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n    }\n\n    func requestLocationAuthorization() {\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    func startUpdatingLocation() {\n        locationManager.startUpdatingLocation()\n    }\n\n    func stopUpdatingLocation() {\n        locationManager.stopUpdatingLocation()\n    }\n\n    // CLLocationManagerDelegate method\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        guard let location = locations.last else { return }\n        currentLocation = location\n        // Use the location data as needed\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Location update error: \\(error)\")\n    }\n}\n\n// Usage example\nlet locationManager = LocationManager.shared\nlocationManager.requestLocationAuthorization()\nlocationManager.startUpdatingLocation()"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIButton with rounded corners and a gradient background",
      "input": "",
      "output": "import UIKit\n\nclass GradientButton: UIButton {\n    private let gradientLayer = CAGradientLayer()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupGradient()\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        setupGradient()\n    }\n\n    private func setupGradient() {\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 0)\n        gradientLayer.colors = [UIColor.red.cgColor, UIColor.blue.cgColor]\n        layer.insertSublayer(gradientLayer, at: 0)\n        layer.cornerRadius = frame.height / 2\n        layer.masksToBounds = true\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        gradientLayer.frame = bounds\n    }\n}\n\n// Usage example\nlet customButton = GradientButton(frame: CGRect(x: 0, y: 0, width: 200, height: 50))\ncustomButton.setTitle(\"Custom Button\", for: .normal)"
    },
    {
      "instruction": "Create a custom UITableViewCell with a circular profile image and a title label, and a UITableViewController that uses the custom cell",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var profileImageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n    \n    func configure(with image: UIImage, title: String) {\n        profileImageView.image = image\n        profileImageView.layer.cornerRadius = profileImageView.frame.size.width / 2\n        profileImageView.clipsToBounds = true\n        titleLabel.text = title\n    }\n}\n\nclass CustomTableViewController: UITableViewController {\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomTableViewCell\", for: indexPath) as! CustomTableViewCell\n        let item = items[indexPath.row]\n        cell.configure(with: item.image, title: item.title)\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that programmatically creates a UIStackView with an array of UIButtons and customizes the appearance of the buttons",
      "input": "",
      "output": "func createStackViewWithButtons(titles: [String]) -> UIStackView {\n    let stackView = UIStackView()\n    stackView.axis = .horizontal\n    stackView.distribution = .fillEqually\n    stackView.spacing = 8\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n\n    for title in titles {\n        let button = UIButton(type: .system)\n        button.setTitle(title, for: .normal)\n        button.titleLabel?.font = UIFont.systemFont(ofSize: 18)\n        button.setTitleColor(.white, for: .normal)\n        button.backgroundColor = UIColor.systemBlue\n        button.layer.cornerRadius = 5\n        button.clipsToBounds = true\n        stackView.addArrangedSubview(button)\n    }\n\n    return stackView\n}"
    },
    {
      "instruction": " \nCreate a Swift closure that captures a weak reference to a UIViewController and presents an UIAlertController with an error message",
      "input": "",
      "output": "let presentErrorAlert: (Error) -> Void = { [weak viewController] error in\n    guard let viewController = viewController else { return }\n    let alertController = UIAlertController(title: \"Error\", message: error.localizedDescription, preferredStyle: .alert)\n    alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nImplement a Swift class that conforms to UITableViewDataSource and UITableViewDelegate, and uses a generic cell with a configurable view model",
      "input": "",
      "output": "import UIKit\n\nclass GenericTableViewCell<ViewModel>: UITableViewCell {\n    var viewModel: ViewModel? {\n        didSet {\n            configure(with: viewModel)\n        }\n    }\n    \n    func configure(with viewModel: ViewModel?) {\n        // Implement configuration logic\n    }\n}\n\nclass GenericTableViewController<ViewModel>: UITableViewController, UITableViewDataSource, UITableViewDelegate {\n    var items: [ViewModel] = []\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"GenericTableViewCell\", for: indexPath) as! GenericTableViewCell<ViewModel>\n        cell.viewModel = items[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIView subclass that draws a circle with a specified color, and add it to a UIViewController programmatically",
      "input": "",
      "output": "import UIKit\n\nclass CircleView: UIView {\n    var circleColor: UIColor = .blue {\n        didSet {\n            setNeedsDisplay()\n        }\n    }\n    \n    override func draw(_ rect: CGRect) {\n        let path = UIBezierPath(ovalIn: rect)\n        circleColor.setFill()\n        path.fill()\n    }\n}\n\nclass CircleViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let circleView = CircleView(frame: CGRect(x: 0, y: 0, width: 100, height: 100))\n        circleView.circleColor = .red\n        circleView.center = view.center\n        view.addSubview(circleView)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift extension to UIView that adds a method to apply a shadow with a specified color, radius, and offset",
      "input": "",
      "output": "extension UIView {\n    func applyShadow(color: UIColor = .black, radius: CGFloat = 3, offset: CGSize = CGSize(width: 0, height: 1)) {\n        layer.shadowColor = color.cgColor\n        layer.shadowRadius = radius\n        layer.shadowOffset = offset\n        layer.shadowOpacity = 0.3\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIPickerView with a customdelegate and data source that returns a formatted string for each row",
      "input": "",
      "output": "import UIKit\n\nclass CustomPickerView: UIPickerView, UIPickerViewDataSource, UIPickerViewDelegate {\n    var items: [String] = []\n\n    init() {\n        super.init(frame: .zero)\n        self.dataSource = self\n        self.delegate = self\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return items.count\n    }\n\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        let item = items[row]\n        return \"Formatted: \\(item)\"\n    }\n}\n\nclass CustomPickerViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        let pickerView = CustomPickerView()\n        pickerView.items = [\"Item 1\", \"Item 2\", \"Item 3\"]\n        pickerView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(pickerView)\n        \n        NSLayoutConstraint.activate([\n            pickerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            pickerView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIControl subclass that acts as a rating control with a configurable number of stars and the ability to tap to select a rating",
      "input": "",
      "output": "import UIKit\n\nclass StarRatingControl: UIControl {\n    var numberOfStars: Int = 5 {\n        didSet {\n            setupStars()\n        }\n    }\n    \n    var rating: Int = 0 {\n        didSet {\n            updateStars()\n        }\n    }\n    \n    private var starButtons: [UIButton] = []\n\n    init() {\n        super.init(frame: .zero)\n        setupStars()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupStars()\n    }\n\n    private func setupStars() {\n        starButtons.forEach { $0.removeFromSuperview() }\n        starButtons.removeAll()\n        \n        for _ in 0..<numberOfStars {\n            let button = UIButton(type: .system)\n            button.setImage(UIImage(systemName: \"star.fill\"), for: .normal)\n            button.tintColor = .gray\n            button.translatesAutoresizingMaskIntoConstraints = false\n            button.addTarget(self, action: #selector(starTapped(_:)), for: .touchUpInside)\n            addSubview(button)\n            starButtons.append(button)\n        }\n        \n        updateStars()\n    }\n    \n    private func updateStars() {\n        for (index, button) in starButtons.enumerated() {\n            button.tintColor = index < rating ? .systemYellow : .gray\n        }\n    }\n    \n    @objc private func starTapped(_ sender: UIButton) {\n        guard let index = starButtons.firstIndex(of: sender) else { return }\n        rating = index + 1\n        sendActions(for: .valueChanged)\n    }\n}\n\nclass StarRatingViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        let starRatingControl = StarRatingControl()\n        starRatingControl.numberOfStars = 5\n        starRatingControl.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(starRatingControl)\n        \n        NSLayoutConstraint.activate([\n            starRatingControl.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            starRatingControl.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": "Create a custom UIView subclass that has a UIImageView and a UILabel, and allows setting the image and text through a custom initializer.",
      "input": "",
      "output": "import UIKit\n\nclass CustomView: UIView {\n    private let imageView: UIImageView\n    private let label: UILabel\n\n    init(frame: CGRect, image: UIImage, text: String) {\n        imageView = UIImageView(image: image)\n        label = UILabel()\n        super.init(frame: frame)\n        setupImageView()\n        setupLabel(with: text)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupImageView() {\n        imageView.contentMode = .scaleAspectFit\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        addSubview(imageView)\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor)\n        ])\n    }\n\n    private func setupLabel(with text: String) {\n        label.text = text\n        label.textAlignment = .center\n        label.translatesAutoresizingMaskIntoConstraints = false\n        addSubview(label)\n        NSLayoutConstraint.activate([\n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            label.leadingAnchor.constraint(equalTo: leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: trailingAnchor),\n            label.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nCreate a UITableView subclass that implements UITableViewDataSource and UITableViewDelegate, and allows users to set the data source and cell configuration.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableView: UITableView, UITableViewDataSource, UITableViewDelegate {\n    var data: [String] = []\n    var configureCell: ((UITableViewCell, IndexPath, String) -> Void)?\n\n    init(frame: CGRect) {\n        super.init(frame: frame, style: .plain)\n        setupTableView()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupTableView()\n    }\n\n    private func setupTableView() {\n        dataSource = self\n        delegate = self\n        register(UITableViewCell.self, forCellReuseIdentifier: \"Cell\")\n    }\n\n    // MARK: - UITableViewDataSource\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\n        let item = data[indexPath.row]\n        configureCell?(cell, indexPath, item)\n        return cell\n    }\n\n    // MARK: - UITableViewDelegate\n    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        tableView.deselectRow(at: indexPath, animated: true)\n    }\n}"
    },
    {
      "instruction": " \nCreate a protocol named \"Animatable\" with a function called \"animate\". Implement the protocol in a UIViewController subclass, and call the animate function when the view appears.",
      "input": "",
      "output": "import UIKit\n\nprotocol Animatable {\n    func animate()\n}\n\nclass CustomViewController: UIViewController, Animatable {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    override func viewDidAppear(_ animated: Bool) {\n        super.viewDidAppear(animated)\n        animate()\n    }\n\n    func animate() {\n        // Add your animation code here\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIPickerView subclass that allows users to set the data source and the row selection handler.",
      "input": "",
      "output": "import UIKit\n\nclass CustomPickerView: UIPickerView, UIPickerViewDataSource, UIPickerViewDelegate {\n    var data: [String] = []\n    var onRowSelected: ((Int, String) -> Void)?\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupPickerView()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupPickerView()\n    }\n\n    private func setupPickerView() {\n        dataSource = self\n        delegate = self\n    }\n\n    // MARK: - UIPickerViewDataSource\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return data.count\n    }\n\n    // MARK: - UIPickerViewDelegate\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return data[row]\n    }\n\n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        let selectedItem = data[row]\n        onRowSelected?(row, selectedItem)\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UICollectionView subclass that implements UICollectionViewDataSource and UICollectionViewDelegate, and allows users to set the data source and cell configuration.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionView: UICollectionView, UICollectionViewDataSource, UICollectionViewDelegate {\n    var data: [String] = []\n    var configureCell: ((UICollectionViewCell, IndexPath, String) -> Void)?\n\n    init(frame: CGRect, collectionViewLayout layout: UICollectionViewLayout) {\n        super.init(frame: frame, collectionViewLayout: layout)\n        setupCollectionView()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupCollectionView()\n    }\n\n    private func setupCollectionView() {\n        dataSource = self\n        delegate = self\n        register(UICollectionViewCell.self, forCellWithReuseIdentifier: \"Cell\")\n    }\n\n    // MARK: - UICollectionViewDataSource\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return data.count\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"Cell\", for: indexPath)\n        let item = data[indexPath.item]\n        configureCell?(cell, indexPath, item)\n        return cell\n    }\n\n    // MARK: - UICollectionViewDelegate\n    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {\n        collectionView.deselectItem(at: indexPath, animated: true)\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIControl subclass that has a UISlider and a UILabel, and allows setting the label text and slider value through a custom initializer.",
      "input": "",
      "output": "import UIKit\n\nclass CustomControl: UIControl {\n    private let slider: UISlider\n    private let label: UILabel\n\n    init(frame: CGRect, labelText: String, sliderValue: Float) {\n        slider = UISlider()\n        label = UILabel()\n        super.init(frame: frame)\n        setupSlider(with: sliderValue)\n        setupLabel(with: labelText)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupSlider(with value: Float) {\n        slider.value = value\n        slider.translatesAutoresizingMaskIntoConstraints = false\n        addSubview(slider)\n        NSLayoutConstraint.activate([\n            slider.topAnchor.constraint(equalTo: topAnchor),\n            slider.leadingAnchor.constraint(equalTo: leadingAnchor),\n            slider.trailingAnchor.constraint(equalTo: trailingAnchor)\n        ])\n    }\n\n    private func setupLabel(with text: String) {\n        label.text = text\n        label.textAlignment = .center\n        label.translatesAutoresizingMaskIntoConstraints = false\n        addSubview(label)\n        NSLayoutConstraint.activate([\n            label.topAnchor.constraint(equalTo: slider.bottomAnchor),\n            label.leadingAnchor.constraint(equalTo: leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: trailingAnchor),\n            label.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIButton subclass that has a rounded corner and a custom initializer that allows setting the button title and corner radius.",
      "input": "",
      "output": "import UIKit\n\nclass CustomButton: UIButton {\n    init(frame: CGRect, title: String, cornerRadius: CGFloat) {\n        super.init(frame: frame)\n        setTitle(title, for: .normal)\n        setTitleColor(.white, for: .normal)\n        backgroundColor = .systemBlue\n        layer.cornerRadius = cornerRadius\n        clipsToBounds = true\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UITextField subclass that has a left padding and a custom initializer that allows setting the placeholder text and padding value.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTextField: UITextField {\n    private let padding: CGFloat\n\n    init(frame: CGRect, placeholderText: String, leftPadding: CGFloat) {\n        padding = leftPadding\n        super.init(frame: frame)\n        placeholder = placeholderText\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func textRect(forBounds bounds: CGRect) -> CGRect {\n        return bounds.insetBy(dx: padding, dy: 0)\n    }\n\n    override func editingRect(forBounds bounds: CGRect) -> CGRect {\n        return bounds.insetBy(dx: padding, dy: 0)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to fetch data from a REST API, parse the JSON response, and return a list of custom objects in a completion handler.",
      "input": "struct User: Codable {\n    let id: Int\n    let name: String\n    let username: String\n    let email: String\n}",
      "output": "import Foundation\n\nfunc fetchUsers(completion: @escaping (Result<[User], Error>) -> Void) {\n    let url = URL(string: \"https://jsonplaceholder.typicode.com/users\")!\n    \n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let users = try JSONDecoder().decode([User].self, from: data)\n            completion(.success(users))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    \n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UITableViewCell with a UIImageView, UILabel, and a UIButton. Configure the cell with a model object.",
      "input": "struct CellModel {\n    let imageUrl: URL\n    let title: String\n    let buttonText: String\n}",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n\n    private let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    private let titleLabel: UILabel = {\n        let label = UILabel()\n        label.numberOfLines = 0\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    private let actionButton: UIButton = {\n        let button = UIButton(type: .system)\n        button.translatesAutoresizingMaskIntoConstraints = false\n        return button\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupSubviews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupSubviews() {\n        contentView.addSubview(cellImageView)\n        contentView.addSubview(titleLabel)\n        contentView.addSubview(actionButton)\n        \n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            cellImageView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 16),\n            cellImageView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -16),\n            cellImageView.widthAnchor.constraint(equalTo: cellImageView.heightAnchor),\n            \n            titleLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 16),\n            titleLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 16),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\n            \n            actionButton.leadingAnchor.constraint(equalTo: titleLabel.leadingAnchor),\n            actionButton.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 8),\n            actionButton.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -16)\n        ])\n    }\n    \n    func configure(with model: CellModel) {\n        cellImageView.load(url: model.imageUrl)\n        titleLabel.text = model.title\n        actionButton.setTitle(model.buttonText, for: .normal)\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a UICollectionView with a custom UICollectionViewCell displaying an image and a label.",
      "input": "struct CollectionModel {\n    let imageUrl: URL\n    let title: String\n}",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource {\n    private var models: [CollectionModel] = []\n    \n    private lazy var collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .vertical\n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCollectionViewCell\")\n        collectionView.delegate = self\n        collectionView.dataSource = self\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        return collectionView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.addSubview(collectionView)\n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)\n        ])\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return models.count\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCollectionViewCell\", for: indexPath) as! CustomCollectionViewCell\n        cell.configure(with: models[indexPath.item])\n        return cell\n    }\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    private let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode= .scaleAspectFill\n        imageView.clipsToBounds = true\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    private let titleLabel: UILabel = {\n        let label = UILabel()\n        label.numberOfLines = 0\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupSubviews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupSubviews() {\n        contentView.addSubview(imageView)\n        contentView.addSubview(titleLabel)\n        \n        NSLayoutConstraint.activate([\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.heightAnchor.constraint(equalTo: contentView.widthAnchor),\n            \n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n    \n    func configure(with model: CollectionModel) {\n        imageView.load(url: model.imageUrl)\n        titleLabel.text = model.title\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UIPickerView with a toolbar, including a \"Done\" button.",
      "input": "",
      "output": "import UIKit\n\nclass CustomPickerViewController: UIViewController, UIPickerViewDelegate, UIPickerViewDataSource {\n    private let toolbar: UIToolbar = {\n        let toolbar = UIToolbar()\n        toolbar.translatesAutoresizingMaskIntoConstraints = false\n        return toolbar\n    }()\n    \n    private let pickerView: UIPickerView = {\n        let pickerView = UIPickerView()\n        pickerView.translatesAutoresizingMaskIntoConstraints = false\n        return pickerView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupSubviews()\n    }\n    \n    private func setupSubviews() {\n        view.addSubview(toolbar)\n        view.addSubview(pickerView)\n        \n        pickerView.delegate = self\n        pickerView.dataSource = self\n        \n        let doneButton = UIBarButtonItem(title: \"Done\", style: .plain, target: self, action: #selector(doneTapped))\n        let flexibleSpace = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)\n        toolbar.setItems([flexibleSpace, doneButton], animated: false)\n        \n        NSLayoutConstraint.activate([\n            toolbar.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            toolbar.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            toolbar.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            \n            pickerView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            pickerView.topAnchor.constraint(equalTo: toolbar.bottomAnchor),\n            pickerView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            pickerView.bottomAnchor.constraint(equalTo: view.bottomAnchor)\n        ])\n    }\n    \n    @objc private func doneTapped() {\n        // Handle picker selection\n    }\n    \n    // MARK: - UIPickerViewDelegate & UIPickerViewDataSource\n    \n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return 10 // Replace with the desired number of rows\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return \"Row \\(row)\" // Replace with the desired row title\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UISlider with a minimum and maximum value, a custom thumb image, and a value change handler.",
      "input": "",
      "output": "import UIKit\n\nclass CustomSliderViewController: UIViewController {\n    private let customSlider: UISlider = {\n        let slider = UISlider()\n        slider.minimumValue = 0\n        slider.maximumValue = 100\n        let thumbImage = UIImage(named: \"customThumbImage\")\n        slider.setThumbImage(thumbImage, for: .normal)\n        slider.translatesAutoresizingMaskIntoConstraints = false\n        return slider\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupSubviews()\n    }\n    \n    private func setupSubviews() {\n        view.addSubview(customSlider)\n        \n        customSlider.addTarget(self, action: #selector(sliderValueChanged(_:)), for: .valueChanged)\n        \n        NSLayoutConstraint.activate([\n            customSlider.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            customSlider.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            customSlider.widthAnchor.constraint(equalToConstant: 200)\n        ])\n    }\n    \n    @objc private func sliderValueChanged(_ sender: UISlider) {\n        print(\"Slider value: \\(sender.value)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIAlertController with a title, message, and a Cancel and Confirm button. The Confirm button should have a custom handler.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlertController(title: String, message: String, confirmHandler: @escaping () -> Void) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    let cancelButton = UIAlertAction(title:"
    },
    {
      "instruction": "Write a Swift function that adds a UIImage as a watermark to another UIImage",
      "input": "",
      "output": "func addWatermark(image: UIImage, watermark: UIImage, position: CGPoint) -> UIImage? {\n    let imageSize = image.size\n    UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)\n    image.draw(in: CGRect(origin: .zero, size: imageSize))\n    watermark.draw(in: CGRect(origin: position, size: watermark.size))\n    let result = UIGraphicsGetImageFromCurrentImageContext()\n    UIGraphicsEndImageContext()\n    return result\n}"
    },
    {
      "instruction": " \nWrite a Swift function that saves an image to the user's photo library with an optional completion handler",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToLibrary(image: UIImage, completionHandler: ((PHAsset?)->Void)? = nil) {\n    PHPhotoLibrary.shared().performChanges({\n        PHAssetChangeRequest.creationRequestForAsset(from: image)\n    }) { success, error in\n        if success {\n            let fetchOptions = PHFetchOptions()\n            fetchOptions.sortDescriptors = [NSSortDescriptor(key: \"creationDate\", ascending: false)]\n            let fetchResult = PHAsset.fetchAssets(with: .image, options: fetchOptions)\n            if let lastAsset = fetchResult.firstObject {\n                completionHandler?(lastAsset)\n            } else {\n                completionHandler?(nil)\n            }\n        } else {\n            print(\"Error saving image: \\(String(describing: error))\")\n            completionHandler?(nil)\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that loads a JSON file from the app's main bundle and decodes it to a Codable object",
      "input": "",
      "output": "import Foundation\n\nfunc loadJSON<T: Codable>(fileName: String) -> T? {\n    guard let url = Bundle.main.url(forResource: fileName, withExtension: \"json\") else {\n        print(\"Error: JSON file not found\")\n        return nil\n    }\n\n    do {\n        let data = try Data(contentsOf: url)\n        let decoder = JSONDecoder()\n        let decodedObject = try decoder.decode(T.self, from: data)\n        return decodedObject\n    } catch {\n        print(\"Error decoding JSON: \\(error)\")\n        return nil\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that fetches the user's location using CLLocationManager and returns the location as a CLLocationCoordinate2D",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    private let locationManager = CLLocationManager()\n    private var locationCompletionHandler: ((CLLocationCoordinate2D) -> Void)?\n\n    func fetchUserLocation(completionHandler: @escaping (CLLocationCoordinate2D) -> Void) {\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n        locationCompletionHandler = completionHandler\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        guard let location = locations.first else { return }\n        locationCompletionHandler?(location.coordinate)\n        locationManager.stopUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error fetching user location: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UIButton with rounded corners and a specified background color",
      "input": "",
      "output": "import UIKit\n\nfunc createRoundedButton(backgroundColor: UIColor, cornerRadius: CGFloat) -> UIButton {\n    let button = UIButton(type: .system)\n    button.backgroundColor = backgroundColor\n    button.layer.cornerRadius = cornerRadius\n    button.clipsToBounds = true\n    return button\n}"
    },
    {
      "instruction": " \nWrite a Swift function that asynchronously downloads an image from a URL and sets it to a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc setImage(from url: URL, to imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil, let image = UIImage(data: data) else {\n            print(\"Error downloading image: \\(String(describing: error))\")\n            return\n        }\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that plays a sound file with a given name and extension using AVAudioPlayer",
      "input": "",
      "output": "import AVFoundation\n\nfunc playSound(fileName: String, fileExtension: String) {\n    guard let url = Bundle.main.url(forResource: fileName, withExtension: fileExtension) else {\n        print(\"Error: Soundfile not found\")\n        return\n    }\n\n    do {\n        let audioPlayer = try AVAudioPlayer(contentsOf: url)\n        audioPlayer.prepareToPlay()\n        audioPlayer.play()\n    } catch {\n        print(\"Error playing sound: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates a UIView's alpha from 0 to 1 with a specified duration and delay",
      "input": "",
      "output": "import UIKit\n\nfunc fadeIn(view: UIView, duration: TimeInterval, delay: TimeInterval) {\n    view.alpha = 0\n    UIView.animate(withDuration: duration, delay: delay, options: .curveEaseInOut, animations: {\n        view.alpha = 1\n    }, completion: nil)\n}"
    },
    {
      "instruction": "Create a custom UICollectionViewCell subclass with an identifier and a UIImageView",
      "input": "",
      "output": "class CustomCollectionViewCell: UICollectionViewCell {\n    static let identifier = \"CustomCollectionViewCell\"\n\n    private let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(imageView)\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n        ])\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": "Create a Swift function that creates a UIAlertController with a TextField and two buttons",
      "input": "",
      "output": "func createAlertControllerWithTextField(title: String, message: String, cancelButtonTitle: String, submitButtonTitle: String, submitAction: @escaping (String) -> Void) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    alertController.addTextField { textField in\n        textField.placeholder = \"Enter text\"\n    }\n\n    let cancelAction = UIAlertAction(title: cancelButtonTitle, style: .cancel)\n    alertController.addAction(cancelAction)\n\n    let submitAction = UIAlertAction(title: submitButtonTitle, style: .default) { _ in\n        if let textField = alertController.textFields?.first, let text = textField.text {\n            submitAction(text)\n        }\n    }\n    alertController.addAction(submitAction)\n\n    return alertController\n}"
    },
    {
      "instruction": "Implement a URLSession data task for making a GET request to a provided URL and decoding the JSON response into a given Codable model",
      "input": "",
      "output": "func fetch<T: Codable>(url: URL, completion: @escaping (Result<T, Error>) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else {\n            completion(.failure(NSError(domain: \"\", code: 0, userInfo: nil)))\n            return\n        }\n\n        do {\n            let decoder = JSONDecoder()\n            let responseObject = try decoder.decode(T.self, from: data)\n            completion(.success(responseObject))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": "Create a Swift function that returns a custom UIButton with rounded corners and a given title",
      "input": "",
      "output": "func createRoundedButton(title: String) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.layer.cornerRadius = 10\n    button.clipsToBounds = true\n    button.translatesAutoresizingMaskIntoConstraints = false\n    return button\n}"
    },
    {
      "instruction": "Write a custom UITableViewController subclass that displays a list of strings in a basic UITableViewCell",
      "input": "",
      "output": "class StringListTableViewController: UITableViewController {\n    private let cellIdentifier = \"Cell\"\n    private let stringList: [String]\n\n    init(stringList: [String]) {\n        self.stringList = stringList\n        super.init(nibName: nil, bundle: nil)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: cellIdentifier)\n    }\n\n    // MARK: - UITableViewDataSource\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return stringList.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath)\n        cell.textLabel?.text = stringList[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that creates and presents a UIActivityViewController with given activity items and completion handler",
      "input": "",
      "output": "func presentActivityViewController(items: [Any], completion: UIActivityViewController.CompletionWithItemsHandler?, from viewController: UIViewController) {\n    let activityViewController = UIActivityViewController(activityItems: items, applicationActivities: nil)\n    activityViewController.completionWithItemsHandler = completion\n    viewController.present(activityViewController, animated: true)\n}"
    },
    {
      "instruction": "Create a custom UIView subclass that displays a circular progress indicator with a given progress value",
      "input": "",
      "output": "class CircularProgressView: UIView {\n    private let progressLayer = CAShapeLayer()\n\n    var progress: CGFloat = 0 {\n        didSet {\n            updateProgress()\n        }\n    }\n\n    override init(frame: CGRect) {\n        super.init(frame:frame)\n        configure()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        configure()\n    }\n\n    private func configure() {\n        progressLayer.strokeColor = UIColor.blue.cgColor\n        progressLayer.fillColor = UIColor.clear.cgColor\n        progressLayer.lineWidth = 5\n        layer.addSublayer(progressLayer)\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        progressLayer.frame = bounds\n        let center = CGPoint(x: bounds.midX, y: bounds.midY)\n        let radius = min(bounds.width, bounds.height) / 2 - progressLayer.lineWidth / 2\n        let path = UIBezierPath(arcCenter: center, radius: radius, startAngle: -CGFloat.pi / 2, endAngle: CGFloat.pi * 3 / 2, clockwise: true)\n        progressLayer.path = path.cgPath\n        updateProgress()\n    }\n\n    private func updateProgress() {\n        progressLayer.strokeEnd = progress\n    }\n}"
    },
    {
      "instruction": "Create a Swift function that programmatically adds a UILabel to a UIView as a centered subview with a given text",
      "input": "",
      "output": "func addCenteredLabel(to view: UIView, withText text: String) {\n    let label = UILabel()\n    label.text = text\n    label.textAlignment = .center\n    label.translatesAutoresizingMaskIntoConstraints = false\n    view.addSubview(label)\n\n    NSLayoutConstraint.activate([\n        label.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n        label.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n    ])\n}"
    },
    {
      "instruction": "Write a Swift function that presents a UIAlertController with a title, message, and a list of actions.",
      "input": "",
      "output": "import UIKit\n\nfunc presentAlertController(title: String, message: String, actions: [UIAlertAction], viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    for action in actions {\n        alertController.addAction(action)\n    }\n    \n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift class that implements a custom UITableViewCell with an image and label.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let cellLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupSubviews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupSubviews() {\n        contentView.addSubview(cellImageView)\n        contentView.addSubview(cellLabel)\n\n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 8),\n            cellImageView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),\n            cellImageView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8),\n            cellImageView.widthAnchor.constraint(equalTo: cellImageView.heightAnchor),\n            \n            cellLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 16),\n            cellLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -8),\n            cellLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that registers a custom UICollectionViewCell for a UICollectionView.",
      "input": "",
      "output": "import UIKit\n\nfunc registerCustomCollectionViewCell(collectionView: UICollectionView, cellIdentifier: String) {\n    collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: cellIdentifier)\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // Custom cell implementation\n}"
    },
    {
      "instruction": " \nWrite a Swift function that downloads an image from a URL and sets it to a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc setImageFromUrl(urlString: String, imageView: UIImageView) {\n    guard let url = URL(string: urlString) else { return }\n    \n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            print(\"Error downloading image: \\(error)\")\n            return\n        }\n        \n        guard let data = data else { return }\n        DispatchQueue.main.async {\n            imageView.image = UIImage(data: data)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a pan gesture recognizer to a UIView.",
      "input": "",
      "output": "import UIKit\n\nfunc addPanGestureRecognizer(to view: UIView, target: Any, action: Selector) {\n    let panGestureRecognizer = UIPanGestureRecognizer(target: target, action: action)\n    view.addGestureRecognizer(panGestureRecognizer)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates the rotation of a UIView by a specified angle in radians.",
      "input": "",
      "output": "import UIKit\n\nfunc animateRotation(_ view: UIView, angle: CGFloat, duration: TimeInterval) {\n    UIView.animate(withDuration: duration) {\n        view.transform = CGAffineTransform(rotationAngle: angle)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a URLSession data task and handles the response with a completion handler.",
      "input": "",
      "output": "import Foundation\n\nfunc fetchDataFromUrl(urlString: String, completionHandler: @escaping (Data?, URLResponse?, Error?) -> Void) {\n    guard let url = URL(string: urlString) else { return }\n    \n    let dataTask = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        completionHandler(data, response, error)\n    }\n    \n    dataTask.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that saves a key-value pair to UserDefaults and a function that retrieves the value for a specified key.",
      "input": "",
      "output": "import Foundation\n\nfunc saveToUserDefaults(key: String, value: Any) {\n    UserDefaults.standard.set(value, forKey: key)\n}\n\nfunc getValueFromUserDefaults(key: String) -> Any? {\n    return UserDefaults.standard.object(forKey: key)\n}"
    },
    {
      "instruction": "Write a Swift function that creates a UICollectionView, configures its layout, and sets up its delegate and dataSource",
      "input": "",
      "output": "func setupCollectionView() -> UICollectionView {\n    let layout = UICollectionViewFlowLayout()\n    layout.scrollDirection = .vertical\n    layout.minimumLineSpacing = 10\n    layout.minimumInteritemSpacing = 10\n    layout.itemSize = CGSize(width: 100, height: 100)\n\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    collectionView.backgroundColor = .white\n    collectionView.delegate = self\n    collectionView.dataSource = self\n    collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: \"cell\")\n    return collectionView\n}\n\n// Make sure to conform to UICollectionViewDelegate & UICollectionViewDataSource\n// extension ViewController: UICollectionViewDelegate, UICollectionViewDataSource {\n// func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int { return dataSource.count }\n// func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n//    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"cell\", for: indexPath)\n//    // Configure cell\n//    return cell\n// }\n// }"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UITableView, configures its appearance, and sets up its delegate and dataSource",
      "input": "",
      "output": "func setupTableView() -> UITableView {\n    let tableView = UITableView()\n    tableView.translatesAutoresizingMaskIntoConstraints = false\n    tableView.delegate = self\n    tableView.dataSource = self\n    tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"cell\")\n    tableView.rowHeight = UITableView.automaticDimension\n    tableView.estimatedRowHeight = 44\n    return tableView\n}\n\n// Make sure to conform to UITableViewDelegate & UITableViewDataSource\n// extension ViewController: UITableViewDelegate, UITableViewDataSource {\n// func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int { return dataSource.count }\n// func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n//    let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n//    // Configure cell\n//    return cell\n// }\n// }"
    },
    {
      "instruction": " \nWrite a Swift function that creates and configures a CLLocationManager to request the user's location",
      "input": "",
      "output": "import CoreLocation\n\nfunc setupLocationManager() -> CLLocationManager {\n    let locationManager = CLLocationManager()\n    locationManager.delegate = self\n    locationManager.desiredAccuracy = kCLLocationAccuracyBest\n    locationManager.requestWhenInUseAuthorization()\n    locationManager.startUpdatingLocation()\n    return locationManager\n}\n\n// Make sure to conform to CLLocationManagerDelegate\n// extension ViewController: CLLocationManagerDelegate {\n// func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n//    // Handle location updates\n// }\n// func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n//    // Handle error\n// }\n// }"
    },
    {
      "instruction": " \nWrite a Swift function to create and configure a UISearchBar, setting its delegate",
      "input": "",
      "output": "func setupSearchBar() -> UISearchBar {\n    let searchBar = UISearchBar()\n    searchBar.translatesAutoresizingMaskIntoConstraints = false\n    searchBar.delegate = self\n    searchBar.placeholder = \"Search\"\n    return searchBar\n}\n\n// Make sure to conform to UISearchBarDelegate\n// extension ViewController: UISearchBarDelegate {\n// func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {\n//    // Handle search button click\n// }\n// }"
    },
    {
      "instruction": " \nWrite a Swift function that creates and configures an MKMapView, setting its delegate and displaying the user's location",
      "input": "",
      "output": "import MapKit\n\nfunc setupMapView() -> MKMapView {\n    let mapView = MKMapView()\n    mapView.translatesAutoresizingMaskIntoConstraints = false\n    mapView.delegate = self\n    mapView.showsUserLocation = true\n    return mapView\n}\n\n// Make sure to conform to MKMapViewDelegate\n// extension ViewController: MKMapViewDelegate {\n// func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {\n//    // Configure annotation view\n// }\n// }"
    },
    {
      "instruction": " \nWrite a Swift function that creates and configures a UIPageViewController, setting its delegate and dataSource",
      "input": "",
      "output": "func setupPageViewController() -> UIPageViewController {\n    let pageViewController = UIPageViewController(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil)\n    pageViewController.delegate = self\n    pageViewController.dataSource = self\n    return pageViewController\n}\n\n// Make sure to conform to UIPageViewControllerDelegate & UIPageViewControllerDataSource\n// extension ViewController: UIPageViewControllerDelegate, UIPageViewControllerDataSource {\n// func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n//    // Return the previous view controller\n// }\n// func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) ->UIViewController? {\n//    // Return the next view controller\n// }\n// }"
    },
    {
      "instruction": " \nWrite a Swift function that creates and configures a UIScrollView, setting its delegate and enabling zooming",
      "input": "",
      "output": "func setupScrollView() -> UIScrollView {\n    let scrollView = UIScrollView()\n    scrollView.translatesAutoresizingMaskIntoConstraints = false\n    scrollView.delegate = self\n    scrollView.minimumZoomScale = 1.0\n    scrollView.maximumZoomScale = 4.0\n    return scrollView\n}\n\n// Make sure to conform to UIScrollViewDelegate\n// extension ViewController: UIScrollViewDelegate {\n// func viewForZooming(in scrollView: UIScrollView) -> UIView? {\n//    // Return the view to be zoomed\n// }\n// }"
    },
    {
      "instruction": " \nWrite a Swift function that creates and configures a UIStackView, adding an array of UIViews as arranged subviews",
      "input": "",
      "output": "func setupStackView(with views: [UIView]) -> UIStackView {\n    let stackView = UIStackView(arrangedSubviews: views)\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    stackView.axis = .vertical\n    stackView.spacing = 10\n    return stackView\n}\n\n// Usage example:\n// let label1 = UILabel()\n// let label2 = UILabel()\n// let stackView = setupStackView(with: [label1, label2])\n// view.addSubview(stackView)"
    },
    {
      "instruction": "Create a Swift function that caches images using URL and UIImageView, and uses a default image if the URL is invalid.",
      "input": " URL(string: \"https://example.com/image.jpg\"), UIImageView()",
      "output": "import UIKit\n\nlet imageCache = NSCache<NSString, UIImage>()\n\nfunc loadImage(from url: URL, into imageView: UIImageView, with defaultImage: UIImage? = nil) {\n    imageView.image = defaultImage\n\n    if let cachedImage = imageCache.object(forKey: url.absoluteString as NSString) {\n        imageView.image = cachedImage\n        return\n    }\n\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil, let image = UIImage(data: data) else {\n            return\n        }\n\n        DispatchQueue.main.async {\n            imageCache.setObject(image, forKey: url.absoluteString as NSString)\n            imageView.image = image\n        }\n    }.resume()\n}\n\nlet imageView = UIImageView()\nif let url = URL(string: \"https://example.com/image.jpg\") {\n    loadImage(from: url, into: imageView)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that retrieves the user's current location using CoreLocation and returns a CLLocation object.",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n    var currentLocation: CLLocation?\n\n    func requestCurrentLocation() {\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            currentLocation = location\n            locationManager.stopUpdatingLocation()\n            print(\"Current location: \\(location)\")\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error: \\(error)\")\n    }\n}\n\nlet locationManager = LocationManager()\nlocationManager.requestCurrentLocation()"
    },
    {
      "instruction": "Write a Swift function that asynchronously fetches an image from a URL and sets it as the background image of a UIButton.",
      "input": " \\",
      "output": "import UIKit\n\nclass CustomButton: UIButton {\n    \n    func setImageFromURL(url: URL) {\n        DispatchQueue.global().async { [weak self] in\n            guard let data = try? Data(contentsOf: url),\n                  let image = UIImage(data: data) else {\n                return\n            }\n            \n            DispatchQueue.main.async {\n                self?.setBackgroundImage(image, for: .normal)\n            }\n        }\n    }\n    \n}\n\nlet button = CustomButton()\nif let imageURL = URL(string: \"https://example.com/image.png\") {\n    button.setImageFromURL(url: imageURL)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UICollectionView with a flow layout, registering a UICollectionViewCell subclass, and setting up a data source and delegate.",
      "input": " \\",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n}\n\nclass CustomCollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    \n    private lazy var collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        return collectionView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(collectionView)\n        \n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n        ])\n    }\n    \n    // MARK: UICollectionViewDataSource\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath)\n        return cell\n    }\n    \n    // MARK: UICollectionViewDelegateFlowLayout\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: 100, height: 100)\n    }\n    \n}"
    },
    {
      "instruction": "Create a Swift class for a custom UICollectionViewCell with an UIImageView and UILabel",
      "input": "",
      "output": "class CustomCollectionViewCell: UICollectionViewCell {\n\n    private lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n\n    private lazy var titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textAlignment = .center\n        label.textColor = .black\n        label.numberOfLines = 0\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        addSubview(imageView)\n        addSubview(titleLabel)\n        \n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.heightAnchor.constraint(equalTo: heightAnchor, multiplier: 0.7),\n            \n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function to download an image from a URL and set it to a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil, let image = UIImage(data: data) else {\n            completion(nil)\n            return\n        }\n        DispatchQueue.main.async {\n            completion(image)\n        }\n    }.resume()\n}\n\nfunc setImage(from urlString: String, to imageView: UIImageView) {\n    guard let url = URL(string: urlString) else { return }\n    downloadImage(from: url) { image in\n        imageView.image = image\n    }\n}"
    },
    {
      "instruction": " \nImplement a custom UIAlertController with two buttons, one for taking a photo and another for selecting from the library",
      "input": "",
      "output": "import UIKit\n\nfunc presentImagePickerAlert(on viewController: UIViewController, cameraHandler: @escaping () -> Void, libraryHandler: @escaping () -> Void) {\n    let alertController = UIAlertController(title: \"Choose Image Source\", message: nil, preferredStyle: .actionSheet)\n\n    let cameraAction = UIAlertAction(title: \"Take a Photo\", style: .default) { _ in\n        cameraHandler()\n    }\n    alertController.addAction(cameraAction)\n\n    let libraryAction = UIAlertAction(title: \"Choose from Library\", style: .default) { _ in\n        libraryHandler()\n    }\n    alertController.addAction(libraryAction)\n\n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n    alertController.addAction(cancelAction)\n\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nCreate a Swift function to save a UIImage to the user's photo library",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToPhotoLibrary(image: UIImage, completion: @escaping (Bool, Error?) -> Void) {\n    PHPhotoLibrary.requestAuthorization { status in\n        if status == .authorized {\n            PHPhotoLibrary.shared().performChanges({\n                PHAssetChangeRequest.creationRequestForAsset(from: image)\n            }, completionHandler: { success, error in\n                DispatchQueue.main.async {\n                    completion(success, error)\n                }\n            })\n        } else {\n            DispatchQueue.main.async {\n                completion(false, nil)\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift function that checks if a string is a valid email address",
      "input": "",
      "output": "import Foundation\n\nfunc isValidEmail(_ email: String) -> Bool {\n    let emailRegex = \"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}\"\n    let emailPredicate = NSPredicate(format: \"SELF MATCHES %@\", emailRegex)\n    return emailPredicate.evaluate(with: email)\n}"
    },
    {
      "instruction": " \nCreate a Swift class for a custom UIButton with rounded corners and a shadow",
      "input": "",
      "output": "import UIKit\n\nclass CustomButton: UIButton {\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n    \n    private func setupView() {\n        layer.cornerRadius = 10\n        layer.masksToBounds = false\n        layer.shadowColor = UIColor.black.cgColor\n        layer.shadowOffset = CGSize(width:0, height: 2)\n        layer.shadowOpacity = 0.3\n        layer.shadowRadius = 4\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift function that fetches JSON data from a given URL and decodes it into a specified Codable model",
      "input": "",
      "output": "import Foundation\n\nfunc fetchData<T: Codable>(from url: String, model: T.Type, completion: @escaping (Result<T, Error>) -> Void) {\n    guard let url = URL(string: url) else {\n        completion(.failure(NSError(domain: \"Invalid URL\", code: -1, userInfo: nil)))\n        return\n    }\n    \n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data received\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let decodedData = try JSONDecoder().decode(T.self, from: data)\n            completion(.success(decodedData))\n        } catch {\n            completion(.failure(error))\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nCreate a Swift function that animates a UIButton to increase its size and then return to its original size",
      "input": "",
      "output": "import UIKit\n\nfunc animateButtonPress(_ button: UIButton) {\n    let originalTransform = button.transform\n    let scaledTransform = originalTransform.scaledBy(x: 1.2, y: 1.2)\n    \n    UIView.animate(withDuration: 0.1, animations: {\n        button.transform = scaledTransform\n    }) { _ in\n        UIView.animate(withDuration: 0.1, animations: {\n            button.transform = originalTransform\n        })\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that takes a table view and a list of strings as input and populates the table view with the list of strings.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewController: UITableViewController {\n\n    var items: [String] = []\n\n    func populateTableView(tableView: UITableView, data: [String]) {\n        items = data\n        tableView.reloadData()\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\n        cell.textLabel?.text = items[indexPath.row]\n        return cell\n    }\n}\n\n// Usage:\n// let tableViewController = CustomTableViewController()\n// tableViewController.populateTableView(tableView: tableViewController.tableView, data: [\"Item 1\", \"Item 2\", \"Item 3\"])"
    },
    {
      "instruction": " \nCreate a Swift function to fetch JSON data from a given URL, decode it into a custom Swift struct, and return the decoded data using a completion handler.",
      "input": "",
      "output": "import Foundation\n\nstruct CustomData: Codable {\n    let id: Int\n    let title: String\n}\n\nfunc fetchJSONData(urlString: String, completion: @escaping (Result<[CustomData], Error>) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(.failure(NSError(domain: \"Invalid URL\", code: -1, userInfo: nil)))\n        return\n    }\n\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data\", code: -1, userInfo: nil)))\n            return\n        }\n\n        do {\n            let decoder = JSONDecoder()\n            let decodedData = try decoder.decode([CustomData].self, from: data)\n            completion(.success(decodedData))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    task.resume()\n}\n\n// Usage:\n// fetchJSONData(urlString: \"https://api.example.com/data\") { result in\n//     switch result {\n//     case .success(let data):\n//         print(data)\n//     case .failure(let error):\n//         print(error)\n//     }\n// }"
    },
    {
      "instruction": "Create a Swift function that takes a UITableView and IndexPath as input and returns a custom UITableViewCell with a UILabel and UIImageView.",
      "input": "func customCellForRowAt(tableView: UITableView, indexPath: IndexPath) -> UITableViewCell {\n}",
      "output": "import UIKit\n\nfunc customCellForRowAt(tableView: UITableView, indexPath: IndexPath) -> UITableViewCell {\n    let cellIdentifier = \"CustomCell\"\n\n    var cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier)\n    if cell == nil {\n        cell = UITableViewCell(style: .default, reuseIdentifier: cellIdentifier)\n\n        let imageView = UIImageView(frame: CGRect(x: 10, y: 5, width: 40, height: 40))\n        imageView.tag = 101\n        cell?.contentView.addSubview(imageView)\n\n        let label = UILabel(frame: CGRect(x: 60, y: 5, width: tableView.bounds.width - 70, height: 40))\n        label.tag = 102\n        cell?.contentView.addSubview(label)\n    }\n\n    let imageView = cell?.contentView.viewWithTag(101) as? UIImageView\n    imageView?.image = UIImage(named: \"exampleImage\")\n\n    let label = cell?.contentView.viewWithTag(102) as? UILabel\n    label?.text = \"Custom cell text\"\n\n    return cell!\n}"
    },
    {
      "instruction": " \n\nCreate a Swift class that inherits from UIViewController, conforms to UITableViewDataSource and UITableViewDelegate, and implements a UITableView.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    var tableView: UITableView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        tableView = UITableView(frame: view.bounds, style: .plain)\n        tableView.dataSource = self\n        tableView.delegate = self\n        view.addSubview(tableView)\n    }\n\n    // UITableViewDataSource\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 10\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        return customCellForRowAt(tableView: tableView, indexPath: indexPath)\n    }\n\n    // UITableViewDelegate\n    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        print(\"Selected row at index path: \\(indexPath)\")\n    }\n}"
    },
    {
      "instruction": " \n\nImplement a Swift function that takes a URL and a completion handler, and downloads an image from the URL asynchronously.",
      "input": "func downloadImage(url: URL, completion: @escaping (UIImage?) -> Void) {\n}",
      "output": "import UIKit\n\nfunc downloadImage(url: URL, completion: @escaping (UIImage?) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            completion(nil)\n            return\n        }\n\n        let image = UIImage(data: data)\n        completion(image)\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " \n\nCreate a Swift class that represents a custom UIView with a UIButton and UILabel. When the button is tapped, the text in the UILabel should change.",
      "input": "",
      "output": "import UIKit\n\nclass CustomView: UIView {\n    private let label = UILabel()\n    private let button = UIButton(type: .system)\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n\n        label.frame = CGRect(x: 10, y: 10, width: bounds.width - 20, height: 30)\n        label.text = \"Initial text\"\n        addSubview(label)\n\n        button.frame = CGRect(x: 10, y: 50, width: bounds.width - 20, height: 50)\n        button.setTitle(\"Change Text\", for: .normal)\n        button.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n        addSubview(button)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    @objc private func buttonTapped() {\n        label.text = \"Text changed\"\n    }\n}"
    },
    {
      "instruction": " \n\nCreate a Swift class that implements a UICollectionView with a custom UICollectionViewCell containing a UIImageView and UILabel.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {\n    private let collectionView: UICollectionView\n\n    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {\n        let layout = UICollectionViewFlowLayout()\n        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        super.viewDidLoad()\n\n        collectionView.frame = view.bounds\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.backgroundColor = .white\n        view.addSubview(collectionView)\n    }\n\n    // UICollectionViewDataSource\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        cell.configure(image: UIImage(named: \"exampleImage\"), text: \"Custom Cell \\(indexPath.item)\")\n        return cell\n    }\n\n    // UICollectionViewDelegateFlowLayout\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: view.bounds.width / 2 - 10, height: 150)\n    }\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {\n        return 10\n    }\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {\n        return 5\n    }\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    private let imageView = UIImageView()\n    private let label = UILabel()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n\n        imageView.frame = CGRect(x: 0, y: 0, width: bounds.width, height: bounds.height - 30)\n        contentView.addSubview(imageView)\n\n        label.frame = CGRect(x: 0, y: bounds.height - 30, width: bounds.width, height: 30)\n        label.textAlignment = .center\n        contentView.addSubview(label)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    func configure(image: UIImage?, text: String) {\n        imageView.image = image\n        label.text = text\n    }\n}"
    },
    {
      "instruction": " \n\nCreate a Swift function that takes a UIViewController as input, and presents another UIViewController modally with a custom transition animation.",
      "input": "func presentModalViewController(from viewController: UIViewController) {\n}",
      "output": "import UIKit\n\nclass CustomModalTransition: NSObject, UIViewControllerAnimatedTransitioning {\n    func transitionDuration(using transitionContext: UIViewControllerContextTransitioning?) -> TimeInterval {\n        return 0.5\n    }\n\n    func animateTransition(using transitionContext: UIViewControllerContextTransitioning) {\n        let containerView = transitionContext.containerView\n        let toView = transitionContext.view(forKey: .to)!\n        containerView.addSubview(toView)\n\n        toView.transform = CGAffineTransform(scaleX: 0.1, y: 0.1)\n        UIView.animate(withDuration: transitionDuration(using: transitionContext), animations: {\n            toView.transform = CGAffineTransform.identity\n        }) { (completed) in\n            transitionContext.completeTransition(completed)\n        }\n    }\n}\n\nfunc presentModalViewController(from viewController: UIViewController) {\n    let modalViewController = UIViewController()\n    modalViewController.view.backgroundColor = .purple\n\n    let navigationController = UINavigationController(rootViewController: modalViewController)\n    navigationController.modalPresentationStyle = .custom\n    navigationController.transitioningDelegate = CustomModalTransition()\n\n    viewController.present(navigationController, animated: true)\n}"
    },
    {
      "instruction": " \n\nCreate a Swift function that takes a JSON string as input and decodes it into a custom struct using the Codable protocol.",
      "input": "func decodeJSON(jsonString: String) -> CustomStruct? {\n}",
      "output": "import Foundation\n\nstruct CustomStruct: Codable {\n    let id: Int\n    let name: String\n}\n\nfunc decodeJSON(jsonString: String) -> CustomStruct? {\n    guard let jsonData = jsonString.data(using: .utf8) else {\n        return nil\n    }\n\n    let decoder = JSONDecoder()\n    do {\n        let decodedObject = try decoder.decode(CustomStruct.self, from: jsonData)\n        return decodedObject\n    } catch {\n        print(\"Error decoding JSON: \\(error)\")\n        return nil\n    }\n}"
    },
    {
      "instruction": " \n\nCreate a Swift function that takes a UIScrollView as input and adds a UIPageControl to the bottom of it, indicating the number of pages in the scroll view.",
      "input": "func addPageControl(to scrollView: UIScrollView) {\n}",
      "output": "import UIKit\n\nfunc addPageControl(to scrollView: UIScrollView) {\n    let numberOfPages = Int(scrollView.contentSize.width / scrollView.bounds.width)\n    let pageControl = UIPageControl()\n    pageControl.frame = CGRect(x: 0, y: scrollView.bounds.height - 50, width: scrollView.bounds.width, height: 50)\n    pageControl.numberOfPages = numberOfPages\n    pageControl.currentPage = 0\n    pageControl.addTarget(self, action:"
    },
    {
      "instruction": "Implement a function called `filterTransactions` that filters transactions based on a given `TransactionFilter` and updates the tableView data source accordingly. The `TransactionFilter` is an enum that can have values like `all`, `income`, and `expense`.",
      "input": "enum TransactionFilter {\n    case all\n    case income\n    case expense\n}\n\nclass MainViewController: UIViewController {\n    // previous code\n    private var filteredTransactions: [Transaction] = []\n\n    private func filterTransactions(with filter: TransactionFilter) {\n        // TODO: Add your code here\n    }\n}",
      "output": "class MainViewController: UIViewController {\n    // previous code\n    private var filteredTransactions: [Transaction] = []\n\n    private func filterTransactions(with filter: TransactionFilter) {\n        switch filter {\n        case .all:\n            filteredTransactions = transactions\n        case .income:\n            filteredTransactions = transactions.filter { $0.amount > 0 }\n        case .expense:\n            filteredTransactions = transactions.filter { $0.amount < 0 }\n        }\n        updateTableViewDataSource()\n    }\n\n    private func updateTableViewDataSource() {\n        tableViewDataSource.removeAll()\n        for transaction in filteredTransactions {\n            tableViewDataSource.append(.transaction(object: transaction))\n        }\n    }\n}"
    },
    {
      "instruction": " \n\n\n\nImplement a function called `validateForm` that checks if all the required fields in a form are valid and returns a boolean indicating the form's validity.",
      "input": "class AddTransactionViewController: UIViewController {\n    // previous code\n    @IBOutlet weak var amountTextField: UITextField!\n    @IBOutlet weak var descriptionTextField: UITextField!\n    @IBOutlet weak var categoryPickerView: UIPickerView!\n    @IBOutlet weak var dateTextField: UITextField!\n    @IBOutlet weak var saveButton: UIButton!\n\n    private func validateForm() -> Bool {\n        // TODO: Add your code here\n    }\n}",
      "output": "class AddTransactionViewController: UIViewController {\n    // previous code\n    @IBOutlet weak var amountTextField: UITextField!\n    @IBOutlet weak var descriptionTextField: UITextField!\n    @IBOutlet weak var categoryPickerView: UIPickerView!\n    @IBOutlet weak var dateTextField: UITextField!\n    @IBOutlet weak var saveButton: UIButton!\n\n    private func validateForm() -> Bool {\n        guard let amountText = amountTextField.text,\n              let descriptionText = descriptionTextField.text,\n              let dateText = dateTextField.text,\n              !amountText.isEmpty,\n              !descriptionText.isEmpty,\n              categoryPickerView.selectedRow(inComponent: 0) != -1,\n              !dateText.isEmpty else {\n            return false\n        }\n        return true\n    }\n}"
    },
    {
      "instruction": " \n\n\n\nImplement a function called `saveTransaction` that creates a new `Transaction` object from the form values and saves it to the `transactions` array.",
      "input": "class AddTransactionViewController: UIViewController {\n    // previous code\n    private var transactions: [Transaction] = []\n\n    private func saveTransaction() {\n        // TODO: Add your code here\n    }\n}",
      "output": "class AddTransactionViewController: UIViewController {\n    // previous code\n    private var transactions: [Transaction] = []\n\n    private func saveTransaction() {\n        let amount = Double(amountTextField.text!)!\n        let description = descriptionTextField.text!\n        let categoryIndex = categoryPickerView.selectedRow(inComponent: 0)\n        let category = Category.allCases[categoryIndex]\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat = \"yyyy-MM-dd\"\n        let date = dateFormatter.date(from: dateTextField.text!)!\n\n        let newTransaction = Transaction(amount: amount, description: description, category: category, date: date)\n        transactions.append(newTransaction)\n    }\n}"
    },
    {
      "instruction": " \n\n\n\nImplement swipe-to-delete functionality for transactions in the `MainViewController`'s tableView.",
      "input": "class MainViewController: UIViewController {\n    // previous code\n    @IBOutlet weak var tableView: UITableView!\n}",
      "output": "extension MainViewController: UITableViewDelegate, UITableViewDataSource {\n    // other tableView delegate and data source methods\n\n    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {\n        if editingStyle == .delete {\n            transactions.remove(at: indexPath.row)\n            tableView.deleteRows(at: [indexPath], with: .automatic)\n        }\n    }\n}"
    },
    {
      "instruction": " \n\n\n\nImplement a function called `showTransactionDetails` that presents a `TransactionDetailsViewController` with the details of the selected transaction.",
      "input": "class MainViewController: UIViewController {\n    // previous code\n    private func showTransactionDetails(for transaction: Transaction) {\n        // TODO: Add your code here\n    }\n}",
      "output": "class MainViewController: UIViewController {\n    // previous code\n    private func showTransactionDetails(for transaction: Transaction) {\n        let transactionDetailsViewController = storyboard?.instantiateViewController(withIdentifier: \"TransactionDetailsViewController\") as! TransactionDetailsViewController\n        transactionDetailsViewController.configure(with: transaction)\n        present(transactionDetailsViewController, animated: true)\n    }\n}"
    },
    {
      "instruction": " \n\n\n\nImplement a function called `configureCardCell` that configures a `UICollectionViewCell` with the given card data.",
      "input": "class MainViewController: UIViewController {\n    // previous code\n    @IBOutlet weak var collectionView: UICollectionView!\n\n    private func configureCardCell(for cell: UICollectionViewCell, with card: Card) {\n        // TODO: Add your code here\n    }\n}",
      "output": "class MainViewController: UIViewController {\n    // previous code\n    @IBOutlet weak var collectionView: UICollectionView!\n\n    private func configureCardCell(for cell: UICollectionViewCell, with card: Card) {\n        guard let cardCell = cell as? CardCollectionViewCell else { return }\n        cardCell.cardNumberLabel.text = card.formattedNumber()\n        cardCell.cardHolderNameLabel.text = card.holderName\n        cardCell.expiryDateLabel.text = card.formattedExpiryDate()\n        cardCell.cardTypeImageView.image = UIImage(named: card.type.rawValue)\n    }\n}"
    },
    {
      "instruction": " \n\n\n\nImplement a function called `showCardDetails` that presents a `CardDetailsViewController` with the details of the selected card.",
      "input": "class MainViewController: UIViewController {\n    // previous code\n    private func showCardDetails(for card: Card) {\n        // TODO: Add your code here\n    }\n}",
      "output": "class MainViewController: UIViewController {\n    // previous code\n    private func showCardDetails(for card: Card) {\n        let cardDetailsViewController = storyboard?.instantiateViewController(withIdentifier: \"CardDetailsViewController\") as! CardDetailsViewController\n        cardDetailsViewController.configure(with: card)\n        present(cardDetailsViewController, animated: true)\n    }\n}"
    },
    {
      "instruction": " \n\n\n\nImplement a function called `updateAccountBalance` that updates the account balance label whenever a new transaction is added.",
      "input": "class MainViewController: UIViewController {\n    // previous code\n    @IBOutlet weak var accountBalanceLabel: UILabel!\n    \n    private func updateAccountBalance() {\n        // TODO: Add your code here\n    }\n}",
      "output": "class MainViewController: UIViewController {\n    // previous code\n    @IBOutlet weak var accountBalanceLabel: UILabel!\n    \n    private func updateAccountBalance() {\n        let totalBalance = transactions.reduce(0) { (result, transaction) -> Double in\n            return result + transaction.amount\n        }\n        accountBalanceLabel.text = String(format: \"%.2f\", totalBalance)\n    }\n}"
    },
    {
      "instruction": "Create a registration view using SwiftUI with fields for name, email, and password.",
      "input": "",
      "output": "import SwiftUI\n\nstruct RegistrationView: View {\n    @State private var name: String = \"\"\n    @State private var email: String = \"\"\n    @State private var password: String = \"\"\n\n    var body: some View {\n        VStack {\n            TextField(\"Name\", text: $name)\n                .padding()\n                .background(Color(.systemGray6))\n                .cornerRadius(8)\n\n            TextField(\"Email\", text: $email)\n                .padding()\n                .background(Color(.systemGray6))\n                .cornerRadius(8)\n                .autocapitalization(.none)\n                .keyboardType(.emailAddress)\n\n            SecureField(\"Password\", text: $password)\n                .padding()\n                .background(Color(.systemGray6))\n                .cornerRadius(8)\n\n            Button(action: {\n                // Perform registration\n            }) {\n                Text(\"Register\")\n                    .foregroundColor(.white)\n                    .padding()\n                    .background(Color.blue)\n                    .cornerRadius(8)\n            }\n        }\n        .padding()\n    }\n}"
    },
    {
      "instruction": " \nImplement a custom UICollectionViewCell with an UIImageView and UILabel stacked vertically.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFill\n        return imageView\n    }()\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textAlignment = .center\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        \n        contentView.addSubview(imageView)\n        contentView.addSubview(titleLabel)\n        \n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.heightAnchor.constraint(equalTo: contentView.heightAnchor, multiplier: 0.75),\n            \n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nCreate a function that downloads an image from a URL and sets it to a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            completion(nil)\n            return\n        }\n        \n        DispatchQueue.main.async {\n            completion(UIImage(data: data))\n        }\n    }\n    task.resume()\n}\n\nfunc setImage(url: URL, imageView: UIImageView) {\n    downloadImage(from: url) { image in\n        imageView.image = image\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function to save a text file to the user's documents directory",
      "input": "",
      "output": "import Foundation\n\nfunc saveTextFile(text: String, fileName: String) -> Bool {\n    let fileURL = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0].appendingPathComponent(fileName)\n    \n    do {\n        try text.write(to: fileURL, atomically: true, encoding: .utf8)\n        return true\n    } catch {\n        print(\"Error writing to file: \\(error.localizedDescription)\")\n        return false\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift function to read a JSON file from the app bundle and decode it into a Codable object",
      "input": "",
      "output": "import Foundation\n\nfunc readJSONFromFile<T: Codable>(fileName: String, ofType type: T.Type) -> T? {\n    guard let path = Bundle.main.path(forResource: fileName, ofType: \"json\") else {\n        print(\"File not found\")\n        return nil\n    }\n    \n    do {\n        let data = try Data(contentsOf: URL(fileURLWithPath: path), options: .mappedIfSafe)\n        let decoder = JSONDecoder()\n        let jsonData = try decoder.decode(T.self, from: data)\n        return jsonData\n    } catch {\n        print(\"Error decoding JSON: \\(error.localizedDescription)\")\n        return nil\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift function to fetch data from a REST API and decode it into a Codable object",
      "input": "",
      "output": "import Foundation\n\nfunc fetchData<T: Codable>(from url: URL, ofType type: T.Type, completion: @escaping (Result<T, Error>) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            completion(.failure(error!))\n            return\n        }\n        \n        do {\n            let decoder = JSONDecoder()\n            let jsonData = try decoder.decode(T.self, from: data)\n            completion(.success(jsonData))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " \nImplement a custom MKAnnotationView with a callout and custom image",
      "input": "",
      "output": "import MapKit\n\nclass CustomAnnotationView: MKAnnotationView {\n    override init(annotation: MKAnnotation?, reuseIdentifier: String?) {\n        super.init(annotation: annotation, reuseIdentifier: reuseIdentifier)\n        \n        self.image = UIImage(named: \"customImage\")\n        self.canShowCallout = true\n        self.rightCalloutAccessoryView = UIButton(type: .detailDisclosure)\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nImplement a SwiftUI View displaying a horizontal scrollable list of images fetched from a remote server",
      "input": "",
      "output": "import SwiftUI\n\nstruct RemoteImage: View {\n    @State private var uiImage: UIImage? = nil\n    let url: URL\n\n    var body: some View {\n        Group {\n            if let image = uiImage {\n                Image(uiImage: image)\n            } else {\n                ProgressView()\n            }\n        }.onAppear {\n            downloadImage(from: url) { image in\n                uiImage = image\n            }\n        }\n    }\n}\n\nstruct HorizontalImagesView: View {\n    let imageURLs: [URL]\n\n    var body: some View {\n        ScrollView(.horizontal, showsIndicators: false) {\n            HStack(spacing: 16) {\n                ForEach(imageURLs, id: \\.self) { url in\n                    RemoteImage(url: url)\n                        .frame(width: 100, height: 100)\n                        .clipped()\n                }\n            }.padding(.horizontal)\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that downloads and displays an image from a URL in a UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    let imageView = UIImageView()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        imageView.frame = CGRect(x: 0, y: 0, width: 200, height: 200)\n        imageView.center = view.center\n        view.addSubview(imageView)\n        downloadImage(from: \"https://example.com/image.jpg\")\n    }\n\n    func downloadImage(from urlString: String) {\n        guard let url = URL(string: urlString) else { return }\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let error = error {\n                print(\"Error downloading image: \\(error)\")\n                return\n            }\n            guard let data = data, let image = UIImage(data: data) else { return }\n            DispatchQueue.main.async {\n                self.imageView.image = image\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that authenticates a user using Firebase and displays an error message if the authentication fails",
      "input": "",
      "output": "import UIKit\nimport FirebaseAuth\n\nclass LoginViewController: UIViewController {\n    @IBOutlet weak var emailTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n\n    @IBAction func loginButtonTapped(_ sender: UIButton) {\n        guard let email = emailTextField.text, let password = passwordTextField.text else { return }\n        Auth.auth().signIn(withEmail: email, password: password) { (result, error) in\n            if let error = error {\n                self.displayErrorMessage(message: error.localizedDescription)\n            } else {\n                print(\"User signed in successfully\")\n                // Navigate to the next view controller\n            }\n        }\n    }\n\n    func displayErrorMessage(message: String) {\n        let alertController = UIAlertController(title: \"Error\", message: message, preferredStyle: .alert)\n        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n        self.present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that fetches data from a REST API and decodes it into a custom Swift model",
      "input": "",
      "output": "import Foundation\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let username: String\n    let email: String\n}\n\nfunc fetchUsers(completion: @escaping ([User]?, Error?) -> Void) {\n    let urlString = \"https://jsonplaceholder.typicode.com/users\"\n    guard let url = URL(string: urlString) else { return }\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(nil, error)\n        } else if let data = data {\n            do {\n                let decoder = JSONDecoder()\n                let users = try decoder.decode([User].self, from: data)\n                completion(users, nil)\n            } catch {\n                completion(nil, error)\n            }\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UICollectionViewCell with a UILabel inside",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupLabel()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupLabel() {\n        let label = UILabel(frame: contentView.bounds)\n        label.autoresizingMask = [.flexibleWidth, .flexibleHeight]\n        label.textAlignment = .center\n        contentView.addSubview(label)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that registers for remote notifications and handles the notification payload",
      "input": "",
      "output": "import UIKit\nimport UserNotifications\n\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n\n        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in\n            if granted {\n                DispatchQueue.main.async {\n                    application.registerForRemoteNotifications()\n                }\n            }\n        }\n        \n        return true\n    }\n\n    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n        // Handle successful registration for remote notifications\n    }\n\n    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n        // Handle failed registration for remote notifications\n    }\n\n    func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n        // Handle received remote notification\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that implements a custom UITableView with a custom UITableViewCell and displays a list of items",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var titleLabel: UILabel!\n}\n\nclass TableViewController: UITableViewController {\n    let items = [\"Item 1\", \"Item 2\", \"Item 3\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UINib(nibName: \"CustomTableViewCell\", bundle: nil), forCellReuseIdentifier: \"CustomTableViewCell\")\n    }\n\n    override func numberOfSections(in tableView: UITableView) -> Int {\n        return 1\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomTableViewCell\", for: indexPath) as! CustomTableViewCell\n        cell.titleLabel.text = items[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that saves and retrieves user preferences using UserDefaults",
      "input": "",
      "output": "import Foundation\n\nstruct Preferences {\n    static let userDefaults = UserDefaults.standard\n\n    static func saveUserName(name: String) {\n        userDefaults.set(name, forKey: \"userName\")\n    }\n\n    static func getUserName() -> String? {\n        return userDefaults.string(forKey: \"userName\")\n    }\n\n    static func saveUserAge(age: Int) {\n        userDefaults.set(age, forKey: \"userAge\")\n    }\n\n    static func getUserAge() -> Int? {\n        return userDefaults.integer(forKey: \"userAge\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that implements a custom UIPageViewController with three view controllers",
      "input": "",
      "output": "import UIKit\n\nclass CustomPageViewController: UIPageViewController, UIPageViewControllerDataSource, UIPageViewControllerDelegate {\n    \n    lazy var viewControllersList: [UIViewController] = {\n        let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n        let viewController1 = storyboard.instantiateViewController(withIdentifier: \"ViewController1\")\n        let viewController2 = storyboard.instantiateViewController(withIdentifier: \"ViewController2\")\n        let viewController3 = storyboard.instantiateViewController(withIdentifier: \"ViewController3\")\n        \n        return [viewController1, viewController2, viewController3]\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.dataSource = self\n        self.delegate = self\n        \n        if let firstViewController = viewControllersList.first {\n            self.setViewControllers([firstViewController], direction: .forward, animated: true, completion: nil)\n        }\n    }\n    \n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n        guard let index = viewControllersList.firstIndex(of: viewController), index > 0 else { return nil }\n        let previousIndex = index - 1\n        return viewControllersList[previousIndex]\n    }\n    \n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {\n        guard let index = viewControllersList.firstIndex(of: viewController), index < (viewControllersList.count - 1) else { return nil }\n        let nextIndex = index + 1\n        return viewControllersList[nextIndex]\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to asynchronously download an image from a URL and display it in a UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass ImageDownloader {\n    static func downloadImage(url: URL, completion: @escaping (UIImage?) -> Void) {\n        let task = URLSession.shared.dataTask(with: url) { (data, _, error) in\n            guard error == nil, let data = data, let image = UIImage(data: data) else {\n                completion(nil)\n                return\n            }\n            completion(image)\n        }\n        task.resume()\n    }\n}\n\n// Usage in a UIViewController\nclass MyViewController: UIViewController {\n    @IBOutlet weak var imageView: UIImageView!\n\n    func loadImageFromURL(url: URL) {\n        ImageDownloader.downloadImage(url: url) { [weak self] image in\n            DispatchQueue.main.async {\n                self?.imageView.image = image\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to request location updates and print the user's current location using CoreLocation",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n\n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    func startLocationUpdates() {\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        guard let location = locations.last else { return }\n        print(\"Current location: \\(location)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UIRefreshControl for a UITableView",
      "input": "",
      "output": "import UIKit\n\nclass RefreshableViewController: UITableViewController {\n\n    let refresh = UIRefreshControl()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupRefreshControl()\n    }\n\n    func setupRefreshControl() {\n        refresh.addTarget(self, action: #selector(refreshData), for: .valueChanged)\n        tableView.refreshControl = refresh\n    }\n\n    @objc func refreshData() {\n        // Perform your data fetching or tasks here\n        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n            self.refresh.endRefreshing()\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UITableViewCell with a custom xib file",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n\n    @IBOutlet weak var customLabel: UILabel!\n\n    override func awakeFromNib() {\n        super.awakeFromNib()\n    }\n\n    func configureCell(text: String) {\n        customLabel.text = text\n    }\n\n    static var nib: UINib {\n        return UINib(nibName: String(describing: self), bundle: nil)\n    }\n\n    static var reuseIdentifier: String {\n        return String(describing: self)\n    }\n}\n\n// Usage in a UIViewController\nclass MyTableViewController: UITableViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.nib, forCellReuseIdentifier: CustomTableViewCell.reuseIdentifier)\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.reuseIdentifier, for: indexPath) as! CustomTableViewCell\n        cell.configureCell(text: \"Custom cell\")\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIAlertController with multiple actions",
      "input": "",
      "output": "import UIKit\n\nclass AlertViewController: UIViewController {\n\n    func showAlert() {\n        let alertController = UIAlertController(title: \"Alert\", message: \"Choose an option\", preferredStyle: .alert)\n\n        let action1 = UIAlertAction(title: \"Option 1\", style: .default) { _ in\n            print(\"Option 1 selected\")\n        }\n        let action2 = UIAlertAction(title: \"Option 2\", style: .default) { _ in\n            print(\"Option 2 selected\")\n        }\n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n\n        alertController.addAction(action1)\n        alertController.addAction(action2)\n        alertController.addAction(cancelAction)\n\n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a search bar using UISearchController in a UITableViewController",
      "input": "",
      "output": "import UIKit\n\nclass SearchTableViewController: UITableViewController, UISearchResultsUpdating {\n\n    let searchController = UISearchController(searchResultsController: nil)\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupSearchController()\n    }\n\n    func setupSearchController() {\n        searchController.searchResultsUpdater = self\n        searchController.obscuresBackgroundDuringPresentation = false\n        searchController.searchBar.placeholder = \"Search\"\n        navigationItem.searchController = searchController\n        definesPresentationContext =true\n    }\n\n    func updateSearchResults(for searchController: UISearchController) {\n        if let searchText = searchController.searchBar.text, !searchText.isEmpty {\n            // Perform your search using searchText\n            print(\"Searching for: \\(searchText)\")\n        } else {\n            // Reset the search results if the search bar text is empty\n            print(\"Resetting search results\")\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement pagination in a UITableView using UIScrollViewDelegate",
      "input": "",
      "output": "import UIKit\n\nclass PaginationTableViewController: UITableViewController, UIScrollViewDelegate {\n\n    var currentPage = 1\n    var isLoading = false\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        loadMoreData(page: currentPage)\n    }\n\n    func loadMoreData(page: Int) {\n        guard !isLoading else { return }\n        isLoading = true\n        // Fetch data for the current page\n        print(\"Fetching data for page: \\(page)\")\n\n        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n            // Update data source and reload table view\n            self.isLoading = false\n            self.currentPage += 1\n            self.tableView.reloadData()\n        }\n    }\n\n    override func scrollViewDidScroll(_ scrollView: UIScrollView) {\n        let offsetY = scrollView.contentOffset.y\n        let contentHeight = scrollView.contentSize.height\n\n        if offsetY > contentHeight - scrollView.frame.height {\n            loadMoreData(page: currentPage)\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a simple UICollectionView with custom UICollectionViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n\n    @IBOutlet weak var titleLabel: UILabel!\n\n    func configureCell(title: String) {\n        titleLabel.text = title\n    }\n\n    static var nib: UINib {\n        return UINib(nibName: String(describing: self), bundle: nil)\n    }\n\n    static var reuseIdentifier: String {\n        return String(describing: self)\n    }\n}\n\nclass CollectionViewController: UICollectionViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.nib, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        cell.configureCell(title: \"Item \\(indexPath.row)\")\n        return cell\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that uses Core Location to get the user's current location.",
      "input": "",
      "output": "import UIKit\nimport CoreLocation\n\nclass ViewController: UIViewController, CLLocationManagerDelegate {\n    \n    let locationManager = CLLocationManager()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.startUpdatingLocation()\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            print(\"Latitude: \\(location.coordinate.latitude), Longitude: \\(location.coordinate.longitude)\")\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error getting location: \\(error.localizedDescription)\")\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that saves a string to User Defaults and retrieves it.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n\n    let userDefaultsKey = \"savedString\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        saveString(value: \"Hello, world!\")\n        let retrievedString = getString()\n        print(retrievedString ?? \"No string found\")\n    }\n\n    func saveString(value: String) {\n        UserDefaults.standard.set(value, forKey: userDefaultsKey)\n    }\n\n    func getString() -> String? {\n        return UserDefaults.standard.string(forKey: userDefaultsKey)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that uses Alamofire to make a GET request and parse JSON response.",
      "input": "",
      "output": "import UIKit\nimport Alamofire\nimport SwiftyJSON\n\nclass ViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        fetchJSONData()\n    }\n    \n    func fetchJSONData() {\n        let url = \"https://jsonplaceholder.typicode.com/todos/1\"\n        \n        AF.request(url).responseJSON { response in\n            switch response.result {\n            case .success(let value):\n                let json = JSON(value)\n                print(json)\n                \n            case .failure(let error):\n                print(error)\n            }\n        }\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function to download an image from a URL and display it in a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    @IBOutlet weak var imageView: UIImageView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        let imageUrl = \"https://via.placeholder.com/150\"\n        downloadImage(urlString: imageUrl)\n    }\n    \n    func downloadImage(urlString: String) {\n        if let url = URL(string: urlString) {\n            URLSession.shared.dataTask(with: url) { data, response, error in\n                if let data = data, let image = UIImage(data: data) {\n                    DispatchQueue.main.async {\n                        self.imageView.image = image\n                    }\n                }\n            }.resume()\n        }\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that configures a UITableView with custom cells.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n\n    @IBOutlet weak var tableView: UITableView!\n    \n    let cellReuseIdentifier = \"customCell\"\n    let data = [\"Item 1\", \"Item 2\", \"Item 3\"]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        tableView.delegate = self\n        tableView.register(UINib(nibName: \"CustomTableViewCell\", bundle: nil), forCellReuseIdentifier: cellReuseIdentifier)\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier, for: indexPath) as! CustomTableViewCell\n        cell.titleLabel.text = data[indexPath.row]\n        return cell\n    }\n    \n    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {\n        return 80\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that connects to Firebase Firestore, retrieves a document, and prints its data.",
      "input": "",
      "output": "import UIKit\nimport FirebaseFirestore\n\nclass ViewController: UIViewController {\n\n    let db = Firestore.firestore()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        fetchDocumentData()\n    }\n    \n    func fetchDocumentData() {\n        let documentReference = db.collection(\"exampleCollection\").document(\"exampleDocument\")\n        \n        documentReference.getDocument { (document, error) in\n            if let document = document, document.exists {\n                let data = document.data()\n                print(data)\n            } else {\n                print(\"Document doesnot exist\")\n            }\n        }\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that uses Core Motion to access accelerometer data.",
      "input": "",
      "output": "import UIKit\nimport CoreMotion\n\nclass ViewController: UIViewController {\n\n    let motionManager = CMMotionManager()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        startAccelerometerUpdates()\n    }\n    \n    func startAccelerometerUpdates() {\n        if motionManager.isAccelerometerAvailable {\n            motionManager.accelerometerUpdateInterval = 0.1\n            motionManager.startAccelerometerUpdates(to: OperationQueue.main) { (accelerometerData, error) in\n                if let data = accelerometerData {\n                    print(\"X: \\(data.acceleration.x), Y: \\(data.acceleration.y), Z: \\(data.acceleration.z)\")\n                }\n            }\n        } else {\n            print(\"Accelerometer is not available.\")\n        }\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates and presents an alert with a text field.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    @IBAction func showAlertButtonTapped(_ sender: UIButton) {\n        presentAlertWithTextField()\n    }\n    \n    func presentAlertWithTextField() {\n        let alertController = UIAlertController(title: \"Alert\", message: \"Enter your name\", preferredStyle: .alert)\n        \n        alertController.addTextField { (textField) in\n            textField.placeholder = \"Name\"\n        }\n        \n        let submitAction = UIAlertAction(title: \"Submit\", style: .default) { [weak alertController] _ in\n            if let alertController = alertController, let textField = alertController.textFields?.first {\n                print(\"Name: \\(textField.text ?? \"\")\")\n            }\n        }\n        \n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n        \n        alertController.addAction(submitAction)\n        alertController.addAction(cancelAction)\n        \n        present(alertController, animated: true, completion: nil)\n    }\n    \n}"
    },
    {
      "instruction": "Write a Swift function that implements a UICollectionView with a custom UICollectionViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UICollectionViewController {\n\n    private let reuseIdentifier = \"CustomCollectionViewCell\"\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: reuseIdentifier)\n        collectionView.dataSource = self\n        collectionView.delegate = self\n    }\n\n    // MARK: UICollectionViewDataSource\n\n    override func numberOfSections(in collectionView: UICollectionView) -> Int {\n        return 1\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 20\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        cell.configure(with: \"Item \\(indexPath.row)\")\n        return cell\n    }\n    \n}\n\n// Custom UICollectionViewCell subclass\nclass CustomCollectionViewCell: UICollectionViewCell {\n    \n    private lazy var label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(label)\n        setupConstraints()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            label.centerXAnchor.constraint(equalTo: contentView.centerXAnchor),\n            label.centerYAnchor.constraint(equalTo: contentView.centerYAnchor)\n        ])\n    }\n    \n    func configure(with text: String) {\n        label.text = text\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that saves and retrieves user data using UserDefaults",
      "input": "",
      "output": "import Foundation\n\nclass UserDefaultsManager {\n    \n    private let usernameKey = \"username\"\n    \n    static let shared = UserDefaultsManager()\n    \n    private init() {}\n    \n    func saveUsername(_ username: String) {\n        UserDefaults.standard.set(username, forKey: usernameKey)\n    }\n    \n    func getUsername() -> String? {\n        return UserDefaults.standard.string(forKey: usernameKey)\n    }\n    \n}\n\n// Usage:\n// UserDefaultsManager.shared.saveUsername(\"JohnDoe\")\n// let username = UserDefaultsManager.shared.getUsername()"
    },
    {
      "instruction": " \nWrite a Swift function that displays an UIAlertController with a textField and a submit button",
      "input": "",
      "output": "import UIKit\n\nclass AlertWithTextFieldViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    func showAlert() {\n        let alertController = UIAlertController(title: \"Enter Text\", message: nil, preferredStyle: .alert)\n        alertController.addTextField(configurationHandler: nil)\n        \n        let submitAction = UIAlertAction(title: \"Submit\", style: .default) { [weak self] _ in\n            if let textField = alertController.textFields?.first, let text = textField.text {\n                self?.handleSubmittedText(text)\n            }\n        }\n        \n        alertController.addAction(submitAction)\n        present(alertController, animated: true, completion: nil)\n    }\n    \n    func handleSubmittedText(_ text: String) {\n        print(\"Submitted text: \\(text)\")\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that implements a UITableView with a search bar using UISearchController",
      "input": "",
      "output": "import UIKit\n\nclass SearchTableViewController: UITableViewController, UISearchResultsUpdating {\n    \n    private let cellReuseIdentifier = \"UITableViewCell\"\n    private var data: [String] = [\"Apple\", \"Banana\", \"Grape\", \"Orange\", \"Strawberry\"]\n    private var filteredData: [String] = []\n    private var searchController: UISearchController!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)\n        setupSearchController()\n    }\n\n    private func setupSearchController() {\n        searchController = UISearchController(searchResultsController: nil)\n        searchController.searchResultsUpdater = self\n        searchController.obscuresBackgroundDuringPresentation = false\n        searchController.searchBar.placeholder = \"Search\"\n        navigationItem.searchController = searchController\n        definesPresentationContext = true\n    }\n\n    // MARK: - Table view data source\n\n    override func numberOfSections(in tableView: UITableView) -> Int {\n        return 1\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return isFiltering() ? filteredData.count : data.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier, for: indexPath)\n        cell.textLabel?.text = isFiltering() ? filteredData[indexPath.row] : data[indexPath.row]\n        return cell\n    }\n    \n    // MARK: - UISearchResultsUpdating\n\n    func updateSearchResults(for searchController: UISearchController) {\n       if let searchText = searchController.searchBar.text, !searchText.isEmpty {\n            filteredData = data.filter { item in\n                return item.lowercased().contains(searchText.lowercased())\n            }\n        } else {\n            filteredData = data\n        }\n        tableView.reloadData()\n    }\n    \n    private func isFiltering() -> Bool {\n        return searchController.isActive && !searchBarIsEmpty()\n    }\n    \n    private func searchBarIsEmpty() -> Bool {\n        return searchController.searchBar.text?.isEmpty ?? true\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function to download an image from a URL and display it in a UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass DownloadImageViewController: UIViewController {\n    \n    private lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(imageView)\n        setupConstraints()\n        downloadImage(from: \"https://www.example.com/image.jpg\")\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            imageView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            imageView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n    \n    func downloadImage(from urlString: String) {\n        guard let url = URL(string: urlString) else { return }\n        \n        URLSession.shared.dataTask(with: url) { [weak self] data, _, _ in\n            if let data = data, let image = UIImage(data: data) {\n                DispatchQueue.main.async {\n                    self?.imageView.image = image\n                }\n            }\n        }.resume()\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that uses Core Location to get the user's current location",
      "input": "",
      "output": "import CoreLocation\nimport UIKit\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n    \n    private let locationManager = CLLocationManager()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n    \n    // MARK: - CLLocationManagerDelegate\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            print(\"User's location: \\(location)\")\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error getting location: \\(error.localizedDescription)\")\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that implements a custom UIButton with rounded corners and a gradient background",
      "input": "",
      "output": "import UIKit\n\nclass GradientButton: UIButton {\n    \n    private let gradientLayer = CAGradientLayer()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        gradientLayer.frame = bounds\n        layer.cornerRadius = bounds.height / 2\n    }\n    \n    private func setupView() {\n        gradientLayer.colors = [UIColor.red.cgColor, UIColor.blue.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0.5)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 0.5)\n        layer.insertSublayer(gradientLayer, at: 0)\n        layer.masksToBounds = true\n    }\n    \n}"
    },
    {
      "instruction": " \nWrite a Swift function that implements a custom UINavigationController with a custom navigation bar appearance",
      "input": "",
      "output": "import UIKit\n\nclass CustomNavigationController: UINavigationController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupNavigationBarAppearance()\n    }\n    \n    private func setupNavigationBarAppearance() {\n        let navigationBarAppearance = UINavigationBarAppearance()\n        navigationBarAppearance.configureWithOpaqueBackground()\n        navigationBarAppearance.backgroundColor = .systemBlue\n        navigationBarAppearance.titleTextAttributes = [\n            .foregroundColor: UIColor.white,\n            .font: UIFont.boldSystemFont(ofSize: 24)\n        ]\n        navigationBar.standardAppearance = navigationBarAppearance\n        navigationBar.scrollEdgeAppearance = navigationBarAppearance\n    }\n    \n}\n\n// Usage:\n// let viewController = UIViewController()\n// let customNavigationController = CustomNavigationController(rootViewController: viewController)"
    },
    {
      "instruction": "Write a Swift function that handles push notifications by showing an alert with the notification's content.",
      "input": "",
      "output": "import UIKit\nimport UserNotifications\n\nclass NotificationHandler: NSObject, UNUserNotificationCenterDelegate {\n    \n    static let shared = NotificationHandler()\n    \n    func requestNotificationAuthorization() {\n        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in\n            if let error = error {\n                print(\"Error requesting notification authorization: \\(error)\")\n            }\n        }\n        \n        UNUserNotificationCenter.current().delegate = self\n    }\n    \n    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {\n        \n        let alertController = UIAlertController(title: \"New Notification\", message: notification.request.content.body, preferredStyle: .alert)\n        let action = UIAlertAction(title: \"OK\", style: .default, handler: nil)\n        alertController.addAction(action)\n        \n        if let rootViewController = UIApplication.shared.keyWindow?.rootViewController {\n            rootViewController.present(alertController, animated: true, completion: nil)\n        }\n        \n        completionHandler([.alert, .sound])\n    }\n}\n\n// Usage:\n// In your AppDelegate.swift, add the following line in the didFinishLaunchingWithOptions function:\n// NotificationHandler.shared.requestNotificationAuthorization()"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UICollectionView with a custom UICollectionViewCell subclass and customizes its appearance.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UICollectionViewController, UICollectionViewDelegateFlowLayout {\n    \n    private let reuseIdentifier = \"CustomCollectionViewCell\"\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: reuseIdentifier)\n        collectionView.backgroundColor = .white\n        \n        if let layout = collectionView.collectionViewLayout as? UICollectionViewFlowLayout {\n            layout.scrollDirection = .vertical\n            layout.minimumLineSpacing = 10\n            layout.minimumInteritemSpacing = 10\n            layout.sectionInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)\n        }\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 50\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        \n        cell.configureCell()\n        \n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: (collectionView.frame.width - 30) / 2, height: 200)\n    }\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    func configureCell() {\n        contentView.backgroundColor = .blue\n        layer.cornerRadius = 10\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift UITableView with a header view containing a UISearchBar and the ability to filter its data based on the search term.",
      "input": "",
      "output": "import UIKit\n\nclass SearchTableViewController: UITableViewController, UISearchBarDelegate {\n\n    private var allData: [String] = []\n    private var filteredData: [String] = []\n    private var isSearching = false\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        allData = [\"Apple\", \"Banana\", \"Cherry\", \"Date\", \"Fig\", \"Grape\", \"Honeydew\", \"Kiwi\", \"Lemon\", \"Mango\", \"Nectarine\", \"Orange\", \"Papaya\", \"Quince\", \"Raspberry\", \"Strawberry\", \"Tangerine\", \"Ugli Fruit\", \"Watermelon\", \"Xigua\", \"Yuzu\", \"Zucchini\"]\n\n        let searchBar = UISearchBar()\n        searchBar.delegate = self\n        searchBar.placeholder = \"Search\"\n        searchBar.sizeToFit()\n\n        self.tableView.tableHeaderView = searchBar\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        if isSearching {\n            return filteredData.count\n        } else {\n            return allData.count\n        }\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n\n        if isSearching {\n            cell.textLabel?.text = filteredData[indexPath.row]\n        } else {\n            cell.textLabel?.text = allData[indexPath.row]\n        }\n\n        return cell\n    }\n\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            isSearching = false\n            filteredData = []\n        } else {\n            isSearching = true\n            filteredData = allData.filter { $0.lowercased().contains(searchText.lowercased()) }\n        }\n\n        tableView.reloadData()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that saves an image to the user's photo library when a button is tapped.",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nclass SaveImageViewController: UIViewController {\n    \n    let imageView = UIImageView(image: UIImage(named: \"exampleImage\"))\n    let saveButton = UIButton(type: .system)\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        setupImageView()\n        setupSaveButton()\n    }\n    \n    func setupImageView() {\n        imageView.contentMode = .scaleAspectFit\n        imageView.frame = CGRect(x: 0, y: 0, width: view.frame.width, height: view.frame.height * 0.8)\n        view.addSubview(imageView)\n    }\n    \n    func setupSaveButton() {\n        saveButton.setTitle(\"Save Image\", for: .normal)\n        saveButton.addTarget(self, action: #selector(saveImageToLibrary), for: .touchUpInside)\n        saveButton.frame = CGRect(x: 0, y: imageView.frame.maxY, width: view.frame.width, height: view.frame.height * 0.2)\n        view.addSubview(saveButton)\n    }\n    \n    @objc func saveImageToLibrary() {\n        guard let image = imageView.image else { return }\n        \n        PHPhotoLibrary.requestAuthorization { status in\n            switch status {\n            case .authorized:\n                PHPhotoLibrary.shared().performChanges({\n                    PHAssetChangeRequest.creationRequestForAsset(from: image)\n                }, completionHandler: { success, error in\n                    DispatchQueue.main.async {\n                        if success {\n                            let alertController = UIAlertController(title: \"Saved!\", message: \"Image saved to your photo library.\", preferredStyle: .alert)\n                            alertController.addAction(UIAlertAction(title: \"OK\", style: .default))\n                            self.present(alertController, animated: true, completion: nil)\n                        } else {\n                            print(\"Error saving image: \\(String(describing: error))\")\n                        }\n                    }\n                })\n            case .denied, .restricted, .notDetermined:\n                print(\"Permission to access Photos app is not granted\")\n            default:\n                break\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that displays an action sheet with multiple options, including a destructive option and a cancel option.",
      "input": "",
      "output": "import UIKit\n\nclass ActionSheetViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.backgroundColor = .white\n        \n        let actionButton = UIButton(type: .system)\n        actionButton.setTitle(\"Show Action Sheet\", for: .normal)\n        actionButton.addTarget(self, action: #selector(showActionSheet), for: .touchUpInside)\n        actionButton.frame = CGRect(x: 0, y: 0, width: view.frame.width, height: 50)\n        view.addSubview(actionButton)\n    }\n    \n    @objc func showActionSheet() {\n        let alertController = UIAlertController(title: \"Choose an Option\", message: nil, preferredStyle: .actionSheet)\n        \n        alertController.addAction(UIAlertAction(title: \"Option 1\", style: .default, handler: { _ in\n            print(\"Option 1 selected\")\n        }))\n        alertController.addAction(UIAlertAction(title: \"Option 2\", style: .default, handler: { _ in\n            print(\"Option 2 selected\")\n        }))\n        alertController.addAction(UIAlertAction(title: \"Destructive Option\", style: .destructive, handler: { _ in\n            print(\"Destructive option selected\")\n        }))\n        alertController.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: { _ in\n            print(\"Cancel selected\")\n        }))\n        \n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates a UIView's position and scale over a specified duration.",
      "input": "",
      "output": "import UIKit\n\nclass AnimationViewController: UIViewController {\n    \n    let squareView = UIView()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.backgroundColor = .white\n        \n        setupSquareView()\n        \n        let animateButton = UIButton(type: .system)\n        animateButton.setTitle(\"Animate\", for: .normal)\n        animateButton.addTarget(self, action: #selector(animateSquare), for: .touchUpInside)\n        animateButton.frame = CGRect(x: 0, y: 0, width: view.frame.width, height: 50)\n        view.addSubview(animateButton)\n    }\n    \n    func setupSquareView() {\n        squareView.frame = CGRect(x: 50, y: 100, width: 100, height: 100)\n        squareView.backgroundColor = .blue\n        view.addSubview(squareView)\n    }\n    \n    @objc func animateSquare() {\n        UIView.animate(withDuration: 2.0, animations: {\n            self.squareView.center = CGPoint(x: self.view.frame.width - 100, y: self.view.frame.height - 100)\n            self.squareView.transform = CGAffineTransform(scaleX: 2"
    },
    {
      "instruction": "Write a Swift function that saves an image to the user's photo library and displays an alert with a success or failure message.",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToLibrary(image: UIImage, viewController: UIViewController) {\n    PHPhotoLibrary.shared().performChanges({\n        PHAssetChangeRequest.creationRequestForAsset(from: image)\n    }) { success, error in\n        DispatchQueue.main.async {\n            if success {\n                let alertController = UIAlertController(title: \"Success\", message: \"Image successfully saved to photo library.\", preferredStyle: .alert)\n                alertController.addAction(UIAlertAction(title: \"OK\", style: .default))\n                viewController.present(alertController, animated: true)\n            } else if let error = error {\n                let alertController = UIAlertController(title: \"Error\", message: \"Failed to save image: \\(error.localizedDescription)\", preferredStyle: .alert)\n                alertController.addAction(UIAlertAction(title: \"OK\", style: .default))\n                viewController.present(alertController, animated: true)\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that fetches a user's location and displays it in a UILabel.",
      "input": "",
      "output": "import CoreLocation\nimport UIKit\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n    @IBOutlet weak var locationLabel: UILabel!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            locationLabel.text = \"Latitude: \\(location.coordinate.latitude), Longitude: \\(location.coordinate.longitude)\"\n            locationManager.stopUpdatingLocation()\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that downloads an image from a URL and sets it as the background image for a UIButton.",
      "input": "",
      "output": "import UIKit\n\nfunc setBackgroundImageFromURL(for button: UIButton, url: URL) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            print(\"Error downloading image: \\(error?.localizedDescription ?? \"Unknown error\")\")\n            return\n        }\n\n        DispatchQueue.main.async {\n            if let image = UIImage(data: data) {\n                button.setBackgroundImage(image, for: .normal)\n            }\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UICollectionViewCell with a UIImageView and UILabel.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView\n    let titleLabel: UILabel\n\n    override init(frame: CGRect) {\n        imageView = UIImageView(frame: CGRect(x: 0, y: 0, width: frame.width, height: frame.height * 0.7))\n        titleLabel = UILabel(frame: CGRect(x: 0, y: imageView.frame.height, width: frame.width, height: frame.height * 0.3))\n\n        super.init(frame: frame)\n\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        addSubview(imageView)\n\n        titleLabel.textAlignment = .center\n        addSubview(titleLabel)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that plays an audio file from a given URL.",
      "input": "",
      "output": "import AVFoundation\n\nclass AudioPlayer: NSObject, AVAudioPlayerDelegate {\n    var audioPlayer: AVAudioPlayer?\n\n    func playAudioFromURL(url: URL) {\n        do {\n            audioPlayer = try AVAudioPlayer(contentsOf: url)\n            audioPlayer?.delegate = self\n            audioPlayer?.prepareToPlay()\n            audioPlayer?.play()\n        } catch let error {\n            print(\"Error playing audio: \\(error.localizedDescription)\")\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates an UIView's position and size change using a spring damping effect.",
      "input": "",
      "output": "import UIKit\n\nfunc animateViewWithSpringDamping(view: UIView, newPosition: CGPoint, newFrame: CGRect) {\n    UIView.animate(withDuration: 0.7, delay: 0, usingSpringWithDamping: 0.6, initialSpringVelocity: 0, options: .curveEaseInOut) {\n        view.frame = newFrame\n        view.center = newPosition\n    } completion: { _ in\n        print(\"Animation completed\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that starts a timer that updates a progress view every second until it reaches 100%.",
      "input": "",
      "output": "import UIKit\n\nclass ProgressViewController: UIViewController {\n    var progressView: UIProgressView!\n    var timer: Timer?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        progressView = UIProgressView(progressViewStyle: .default)\n        progressView.frame = CGRect(x: 0, y: 0, width: view.frame.width * 0.8, height: 10)\n        progressView.center = view.center\n        view.addSubview(progressView)\n        startProgressTimer()\n    }\n    \n    func startProgressTimer() {\n        progressView.progress = 0\n        timer = Timer.scheduledTimer(withTimeInterval: 1, repeats: true) { [weak self] _ in\n            guard let self = self else { return }\n            \n            if self.progressView.progress < 1 {\n                self.progressView.progress += 0.1\n            } else {\n                self.timer?.invalidate()\n                self.timer = nil\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sends a push notification to a specified user using Firebase Cloud Messaging.",
      "input": "",
      "output": "import FirebaseMessaging\n\nfunc sendPushNotification(to userToken: String, body: String, title: String) {\n    let urlString = \"https://fcm.googleapis.com/fcm/send\"\n    let url = NSURL(string: urlString)!\n    let paramString: [String: Any] = [\"to\": userToken, \"notification\": [\"title\": title, \"body\": body], \"data\": [\"user\": \"test_id\"]]\n    \n    let request = NSMutableURLRequest(url: url as URL)\n    request.httpMethod = \"POST\"\n    request.httpBody = try? JSONSerialization.data(withJSONObject: paramString, options: [.prettyPrinted])\n    \n    request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n    request.setValue(\"key=YOUR_SERVER_KEY\", forHTTPHeaderField: \"Authorization\")\n    \n    let task = URLSession.shared.dataTask(with: request as URLRequest) { (data, response, error) in\n        if let data = data {\n            do {\n                let response = try JSONSerialization.jsonObject(with: data, options: [])\n                print(\"Response: \\(response)\")\n            } catch let error as NSError {\n                print(\"Error: \\(error.localizedDescription)\")\n            }\n        }\n    }\n    \n    task.resume()\n}"
    },
    {
      "instruction": "Write a Swift function that loads JSON data from a remote server and parses it into a list of custom objects",
      "input": "",
      "output": "import Foundation\n\nstruct CustomObject: Codable {\n    let id: Int\n    let name: String\n    // Add other properties as needed\n}\n\nfunc fetchCustomObjects(completion: @escaping ([CustomObject]?) -> Void) {\n    guard let url = URL(string: \"https://example.com/api/objects\") else {\n        completion(nil)\n        return\n    }\n\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            completion(nil)\n            return\n        }\n\n        do {\n            let decoder = JSONDecoder()\n            let objects = try decoder.decode([CustomObject].self, from: data)\n            completion(objects)\n        } catch {\n            completion(nil)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a custom UIView with rounded corners and a shadow to a given parent view",
      "input": "",
      "output": "import UIKit\n\nfunc addRoundedShadowView(to parentView: UIView, backgroundColor: UIColor = .white) {\n    let shadowView = UIView(frame: parentView.bounds)\n    shadowView.backgroundColor = .clear\n    parentView.addSubview(shadowView)\n\n    let contentView = UIView(frame: parentView.bounds)\n    contentView.backgroundColor = backgroundColor\n    contentView.layer.cornerRadius = 10\n    contentView.layer.masksToBounds = true\n    shadowView.addSubview(contentView)\n\n    shadowView.layer.shadowColor = UIColor.black.cgColor\n    shadowView.layer.shadowOffset = CGSize(width: 0, height: 2)\n    shadowView.layer.shadowOpacity = 0.1\n    shadowView.layer.shadowRadius = 4\n    shadowView.layer.masksToBounds = false\n    shadowView.layer.shadowPath = UIBezierPath(roundedRect: contentView.bounds, cornerRadius: contentView.layer.cornerRadius).cgPath\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a UIImage and compresses it to a given size in kilobytes",
      "input": "",
      "output": "import UIKit\n\nfunc compressImage(_ image: UIImage, to sizeInKB: Int) -> Data? {\n    let sizeInBytes = sizeInKB * 1024\n    let data = image.jpegData(compressionQuality: 1.0)\n    \n    guard var imageData = data, imageData.count > sizeInBytes else {\n        return data\n    }\n\n    var compression: CGFloat = 0.9\n    let minCompression: CGFloat = 0.1\n    while imageData.count > sizeInBytes && compression > minCompression {\n        compression -= 0.1\n        guard let compressedData = image.jpegData(compressionQuality: compression) else { break }\n        imageData = compressedData\n    }\n    \n    return imageData\n}"
    },
    {
      "instruction": " \nWrite a Swift function that asynchronously downloads an image from a given URL and sets it as the image of a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc setImage(from url: URL, to imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else { return }\n        \n        DispatchQueue.main.async {\n            imageView.image = UIImage(data: data)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates a UIButton to indicate a loading state",
      "input": "",
      "output": "import UIKit\n\nfunc setLoadingState(for button: UIButton, isLoading: Bool, activityIndicatorStyle: UIActivityIndicatorView.Style = .medium) {\n    let tag = 10001\n    \n    if isLoading {\n        let activityIndicator = UIActivityIndicatorView(style: activityIndicatorStyle)\n        activityIndicator.tag = tag\n        activityIndicator.center = CGPoint(x: button.bounds.midX, y: button.bounds.midY)\n        activityIndicator.startAnimating()\n        \n        button.setTitleColor(.clear, for: .normal)\n        button.isUserInteractionEnabled = false\n        button.addSubview(activityIndicator)\n    } else {\n        if let activityIndicator = button.viewWithTag(tag) as? UIActivityIndicatorView {\n            activityIndicator.removeFromSuperview()\n            button.setTitleColor(.systemBlue, for: .normal)\n            button.isUserInteractionEnabled = true\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that plays a video from a given URL in a given UIView using AVPlayer",
      "input": "",
      "output": "import AVFoundation\nimport UIKit\n\nfunc playVideo(from url: URL, in view: UIView) {\n    let player = AVPlayer(url: url)\n    let playerLayer = AVPlayerLayer(player: player)\n    playerLayer.frame = view.bounds\n    view.layer.addSublayer(playerLayer)\n    player.play()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UICollectionViewCell with a circular image view and label",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFill\n        imageView.layer.masksToBounds = true\n        imageView.layer.cornerRadius = 50\n        return imageView\n    }()\n    \n    let label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textColor = .black\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        contentView.addSubview(imageView)\n        contentView.addSubview(label)\n        \n        NSLayoutConstraint.activate([\n            imageView.centerXAnchor.constraint(equalTo: contentView.centerXAnchor),\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.widthAnchor.constraint(equalToConstant: 100),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n            \n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n            label.centerXAnchor.constraint(equalTo: contentView.centerXAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that presents a UIAlertController with a title, message, and array of UIAlertAction objects",
      "input": "",
      "output": "import UIKit\n\nfunc showAlertController(with title: String, message: String, actions: [UIAlertAction], from viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    for action in actions {\n        alertController.addAction(action)\n    }\n    \n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": "Create a Swift function that retrieves data from a remote API and decodes it into a custom Swift structure using Codable.",
      "input": "",
      "output": "import Foundation\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let email: String\n}\n\nfunc fetchUsers(completion: @escaping (Result<[User], Error>) -> Void) {\n    let urlString = \"https://jsonplaceholder.typicode.com/users\"\n    \n    guard let url = URL(string: urlString) else {\n        completion(.failure(NSError(domain: \"Invalid URL\", code: -1, userInfo: nil)))\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data received\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let decoder = JSONDecoder()\n            let users = try decoder.decode([User].self, from: data)\n            completion(.success(users))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    \n    task.resume()\n}\n\nfetchUsers { result in\n    switch result {\n    case .success(let users):\n        print(users)\n    case .failure(let error):\n        print(\"Error: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function that takes an UIImage as input and returns a resized version of the image with a specified width and height.",
      "input": "",
      "output": "import UIKit\n\nfunc resizeImage(image: UIImage, width: CGFloat, height: CGFloat) -> UIImage? {\n    let size = CGSize(width: width, height: height)\n    UIGraphicsBeginImageContextWithOptions(size, false, 0.0)\n    image.draw(in: CGRect(origin: .zero, size: size))\n    let resizedImage = UIGraphicsGetImageFromCurrentImageContext()\n    UIGraphicsEndImageContext()\n    return resizedImage\n}\n\nlet originalImage = UIImage(named: \"example.jpg\")\nif let resizedImage = resizeImage(image: originalImage!, width: 100, height: 100) {\n    print(\"Resized image: \\(resizedImage)\")\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UITableViewCell with a UILabel and UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    \n    private lazy var titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    private lazy var iconImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupView()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupView() {\n        addSubview(titleLabel)\n        addSubview(iconImageView)\n        \n        NSLayoutConstraint.activate([\n            iconImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 8),\n            iconImageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            iconImageView.widthAnchor.constraint(equalToConstant: 40),\n            iconImageView.heightAnchor.constraint(equalToConstant: 40),\n            \n            titleLabel.leadingAnchor.constraint(equalTo: iconImageView.trailingAnchor, constant: 8),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -8),\n            titleLabel.centerYAnchor.constraint(equalTo: centerYAnchor),\n        ])\n    }\n    \n    func configure(title: String, image: UIImage) {\n        titleLabel.text = title\n        iconImageView.image = image\n    }\n    \n}"
    },
    {
      "instruction": "Create a custom table view cell with an image view, title label, and subtitle label using Auto Layout programmatically.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    let subtitleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        contentView.addSubview(imageView)\n        contentView.addSubview(titleLabel)\n        contentView.addSubview(subtitleLabel)\n        \n        NSLayoutConstraint.activate([\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 8),\n            imageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            imageView.widthAnchor.constraint(equalToConstant: 40),\n            imageView.heightAnchor.constraint(equalToConstant: 40),\n            \n            titleLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: imageView.trailingAnchor, constant: 8),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -8),\n            \n            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 4),\n            subtitleLabel.leadingAnchor.constraint(equalTo: imageView.trailingAnchor, constant: 8),\n            subtitleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -8),\n            subtitleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that asynchronously downloads an image from a URL and updates a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil, let image = UIImage(data: data) else {\n            completion(nil)\n            return\n        }\n        completion(image)\n    }.resume()\n}\n\nfunc updateImageView(imageView: UIImageView, with url: URL) {\n    downloadImage(from: url) { image in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that shows an action sheet with a list of options and handles the user's selection.",
      "input": "",
      "output": "import UIKit\n\nfunc presentActionSheet(from viewController: UIViewController, options: [String], completionHandler: @escaping (Int) -> Void) {\n    let actionSheet = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)\n    \n    for (index, option) in options.enumerated() {\n        let action = UIAlertAction(title: option, style: .default) { _ in\n            completionHandler(index)\n        }\n        actionSheet.addAction(action)\n    }\n    \n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n    actionSheet.addAction(cancelAction)\n    \n    viewController.present(actionSheet, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nCreate a Swift class that represents a network service for fetching data from a RESTful API using URLSession.",
      "input": "",
      "output": "import Foundation\n\nclass NetworkService {\n    private let session: URLSession\n    \n    init(session: URLSession = URLSession.shared) {\n        self.session = session\n    }\n    \n    func fetchData<T: Decodable>(from url: URL, completion: @escaping (Result<T, Error>) -> Void) {\n        let task = session.dataTask(with: url) { data, response, error in\n            if let error = error {\n                completion(.failure(error))\n                return\n            }\n            \n            guard let data = data else {\n                completion(.failure(NSError(domain: \"No data\", code: -1, userInfo: nil)))\n                return\n            }\n            \n            do {\n                let decodedData = try JSONDecoder().decode(T.self, from: data)\n                completion(.success(decodedData))\n            } catch {\n                completion(.failure(error))\n            }\n        }\n        task.resume()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that adds a child view controller to a container view controller, handling the view and constraints.",
      "input": "",
      "output": "import UIKit\n\nfunc addChildViewController(parent: UIViewController, child: UIViewController, containerView: UIView) {\n    parent.addChild(child)\n    containerView.addSubview(child.view)\n    child.view.translatesAutoresizingMaskIntoConstraints = false\n    \n    NSLayoutConstraint.activate([\n        child.view.leadingAnchor.constraint(equalTo: containerView.leadingAnchor),\n        child.view.trailingAnchor.constraint(equalTo: containerView.trailingAnchor),\n        child.view.topAnchor.constraint(equalTo: containerView.topAnchor),\n        child.view.bottomAnchor.constraint(equalTo: containerView.bottomAnchor)\n    ])\n    \n    child.didMove(toParent: parent)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sets up a UICollectionView with a custom flow layout, and registers a cell class for use.",
      "input": "",
      "output": "import UIKit\n\nfunc setupCollectionView(layout: UICollectionViewFlowLayout, cellClass: AnyClass, reuseIdentifier: String) -> UICollectionView {\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    collectionView.register(cellClass, forCellWithReuseIdentifier: reuseIdentifier)\n    return collectionView\n}"
    },
    {
      "instruction": " \nWrite a Swift extension for UIViewController that presents an alert with a specified title, message, and action.",
      "input": "",
      "output": "import UIKit\n\nextension UIViewController {\n    func presentAlert(title: String, message: String, actionTitle: String) {\n        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n        let action = UIAlertAction(title: actionTitle, style: .default, handler: nil)\n        alertController.addAction(action)\n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a UIImage and compresses it to a specified size while maintaining aspect ratio.",
      "input": "",
      "output": "import UIKit\n\nfunc compressImage(_ image: UIImage, toSize size: CGSize) -> UIImage? {\n    let aspectRatio = image.size.width / image.size.height\n    var newSize = size\n    \n    if aspectRatio > 1 {\n        newSize.height = size.width / aspectRatio\n    } else {\n        newSize.width = size.height * aspectRatio\n    }\n    \n    UIGraphicsBeginImageContextWithOptions(newSize, false, 0.0)\n    image.draw(in: CGRect(origin: .zero, size: newSize))\n    let compressedImage = UIGraphicsGetImageFromCurrentImageContext()\n    UIGraphicsEndImageContext()\n    \n    return compressedImage\n}"
    },
    {
      "instruction": "Write a Swift function to display an alert with a title, message, and a button to close the alert in a UIViewController",
      "input": "",
      "output": "func showAlert(title: String, message: String, viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let closeButton = UIAlertAction(title: \"Close\", style: .default, handler: nil)\n    alertController.addAction(closeButton)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIButton with a specified title, font size, and background color",
      "input": "",
      "output": "func createCustomButton(title: String, fontSize: CGFloat, backgroundColor: UIColor) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.titleLabel?.font = UIFont.systemFont(ofSize: fontSize)\n    button.backgroundColor = backgroundColor\n    button.titleLabel?.textColor = .white\n    return button\n}"
    },
    {
      "instruction": " \nWrite a Swift function to programmatically create a table view and assign it to a view controller",
      "input": "",
      "output": "func createTableView(viewController: UIViewController, dataSource: UITableViewDataSource & UITableViewDelegate) -> UITableView {\n    let tableView = UITableView()\n    tableView.translatesAutoresizingMaskIntoConstraints = false\n    viewController.view.addSubview(tableView)\n    \n    NSLayoutConstraint.activate([\n        tableView.leadingAnchor.constraint(equalTo: viewController.view.leadingAnchor),\n        tableView.trailingAnchor.constraint(equalTo: viewController.view.trailingAnchor),\n        tableView.topAnchor.constraint(equalTo: viewController.view.topAnchor),\n        tableView.bottomAnchor.constraint(equalTo: viewController.view.bottomAnchor)\n    ])\n    \n    tableView.dataSource = dataSource\n    tableView.delegate = dataSource\n    return tableView\n}"
    },
    {
      "instruction": " \nWrite a Swift function to register a cell for a UICollectionView and dequeue it",
      "input": "",
      "output": "func registerAndDequeueReusableCell<T: UICollectionViewCell>(collectionView: UICollectionView, cellType: T.Type, reuseIdentifier: String, indexPath: IndexPath) -> T {\n    collectionView.register(cellType, forCellWithReuseIdentifier: reuseIdentifier)\n    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! T\n    return cell\n}"
    },
    {
      "instruction": " \nWrite a Swift function to convert a JSON string to a Swift Dictionary",
      "input": "",
      "output": "func convertJSONStringToDictionary(jsonString: String) -> [String: Any]? {\n    guard let jsonData = jsonString.data(using: .utf8) else { return nil }\n    do {\n        let jsonObject = try JSONSerialization.jsonObject(with: jsonData, options: [])\n        return jsonObject as? [String: Any]\n    } catch {\n        print(\"Error converting JSON string to dictionary: \\(error.localizedDescription)\")\n        return nil\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to download an image from a URL and set it as the UIImage of a UIImageView",
      "input": "",
      "output": "func downloadImage(url: URL, imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            print(\"Error downloading image: \\(error?.localizedDescription ?? \"No error description\")\")\n            return\n        }\n        \n        DispatchQueue.main.async {\n            imageView.image = UIImage(data: data)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIPickerView and assign it as input view for a UITextField",
      "input": "",
      "output": "func createPickerView(textField: UITextField, dataSource: UIPickerViewDataSource & UIPickerViewDelegate) -> UIPickerView {\n    let pickerView = UIPickerView()\n    pickerView.dataSource = dataSource\n    pickerView.delegate = dataSource\n    textField.inputView = pickerView\n    return pickerView\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UICollectionViewCell with an imageView and a label",
      "input": "",
      "output": "class CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView = {\n        let imgView = UIImageView()\n        imgView.translatesAutoresizingMaskIntoConstraints = false\n        return imgView\n    }()\n    \n    let label: UILabel = {\n        let lbl = UILabel()\n        lbl.translatesAutoresizingMaskIntoConstraints = false\n        return lbl\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        addSubview(imageView)\n        addSubview(label)\n        \n        NSLayoutConstraint.activate([\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.bottomAnchor.constraint(equalTo: label.topAnchor),\n            \n            label.leadingAnchor.constraint(equalTo: leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: trailingAnchor),\n            label.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nGenerate a Swift function that fetches JSON data using a given URL and decodes it to a specified type.",
      "input": "",
      "output": "import Foundation\n\nfunc fetchJSONData<T: Decodable>(urlString: String, completion: @escaping (Result<T, Error>) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(.failure(NSError(domain: \"Invalid URL\", code: 0, userInfo: nil)))\n        return\n    }\n    \n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(.failure(error))\n        } else if let data = data {\n            do {\n                let decodedData = try JSONDecoder().decode(T.self, from: data)\n                completion(.success(decodedData))\n            } catch {\n                completion(.failure(error))\n            }\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nGenerate a Swift function that animates a UIView to fade in and out using a specified duration.",
      "input": "",
      "output": "import UIKit\n\nfunc fadeInOutAnimation(view: UIView, duration: TimeInterval) {\n    UIView.animate(withDuration: duration, animations: {\n        view.alpha = 0.0\n    }) { _ in\n        UIView.animate(withDuration: duration) {\n            view.alpha = 1.0\n        }\n    }\n}"
    },
    {
      "instruction": " \nGenerate a Swift function that takes a UITableView and a UITableViewCell identifier, then dequeues and returns a UITableViewCell.",
      "input": "",
      "output": "import UIKit\n\nfunc dequeueReusableCell(tableView: UITableView, identifier: String) -> UITableViewCell {\n    return tableView.dequeueReusableCell(withIdentifier: identifier) ?? UITableViewCell(style: .default, reuseIdentifier: identifier)\n}"
    },
    {
      "instruction": "Write a Swift function that captures an image using the device's camera and displays it in a UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController, UIImagePickerControllerDelegate & UINavigationControllerDelegate {\n    \n    private lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFit\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(imageView)\n        setupConstraints()\n        \n        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(captureImage))\n        view.addGestureRecognizer(tapGestureRecognizer)\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            imageView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            imageView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            imageView.widthAnchor.constraint(equalToConstant: 200),\n            imageView.heightAnchor.constraint(equalToConstant: 200)\n        ])\n    }\n    \n    @objc func captureImage() {\n        let imagePickerController = UIImagePickerController()\n        imagePickerController.delegate = self\n        imagePickerController.sourceType = .camera\n        present(imagePickerController, animated: true, completion: nil)\n    }\n    \n    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey: Any]) {\n        if let image = info[.originalImage] as? UIImage {\n            imageView.image = image\n        }\n        dismiss(animated: true, completion: nil)\n    }\n    \n    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {\n        dismiss(animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that uses CoreLocation to get the user's current location and prints the latitude and longitude",
      "input": "",
      "output": "import CoreLocation\nimport UIKit\n\nclass ViewController: UIViewController, CLLocationManagerDelegate {\n    \n    private let locationManager = CLLocationManager()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            print(\"Latitude: \\(location.coordinate.latitude), Longitude: \\(location.coordinate.longitude)\")\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that fetches JSON data from an API and decodes it into a custom Swift struct using Codable",
      "input": "",
      "output": "import UIKit\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let username: String\n    let email: String\n}\n\nclass ViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        fetchData()\n    }\n    \n    func fetchData() {\n        let urlString = \"https://jsonplaceholder.typicode.com/users\"\n        \n        guard let url = URL(string: urlString) else { return }\n        \n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let error = error {\n                print(\"Error: \\(error.localizedDescription)\")\n                return\n            }\n            \n            guard let data = data else { return }\n            \n            do {\n                let users = try JSONDecoder().decode([User].self, from: data)\n                print(users)\n            } catch {\n                print(\"Error: \\(error.localizedDescription)\")\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that plays an audio file using AVFoundation",
      "input": "",
      "output": "import AVFoundation\nimport UIKit\n\nclass ViewController: UIViewController {\n    \n    private var audioPlayer: AVAudioPlayer?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupAudioPlayer()\n    }\n    \n    func setupAudioPlayer() {\n        if let audioURL = Bundle.main.url(forResource: \"example\", withExtension: \"mp3\") {\n            do {\n                audioPlayer = try AVAudioPlayer(contentsOf: audioURL)\n            } catch {\n                print(\"Error: \\(error.localizedDescription)\")\n            }\n        }\n    }\n    \n    func playAudio() {\n        audioPlayer?.play()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that implements a simple table view displaying a list of strings",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    \n    private let items = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\"]\n    \n    private lazy var tableView: UITableView = {\n        let tableView = UITableView()\n        tableView.translatesAutoresizingMaskIntoConstraints = false\n        tableView.dataSource = self\n        tableView.delegate = self\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"Cell\")\n        return tableView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(tableView)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            tableView.topAnchor.constraint(equalTo: view.topAnchor),\n            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\n        cell.textLabel?.text = items[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates the movement of a UIView from one position to another",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    private lazy var movingView: UIView = {\n        let view = UIView(frame: CGRect(x: 0, y: 0, width: 50, height: 50))\n        view.backgroundColor = .red\n        return view\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(movingView)\n        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(animateView))\n        view.addGestureRecognizer(tapGestureRecognizer)\n    }\n    \n    @objc func animateView() {\n        UIView.animate(withDuration: 1.0, animations: {\n            self.movingView.center = CGPoint(x: self.view.bounds.width - 50, y: self.view.bounds.height - 50)\n        })\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that uses Core Motion to detect device orientation changes and updates a label",
      "input": "",
      "output": "import CoreMotion\nimport UIKit\n\nclass ViewController: UIViewController {\n    \n    private let motionManager = CMMotionManager()\n    \n    private lazy var orientationLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textAlignment = .center\n        return label\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(orientationLabel)\n        setupConstraints()\n        startDeviceMotionUpdates()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            orientationLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            orientationLabel.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n    \n    func startDeviceMotionUpdates() {\n        if motionManager.isDeviceMotionAvailable {\n            motionManager.deviceMotionUpdateInterval = 0.1\n            motionManager.startDeviceMotionUpdates(to: .main) { [weak self] (deviceMotion, error) in\n                if let attitude = deviceMotion?.attitude {\n                    self?.updateLabel(attitude: attitude)\n                }\n            }\n        }\n    }\n    \n    func updateLabel(attitude: CMAttitude) {\n        let pitch = attitude.pitch * 180 / Double.pi\n        let roll = attitude.roll * 180 / Double.pi\n        let yaw = attitude.yaw * 180 / Double.pi\n\n        orientationLabel.text = \"Pitch: \\(Int(pitch))°\\nRoll: \\(Int(roll))°\\nYaw: \\(Int(yaw))°\"\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UICollectionViewCell with an image and a label",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    \n    private lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n    \n    private lazy var titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textAlignment = .center\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        addSubview(imageView)\n        addSubview(titleLabel)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n            \n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n    \n    func configure(image: UIImage, title: String) {\n        imageView.image = image\n        titleLabel.text"
    },
    {
      "instruction": "Write a Swift function that sets up a UITableView with a custom UITableViewCell, registers the cell, and returns the table view",
      "input": "",
      "output": "import UIKit\n\nfunc setupTableViewWithCustomCell<T: UITableViewCell>(cellClass: T.Type, identifier: String) -> UITableView {\n    let tableView = UITableView()\n    tableView.register(cellClass, forCellReuseIdentifier: identifier)\n    return tableView\n}"
    },
    {
      "instruction": "Write a Swift function that fetches JSON data from a URL using URLSession, decodes it into a model, and returns the result in a completion handler",
      "input": "",
      "output": "import Foundation\n\nfunc fetchJSONData<T: Decodable>(url: URL, model: T.Type, completion: @escaping (Result<T, Error>) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let decodedData = try JSONDecoder().decode(model, from: data)\n            completion(.success(decodedData))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": "Write a Swift function that creates a custom UIButton with a specified title, background color, and corner radius",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomButton(title: String, backgroundColor: UIColor, cornerRadius: CGFloat) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.backgroundColor = backgroundColor\n    button.layer.cornerRadius = cornerRadius\n    return button\n}"
    },
    {
      "instruction": "Write a Swift function that sets up a UICollectionView with a custom UICollectionViewCell, registers the cell, and returns the collection view",
      "input": "",
      "output": "import UIKit\n\nfunc setupCollectionViewWithCustomCell<T: UICollectionViewCell>(cellClass: T.Type, identifier: String, layout: UICollectionViewLayout) -> UICollectionView {\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.register(cellClass, forCellWithReuseIdentifier: identifier)\n    return collectionView\n}"
    },
    {
      "instruction": "Write a Swift function that presents a UIAlertController with a specified title, message, and action handler for a single UIAlertAction",
      "input": "",
      "output": "import UIKit\n\nfunc presentAlertController(title: String, message: String, actionTitle: String, actionHandler: @escaping (UIAlertAction) -> Void, on viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: actionTitle, style: .default, handler: actionHandler)\n    alertController.addAction(action)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": "Write a Swift function that generates a UIActivityIndicatorView with a specified style and color, and adds it to a view",
      "input": "",
      "output": "import UIKit\n\nfunc createAndAddActivityIndicatorView(style: UIActivityIndicatorView.Style, color: UIColor, to view: UIView) -> UIActivityIndicatorView {\n    let activityIndicator = UIActivityIndicatorView(style: style)\n    activityIndicator.color = color\n    activityIndicator.translatesAutoresizingMaskIntoConstraints = false\n    view.addSubview(activityIndicator)\n    NSLayoutConstraint.activate([\n        activityIndicator.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n        activityIndicator.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n    ])\n    return activityIndicator\n}"
    },
    {
      "instruction": "Write a Swift function that sets up a UIStackView with an array of UIViews, specified axis, alignment, distribution, and spacing",
      "input": "",
      "output": "import UIKit\n\nfunc setupStackView(with views: [UIView], axis: NSLayoutConstraint.Axis, alignment: UIStackView.Alignment, distribution: UIStackView.Distribution, spacing: CGFloat) -> UIStackView {\n    let stackView = UIStackView(arrangedSubviews: views)\n    stackView.axis = axis\n    stackView.alignment = alignment\n    stackView.distribution = distribution\n    stackView.spacing = spacing\n    return stackView\n}"
    },
    {
      "instruction": "Write a Swift function that saves an image to the Photo Library with a completion handler",
      "input": "",
      "output": "import Photos\n\nfunc saveImageToPhotoLibrary(image: UIImage, completion: @escaping (Result<PHAsset, Error>) -> Void) {\n    PHPhotoLibrary.shared().performChanges({\n        let creationRequest = PHAssetCreationRequest.forAsset()\n        creationRequest.addResource(with: .photo,data: image.pngData()!, options: nil)\n    }) { success, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard success else {\n            completion(.failure(NSError(domain: \"Image saving failed\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        let fetchOptions = PHFetchOptions()\n        fetchOptions.sortDescriptors = [NSSortDescriptor(key: \"creationDate\", ascending: false)]\n        fetchOptions.fetchLimit = 1\n        \n        let fetchedAssets = PHAsset.fetchAssets(with: .image, options: fetchOptions)\n        \n        guard let asset = fetchedAssets.firstObject else {\n            completion(.failure(NSError(domain: \"Image not found\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        completion(.success(asset))\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that captures a screenshot of a UIView and returns a UIImage.",
      "input": "",
      "output": "import UIKit\n\nfunc captureScreenshot(of view: UIView) -> UIImage? {\n    UIGraphicsBeginImageContextWithOptions(view.bounds.size, false, UIScreen.main.scale)\n    guard let context = UIGraphicsGetCurrentContext() else { return nil }\n    view.layer.render(in: context)\n    let image = UIGraphicsGetImageFromCurrentImageContext()\n    UIGraphicsEndImageContext()\n    return image\n}"
    },
    {
      "instruction": " \nImplement a Swift function that filters a UITableView based on a search query using UISearchController.",
      "input": "",
      "output": "import UIKit\n\nclass FilteredTableViewController: UITableViewController, UISearchResultsUpdating {\n    var allItems: [String] = []\n    var filteredItems: [String] = []\n    let searchController = UISearchController(searchResultsController: nil)\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupSearchController()\n    }\n\n    func setupSearchController() {\n        searchController.searchResultsUpdater = self\n        searchController.obscuresBackgroundDuringPresentation = false\n        searchController.searchBar.placeholder = \"Search items\"\n        navigationItem.searchController = searchController\n        definesPresentationContext = true\n    }\n\n    func updateSearchResults(for searchController: UISearchController) {\n        let searchText = searchController.searchBar.text ?? \"\"\n        filteredItems = allItems.filter { item in\n            item.lowercased().contains(searchText.lowercased())\n        }\n        tableView.reloadData()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sends a POST request with JSON data and handles the response.",
      "input": "",
      "output": "import Foundation\n\nfunc sendJSONRequest(url: String, json: [String: Any], completionHandler: @escaping (Result<Data, Error>) -> Void) {\n    guard let url = URL(string: url) else {\n        completionHandler(.failure(URLError(.badURL)))\n        return\n    }\n\n    var request = URLRequest(url: url)\n    request.httpMethod = \"POST\"\n    request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n\n    do {\n        request.httpBody = try JSONSerialization.data(withJSONObject: json)\n    } catch {\n        completionHandler(.failure(error))\n        return\n    }\n\n    let task = URLSession.shared.dataTask(with: request) { data, response, error in\n        if let error = error {\n            completionHandler(.failure(error))\n            return\n        }\n\n        guard let data = data else {\n            completionHandler(.failure(URLError(.badServerResponse)))\n            return\n        }\n\n        completionHandler(.success(data))\n    }\n\n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that asynchronously downloads an image from a URL and updates a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: String, completion: @escaping (UIImage?) -> Void) {\n    guard let url = URL(string: url) else {\n        completion(nil)\n        return\n    }\n\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let data = data, let image = UIImage(data: data) {\n            DispatchQueue.main.async {\n                completion(image)\n            }\n        } else {\n            completion(nil)\n        }\n    }\n\n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates a UIButton when pressed.",
      "input": "",
      "output": "import UIKit\n\nfunc animateButtonPress(_ button: UIButton, completion: @escaping () -> Void) {\n    UIView.animate(withDuration: 0.1, animations: {\n        button.transform = CGAffineTransform(scaleX: 0.9, y: 0.9)\n    }, completion: { _ in\n        UIView.animate(withDuration: 0.1, animations: {\n            button.transform = CGAffineTransform.identity\n        }, completion: { _ in\n            completion()\n        })\n    })\n}"
    },
    {
      "instruction": " \nWrite a Swift function that checks if the device has access to the camera and requests permission if needed.",
      "input": "",
      "output": "import AVFoundation\n\nfunc checkCameraAccess(completion: @escaping (Bool) -> Void) {\n    switch AVCaptureDevice.authorizationStatus(for: .video) {\n    case .authorized:\n        completion(true)\n    case .notDetermined:\n        AVCaptureDevice.requestAccess(for: .video) { granted in\n            completion(granted)\n        }\n    default:\n        completion(false)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a UIAlertController with a text field and a submit button.",
      "input": "",
      "output": "import UIKit\n\nfunc createPromptAlertController(title: String, message: String, onSubmit: @escaping (String) -> Void) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    alertController.addTextField()\n\n    let submitAction = UIAlertAction(title:\"Submit\", style: .default) { _ in\n        if let text = alertController.textFields?.first?.text {\n            onSubmit(text)\n        }\n    }\n    alertController.addAction(submitAction)\n\n    return alertController\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sets up a UIStackView with a specified distribution, alignment, and spacing.",
      "input": "",
      "output": "import UIKit\n\nfunc setupStackView(stackView: UIStackView, distribution: UIStackView.Distribution, alignment: UIStackView.Alignment, spacing: CGFloat) {\n    stackView.distribution = distribution\n    stackView.alignment = alignment\n    stackView.spacing = spacing\n}"
    },
    {
      "instruction": "Create a Swift function that takes a JSON string as input and decodes it into a custom Swift object, then pretty prints its properties.",
      "input": "json\n{\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}",
      "output": "import Foundation\n\nstruct Person: Codable {\n    let firstName: String\n    let lastName: String\n    let age: Int\n    let city: String\n}\n\nfunc decodeJSON(jsonString: String) -> Person? {\n    let jsonData = jsonString.data(using: .utf8)!\n    let decoder = JSONDecoder()\n    \n    do {\n        return try decoder.decode(Person.self, from: jsonData)\n    } catch {\n        print(\"Error decoding JSON: \\(error)\")\n        return nil\n    }\n}\n\nfunc prettyPrint(person: Person) {\n    print(\"First Name: \\(person.firstName)\")\n    print(\"Last Name: \\(person.lastName)\")\n    print(\"Age: \\(person.age)\")\n    print(\"City: \\(person.city)\")\n}\n\nlet jsonString = \"\"\"\n{\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}\n\"\"\"\n\nif let person = decodeJSON(jsonString: jsonString) {\n    prettyPrint(person: person)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that retrieves the current device's battery level and prints a message based on its percentage.",
      "input": "",
      "output": "import UIKit\n\nfunc checkBatteryLevel() {\n    UIDevice.current.isBatteryMonitoringEnabled = true\n    let batteryLevel = UIDevice.current.batteryLevel\n\n    switch batteryLevel {\n    case 0...0.2:\n        print(\"Battery is very low. Please charge your device.\")\n    case 0.21...0.5:\n        print(\"Battery is low. Consider charging soon.\")\n    case 0.51...0.8:\n        print(\"Battery is at a medium level.\")\n    case 0.81...1:\n        print(\"Battery is high. You're good to go!\")\n    default:\n        print(\"Battery level could not be determined.\")\n    }\n}\n\ncheckBatteryLevel()"
    },
    {
      "instruction": " \nWrite a Swift function that uses URLSession to make an HTTP GET request to a given URL and prints the response body.",
      "input": "",
      "output": "import Foundation\n\nfunc fetchURL(urlString: String) {\n    guard let url = URL(string: urlString) else {\n        print(\"Invalid URL\")\n        return\n    }\n\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            print(\"Error fetching data: \\(error)\")\n        } else if let data = data {\n            let responseBody = String(data: data, encoding: .utf8)\n            print(responseBody ?? \"No response body\")\n        }\n    }\n\n    task.resume()\n}\n\nfetchURL(urlString: \"https://jsonplaceholder.typicode.com/todos/1\")"
    },
    {
      "instruction": " \nCreate a Swift function that uses Core Location to request the user's location and print the latitude and longitude.",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    private let locationManager = CLLocationManager()\n\n    func requestLocation() {\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            print(\"Latitude: \\(location.coordinate.latitude), Longitude: \\(location.coordinate.longitude)\")\n            locationManager.stopUpdatingLocation()\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error requesting location: \\(error)\")\n    }\n}\n\nlet locationMgr = LocationManager()\nlocationMgr.requestLocation()"
    },
    {
      "instruction": " \nWrite a Swift function that uses a UIPickerView to display an array of strings, and print the selected string when the user makes a selection.",
      "input": "",
      "output": "import UIKit\n\nclass StringPickerViewController: UIViewController, UIPickerViewDelegate, UIPickerViewDataSource {\n    let pickerView = UIPickerView()\n    let strings = [\"Option 1\", \"Option 2\", \"Option 3\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        pickerView.delegate = self\n        pickerView.dataSource = self\n        view.addSubview(pickerView)\n    }\n\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return strings.count\n    }\n\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component:Int) -> String? {\n        return strings[row]\n    }\n\n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        print(\"Selected string: \\(strings[row])\")\n    }\n}\n\nlet viewController = StringPickerViewController()"
    },
    {
      "instruction": " \nWrite a Swift function that takes an image URL, downloads the image, and displays it in a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass ImageViewController: UIViewController {\n    let imageView = UIImageView()\n    let imageURL = \"https://example.com/image.jpg\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(imageView)\n        downloadImage(from: imageURL)\n    }\n\n    func downloadImage(from urlString: String) {\n        guard let url = URL(string: urlString) else {\n            print(\"Invalid URL\")\n            return\n        }\n\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            if let error = error {\n                print(\"Error downloading image: \\(error)\")\n            } else if let data = data {\n                DispatchQueue.main.async {\n                    self.imageView.image = UIImage(data: data)\n                }\n            }\n        }.resume()\n    }\n}\n\nlet imageViewController = ImageViewController()"
    },
    {
      "instruction": " \nWrite a Swift function that sends a push notification with a title and message when a button is tapped.",
      "input": "",
      "output": "import UserNotifications\nimport UIKit\n\nclass PushNotificationViewController: UIViewController {\n    let sendNotificationButton = UIButton()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        sendNotificationButton.addTarget(self, action: #selector(sendPushNotification), for: .touchUpInside)\n        view.addSubview(sendNotificationButton)\n    }\n\n    @objc func sendPushNotification() {\n        let content = UNMutableNotificationContent()\n        content.title = \"Sample Title\"\n        content.body = \"Sample Message\"\n\n        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)\n        let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)\n\n        UNUserNotificationCenter.current().add(request) { error in\n            if let error = error {\n                print(\"Error sending push notification: \\(error)\")\n            } else {\n                print(\"Push notification sent successfully\")\n            }\n        }\n    }\n}\n\nlet pushNotificationViewController = PushNotificationViewController()"
    },
    {
      "instruction": " \nWrite a Swift function that records audio using the device's microphone and saves the recording to a file.",
      "input": "",
      "output": "import AVFoundation\n\nclass AudioRecorder: NSObject, AVAudioRecorderDelegate {\n    var audioRecorder: AVAudioRecorder!\n\n    func startRecording() {\n        let recordingSession = AVAudioSession.sharedInstance()\n        try? recordingSession.setCategory(.record, mode: .default)\n\n        let settings = [\n            AVFormatIDKey: Int(kAudioFormatMPEG4AAC),\n            AVSampleRateKey: 12000,\n            AVNumberOfChannelsKey: 1,\n            AVEncoderAudioQualityKey: AVAudioQuality.high.rawValue\n        ]\n\n        let documentsPath = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)[0]\n        let audioFileURL = documentsPath.appendingPathComponent(\"recording.m4a\")\n\n        do {\n            audioRecorder = try AVAudioRecorder(url: audioFileURL, settings: settings)\n            audioRecorder.delegate = self\n            audioRecorder.record()\n            print(\"Recording started\")\n        } catch {\n            print(\"Error starting recording: \\(error)\")\n        }\n    }\n\n    func stopRecording() {\n        audioRecorder.stop()\n        print(\"Recording stopped\")\n    }\n\n    func audioRecorderDidFinishRecording(_ recorder: AVAudioRecorder, successfully flag: Bool) {\n        if flag {\n            print(\"Recording saved successfully\")\n        } else {\n            print(\"Recording failed to save\")\n        }\n    }\n}\n\nlet audioRecorder = AudioRecorder()\naudioRecorder.startRecording()"
    },
    {
      "instruction": "Implement a Swift function that downloads an image from a URL and sets it to a UIImageView in a UITableViewCell.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n}\n\nfunc setImage(from url: URL, forCell cell: CustomTableViewCell) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else { return }\n        \n        DispatchQueue.main.async {\n            let image = UIImage(data: data)\n            cell.imageView.image = image\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that retrieves a list of users from a REST API and decodes it into an array of User objects.",
      "input": "",
      "output": "import Foundation\n\nstruct User: Decodable {\n    let id: Int\n    let name: String\n    let email: String\n}\n\nfunc fetchUsers(completion: @escaping ([User]?) -> ()) {\n    let url = URL(string: \"https://api.example.com/users\")!\n\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            completion(nil)\n            return\n        }\n\n        do {\n            let users = try JSONDecoder().decode([User].self, from: data)\n            completion(users)\n        } catch {\n            completion(nil)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nImplement a Swift function that records audio using AVAudioRecorder and saves the recording to a specified file URL.",
      "input": "",
      "output": "import AVFoundation\n\nclass AudioRecorder: NSObject, AVAudioRecorderDelegate {\n    private var audioRecorder: AVAudioRecorder?\n\n    func startRecording(to fileURL: URL, completion: @escaping (Bool) -> ()) {\n        let settings: [String: Any] = [\n            AVFormatIDKey: Int(kAudioFormatMPEG4AAC),\n            AVSampleRateKey: 12000,\n            AVNumberOfChannelsKey: 1,\n            AVEncoderAudioQualityKey: AVAudioQuality.high.rawValue\n        ]\n\n        do {\n            audioRecorder = try AVAudioRecorder(url: fileURL, settings: settings)\n            audioRecorder?.delegate = self\n            audioRecorder?.prepareToRecord()\n            audioRecorder?.record()\n            completion(true)\n        } catch {\n            completion(false)\n        }\n    }\n\n    func stopRecording() {\n        audioRecorder?.stop()\n        audioRecorder = nil\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function that checks if a user's device is connected to the internet using Network.framework.",
      "input": "",
      "output": "import Network\n\nfunc isDeviceConnectedToInternet(completion: @escaping (Bool) -> Void) {\n    let monitor = NWPathMonitor()\n    monitor.pathUpdateHandler = { path in\n        if path.status == .satisfied {\n            completion(true)\n        } else {\n            completion(false)\n        }\n    }\n    let queue = DispatchQueue(label: \"Monitor\")\n    monitor.start(queue: queue)\n}"
    },
    {
      "instruction": " \nImplement a Swift function that animates the change of background color for a UIView to a specified color.",
      "input": "",
      "output": "import UIKit\n\nfunc animateBackgroundColorChange(for view: UIView, to color: UIColor, duration: TimeInterval) {\n    UIView.animate(withDuration: duration) {\n        view.backgroundColor = color\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sends a local notification with a specified title, body, and time interval.",
      "input": "",
      "output": "import UserNotifications\n\nfunc sendLocalNotification(withTitle title: String, body: String, timeInterval: TimeInterval) {\n    let content = UNMutableNotificationContent()\n    content.title = title\n    content.body = body\n\n    let trigger = UNTimeIntervalNotificationTrigger(timeInterval: timeInterval, repeats: false)\n    let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)\n\n    UNUserNotificationCenter.current().add(request) { (error) in\n        if let error = error {\n            print(\"Error sending notification: \\(error.localizedDescription)\")\n        }\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift function that reads a JSON file from the app bundle and decodes it into an array of objects.",
      "input": "",
      "output": "import Foundation\n\nstruct SomeObject: Decodable {\n    let id: Int\n    let name: String\n}\n\nfunc decodeJSONFile<T: Decodable>(named fileName: String, ofType type: T.Type, completion: (Result<T, Error>) -> Void) {\n    guard let url = Bundle.main.url(forResource: fileName, withExtension: \"json\") else {\n        completion(.failure(NSError(domain: \"File not found\", code: 404, userInfo: nil)))\n        return\n    }\n\n    do {\n        let data = try Data(contentsOf: url)\n        let decodedData = try JSONDecoder().decode(T.self, from: data)\n        completion(.success(decodedData))\n    } catch {\n        completion(.failure(error))\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that retrives the user's current location using CoreLocation and returns the latitude and longitude.",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n\n    func getCurrentLocation(completion: @escaping (CLLocationCoordinate2D?) -> Void) {\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n\n        if CLLocationManager.locationServicesEnabled() {\n            locationManager.startUpdatingLocation()\n            if let location = locationManager.location?.coordinate {\n                completion(location)\n            } else {\n                completion(nil)\n            }\n        } else {\n            completion(nil)\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        locationManager.stopUpdatingLocation()\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to download an image from a URL and display it in a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil, let image = UIImage(data: data) else {\n            completion(nil)\n            return\n        }\n        completion(image)\n    }\n    task.resume()\n}\n\nfunc displayImage(from url: URL, in imageView: UIImageView) {\n    downloadImage(from: url) { image in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UITableViewCell with a UILabel and a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    let iconImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        \n        contentView.addSubview(titleLabel)\n        contentView.addSubview(iconImageView)\n        \n        NSLayoutConstraint.activate([\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            titleLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            \n            iconImageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\n            iconImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            iconImageView.widthAnchor.constraint(equalToConstant: 40),\n            iconImageView.heightAnchor.constraint(equalToConstant: 40)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a UICollectionView with custom UICollectionViewCell.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UICollectionViewController, UICollectionViewDelegateFlowLayout {\n    private let reuseIdentifier = \"CustomCell\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: reuseIdentifier)\n        collectionView.backgroundColor = .white\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        cell.backgroundColor = .blue\n        return cell\n    }\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: 100, height: 100)\n    }\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIButton with rounded corners and a background color.",
      "input": "",
      "output": "import UIKit\n\nclass CustomButton: UIButton {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup()\n    }\n    \n    private func setup() {\n        layer.cornerRadius = 8\n        backgroundColor = .blue\n        setTitleColor(.white, for: .normal)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a simple login screen with email and password text fields, and a login button.",
      "input": "",
      "output": "import UIKit\n\nclass LoginViewController: UIViewController {\n    private let emailTextField: UITextField = {\n        let textField = UITextField()\n        textField.placeholder = \"Email\"\n        textField.translatesAutoresizingMaskIntoConstraints = false\n        return textField\n    }()\n    \n    private let passwordTextField: UITextField = {\n        let textField = UITextField()\n        textField.placeholder = \"Password\"\n        textField.translatesAutoresizingMaskIntoConstraints = false\n        textField.isSecureTextEntry = true\n        return textField\n    }()\n    \n    private let loginButton: UIButton = {\n        let button = UIButton(type: .system)\n        button.setTitle(\"Login\", for: .normal)\n        button.translatesAutoresizingMaskIntoConstraints = false\n        return button\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n        \n        view.addSubview(emailTextField)\n        view.addSubview(passwordTextField)\n        view.addSubview(loginButton)\n        \n        NSLayoutConstraint.activate([\n            emailTextField.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            emailTextField.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            emailTextField.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.75),\n            \n            passwordTextField.topAnchor.constraint(equalTo: emailTextField.bottomAnchor, constant: 16),\n            passwordTextField.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            passwordTextField.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.75),\n            \n            loginButton.topAnchor.constraint(equalTo: passwordTextField.bottomAnchor, constant: 16),\n            loginButton.centerXAnchor.constraint(equalTo: view.centerXAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UISlider with a minimum and maximum value, and a custom tint color.",
      "input": "",
      "output": "import UIKit\n\nclass CustomSlider: UISlider {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup()\n    }\n    \n    private func setup() {\n        minimumValue = 0\n        maximumValue = 100\n        minimumTrackTintColor = .blue\n        maximumTrackTintColor = .red\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIAlertController with a custom title, message, and action.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(controller: UIViewController, title: String, message: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n    \n    controller.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a UIPickerView with a custom data source and delegate.",
      "input": "",
      "output": "import UIKit\n\nclass CustomPickerViewController: UIViewController, UIPickerViewDataSource, UIPickerViewDelegate {\n    private let pickerView = UIPickerView()\n    \n    private let data = [\"Option 1\", \"Option 2\", \"Option 3\", \"Option 4\", \"Option 5\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n        \n        pickerView.dataSource = self\n        pickerView.delegate = self\n        \n        pickerView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(pickerView)\n        \n        NSLayoutConstraint.activate([\n            pickerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            pickerView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n    \n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return data.count\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return data[row]\n    }\n}"
    },
    {
      "instruction": "Create a custom UICollectionViewCell with an UIImageView and a UILabel inside",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n    \n    private let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    private let titleLabel: UILabel = {\n        let label = UILabel()\n        label.font = UIFont.systemFont(ofSize: 14)\n        label.textColor = .black\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(imageView)\n        contentView.addSubview(titleLabel)\n        setupConstraints()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n            \n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n    \n    func configure(with image: UIImage, title: String) {\n        imageView.image = image\n        titleLabel.text = title\n    }\n}"
    },
    {
      "instruction": " \n \nCreate a custom UIViewController with a UITableView that uses a custom UITableViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewController: UIViewController {\n    private var tableView: UITableView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        tableView = UITableView(frame: view.bounds, style: .plain)\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: CustomTableViewCell.reuseIdentifier)\n        tableView.delegate = self\n        tableView.dataSource = self\n        view.addSubview(tableView)\n    }\n}\n\n// MARK: - UITableViewDelegate\nextension CustomTableViewController: UITableViewDelegate {\n    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {\n        return 80\n    }\n}\n\n// MARK: - UITableViewDataSource\nextension CustomTableViewController: UITableViewDataSource {\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 10\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        guard let cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.reuseIdentifier, for: indexPath) as? CustomTableViewCell else {\n            return UITableViewCell()\n        }\n        \n        cell.configure(with: \"Custom Cell: \\(indexPath.row)\")\n        return cell\n    }\n}"
    },
    {
      "instruction": " \n \nCreate a Swift class to manage API calls and perform a GET request to fetch data",
      "input": "",
      "output": "import Foundation\n\nclass APIService {\n    static let shared = APIService()\n    private let baseURL = \"https://api.example.com\"\n\n    func fetchData(completion: @escaping (Result<[String], Error>) -> Void) {\n        let url = URL(string: \"\\(baseURL)/data\")!\n        \n        let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let error = error {\n                completion(.failure(error))\n                return\n            }\n            \n            guard let data = data else {\n                let error = NSError(domain: \"\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"Data not found\"])\n                completion(.failure(error))\n                return\n            }\n            \n            do {\n                let items = try JSONDecoder().decode([String].self, from: data)\n                completion(.success(items))\n            } catch {\n                completion(.failure(error))\n            }\n        }\n        task.resume()\n    }\n}"
    },
    {
      "instruction": " \n \nCreate a SwiftUI View with a TextField SwiftUI component and a Button that prints the text entered",
      "input": "",
      "output": "import SwiftUI\n\nstruct ContentView: View {\n    @State private var inputText: String = \"\"\n    \n    var body: some View {\n        VStack {\n            TextField(\"Enter text here\", text: $inputText)\n                .padding()\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n            \n            Button(action: {\n                print(\"Entered text: \\(inputText)\")\n            }) {\n                Text(\"Submit\")\n            }\n            .padding()\n        }\n    }\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n}"
    },
    {
      "instruction": " \n \nCreate a custom UIView with a progress bar (UIProgressView) and a label to display the percentage",
      "input": "",
      "output": "import UIKit\n\nclass ProgressView: UIView {\n    private let progressView: UIProgressView = {\n        let progressView = UIProgressView(progressViewStyle: .default)\n        progressView.translatesAutoresizingMaskIntoConstraints = false\n        return progressView\n    }()\n    \n    private let percentageLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textColor = .black\n        return label\n    }()\n    \n    init() {\n        super.init(frame: .zero)\n        setupView()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupView() {\n        addSubview(progressView)\n        addSubview(percentageLabel)\n        \n        NSLayoutConstraint.activate([\n            progressView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            progressView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            progressView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            \n            percentageLabel.centerXAnchor.constraint(equalTo: centerXAnchor),\n            percentageLabel.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n    \n    func setProgress(progress: Float) {\n        progressView.progress = progress\n        percentageLabel.text = String(format: \"%.0f%%\", progress * 100)\n    }\n}"
    },
    {
      "instruction": " \n \nCreate a Swift function to download an image using URLSession and return it as UIImage",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from urlString: String, completion: @escaping (Result<UIImage, Error>) -> Void) {\n    guard let url = URL(string: urlString) else {\n        let error = NSError(domain: \"\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"Invalid URL\"])\n        completion(.failure(error))\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data, let image = UIImage(data: data) else {\n            let error = NSError(domain: \"\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"Failed to download image\"])\n            completion(.failure(error))\n            return\n        }\n        \n        completion(.success(image))\n    }\n    task.resume()\n}\n\n// Usage\ndownloadImage(from: \"https://example.com/image.jpg\") { result in\n    switch result {\n    case .success(let image):\n        print(\"Downloaded image: \\(image)\")\n    case .failure(let error):\n        print(\"Error downloading image: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " \n \nCreate a custom UIAlertController with a text field, and a button to handle the entered text",
      "input": "",
      "output": "import UIKit\n\nfunc presentCustomAlertController(on viewController: UIViewController, completion: @escaping (String) -> Void) {\n    let alertController = UIAlertController(title: \"Enter Text\", message: nil, preferredStyle: .alert)\n    \n    alertController.addTextField { textField in\n        textField.placeholder = \"Enter your text here\"\n    }\n    \n    let submitAction = UIAlertAction(title: \"Submit\", style: .default) { _ in\n        guard let textField = alertController.textFields?.first, let text = textField.text else {\n            return\n        }\n        completion(text)\n    }\n    \n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel)\n    \n    alertController.addAction(submitAction)\n    alertController.addAction(cancelAction)\n    \n    viewController.present(alertController, animated: true)\n}\n\n// Usage\nclass ViewController: UIViewController {\n    override func viewDidAppear(_ animated: Bool) {\n        super.viewDidAppear(animated)\n        \n        presentCustomAlertController(on: self) { text in\n            print(\"Entered text: \\(text)\")\n        }\n    }\n}"
    },
    {
      "instruction": "Write a function in the ContactsViewController to load contacts using the Contacts framework, request access to the user's contacts, and populate the tableView with the retrieved contacts.",
      "input": "import UIKit\nimport Contacts\n\nclass ContactsViewController: UITableViewController {\n    \n    var contacts: [CNContact] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    // other code\n\n}",
      "output": "import UIKit\nimport Contacts\n\nclass ContactsViewController: UITableViewController {\n    \n    var contacts: [CNContact] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        loadContacts()\n    }\n    \n    func loadContacts() {\n        let store = CNContactStore()\n        store.requestAccess(for: .contacts) { granted, error in\n            guard granted else {\n                print(\"Permission to access contacts denied: \\(error?.localizedDescription ?? \"Unknown error\")\")\n                return\n            }\n            \n            let keysToFetch = [CNContactGivenNameKey, CNContactFamilyNameKey, CNContactPhoneNumbersKey] as [CNKeyDescriptor]\n            let request = CNContactFetchRequest(keysToFetch: keysToFetch)\n            \n            do {\n                try store.enumerateContacts(with: request) { contact, _ in\n                    self.contacts.append(contact)\n                }\n                DispatchQueue.main.async {\n                    self.tableView.reloadData()\n                }\n            } catch {\n                print(\"Error fetching contacts: \\(error.localizedDescription)\")\n            }\n        }\n    }\n    \n    // other code\n\n}"
    },
    {
      "instruction": " \n\nCreate a Swift class called 'NetworkManager' with a function named 'fetchData' that downloads JSON data from a given URL and decodes it into a specified Decodable type. Handle errors using a completion block.",
      "input": "import Foundation\n\n// other code",
      "output": "import Foundation\n\nclass NetworkManager {\n    \n    func fetchData<T: Decodable>(from url: URL, completion: @escaping (Result<T, Error>) -> Void) {\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            if let error = error {\n                completion(.failure(error))\n                return\n            }\n            \n            guard let data = data else {\n                completion(.failure(NSError(domain: \"\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"Data not found\"])))\n                return\n            }\n            \n            do {\n                let decodedData = try JSONDecoder().decode(T.self, from: data)\n                completion(.success(decodedData))\n            } catch {\n                completion(.failure(error))\n            }\n        }.resume()\n    }\n    \n}"
    },
    {
      "instruction": " \n\nCreate a Swift class called 'ImageCache' that downloads and caches images using a URLSession. Implement a function named 'loadImage' that takes a URL and an imageView as parameters and sets the imageView's image to the downloaded and cached image.",
      "input": "import UIKit\n\n// other code",
      "output": "import UIKit\n\nclass ImageCache {\n    \n    private var imageCache: NSCache<NSString, UIImage> = NSCache()\n    \n    func loadImage(url: URL, imageView: UIImageView) {\n        if let cachedImage = imageCache.object(forKey: url.absoluteString as NSString) {\n            imageView.image = cachedImage\n            return\n        }\n        \n        URLSession.shared.dataTask(with: url) { data, response, error in\n            guard let data = data, let image = UIImage(data: data) else {\n                print(\"Error loading image: \\(error?.localizedDescription ?? \"Unknown error\")\")\n                return\n            }\n            \n            self.imageCache.setObject(image, forKey: url.absoluteString as NSString)\n            \n            DispatchQueue.main.async {\n                imageView.image = image\n            }\n        }.resume()\n    }\n    \n}"
    },
    {
      "instruction": " \n\nCreate a Swift class called 'LocationManager' that implements CLLocationManagerDelegate and provides a function to request the user's current location.",
      "input": "import CoreLocation\n\n// other code",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    \n    private let locationManager = CLLocationManager()\n    \n    override init() {\n        super.init()\n        locationManager.delegate = self\n    }\n    \n    func requestCurrentLocation() {\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.requestLocation()\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            print(\"User current location: \\(location)\")\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error getting user location: \\(error.localizedDescription)\")\n    }\n    \n}"
    },
    {
      "instruction": " \n\nImplement a Swift function called 'configureCell' in a UITableViewController subclass that dequeues a UITableViewCell with a custom identifier and sets its textLabel's text and detailTextLabel's text based on properties of a custom 'Person' struct.",
      "input": "import UIKit\n\nstruct Person {\n    let name: String\n    let age: Int\n}\n\nclass PeopleTableViewController: UITableViewController {\n    \n    var people: [Person] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    // other code\n\n}",
      "output": "import UIKit\n\nstruct Person {\n    let name: String\n    let age: Int\n}\n\nclass PeopleTableViewController: UITableViewController {\n    \n    var people: [Person] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    func configureCell(for indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"PersonCell\", for: indexPath)\n        let person = people[indexPath.row]\n        \n        cell.textLabel?.text = person.name\n        cell.detailTextLabel?.text = \"\\(person.age) years old\"\n        \n        return cell\n    }\n    \n    // other code\n\n}"
    },
    {
      "instruction": " \n\nCreate a Swift function called 'configureMapView' in a UIViewController subclass that initializes an MKMapView, sets its delegate, adds it as a subview, and configures constraints using NSLayoutConstraint.activate.",
      "input": "import UIKit\nimport MapKit\n\nclass MapViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    // other code\n\n}",
      "output": "import UIKit\nimport MapKit\n\nclass MapViewController: UIViewController, MKMapViewDelegate {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        configureMapView()\n    }\n    \n    func configureMapView() {\n        let mapView = MKMapView()\n        mapView.delegate = self\n        mapView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(mapView)\n        \n        NSLayoutConstraint.activate([\n            mapView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            mapView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            mapView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),\n            mapView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)\n        ])\n    }\n    \n    // other code\n\n}"
    },
    {
      "instruction": " \n\nCreate a Swift function called 'configureSearchController' in a UITableViewController subclass that initializes a UISearchController, sets its searchResultsUpdater, and assigns it to the UITableViewController's navigationItem.searchController.",
      "input": "import UIKit\n\nclass SearchableViewController: UITableViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    // other code\n\n}",
      "output": "import UIKit\n\nclass SearchableViewController: UITableViewController, UISearchResultsUpdating {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        configureSearchController()\n    }\n    \n    func configureSearchController() {\n        let searchController = UISearchController(searchResultsController: nil)\n        searchController.searchResultsUpdater = self\n        searchController.obscuresBackgroundDuringPresentation = false\n        navigationItem.searchController = searchController\n    }\n    \n    func updateSearchResults(for searchController: UISearchController) {\n        // Update your search results based on the search query\n    }\n    \n    // other code\n\n}"
    },
    {
      "instruction": " \n\nCreate a function in a UIViewController subclass that presents a UIAlertController with options to choose a UIImagePickerController with sourceType .camera or .photoLibrary, and implement UIImagePickerControllerDelegate and UINavigationControllerDelegate methods to handle the selected image.",
      "input": "import UIKit\n\nclass ImagePickerController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    // other code\n\n}",
      "output": "import UIKit\n\nclass ImagePickerController: UIViewController, UINavigationControllerDelegate, UIImagePickerControllerDelegate {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    func presentImagePickerOptions() {\n        let alertController = UIAlertController(title: \"Choose an image source\", message: nil, preferredStyle: .actionSheet)\n        \n        let cameraAction = UIAlertAction(title: \"Camera\", style: .default) { _ in\n            self.presentImagePickerController(sourceType: .camera)\n        }\n        let libraryAction = UIAlertAction(title: \"Photo Library\", style: .default) { _ in\n            self.presentImagePickerController(sourceType: .photoLibrary)\n        }\n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n        \n        alertController.addAction(cameraAction)\n        alertController.addAction(libraryAction)\n        alertController.addAction(cancelAction)\n        \n        present(alertController, animated: true, completion: nil)\n    }\n    \n    func presentImagePickerController(sourceType: UIImagePickerController.SourceType) {\n        let imagePickerController = UIImagePickerController()\n        imagePickerController.sourceType = sourceType\n        imagePickerController.delegate = self\n        present(imagePickerController, animated: true, completion: nil)\n    }\n    \n    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {\n        if let image = info[.originalImage] as? UIImage {\n            // Handle the selected image\n        }\n        picker.dismiss(animated: true, completion: nil)\n    }\n    \n    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {\n        picker.dismiss(animated: true, completion: nil)\n    }\n    \n    // other code\n\n}"
    },
    {
      "instruction": "Write a Swift function that downloads an image from a URL and displays it in an UIImageView.",
      "input": "let imageUrlString = \"https://example.com/image.jpg\"",
      "output": "import UIKit\n\nclass ImageViewController: UIViewController {\n\n    lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFit\n        return imageView\n    }()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        view.addSubview(imageView)\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),\n            imageView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)\n        ])\n\n        loadImage(from: \"https://example.com/image.jpg\")\n    }\n\n    func loadImage(from urlString: String) {\n        guard let url = URL(string: urlString) else { return }\n        \n        DispatchQueue.global().async {\n            if let data = try? Data(contentsOf: url), let image = UIImage(data: data) {\n                DispatchQueue.main.async {\n                    self.imageView.image = image\n                }\n            }\n        }\n    }\n\n}"
    },
    {
      "instruction": " \nWrite a Swift function that records audio from the device's microphone and saves it to a file.",
      "input": "",
      "output": "import UIKit\nimport AVFoundation\n\nclass AudioRecorderViewController: UIViewController, AVAudioRecorderDelegate {\n\n    var audioRecorder: AVAudioRecorder!\n    var recordButton: UIButton!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        // Configure the record button\n        recordButton = UIButton(type: .system)\n        recordButton.setTitle(\"Record\", for: .normal)\n        recordButton.addTarget(self, action: #selector(recordTapped), for: .touchUpInside)\n\n        view.addSubview(recordButton)\n        recordButton.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            recordButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            recordButton.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n\n        // Request microphone access\n        AVAudioSession.sharedInstance().requestRecordPermission { [unowned self] allowed in\n            DispatchQueue.main.async {\n                if allowed {\n                    self.loadRecordingUI()\n                } else {\n                    // Handle the error\n                }\n            }\n        }\n    }\n\n    func loadRecordingUI() {\n        // Configure and initialize the audio recorder\n        let audioFilename = getDocumentsDirectory().appendingPathComponent(\"recording.m4a\")\n        let settings = [\n            AVFormatIDKey: Int(kAudioFormatMPEG4AAC),\n            AVSampleRateKey: 12000,\n            AVNumberOfChannelsKey: 1,\n            AVEncoderAudioQualityKey: AVAudioQuality.high.rawValue\n        ]\n\n        do {\n            audioRecorder = try AVAudioRecorder(url: audioFilename, settings: settings)\n            audioRecorder.delegate = self\n            audioRecorder.isMeteringEnabled = true\n            audioRecorder.prepareToRecord()\n        } catch {\n            // Handle the error\n        }\n    }\n\n    @objc func recordTapped() {\n        if audioRecorder.isRecording {\n            audioRecorder.stop()\n            recordButton.setTitle(\"Record\", for: .normal)\n        } else {\n            let audioSession = AVAudioSession.sharedInstance()\n\n            do {\n                try audioSession.setCategory(.playAndRecord, mode: .default)\n                try audioSession.setActive(true)\n            } catch {\n                // Handle the error\n            }\n\n            audioRecorder.record()\n            recordButton.setTitle(\"Stop\", for: .normal)\n        }\n    }\n\n    func getDocumentsDirectory() -> URL {\n        let paths = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask)\n        return paths[0]\n    }\n\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sets up a UITableView with custom cells.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewController: UITableViewController {\n\n    let cellIdentifier = \"CustomCell\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: cellIdentifier)\n    }\n\n    // MARK: - UITableViewDataSource\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        // Return the number of rows in the section\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath) as! CustomTableViewCell\n\n        // Configure the cell...\n\n        return cell\n    }\n\n}\n\nclass CustomTableViewCell: UITableViewCell {\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n\n        // Add your custom views and setup here\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n}"
    },
    {
      "instruction": " \nCreate a Swift function that sets up aUICollectionView with custom cells.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UICollectionViewController {\n\n    let cellIdentifier = \"CustomCollectionCell\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: cellIdentifier)\n    }\n\n    // MARK: - UICollectionViewDataSource\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        // Return the number of items in the section\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellIdentifier, for: indexPath) as! CustomCollectionViewCell\n\n        // Configure the cell...\n\n        return cell\n    }\n\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n\n        // Add your custom views and setup here\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n}"
    },
    {
      "instruction": " \nWrite a Swift function that shows a UIAlertController with a text field and two buttons.",
      "input": "",
      "output": "import UIKit\n\nclass AlertViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        // Show the alert with a text field and two buttons\n        showAlert()\n    }\n\n    func showAlert() {\n        let alertController = UIAlertController(title: \"Alert\", message: \"Enter some text\", preferredStyle: .alert)\n\n        alertController.addTextField { textField in\n            textField.placeholder = \"Type here\"\n        }\n\n        let submitAction = UIAlertAction(title: \"Submit\", style: .default) { _ in\n            let textField = alertController.textFields![0]\n            // Do something with the text from the text field\n        }\n\n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel)\n\n        alertController.addAction(submitAction)\n        alertController.addAction(cancelAction)\n\n        present(alertController, animated: true)\n    }\n\n}"
    },
    {
      "instruction": " \nWrite a Swift function that sets up a UISearchBar and filters data in a UITableView based on the search text.",
      "input": "",
      "output": "import UIKit\n\nclass SearchTableViewController: UITableViewController, UISearchBarDelegate {\n\n    let cellIdentifier = \"SearchCell\"\n    let data = [\"Apple\", \"Banana\", \"Cherry\", \"Date\", \"Fig\", \"Grape\", \"Lemon\", \"Orange\", \"Plum\"]\n    var filteredData: [String] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: cellIdentifier)\n        setupSearchBar()\n    }\n\n    func setupSearchBar() {\n        let searchBar = UISearchBar()\n        searchBar.delegate = self\n        searchBar.sizeToFit()\n\n        tableView.tableHeaderView = searchBar\n        filteredData = data\n    }\n\n    // MARK: - UISearchBarDelegate\n\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredData = data\n        } else {\n            filteredData = data.filter { $0.lowercased().contains(searchText.lowercased()) }\n        }\n\n        tableView.reloadData()\n    }\n\n    // MARK: - UITableViewDataSource\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredData.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath)\n\n        cell.textLabel?.text = filteredData[indexPath.row]\n\n        return cell\n    }\n\n}"
    },
    {
      "instruction": " \nWrite a Swift function that reads and writes data using UserDefaults.",
      "input": "",
      "output": "import UIKit\n\nclass UserDefaultsViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        let key = \"exampleKey\"\n\n        // Save a value to UserDefaults\n        UserDefaults.standard.set(\"Hello, World!\", forKey: key)\n\n        // Read the value from UserDefaults\n        if let value = UserDefaults.standard.string(forKey: key) {\n            print(\"Value for key '\\(key)': \\(value)\")\n        } else {\n            print(\"No value found for key '\\(key)'\")\n        }\n    }\n\n}"
    },
    {
      "instruction": " \nWrite a Swift function that detects when the device orientation changes and updates the layout accordingly.",
      "input": "",
      "output": "import UIKit\n\nclass OrientationViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        NotificationCenter.default.addObserver(self, selector: #selector(orientationDidChange), name: UIDevice.orientationDidChangeNotification, object: nil)\n    }\n\n    deinit {\n        NotificationCenter.default.removeObserver(self, name: UIDevice.orientationDidChangeNotification, object: nil)\n    }\n\n    @objc func orientationDidChange(_ notification: Notification) {\n        let orientation = UIDevice.current.orientation\n\n       "
    },
    {
      "instruction": "Write a Swift function that takes a string input and returns the reversed string. The function should be called `reverseString` and accept one parameter called `inputString`.",
      "input": "The function should take the `inputString` parameter, reverse its characters, and return the result.",
      "output": "func reverseString(inputString: String) -> String {\n    let reversedString = String(inputString.reversed())\n    return reversedString\n}\n\nlet originalString = \"Hello, world!\"\nlet reversed = reverseString(inputString: originalString)\nprint(reversed)"
    },
    {
      "instruction": " \nWrite a Swift function to filter out non-prime numbers from an array of integers. The function should be called `filterPrimeNumbers` and accept one parameter called `numbers`.",
      "input": "The function should take the `numbers` parameter, filter out the non-prime numbers, and return an array of prime numbers.",
      "output": "func isPrime(_ number: Int) -> Bool {\n    if number < 2 {\n        return false\n    }\n    for i in 2..<number {\n        if number % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc filterPrimeNumbers(numbers: [Int]) -> [Int] {\n    let primeNumbers = numbers.filter(isPrime)\n    return primeNumbers\n}\n\nlet inputNumbers = [2, 4, 6, 8, 10, 12, 14, 15, 17, 19]\nlet primeNumbers = filterPrimeNumbers(numbers: inputNumbers)\nprint(primeNumbers)"
    },
    {
      "instruction": " \nWrite a Swift function to calculate the distance between two points on a 2D plane given their x and y coordinates. The function should be called `calculateDistance` and accept four parameters: `x1`, `y1`, `x2`, and `y2`.",
      "input": "The function should take the coordinates (`x1`, `y1`, `x2`, and `y2`), calculate the distance between the two points, and return the result.",
      "output": "import Foundation\n\nfunc calculateDistance(x1: Double, y1: Double, x2: Double, y2: Double) -> Double {\n    let deltaX = x2 - x1\n    let deltaY = y2 - y1\n    let distance = sqrt(deltaX * deltaX + deltaY * deltaY)\n    return distance\n}\n\nlet distance = calculateDistance(x1: 1.0, y1: 1.0, x2: 4.0, y2: 5.0)\nprint(distance)"
    },
    {
      "instruction": " \nWrite a Swift function that accepts a dictionary of `[String: Int]` type and returns the key with the highest value. The function should be called `findKeyWithHighestValue` and accept one parameter called `inputDict`.",
      "input": "The function should take the `inputDict` parameter, find the key with the highest value, and return the key as a String.",
      "output": "func findKeyWithHighestValue(inputDict: [String: Int]) -> String? {\n    return inputDict.max(by: { a, b in a.value < b.value })?.key\n}\n\nlet sampleDict = [\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5]\nlet highestValueKey = findKeyWithHighestValue(inputDict: sampleDict)\nprint(highestValueKey)"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UIView with a specified color and corner radius. The function should be called `createCustomView` and accept two parameters: `color` (of type `UIColor`) and `cornerRadius` (of type `CGFloat`).",
      "input": "The function should take the `color` and `cornerRadius` parameters, create a UIView with the specified color and corner radius, and return the UIView.",
      "output": "import UIKit\n\nfunc createCustomView(color: UIColor, cornerRadius: CGFloat) -> UIView {\n    let customView = UIView()\n    customView.backgroundColor = color\n    customView.layer.cornerRadius = cornerRadius\n    return customView\n}\n\nlet customView = createCustomView(color: .red, cornerRadius: 10.0)"
    },
    {
      "instruction": " \nWrite a Swift function that saves a string to UserDefaults with a given key. The function should be called `saveStringToUserDefaults` and accept two parameters: `key` (of type `String`) and `value` (of type `String`).",
      "input": "The function should take the `key` and `value` parameters, and save the value to UserDefaults with the specified key.",
      "output": "func saveStringToUserDefaults(key: String, value: String) {\n    UserDefaults.standard.set(value, forKey: key)\n}\n\nletkey = \"exampleKey\"\nlet value = \"exampleValue\"\nsaveStringToUserDefaults(key: key, value: value)"
    },
    {
      "instruction": " \nWrite a Swift function that retrieves a string from UserDefaults with a given key. The function should be called `retrieveStringFromUserDefaults` and accept one parameter: `key` (of type `String`).",
      "input": "The function should take the `key` parameter, retrieve the value from UserDefaults with the specified key, and return the value as a String.",
      "output": "func retrieveStringFromUserDefaults(key: String) -> String? {\n    return UserDefaults.standard.string(forKey: key)\n}\n\nlet retrievedValue = retrieveStringFromUserDefaults(key: key)\nprint(retrievedValue)"
    },
    {
      "instruction": " \nWrite a Swift function that asynchronously downloads an image from a given URL and sets the image to a UIImageView. The function should be called `downloadImage` and accept two parameters: `url` (of type `URL`) and `imageView` (of type `UIImageView`).",
      "input": "The function should take the `url` and `imageView` parameters, download the image asynchronously, and set the downloaded image to the specified UIImageView.",
      "output": "import UIKit\n\nfunc downloadImage(url: URL, imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            return\n        }\n        DispatchQueue.main.async {\n            imageView.image = UIImage(data: data)\n        }\n    }.resume()\n}\n\nlet imageURL = URL(string: \"https://example.com/image.jpg\")!\nlet imageView = UIImageView()\ndownloadImage(url: imageURL, imageView: imageView)"
    },
    {
      "instruction": "Write a Swift function to display an alert with a title, message, and an action button in a UIViewController",
      "input": "",
      "output": "func showAlert(title: String, message: String, actionTitle: String, viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let defaultAction = UIAlertAction(title: actionTitle, style: .default)\n    alertController.addAction(defaultAction)\n    viewController.present(alertController, animated: true)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UITableViewCell with an image, title, and subtitle",
      "input": "",
      "output": "class CustomTableViewCell: UITableViewCell {\n    let cellImageView = UIImageView()\n    let titleLabel = UILabel()\n    let subtitleLabel = UILabel()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        addSubview(cellImageView)\n        addSubview(titleLabel)\n        addSubview(subtitleLabel)\n        configureImageView()\n        configureTitleLabel()\n        configureSubtitleLabel()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    func configureImageView() {\n        cellImageView.translatesAutoresizingMaskIntoConstraints = false\n        cellImageView.contentMode = .scaleAspectFill\n        cellImageView.layer.cornerRadius = 10\n        cellImageView.clipsToBounds = true\n    }\n\n    func configureTitleLabel() {\n        titleLabel.translatesAutoresizingMaskIntoConstraints = false\n        titleLabel.font = UIFont.systemFont(ofSize: 20, weight: .bold)\n    }\n\n    func configureSubtitleLabel() {\n        subtitleLabel.translatesAutoresizingMaskIntoConstraints = false\n        subtitleLabel.font = UIFont.systemFont(ofSize: 16, weight: .regular)\n        subtitleLabel.textColor = .darkGray\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to save data to UserDefaults",
      "input": "",
      "output": "func saveDataToUserDefaults(key: String, value: Any) {\n    let defaults = UserDefaults.standard\n    defaults.set(value, forKey: key)\n}"
    },
    {
      "instruction": " \nWrite a Swift function that fetches and decodes JSON data from a URL using Codable and URLSession",
      "input": "",
      "output": "struct ExampleData: Codable {\n    let id: Int\n    let title: String\n}\n\nfunc fetchData(from urlString: String, completion: @escaping (Result<[ExampleData], Error>) -> Void) {\n    guard let url = URL(string: urlString) else { return }\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        guard let data = data else { return }\n        do {\n            let decodedData = try JSONDecoder().decode([ExampleData].self, from: data)\n            completion(.success(decodedData))\n        } catch {\n            completion(.failure(error))\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIButton with a specific background color and corner radius",
      "input": "",
      "output": "func createCustomButton(backgroundColor: UIColor, cornerRadius: CGFloat) -> UIButton {\n    let button = UIButton(type: .system)\n    button.backgroundColor = backgroundColor\n    button.layer.cornerRadius = cornerRadius\n    button.clipsToBounds = true\n    button.translatesAutoresizingMaskIntoConstraints = false\n    return button\n}"
    },
    {
      "instruction": " \nWrite a Swift function to play a sound file using AVFoundation",
      "input": "",
      "output": "import AVFoundation\n\nfunc playSound(filename: String) {\n    guard let url = Bundle.main.url(forResource: filename, withExtension: nil) else { return }\n    do {\n        let audioPlayer = try AVAudioPlayer(contentsOf: url)\n        audioPlayer.play()\n    } catch {\n        print(\"Error playing sound: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UITextField with a specified placeholder and background color",
      "input": "",
      "output": "func createCustomTextField(placeholder: String, backgroundColor: UIColor) -> UITextField {\n    let textField = UITextField()\n    textField.placeholder = placeholder\n    textField.backgroundColor = backgroundColor\n    textField.layer.cornerRadius = 8\n    textField.clipsToBounds = true\n    textField.translatesAutoresizingMaskIntoConstraints = false\n    return textField\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UICollectionView with a specified layout and scroll direction",
      "input": "",
      "output": "func createCustomCollectionView(layout: UICollectionViewFlowLayout, scrollDirection: UICollectionView.ScrollDirection) -> UICollectionView {\n    layout.scrollDirection = scrollDirection\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    collectionView.backgroundColor = .clear\n    collectionView.showsVerticalScrollIndicator = false\n    collectionView.showsHorizontalScrollIndicator = false\n    return collectionView\n}"
    },
    {
      "instruction": "Create a Swift function that takes a completion handler as a parameter and returns the user's current location as CLLocationCoordinate2D.",
      "input": "",
      "output": "import CoreLocation\n\nfunc getCurrentLocation(completion: @escaping (CLLocationCoordinate2D) -> Void) {\n    let locationManager = CLLocationManager()\n    locationManager.requestWhenInUseAuthorization()\n    \n    if CLLocationManager.locationServicesEnabled() {\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.startUpdatingLocation()\n        \n        if let location = locationManager.location {\n            let coordinate = location.coordinate\n            completion(coordinate)\n        } else {\n            print(\"Error getting location\")\n        }\n        \n        locationManager.stopUpdatingLocation()\n    } else {\n        print(\"Location services are not enabled\")\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function that downloads an image from a URL and sets it to a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil, let image = UIImage(data: data) else {\n            print(\"Error downloading image\")\n            completion(nil)\n            return\n        }\n        completion(image)\n    }.resume()\n}\n\nfunc setImage(from url: URL, to imageView: UIImageView) {\n    downloadImage(from: url) { (image) in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift method to save a string to UserDefaults with a given key.",
      "input": "",
      "output": "func saveString(_ value: String, forKey key: String) {\n    UserDefaults.standard.set(value, forKey: key)\n}"
    },
    {
      "instruction": " \nImplement a Swift method to fetch a string from UserDefaults with a given key.",
      "input": "",
      "output": "func fetchString(forKey key: String) -> String? {\n    return UserDefaults.standard.string(forKey: key)\n}"
    },
    {
      "instruction": " \nCreate a custom UICollectionViewCell in Swift with a UIImageView and UILabel.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        addSubview(imageView)\n        addSubview(label)\n        \n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n            \n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n            label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n        ])\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift function to perform a network request and parse JSON data using Codable.",
      "input": "",
      "output": "import Foundation\n\nstruct ExampleModel: Codable {\n    let id: Int\n    let title: String\n}\n\nfunc fetchData(completion: @escaping ([ExampleModel]?, Error?) -> Void) {\n    let url = URL(string: \"https://api.example.com/data\")!\n    \n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            completion(nil, error)\n            return\n        }\n        \n        do {\n            let decodedData = try JSONDecoder().decode([ExampleModel].self, from: data)\n            completion(decodedData, nil)\n        } catch {\n            completion(nil, error)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nCreate a Swift function to present an UIAlertController with a given title and message on a UIViewController.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(on viewController: UIViewController, title: String, message: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    alertController.addAction(UIAlertAction(title: \"OK\", style: .default))\n    viewController.present(alertController, animated: true)\n}"
    },
    {
      "instruction": " \nImplement a Swift function to convert a date string with a given format to a Date object.",
      "input": "",
      "output": "import Foundation\n\nfunc convertDateStringToDate(dateString: String, format: String) -> Date? {\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = format\n    dateFormatter.locale = Locale(identifier: \"en_US_POSIX\")\n    dateFormatter.timeZone = TimeZone.current\n    \n    return dateFormatter.date(from: dateString)\n}"
    },
    {
      "instruction": "Create a custom UICollectionViewCell that displays an image and a label.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n    \n    private lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n    \n    private lazy var label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textAlignment = .center\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        \n        addSubview(imageView)\n        addSubview(label)\n        \n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.heightAnchor.constraint(equalTo: contentView.heightAnchor, multiplier: 0.75),\n            \n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            label.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    func configure(image: UIImage, labelText: String) {\n        imageView.image = image\n        label.text = labelText\n    }\n}"
    },
    {
      "instruction": " \nImplement a custom UIViewController to display a collection view with images fetched from a URL using URLSession.",
      "input": "",
      "output": "import UIKit\n\nclass ImageCollectionViewController: UIViewController {\n    private var imageURLs: [URL] = []\n    private let itemsPerRow: CGFloat = 3\n    \n    private lazy var collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        layout.minimumLineSpacing = 10\n        layout.minimumInteritemSpacing = 10\n        \n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.backgroundColor = .white\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n        \n        collectionView.dataSource = self\n        collectionView.delegate = self\n        \n        return collectionView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.addSubview(collectionView)\n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor)\n        ])\n        \n        loadImageURLs()\n    }\n    \n    private func loadImageURLs() {\n        // Replace with actual API call to fetch image URLs\n        imageURLs = [URL(string: \"https://example.com/image1.jpg\"),\n                     URL(string: \"https://example.com/image2.jpg\"),\n                     URL(string: \"https://example.com/image3.jpg\")]\n    }\n}\n\nextension ImageCollectionViewController: UICollectionViewDataSource {\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return imageURLs.count\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        \n        URLSession.shared.dataTask(with: imageURLs[indexPath.item]) { (data, response, error) in\n            guard let data = data, let image = UIImage(data: data) else { return }\n            \n            DispatchQueue.main.async {\n                cell.configure(image: image, labelText: \"Image \\(indexPath.item + 1)\")\n            }\n        }.resume()\n        \n        return cell\n    }\n}\n\nextension ImageCollectionViewController: UICollectionViewDelegateFlowLayout {\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        let padding = 10 * (itemsPerRow + 1)\n        let availableWidth = collectionView.bounds.width - padding\n        let widthPerItem = availableWidth / itemsPerRow\n        \n        return CGSize(width: widthPerItem, height: widthPerItem)\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift class that manages network requests and returns parsed JSON data.",
      "input": "",
      "output": "import Foundation\n\nclass NetworkManager {\n    enum NetworkError: Error {\n        case invalidURL\n        case requestFailed\n        case parsingFailed\n    }\n    \n    static let shared = NetworkManager()\n    private init() {}\n    \n    func fetchJSONData<T: Decodable>(urlString: String, completion: @escaping (Result<T, NetworkError>) -> Void) {\n        guard let url = URL(string: urlString) else {\n            completion(.failure(.invalidURL))\n            return\n        }\n        \n        let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if error != nil {\n                completion(.failure(.requestFailed))\n                return\n            }\n            \n            guard let data = data else {\n                completion(.failure(.requestFailed))\n                return\n            }\n\n            do {\n                let decoder = JSONDecoder()\n                let result = try decoder.decode(T.self, from: data)\n                completion(.success(result))\n            } catch {\n                completion(.failure(.parsingFailed))\n            }\n        }\n        \n        task.resume()\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift UITableViewController that displays a list of tasks, including a task title and description, fetched from a remote API using the NetworkManager.",
      "input": "",
      "output": "import UIKit\n\nstruct Task: Codable {\n    let title: String\n    let description: String\n}\n\nclass TasksTableViewController: UITableViewController {\n    private var tasks: [Task] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"TaskCell\")\n        \n        loadTasks()\n    }\n    \n    private func loadTasks() {\n        let urlString = \"https://api.example.com/tasks\"\n        \n        NetworkManager.shared.fetchJSONData(urlString: urlString) { (result: Result<[Task], NetworkManager.NetworkError>) in\n            switch result {\n            case .success(let tasks):\n                DispatchQueue.main.async {\n                    self.tasks = tasks\n                    self.tableView.reloadData()\n                }\n            case .failure(let error):\n                print(\"Failed to fetch tasks: \\(error)\")\n            }\n        }\n    }\n    \n    // MARK: - Table view data source\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return tasks.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"TaskCell\", for: indexPath)\n        \n        let task = tasks[indexPath.row]\n        cell.textLabel?.text = task.title\n        cell.detailTextLabel?.text = task.description\n        \n        return cell\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift class for storing and retrieving user settings using UserDefaults.",
      "input": "",
      "output": "import Foundation\n\nclass UserSettings {\n    private enum Keys {\n        static let username = \"username\"\n        static let isDarkModeEnabled = \"isDarkModeEnabled\"\n    }\n    \n    static let shared = UserSettings()\n    private init() {}\n    \n    var username: String? {\n        get {\n            return UserDefaults.standard.string(forKey: Keys.username)\n        }\n        set {\n            UserDefaults.standard.setValue(newValue, forKey: Keys.username)\n        }\n    }\n    \n    var isDarkModeEnabled: Bool {\n        get {\n            return UserDefaults.standard.bool(forKey: Keys.isDarkModeEnabled)\n        }\n        set {\n            UserDefaults.standard.setValue(newValue, forKey: Keys.isDarkModeEnabled)\n        }\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift UIViewController that allows users to select a date using a UIDatePicker and display the selected date in a UILabel.",
      "input": "",
      "output": "import UIKit\n\nclass DatePickerViewController: UIViewController {\n    private lazy var datePicker: UIDatePicker = {\n        let datePicker = UIDatePicker()\n        datePicker.translatesAutoresizingMaskIntoConstraints = false\n        datePicker.datePickerMode = .date\n        datePicker.addTarget(self, action: #selector(datePickerValueChanged(_:)), for: .valueChanged)\n        return datePicker\n    }()\n    \n    private lazy var dateLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textAlignment = .center\n        return label\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.addSubview(datePicker)\n        view.addSubview(dateLabel)\n        \n        NSLayoutConstraint.activate([\n            datePicker.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            datePicker.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            \n            dateLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            dateLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            dateLabel.bottomAnchor.constraint(equalTo: datePicker.topAnchor, constant: -20)\n        ])\n        \n        updateDateLabel()\n    }\n    \n    @objc private func datePickerValueChanged(_ sender: UIDatePicker) {\n        updateDateLabel()\n    }\n    \n    private func updateDateLabel() {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateStyle = .long\n        \n        dateLabel.text = dateFormatter.string(from: datePicker.date)\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift UIViewController that displays a UITextField for entering a search term and a UITableView for displaying search results.",
      "input": "",
      "output": "import UIKit\n\nclass SearchViewController: UIViewController {\n    private lazy var searchBar: UISearchBar = {\n        let searchBar = UISearchBar()\n        searchBar.translatesAutoresizingMaskIntoConstraints = false\n        searchBar.delegate = self\n        return searchBar\n    }()\n    \n    private lazy var tableView: UITableView = {\n        let tableView = UITableView()\n        tableView.translatesAutoresizingMaskIntoConstraints = false\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"SearchResultCell\")\n        tableView.dataSource = self\n        return tableView\n    }()\n    \n    private var searchResults: [String] = []"
    },
    {
      "instruction": "Write a function in Swift language to fetch a JSON object from a given URL and decode it into a Swift struct. The function should take a URL string as input and return the decoded object using a completion handler.",
      "input": "\"https://jsonplaceholder.typicode.com/todos/1\"",
      "output": "import Foundation\n\nstruct Todo: Codable {\n    let userId: Int\n    let id: Int\n    let title: String\n    let completed: Bool\n}\n\nfunc fetchJSON<T: Codable>(urlString: String, completion: @escaping (T?, Error?) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(nil, NSError(domain: \"Invalid URL\", code: -1, userInfo: nil))\n        return\n    }\n    \n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(nil, error)\n            return\n        }\n        \n        guard let data = data else {\n            completion(nil, NSError(domain: \"No data received\", code: -1, userInfo: nil))\n            return\n        }\n        \n        do {\n            let decodedObject = try JSONDecoder().decode(T.self, from: data)\n            completion(decodedObject, nil)\n        } catch {\n            completion(nil, error)\n        }\n    }.resume()\n}\n\nfetchJSON(urlString: \"https://jsonplaceholder.typicode.com/todos/1\") { (todo: Todo?, error: Error?) in\n    if let error = error {\n        print(\"Error: \\(error.localizedDescription)\")\n    } else if let todo = todo {\n        print(\"Todo: \\(todo)\")\n    }\n}"
    },
    {
      "instruction": " Write a function in Swift language to create a simple UITableView with a custom UITableViewCell containing an image and a label. The function should take an array of tuples with image name and text as input, and return a UIViewController containing the UITableView.",
      "input": "[(\"image1\", \"Title 1\"), (\"image2\", \"Title 2\"), (\"image3\", \"Title 3\")]",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var cellImageView: UIImageView!\n    @IBOutlet weak var cellLabel: UILabel!\n}\n\nfunc createTableView(with data: [(imageName: String, text: String)]) -> UIViewController {\n    class TableViewController: UITableViewController {\n        let cellData = data\n\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            tableView.register(UINib(nibName: \"CustomTableViewCell\", bundle: nil), forCellReuseIdentifier: \"customCell\")\n        }\n\n        override func numberOfSections(in tableView: UITableView) -> Int {\n            return 1\n        }\n\n        override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n            return cellData.count\n        }\n\n        override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: \"customCell\", for: indexPath) as! CustomTableViewCell\n            let data = cellData[indexPath.row]\n            cell.cellImageView.image = UIImage(named: data.imageName)\n            cell.cellLabel.text = data.text\n            return cell\n        }\n    }\n\n    let tableViewController = TableViewController(style: .plain)\n    return tableViewController\n}"
    },
    {
      "instruction": " Write a function in Swift language to animate a UIView to move from its current position to a specified CGPoint with a specified duration. The function should take a UIView, CGPoint, and TimeInterval as input and return Void.",
      "input": "view, CGPoint(x: 100, y: 100), 1.0",
      "output": "import UIKit\n\nfunc animateView(_ view: UIView, to point: CGPoint, duration: TimeInterval) {\n    UIView.animate(withDuration: duration) {\n        view.center = point\n    }\n}"
    },
    {
      "instruction": " Write a function in Swift language to create a circular progress bar using UIBezierPath and CAShapeLayer. The function should take CGFloat values for progress (0-1), radius, and width, and return a UIView containing the progress bar.",
      "input": "0.75, 50, 5",
      "output": "import UIKit\n\nfunc createCircularProgressBar(progress: CGFloat, radius: CGFloat, width: CGFloat) -> UIView {\n    let progressBar = UIView(frame: CGRect(x: 0, y: 0, width: radius * 2, height: radius * 2))\n    \n    let backgroundLayer = CAShapeLayer()\n    let backgroundPath = UIBezierPath(arcCenter: progressBar.center, radius: radius, startAngle: 0, endAngle: 2 * CGFloat.pi, clockwise: true)\n    backgroundLayer.path = backgroundPath.cgPath\n    backgroundLayer.strokeColor = UIColor.lightGray.cgColor\n    backgroundLayer.fillColor = UIColor.clear.cgColor\n    backgroundLayer.lineWidth = width\n    progressBar.layer.addSublayer(backgroundLayer)\n    \n    let progressLayer = CAShapeLayer()\n    let progressPath =UIBezierPath(arcCenter: progressBar.center, radius: radius, startAngle: -CGFloat.pi / 2, endAngle: (2 * CGFloat.pi) * progress - CGFloat.pi / 2, clockwise: true)\n    progressLayer.path = progressPath.cgPath\n    progressLayer.strokeColor = UIColor.blue.cgColor\n    progressLayer.fillColor = UIColor.clear.cgColor\n    progressLayer.lineWidth = width\n    progressLayer.lineCap = .round\n    progressBar.layer.addSublayer(progressLayer)\n    \n    return progressBar\n}"
    },
    {
      "instruction": " Write a function in Swift language to cache images using NSCache and load them asynchronously in a UIImageView. The function should take a URL string and a UIImageView as input, and return Void.",
      "input": "\"https://example.com/image.jpg\", imageView",
      "output": "import UIKit\n\nlet imageCache = NSCache<NSString, UIImage>()\n\nfunc setImageFromUrl(_ urlString: String, to imageView: UIImageView) {\n    imageView.image = nil\n    \n    if let cachedImage = imageCache.object(forKey: urlString as NSString) {\n        imageView.image = cachedImage\n        return\n    }\n    \n    guard let url = URL(string: urlString) else { return }\n    \n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            print(\"Error fetching image: \\(error.localizedDescription)\")\n            return\n        }\n        \n        guard let data = data, let image = UIImage(data: data) else { return }\n        \n        DispatchQueue.main.async {\n            imageCache.setObject(image, forKey: urlString as NSString)\n            imageView.image = image\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " Write a function in Swift language to create a UICollectionView with a custom UICollectionViewCell containing an image and a label. The function should take an array of tuples with image name and text as input and return a UIViewController containing the UICollectionView.",
      "input": "[(\"image1\", \"Title 1\"), (\"image2\", \"Title 2\"), (\"image3\", \"Title 3\")]",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var cellImageView: UIImageView!\n    @IBOutlet weak var cellLabel: UILabel!\n}\n\nfunc createCollectionView(with data: [(imageName: String, text: String)]) -> UIViewController {\n    class CollectionViewController: UICollectionViewController {\n        let cellData = data\n\n        override func viewDidLoad() {\n            super.viewDidLoad()\n            collectionView.register(UINib(nibName: \"CustomCollectionViewCell\", bundle: nil), forCellWithReuseIdentifier: \"customCell\")\n            collectionView.backgroundColor = .white\n        }\n\n        override func numberOfSections(in collectionView: UICollectionView) -> Int {\n            return 1\n        }\n\n        override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n            return cellData.count\n        }\n\n        override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"customCell\", for: indexPath) as! CustomCollectionViewCell\n            let data = cellData[indexPath.row]\n            cell.cellImageView.image = UIImage(named: data.imageName)\n            cell.cellLabel.text = data.text\n            return cell\n        }\n    }\n\n    let layout = UICollectionViewFlowLayout()\n    layout.itemSize = CGSize(width: 100, height: 100)\n    let collectionViewController = CollectionViewController(collectionViewLayout: layout)\n    return collectionViewController\n}"
    },
    {
      "instruction": " Write a function in Swift language to create and present a UIAlertController with a specified title, message, and a list of UIAlertAction buttons. The function should take a UIViewController, a String for title, a String for message, and an array of UIAlertAction as input and return Void.",
      "input": "viewController, \"Title\", \"Alert message\", [UIAlertAction(title: \"OK\", style: .default, handler: nil)]",
      "output": "import UIKit\n\nfunc showAlert(on viewController: UIViewController, title: String, message: String, actions: [UIAlertAction]) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    for action in actions {\n        alertController.addAction(action)\n    }\n    \n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a function in Swift language to store and retrieve data using UserDefaults. The function should be able to save and retrieve values for keys of type String. The function should take an optional value of type T and a key of type String as input, and return a value of type T?.",
      "input": "\"example\", \"exampleKey\"",
      "output": "import Foundation\n\nfunc userDefaults<T>(value: T? = nil, forKey key: String) -> T? {\n    let userDefaults = UserDefaults.standard\n    \n    if let value = value {\n        userDefaults.set(value, forKey: key)\n        return nil\n    } else {\n        return userDefaults.object"
    },
    {
      "instruction": "Write a Swift function to create a custom UITableViewCell with an UIImageView and UILabel with Auto Layout.",
      "input": "",
      "output": "class CustomTableViewCell: UITableViewCell {\n    \n    let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let cellLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupSubviews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupSubviews() {\n        contentView.addSubview(cellImageView)\n        contentView.addSubview(cellLabel)\n        \n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            cellImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            cellImageView.widthAnchor.constraint(equalToConstant: 40),\n            cellImageView.heightAnchor.constraint(equalToConstant: 40),\n            \n            cellLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 16),\n            cellLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\n            cellLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to load data from a JSON file in the app bundle and decode it using Codable.",
      "input": "",
      "output": "import Foundation\n\nfunc loadData<T: Codable>(fromJSONFile fileName: String) -> T? {\n    guard let url = Bundle.main.url(forResource: fileName, withExtension: \"json\") else {\n        print(\"Error: Could not find \\(fileName).json in app bundle.\")\n        return nil\n    }\n    \n    do {\n        let data = try Data(contentsOf: url)\n        let decoder = JSONDecoder()\n        let decodedData = try decoder.decode(T.self, from: data)\n        return decodedData\n    } catch {\n        print(\"Error: Could not load data from \\(fileName).json - \\(error)\")\n        return nil\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to show an UIAlertController with a custom title, message, and UIAlertAction.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlertController(title: String, message: String, actionTitle: String, viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let defaultAction = UIAlertAction(title: actionTitle, style: .default, handler: nil)\n    alertController.addAction(defaultAction)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift function to programmatically create a UIButton with a custom background color, title, and target.",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomButton(title: String, backgroundColor: UIColor, target: Any, selector: Selector) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.backgroundColor = backgroundColor\n    button.addTarget(target, action: selector, for: .touchUpInside)\n    button.translatesAutoresizingMaskIntoConstraints = false\n    return button\n}"
    },
    {
      "instruction": " Write a Swift function to create a UICollectionView with a custom layout and register a UICollectionViewCell subclass.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n}\n\nfunc createCustomCollectionView(layout: UICollectionViewLayout) -> UICollectionView {\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    return collectionView\n}"
    },
    {
      "instruction": " Write a Swift function to programmatically create a UITextField with a custom placeholder, border style, and delegate.",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomTextField(placeholder: String, borderStyle: UITextField.BorderStyle, delegate: UITextFieldDelegate) -> UITextField {\n    let textField = UITextField()\n    textField.placeholder = placeholder\n    textField.borderStyle = borderStyle\n    textField.delegate = delegate\n    textField.translatesAutoresizingMaskIntoConstraints = false\n    return textField\n}"
    },
    {
      "instruction": " Write a Swift function to create a UITapGestureRecognizer and add it to a UIView.",
      "input": "",
      "output": "import UIKit\n\nfunc addTapGestureRecognizer(to view: UIView, target: Any, selector: Selector) {\n    let tapGesture = UITapGestureRecognizer(target: target, action: selector)\n    view.addGestureRecognizer(tapGesture)\n}"
    },
    {
      "instruction": " Write a Swift function to create an AVPlayer and play a video from a remote URL.",
      "input": "",
      "output": "import AVFoundation\nimport AVKit\n\nfunc playVideoFromURL(url: URL, viewController: UIViewController) {\n    letplayer = AVPlayer(url: url)\n    let playerViewController = AVPlayerViewController()\n    playerViewController.player = player\n    viewController.present(playerViewController, animated: true) {\n        playerViewController.player?.play()\n    }\n}"
    },
    {
      "instruction": " Implement a custom UIViewController to display a collection view with images fetched from a URL using URLSession.",
      "input": "",
      "output": "import UIKit\n\nclass ImageCollectionViewController: UIViewController {\n    private var imageURLs: [URL] = []\n    private let itemsPerRow: CGFloat = 3\n    \n    private lazy var collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        layout.minimumLineSpacing = 10\n        layout.minimumInteritemSpacing = 10\n        \n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.backgroundColor = .white\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n        \n        collectionView.dataSource = self\n        collectionView.delegate = self\n        \n        return collectionView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.addSubview(collectionView)\n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor)\n        ])\n        \n        loadImageURLs()\n    }\n    \n    private func loadImageURLs() {\n        // Replace with actual API call to fetch image URLs\n        imageURLs = [URL(string: \"https://example.com/image1.jpg\"),\n                     URL(string: \"https://example.com/image2.jpg\"),\n                     URL(string: \"https://example.com/image3.jpg\")]\n    }\n}\n\nextension ImageCollectionViewController: UICollectionViewDataSource {\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return imageURLs.count\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        \n        URLSession.shared.dataTask(with: imageURLs[indexPath.item]) { (data, response, error) in\n            guard let data = data, let image = UIImage(data: data) else { return }\n            \n            DispatchQueue.main.async {\n                cell.configure(image: image, labelText: \"Image \\(indexPath.item + 1)\")\n            }\n        }.resume()\n        \n        return cell\n    }\n}\n\nextension ImageCollectionViewController: UICollectionViewDelegateFlowLayout {\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        let padding = 10 * (itemsPerRow + 1)\n        let availableWidth = collectionView.bounds.width - padding\n        let widthPerItem = availableWidth / itemsPerRow\n        \n        return CGSize(width: widthPerItem, height: widthPerItem)\n    }\n}"
    },
    {
      "instruction": " Implement a Swift class that manages network requests and returns parsed JSON data.",
      "input": "",
      "output": "import Foundation\n\nclass NetworkManager {\n    enum NetworkError: Error {\n        case invalidURL\n        case requestFailed\n        case parsingFailed\n    }\n    \n    static let shared = NetworkManager()\n    private init() {}\n    \n    func fetchJSONData<T: Decodable>(urlString: String, completion: @escaping (Result<T, NetworkError>) -> Void) {\n        guard let url = URL(string: urlString) else {\n            completion(.failure(.invalidURL))\n            return\n        }\n        \n        let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if error != nil {\n                completion(.failure(.requestFailed))\n                return\n            }\n            \n            guard let data = data else {\n                completion(.failure(.requestFailed))\n                return\n            }\n\n            do {\n                let decoder = JSONDecoder()\n                let result = try decoder.decode(T.self, from: data)\n                completion(.success(result))\n            } catch {\n                completion(.failure(.parsingFailed))\n            }\n        }\n        \n        task.resume()\n    }\n}"
    },
    {
      "instruction": " Create a Swift UITableViewController that displays a list of tasks, including a task title and description, fetched from a remote API using the NetworkManager.",
      "input": "",
      "output": "import UIKit\n\nstruct Task: Codable {\n    let title: String\n    let description: String\n}\n\nclass TasksTableViewController: UITableViewController {\n    private var tasks: [Task] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"TaskCell\")\n        \n        loadTasks()\n    }\n    \n    private func loadTasks() {\n        let urlString = \"https://api.example.com/tasks\"\n        \n        NetworkManager.shared.fetchJSONData(urlString: urlString) { (result: Result<[Task], NetworkManager.NetworkError>) in\n            switch result {\n            case .success(let tasks):\n                DispatchQueue.main.async {\n                    self.tasks = tasks\n                    self.tableView.reloadData()\n                }\n            case .failure(let error):\n                print(\"Failed to fetch tasks: \\(error)\")\n            }\n        }\n    }\n    \n    // MARK: - Table view data source\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return tasks.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"TaskCell\", for: indexPath)\n        \n        let task = tasks[indexPath.row]\n        cell.textLabel?.text = task.title\n        cell.detailTextLabel?.text = task.description\n        \n        return cell\n    }\n}"
    },
    {
      "instruction": " Create a Swift class for storing and retrieving user settings using UserDefaults.",
      "input": "",
      "output": "import Foundation\n\nclass UserSettings {\n    private enum Keys {\n        static let username = \"username\"\n        static let isDarkModeEnabled = \"isDarkModeEnabled\"\n    }\n    \n    static let shared = UserSettings()\n    private init() {}\n    \n    var username: String? {\n        get {\n            return UserDefaults.standard.string(forKey: Keys.username)\n        }\n        set {\n            UserDefaults.standard.setValue(newValue, forKey: Keys.username)\n        }\n    }\n    \n    var isDarkModeEnabled: Bool {\n        get {\n            return UserDefaults.standard.bool(forKey: Keys.isDarkModeEnabled)\n        }\n        set {\n            UserDefaults.standard.setValue(newValue, forKey: Keys.isDarkModeEnabled)\n        }\n    }\n}"
    },
    {
      "instruction": " Create a Swift UIViewController that allows users to select a date using a UIDatePicker and display the selected date in a UILabel.",
      "input": "",
      "output": "import UIKit\n\nclass DatePickerViewController: UIViewController {\n    private lazy var datePicker: UIDatePicker = {\n        let datePicker = UIDatePicker()\n        datePicker.translatesAutoresizingMaskIntoConstraints = false\n        datePicker.datePickerMode = .date\n        datePicker.addTarget(self, action: #selector(datePickerValueChanged(_:)), for: .valueChanged)\n        return datePicker\n    }()\n    \n    private lazy var dateLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textAlignment = .center\n        return label\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.addSubview(datePicker)\n        view.addSubview(dateLabel)\n        \n        NSLayoutConstraint.activate([\n            datePicker.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            datePicker.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            \n            dateLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            dateLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            dateLabel.bottomAnchor.constraint(equalTo: datePicker.topAnchor, constant: -20)\n        ])\n        \n        updateDateLabel()\n    }\n    \n    @objc private func datePickerValueChanged(_ sender: UIDatePicker) {\n        updateDateLabel()\n    }\n    \n    private func updateDateLabel() {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateStyle = .long\n        \n        dateLabel.text = dateFormatter.string(from: datePicker.date)\n    }\n}"
    },
    {
      "instruction": " Create a Swift UIViewController that displays a UITextField for entering a search term and a UITableView for displaying search results.",
      "input": "",
      "output": "import UIKit\n\nclass SearchViewController: UIViewController {\n    private lazy var searchBar: UISearchBar = {\n        let searchBar = UISearchBar()\n        searchBar.translatesAutoresizingMaskIntoConstraints = false\n        searchBar.delegate = self\n        return searchBar\n    }()\n    \n    private lazy var tableView: UITableView = {\n        let tableView = UITableView()\n        tableView.translatesAutoresizingMaskIntoConstraints = false\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"SearchResultCell\")\n        tableView.dataSource = self\n        return tableView\n    }()\n    \n    private var searchResults: [String] = []"
    },
    {
      "instruction": "Write a Swift function to create a custom TableView with rounded corners and custom cell",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    static let identifier = \"CustomTableViewCell\"\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        contentView.addSubview(titleLabel)\n        setupConstraints()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\n            titleLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),\n            titleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8)\n        ])\n    }\n}\n\nclass CustomTableViewController: UITableViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: CustomTableViewCell.identifier)\n        tableView.layer.cornerRadius = 10\n        tableView.clipsToBounds = true\n    }\n    \n    // MARK: - Table view data source\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 10\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.identifier, for: indexPath) as! CustomTableViewCell\n        cell.titleLabel.text = \"Custom cell \\(indexPath.row)\"\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to display an alert with a text field and save the input to UserDefaults",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        displayTextInputAlert()\n    }\n    \n    func displayTextInputAlert() {\n        let alertController = UIAlertController(title: \"Enter text\", message: \"Input some text and save it to UserDefaults\", preferredStyle: .alert)\n        \n        alertController.addTextField { (textField) in\n            textField.placeholder = \"Enter text...\"\n        }\n        \n        let saveAction = UIAlertAction(title: \"Save\", style: .default) { [weak alertController] _ in\n            guard let alertController = alertController, let textField = alertController.textFields?.first else { return }\n            UserDefaults.standard.setValue(textField.text, forKey: \"SavedText\")\n        }\n        \n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n        \n        alertController.addAction(saveAction)\n        alertController.addAction(cancelAction)\n        \n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to download an image asynchronously and display it in a UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    private let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFit\n        return imageView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.addSubview(imageView)\n        setupConstraints()\n        \n        let imageURL = \"https://www.example.com/image.jpg\"\n        downloadImage(urlString: imageURL)\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            imageView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            imageView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            imageView.widthAnchor.constraint(equalToConstant: 200),\n            imageView.heightAnchor.constraint(equalToConstant: 200)\n        ])\n    }\n    \n    func downloadImage(urlString: String) {\n        guard let url = URL(string: urlString) else { return }\n        \n        DispatchQueue.global().async {\n            if let data = try? Data(contentsOf: url) {\n                DispatchQueue.main.async {\n                    self.imageView.image = UIImage(data: data)\n                }\n            }\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that sets up a UICollectionView with a custom UICollectionViewCell and UICollectionViewFlowLayout",
      "input": "",
      "output": "func setupCollectionView() -> UICollectionView {\n    let layout = UICollectionViewFlowLayout()\n    layout.scrollDirection = .vertical\n    layout.itemSize = CGSize(width: 100, height: 100)\n    layout.sectionInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)\n\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    collectionView.backgroundColor = .white\n    collectionView.delegate = self\n    collectionView.dataSource = self\n    collectionView.register(MyCollectionViewCell.self, forCellWithReuseIdentifier: \"MyCollectionViewCell\")\n    return collectionView\n}\n\n// Make sure to conform to UICollectionViewDelegate & UICollectionViewDataSource\n// extension ViewController: UICollectionViewDelegate, UICollectionViewDataSource {\n// func numberOfSections(in collectionView: UICollectionView) -> Int { return 1 }\n// func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int { return dataSource.count }\n// func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n//     let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"MyCollectionViewCell\", for: indexPath) as! MyCollectionViewCell\n//     // Configure cell\n//     return cell\n// }\n// }\n\n// Make sure to create a UICollectionViewCell subclass called MyCollectionViewCell\n// class MyCollectionViewCell: UICollectionViewCell {\n// // Custom cell implementation\n// }"
    },
    {
      "instruction": " Write a Swift function to create a UIAlertController with multiple UIAlertAction options and a completion handler",
      "input": "",
      "output": "func showAlertController(title: String, message: String, actions: [(String, UIAlertAction.Style)], completion: @escaping (Int) -> Void) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    for (index, action) in actions.enumerated() {\n        let alertAction = UIAlertAction(title: action.0, style: action.1) { _ in\n            completion(index)\n        }\n        alertController.addAction(alertAction)\n    }\n    \n    present(alertController, animated: true, completion: nil)\n}\n\n// Usage example:\n// showAlertController(title: \"Choose an option\", message: \"Please select an option below:\", actions: [(\"Option 1\", .default), (\"Option 2\", .default), (\"Cancel\", .cancel)]) { (selectedIndex) in\n//     print(\"Selected option index: \\(selectedIndex)\")\n// }"
    },
    {
      "instruction": " Write a Swift function to download an image from a URL, cache it, and set it to a UIImageView",
      "input": "",
      "output": "import UIKit\n\nlet imageCache = NSCache<AnyObject, AnyObject>()\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    if let cachedImage = imageCache.object(forKey: url.absoluteString as AnyObject) as? UIImage {\n        completion(cachedImage)\n        return\n    }\n\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, let image = UIImage(data: data), error == nil else {\n            completion(nil)\n            return\n        }\n\n        imageCache.setObject(image, forKey: url.absoluteString as AnyObject)\n        completion(image)\n    }.resume()\n}\n\nfunc setImage(from url: URL, to imageView: UIImageView) {\n    downloadImage(from: url) { image in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}\n\n// Usage example:\n// setImage(from: URL(string: \"https://example.com/image.jpg\")!, to: myImageView)"
    },
    {
      "instruction": " Write a Swift function to create a custom UIButton with rounded corners and a background color",
      "input": "",
      "output": "func createCustomButton(title: String, backgroundColor: UIColor, cornerRadius: CGFloat) -> UIButton {\n    let button = UIButton(type: .system)\n    button.translatesAutoresizingMaskIntoConstraints = false\n    button.setTitle(title, for: .normal)\n    button.backgroundColor = backgroundColor\n    button.layer.cornerRadius = cornerRadius\n    return button\n}\n\n// Usage example:\n// let myButton = createCustomButton(title: \"Tap me\", backgroundColor: .blue, cornerRadius: 10)\n// view.addSubview(myButton)"
    },
    {
      "instruction": " Write a Swift function to save data to UserDefaults and another function to retrieve it",
      "input": "",
      "output": "func saveDataToUserDefaults<T: Encodable>(key: String, data: T) {\n    let encoder = JSONEncoder()\n    if let encodedData = try? encoder.encode(data) {\n        UserDefaults.standard.set(encodedData, forKey: key)\n    }\n}\n\nfunc retrieveDataFromUserDefaults<T: Decodable>(key: String) -> T? {\n    if let data = UserDefaults.standard.object(forKey: key) as? Data {\n        let decoder = JSONDecoder()\n        return try? decoder.decode(T.self, from: data)\n    }\n    return nil\n}\n\n// Usage example:\n// struct User: Codable {\n//     let name: String\n//     let age: Int\n// }\n//\n// let user = User(name: \"John\", age: 30)\n// saveDataToUserDefaults(key: \"user\", data: user)\n//\n// if let retrievedUser: User = retrieveDataFromUserDefaults(key: \"user\") {\n//     print(\"User: \\(retrievedUser.name), age: \\(retrievedUser.age)\")\n// }"
    },
    {
      "instruction": " Write a Swift function to make a network request using URLSession and parse the JSON response",
      "input": "",
      "output": "import Foundation\n\nfunc fetchData<T: Decodable>(url: URL, completion: @escaping (Result<T, Error>) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            let error = NSError(domain: \"\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"Invalid data\"])\n            completion(.failure(error))\n            return\n        }\n        \n        do {\n            let decodedData = try JSONDecoder().decode(T.self, from: data)\n            completion(.success(decodedData))\n        } catch {\n            completion(.failure(error))\n        }\n    }.resume()\n}\n\n// Usage example:\n// struct Post: Codable {\n//     let id: Int\n//     let title: String\n// }\n//\n// fetchData(url: URL(string: \"https://jsonplaceholder.typicode.com/posts\")!) { (result: Result<[Post], Error>) in\n//     switch result {\n//     case .success(let posts):\n//         print(\"Fetched posts: \\(posts)\")\n//     case .failure(let error):\n//         print(\"Failed to fetch posts: \\(error.localizedDescription)\")\n//     }\n// }"
    },
    {
      "instruction": " Write a Swift function to create a UIStackView with multiple arranged subviews and custom spacing",
      "input": "",
      "output": "func createStackView(axis: NSLayoutConstraint.Axis, spacing: CGFloat, arrangedSubviews: [UIView]) -> UIStackView {\n    let stackView = UIStackView(arrangedSubviews: arrangedSubviews)\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    stackView.axis = axis\n    stackView.spacing = spacing\n    return stackView\n}\n\n// Usage example:\n// let label1 = UILabel()\n// label1.text = \"Label 1\"\n// let label2 = UILabel()\n// label2.text = \"Label 2\"\n// let stackView = createStackView(axis: .vertical, spacing: 10, arrangedSubviews: [label1, label2])\n// view.addSubview(stackView)"
    },
    {
      "instruction": " Write a Swift function to create a UITapGestureRecognizer and add it to a UIView",
      "input": "",
      "output": "func addTapGestureRecognizer(to view: UIView, target: Any, action: Selector) {\n    let tapGestureRecognizer = UITapGestureRecognizer(target: target, action: action)\n    view.addGestureRecognizer(tapGestureRecognizer)\n    view.isUserInteractionEnabled = true\n}\n\n// Make sure your class conforms to UIGestureRecognizerDelegate\n// extension ViewController: UIGestureRecognizerDelegate {\n// }\n//\n// Usage example:\n// addTapGestureRecognizer(to: myView, target: self, action: #selector(viewTapped))\n//\n// @objc func viewTapped() {\n//     print(\"View tapped\")\n// }"
    },
    {
      "instruction": "Write a Swift function to asynchronously download an image from a URL and display it in a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil else {\n            completion(nil)\n            return\n        }\n        DispatchQueue.main.async {\n            completion(UIImage(data: data))\n        }\n    }\n    task.resume()\n}\n\nfunc setImage(url: URL, imageView: UIImageView) {\n    downloadImage(from: url) { image in\n        imageView.image = image\n    }\n}"
    },
    {
      "instruction": " Create a custom UIView subclass with a built-in UITapGestureRecognizer that calls a closure when the view is tapped.",
      "input": "",
      "output": "import UIKit\n\nclass TappableUIView: UIView {\n    private var onTap: (() -> Void)?\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupGesture()\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        setupGesture()\n    }\n\n    private func setupGesture() {\n        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(viewTapped))\n        addGestureRecognizer(tapGesture)\n    }\n\n    func onTapped(_ closure: @escaping () -> Void) {\n        onTap = closure\n    }\n\n    @objc private func viewTapped() {\n        onTap?()\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a UIAlertViewController with customized title, message, and action button.",
      "input": "",
      "output": "import UIKit\n\nfunc createAlert(title: String, message: String, buttonText: String, handler: ((UIAlertAction) -> Void)?) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let buttonAction = UIAlertAction(title: buttonText, style: .default, handler: handler)\n    alertController.addAction(buttonAction)\n    return alertController\n}"
    },
    {
      "instruction": " Write a Swift function to create a UICollectionView with a custom UICollectionViewCell class and register the cell.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // Custom cell content\n}\n\nfunc createCollectionView() -> UICollectionView {\n    let layout = UICollectionViewFlowLayout()\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n    return collectionView\n}"
    },
    {
      "instruction": " Create a Swift function to encode a custom Codable object to JSON and save it to UserDefaults.",
      "input": "",
      "output": "import Foundation\n\nstruct CustomObject: Codable {\n    let key: String\n    let value: String\n}\n\nfunc saveToUserDefaults(customObject: CustomObject, forKey key: String) {\n    let encoder = JSONEncoder()\n    if let encoded = try? encoder.encode(customObject) {\n        UserDefaults.standard.set(encoded, forKey: key)\n    }\n}"
    },
    {
      "instruction": " Create a Swift function to decode a custom Codable object from JSON saved in UserDefaults.",
      "input": "",
      "output": "import Foundation\n\nfunc loadFromUserDefaults(forKey key: String) -> CustomObject? {\n    let decoder = JSONDecoder()\n    if let data = UserDefaults.standard.data(forKey: key),\n       let decoded = try? decoder.decode(CustomObject.self, from: data) {\n        return decoded\n    }\n    return nil\n}"
    },
    {
      "instruction": " Implement a custom UITableViewCell subclass with a UIImageView and UILabel.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let customImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n\n    let customLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupViews()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupViews() {\n        addSubview(customImageView)\n        addSubview(customLabel)\n\n        NSLayoutConstraint.activate([\n            customImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 8),\n            customImageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            customImageView.widthAnchor.constraint(equalToConstant: 40),\n            customImageView.heightAnchor.constraint(equalToConstant: 40),\n\n            customLabel.leadingAnchor.constraint(equalTo: customImageView.trailingAnchor, constant: 8),\n            customLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -8),\n            customLabel.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to animate the change in height of a UIView with Auto Layout constraints.",
      "input": "",
      "output": "import UIKitfunc animateHeightChange(for view: UIView, heightConstraint: NSLayoutConstraint, to newHeight: CGFloat, duration: TimeInterval) {\n    heightConstraint.constant = newHeight\n    UIView.animate(withDuration: duration) {\n        view.superview?.layoutIfNeeded()\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that applies a custom animation to a UIButton when pressed.",
      "input": "",
      "output": "func animateButtonPress(_ button: UIButton) {\n    UIView.animate(withDuration: 0.2, animations: {\n        button.transform = CGAffineTransform(scaleX: 0.9, y: 0.9)\n    }, completion: { _ in\n        UIView.animate(withDuration: 0.2, animations: {\n            button.transform = CGAffineTransform.identity\n        })\n    })\n}"
    },
    {
      "instruction": " Implement a UICollectionView with a custom UICollectionViewCell that displays an image and a label.",
      "input": "",
      "output": "class CustomCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n    @IBOutlet weak var textLabel: UILabel!\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n    let reuseIdentifier = \"CustomCell\"\n    let items = [(\"item1\", \"label1\"), (\"item2\", \"label2\"), (\"item3\", \"label3\")]\n\n    override func numberOfSections(in collectionView: UICollectionView) -> Int {\n        return 1\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        let (imageName, labelText) = items[indexPath.row]\n        \n        cell.imageView.image = UIImage(named: imageName)\n        cell.textLabel.text = labelText\n        \n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that presents an alert controller with an action to dismiss itself.",
      "input": "",
      "output": "func showAlert(withTitle title: String, message: String, in viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let dismissAction = UIAlertAction(title: \"OK\", style: .default) { _ in\n        alertController.dismiss(animated: true, completion: nil)\n    }\n    alertController.addAction(dismissAction)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Implement a UITableView that displays a list of strings and has a search bar to filter the list.",
      "input": "",
      "output": "class CustomTableViewController: UITableViewController, UISearchBarDelegate {\n    @IBOutlet weak var searchBar: UISearchBar!\n    \n    let items = [\"Apple\", \"Banana\", \"Orange\", \"Grape\"]\n    var filteredItems = [String]()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        searchBar.delegate = self\n        filteredItems = items\n    }\n    \n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredItems = items\n        } else {\n            filteredItems = items.filter { $0.lowercased().contains(searchText.lowercased()) }\n        }\n        tableView.reloadData()\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredItems.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\n        cell.textLabel?.text = filteredItems[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that sends a network request using URLSession and parses the JSON response.",
      "input": "",
      "output": "func fetchData(from url: URL, completion: @escaping (Result<[String: Any], Error>) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let json = try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any]\n            completion(.success(json ?? [:]))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " Implement a custom UIViewController that contains a UIPageViewController to display multiple view controllers in a paged manner.",
      "input": "",
      "output": "class CustomPageViewController: UIViewController, UIPageViewControllerDataSource, UIPageViewControllerDelegate {\n    var pageViewController: UIPageViewController!\n    var viewControllers: [UIViewController]!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        viewControllers = [\n            UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"FirstViewController\"),\n            UIStoryboard(name: \"Main\", bundle:nil).instantiateViewController(withIdentifier: \"SecondViewController\"),\n            UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"ThirdViewController\")\n        ]\n\n        pageViewController = UIPageViewController(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil)\n        pageViewController.dataSource = self\n        pageViewController.delegate = self\n\n        if let firstViewController = viewControllers.first {\n            pageViewController.setViewControllers([firstViewController], direction: .forward, animated: true, completion: nil)\n        }\n\n        addChild(pageViewController)\n        view.addSubview(pageViewController.view)\n        pageViewController.didMove(toParent: self)\n    }\n\n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n        guard let index = viewControllers.firstIndex(of: viewController) else { return nil }\n        let previousIndex = index - 1\n        guard previousIndex >= 0 else { return nil }\n        return viewControllers[previousIndex]\n    }\n\n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {\n        guard let index = viewControllers.firstIndex(of: viewController) else { return nil }\n        let nextIndex = index + 1\n        guard nextIndex < viewControllers.count else { return nil }\n        return viewControllers[nextIndex]\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that saves an image to the user's photo library using UIImageWriteToSavedPhotosAlbum.",
      "input": "",
      "output": "import Photos\n\nfunc saveImageToLibrary(_ image: UIImage, completion: @escaping (Result<Void, Error>) -> Void) {\n    PHPhotoLibrary.requestAuthorization { status in\n        guard status == .authorized else {\n            completion(.failure(NSError(domain: \"Not authorized to access photo library\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        UIImageWriteToSavedPhotosAlbum(image, nil, #selector(image(_:didFinishSavingWithError:contextInfo:)), nil)\n    }\n}\n\n@objc func image(_ image: UIImage, didFinishSavingWithError error: NSError?, contextInfo: UnsafeRawPointer) {\n    if let error = error {\n        print(\"Error saving image: \\(error)\")\n    } else {\n        print(\"Image saved successfully\")\n    }\n}"
    },
    {
      "instruction": " Implement a custom UIView subclass that draws a circular progress bar with a customizable stroke color and line width.",
      "input": "",
      "output": "class CircularProgressView: UIView {\n    private let progressLayer = CAShapeLayer()\n\n    @IBInspectable var progressColor: UIColor = .blue {\n        didSet {\n            progressLayer.strokeColor = progressColor.cgColor\n        }\n    }\n\n    @IBInspectable var lineWidth: CGFloat = 10 {\n        didSet {\n            progressLayer.lineWidth = lineWidth\n        }\n    }\n\n    var progress: CGFloat = 0 {\n        didSet {\n            setNeedsDisplay()\n        }\n    }\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup()\n    }\n\n    private func setup() {\n        progressLayer.strokeColor = progressColor.cgColor\n        progressLayer.lineWidth = lineWidth\n        progressLayer.fillColor = UIColor.clear.cgColor\n        progressLayer.lineCap = .round\n        layer.addSublayer(progressLayer)\n    }\n\n    override func draw(_ rect: CGRect) {\n        let center = CGPoint(x: bounds.midX, y: bounds.midY)\n        let radius = min(bounds.width, bounds.height) / 2 - lineWidth / 2\n        let startAngle: CGFloat = -.pi / 2\n        let endAngle = startAngle + .pi * 2 * progress\n\n        let path = UIBezierPath(arcCenter: center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)\n        progressLayer.path = path.cgPath\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to configure a UICollectionView with a custom cell and add a UICollectionViewFlowLayout",
      "input": "",
      "output": "class CustomCollectionViewCell: UICollectionViewCell {\n    // Add custom subviews and layout code here\n}\n\nclass MyViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    private var collectionView: UICollectionView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        let layout = UICollectionViewFlowLayout()\n        layout.itemSize = CGSize(width: 100, height: 100)\n        layout.sectionInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)\n        layout.minimumLineSpacing = 10\n        layout.minimumInteritemSpacing = 10\n\n        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n        collectionView.backgroundColor = .white\n\n        view.addSubview(collectionView)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor)\n        ])\n    }\n\n    // MARK: - UICollectionViewDataSource\n\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return dataSource.count // your number of items here\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        // Configure cell\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UIButton with rounded corners and a gradient background",
      "input": "",
      "output": "class GradientButton: UIButton {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        self.setup()\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        self.setup()\n    }\n\n    private func setup() {\n        self.layer.cornerRadius = 10\n        self.clipsToBounds = true\n\n        let gradientLayer = CAGradientLayer()\n        gradientLayer.frame = self.bounds\n        gradientLayer.colors = [UIColor.red.cgColor, UIColor.blue.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 1)\n\n        self.layer.insertSublayer(gradientLayer, at: 0)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to display an UIAlertController with a textField and two UIAlertAction buttons",
      "input": "",
      "output": "func presentAlertWithTextField() {\n    let alertController = UIAlertController(title: \"Enter text\", message: nil, preferredStyle: .alert)\n\n    alertController.addTextField { textField in\n        textField.placeholder = \"Type here\"\n    }\n\n    let submitAction = UIAlertAction(title: \"Submit\", style: .default) { _ in\n        if let text = alertController.textFields?.first?.text {\n            print(\"Submitted text: \\(text)\")\n        }\n    }\n    alertController.addAction(submitAction)\n\n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n    alertController.addAction(cancelAction)\n\n    present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift function to fetch JSON data from a URL using URLSession and decode it into a Codable struct",
      "input": "",
      "output": "struct ExampleData: Codable {\n    let property1: String\n    let property2: Int\n}\n\nfunc fetchData(from urlString: String, completion: @escaping (Result<ExampleData, Error>) -> Void) {\n    guard let url = URL(string: urlString) else { return }\n\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data\", code: 0, userInfo: nil)))\n            return\n        }\n\n        do {\n            let decoder = JSONDecoder()\n            let decodedData = try decoder.decode(ExampleData.self, from: data)\n            completion(.success(decodedData))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n\n    task.resume()\n}"
    },
    {
      "instruction": " Write a Swift function to save and retrieve a custom object to and from UserDefaults",
      "input": "",
      "output": "struct CustomObject: Codable {\n    let property1: String\n    let property2: Int\n}\n\nextension UserDefaults {\n    func setCustomObject(_customObject: CustomObject, forKey key: String) {\n        do {\n            let data = try JSONEncoder().encode(customObject)\n            set(data, forKey: key)\n        } catch {\n            print(\"Failed to save custom object: \\(error.localizedDescription)\")\n        }\n    }\n\n    func customObject(forKey key: String) -> CustomObject? {\n        guard let data = data(forKey: key) else { return nil }\n        do {\n            return try JSONDecoder().decode(CustomObject.self, from: data)\n        } catch {\n            print(\"Failed to decode custom object: \\(error.localizedDescription)\")\n            return nil\n        }\n    }\n}\n\n// Usage\nlet customObject = CustomObject(property1: \"Example\", property2: 42)\nUserDefaults.standard.setCustomObject(customObject, forKey: \"customObjectKey\")\nif let retrievedObject = UserDefaults.standard.customObject(forKey: \"customObjectKey\") {\n    print(\"Retrieved custom object: \\(retrievedObject)\")\n}"
    },
    {
      "instruction": " Write a Swift function to create and configure a UIPageViewController with three view controllers",
      "input": "",
      "output": "class MyPageViewController: UIPageViewController, UIPageViewControllerDataSource, UIPageViewControllerDelegate {\n\n    private lazy var viewControllersList: [UIViewController] = {\n        let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n        let viewController1 = storyboard.instantiateViewController(withIdentifier: \"ViewController1\")\n        let viewController2 = storyboard.instantiateViewController(withIdentifier: \"ViewController2\")\n        let viewController3 = storyboard.instantiateViewController(withIdentifier: \"ViewController3\")\n        return [viewController1, viewController2, viewController3]\n    }()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        dataSource = self\n        delegate = self\n\n        if let firstViewController = viewControllersList.first {\n            setViewControllers([firstViewController], direction: .forward, animated: true, completion: nil)\n        }\n    }\n\n    // MARK: - UIPageViewControllerDataSource\n\n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n        guard let index = viewControllersList.firstIndex(of: viewController) else { return nil }\n        let previousIndex = index - 1\n        return previousIndex >= 0 ? viewControllersList[previousIndex] : nil\n    }\n\n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {\n        guard let index = viewControllersList.firstIndex(of: viewController) else { return nil }\n        let nextIndex = index + 1\n        return nextIndex < viewControllersList.count ? viewControllersList[nextIndex] : nil\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to animate the scale and opacity of a UIView using UIViewPropertyAnimator",
      "input": "",
      "output": "func animateView(_ view: UIView) {\n    let animator = UIViewPropertyAnimator(duration: 0.5, curve: .easeInOut) {\n        view.transform = CGAffineTransform(scaleX: 1.5, y: 1.5)\n        view.alpha = 0.5\n    }\n\n    animator.addCompletion { position in\n        if position == .end {\n            UIView.animate(withDuration: 0.5) {\n                view.transform = CGAffineTransform.identity\n                view.alpha = 1.0\n            }\n        }\n    }\n\n    animator.startAnimation()\n}"
    },
    {
      "instruction": " Write a Swift function to request access to the user's location and display it in a MKMapView",
      "input": "",
      "output": "import MapKit\nimport CoreLocation\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate, MKMapViewDelegate {\n\n    private let locationManager = CLLocationManager()\n    private let mapView = MKMapView()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        mapView.delegate = self\n        view.addSubview(mapView)\n\n        mapView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            mapView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            mapView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            mapView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),\n            mapView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor)\n        ])\n\n        locationManager.delegate = self\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    // MARK: - CLLocationManagerDelegate\n\n    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n        if status == .authorizedWhenInUse {\n            locationManager.startUpdatingLocation()\n            mapView.showsUserLocation = true\n        } else {\n            locationManager.stopUpdatingLocation()\n            mapView.showsUserLocation = false\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            let region = MKCoordinateRegion(center: location.coordinate, latitudinalMeters: 1000, longitudinalMeters: 1000)\n            mapView.setRegion(region, animated"
    },
    {
      "instruction": "Create a custom table view cell with a profile image, name label, and subtitle label, and a custom table view controller that uses the custom cell",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var profileImageView: UIImageView!\n    @IBOutlet weak var nameLabel: UILabel!\n    @IBOutlet weak var subtitleLabel: UILabel!\n    \n    func configure(with image: UIImage, name: String, subtitle: String) {\n        profileImageView.image = image\n        nameLabel.text = name\n        subtitleLabel.text = subtitle\n    }\n}\n\nclass CustomTableViewController: UITableViewController {\n    var people: [Person] = []\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return people.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomTableViewCell\", for: indexPath) as! CustomTableViewCell\n        let person = people[indexPath.row]\n        cell.configure(with: person.profileImage, name: person.name, subtitle: person.subtitle)\n        return cell\n    }\n}"
    },
    {
      "instruction": " Create a UIViewController with a UITextField and a UILabel. Update the label text with each change in the text field.",
      "input": "",
      "output": "import UIKit\n\nclass CustomViewController: UIViewController, UITextFieldDelegate {\n    @IBOutlet weak var textField: UITextField!\n    @IBOutlet weak var label: UILabel!\n\n    override func viewDidLoad() {\n       super.viewDidLoad()\n        textField.delegate = self\n    }\n    \n    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {\n        let currentText = textField.text ?? \"\"\n        let newText = (currentText as NSString).replacingCharacters(in: range, with: string)\n        label.text = newText\n        return true\n    }\n}"
    },
    {
      "instruction": " Implement a custom UIScrollView with a UIImageView for zooming and panning an image.",
      "input": "",
      "output": "import UIKit\n\nclass ZoomableImageViewController: UIViewController, UIScrollViewDelegate {\n    @IBOutlet weak var scrollView: UIScrollView!\n    @IBOutlet weak var imageView: UIImageView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        scrollView.delegate = self\n        scrollView.minimumZoomScale = 1.0\n        scrollView.maximumZoomScale = 6.0\n    }\n    \n    func viewForZooming(in scrollView: UIScrollView) -> UIView? {\n        return imageView\n    }\n}"
    },
    {
      "instruction": " Create a custom UIPickerView with a label for displaying the selected item.",
      "input": "",
      "output": "import UIKit\n\nclass CustomPickerViewController: UIViewController, UIPickerViewDataSource, UIPickerViewDelegate {\n    @IBOutlet weak var pickerView: UIPickerView!\n    @IBOutlet weak var selectedLabel: UILabel!\n    \n    let items = [\"Apple\", \"Banana\", \"Cherry\", \"Date\", \"Fig\", \"Grape\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        pickerView.dataSource = self\n        pickerView.delegate = self\n        selectedLabel.text = items[0]\n    }\n    \n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {"
    },
    {
      "instruction": "Write a function in Swift language that retrieves the user's location and prints the latitude and longitude. Make sure to include necessary imports and request authorization if needed.",
      "input": "N/A",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    private let locationManager = CLLocationManager()\n\n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            print(\"Latitude: \\(location.coordinate.latitude), Longitude: \\(location.coordinate.longitude)\")\n            locationManager.stopUpdatingLocation()\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error: \\(error.localizedDescription)\")\n    }\n}\n\nlet locManager = LocationManager()"
    },
    {
      "instruction": " Write a function in Swift language that animates a UIView to move from its original position to a new position on the screen.",
      "input": "N/A",
      "output": "import UIKit\n\nfunc animateViewMovement(view: UIView, newPosition: CGPoint, duration: TimeInterval) {\n    UIView.animate(withDuration: duration) {\n        view.frame.origin = newPosition\n    }\n}\n\nlet sampleView = UIView(frame: CGRect(x: 0, y: 0, width: 50, height: 50))\nsampleView.backgroundColor = .red\n\nanimateViewMovement(view: sampleView, newPosition: CGPoint(x: 100, y: 100), duration: 0.5)"
    },
    {
      "instruction": " Write a function in Swift language that fetches JSON data from a given URL and decodes it into a specified Swift model.",
      "input": "URL: \"https://jsonplaceholder.typicode.com/todos/1\"\nSwift Model: Todo",
      "output": "import Foundation\n\nstruct Todo: Codable {\n    let userId: Int\n    let id: Int\n    let title: String\n    let completed: Bool\n}\n\nfunc fetchTodo(from url: String, completionHandler: @escaping (Result<Todo, Error>) -> Void) {\n    guard let url = URL(string: url) else {\n        return\n    }\n    let task = URLSession.shared.dataTask(with: url) { data, _, error in\n        if let error = error {\n            completionHandler(.failure(error))\n            return\n        }\n        guard let data = data else {\n            return\n        }\n        do {\n            let todo = try JSONDecoder().decode(Todo.self, from: data)\n            completionHandler(.success(todo))\n        } catch {\n            completionHandler(.failure(error))\n        }\n    }\n    task.resume()\n}\n\nfetchTodo(from: \"https://jsonplaceholder.typicode.com/todos/1\") { result in\n    switch result {\n    case .success(let todo):\n        print(todo)\n    case .failure(let error):\n        print(error.localizedDescription)\n    }\n}"
    },
    {
      "instruction": " Write a function in Swift language that saves a string value to UserDefaults and another function to retrieve the saved value.",
      "input": "N/A",
      "output": "import Foundation\n\nfunc saveToUserDefaults(key: String, value: String) {\n    UserDefaults.standard.set(value, forKey: key)\n}\n\nfunc getFromUserDefaults(key: String) -> String? {\n    return UserDefaults.standard.string(forKey: key)\n}\n\nsaveToUserDefaults(key: \"exampleKey\", value: \"Hello, World!\")\nif let retrievedValue = getFromUserDefaults(key: \"exampleKey\") {\n    print(retrievedValue)\n}"
    },
    {
      "instruction": " Write a function in Swift language that takes a table view cell and applies alternating background colors for odd and even rows.",
      "input": "N/A",
      "output": "import UIKit\n\nfunc applyAlternatingCellColors(cell: UITableViewCell, at indexPath: IndexPath) {\n    let evenRowColor = UIColor.lightGray\n    let oddRowColor = UIColor.white\n\n    if indexPath.row % 2 == 0 {\n        cell.backgroundColor = evenRowColor\n    } else {\n        cell.backgroundColor = oddRowColor\n    }\n}"
    },
    {
      "instruction": " Write a function in Swift language that implements a Long Press Gesture Recognizer on a UIView and prints a message when the gesture is recognized.",
      "input": "N/A",
      "output": "import UIKit\n\nfunc addLongPressGestureToView(_ view: UIView) {\n    let longPressGesture = UILongPressGestureRecognizer(target: self, action: #selector(handleLongPressGesture))\n    view.addGestureRecognizer(longPressGesture)\n}\n\n@objc func handleLongPressGesture(gesture: UILongPressGestureRecognizer) {\n    if gesture.state == .began {\n        print(\"Long press gesture recognized\")\n    }\n}"
    },
    {
      "instruction": " Write a function in Swift language that creates aUIAlertController with a title, message, and two buttons: one for a default action and one for a cancel action.",
      "input": "N/A",
      "output": "import UIKit\n\nfunc createAlert(title: String, message: String, actionTitle: String, cancelTitle: String) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n\n    let defaultAction = UIAlertAction(title: actionTitle, style: .default) { _ in\n        print(\"Default action triggered\")\n    }\n    let cancelAction = UIAlertAction(title: cancelTitle, style: .cancel) { _ in\n        print(\"Cancel action triggered\")\n    }\n\n    alertController.addAction(defaultAction)\n    alertController.addAction(cancelAction)\n\n    return alertController\n}\n\nlet alert = createAlert(title: \"Alert\", message: \"This is an example alert\", actionTitle: \"OK\", cancelTitle: \"Cancel\")"
    },
    {
      "instruction": " Write a function in Swift language that validates an email address by checking if it matches a regular expression pattern.",
      "input": "N/A",
      "output": "import Foundation\n\nfunc isValidEmail(_ email: String) -> Bool {\n    let emailRegex = \"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,64}\"\n    let emailPredicate = NSPredicate(format: \"SELF MATCHES %@\", emailRegex)\n    return emailPredicate.evaluate(with: email)\n}\n\nlet email = \"example@example.com\"\nif isValidEmail(email) {\n    print(\"\\(email) is a valid email address\")\n} else {\n    print(\"\\(email) is not a valid email address\")\n}"
    },
    {
      "instruction": "Write a Swift function to display an alert with a title, message, and two buttons - one for a positive action and one for a negative action, with their respective handler closures.",
      "input": "",
      "output": "func showAlert(withTitle title: String, message: String, positiveActionTitle: String, negativeActionTitle: String, positiveActionHandler: @escaping () -> Void, negativeActionHandler: @escaping () -> Void) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n\n    let positiveAction = UIAlertAction(title: positiveActionTitle, style: .default) { _ in\n        positiveActionHandler()\n    }\n    alertController.addAction(positiveAction)\n\n    let negativeAction = UIAlertAction(title: negativeActionTitle, style: .cancel) { _ in\n        negativeActionHandler()\n    }\n    alertController.addAction(negativeAction)\n\n    self.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift class that conforms to UITableViewDataSource and UITableViewDelegate for a UITableView displaying a list of contacts with their names and phone numbers.",
      "input": "",
      "output": "class ContactsTableViewController: UITableViewController {\n    private var contacts: [Contact] = []\n\n    func configure(with contacts: [Contact]) {\n        self.contacts = contacts\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return contacts.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"ContactCell\", for: indexPath)\n        let contact = contacts[indexPath.row]\n        cell.textLabel?.text = \"\\(contact.name) - \\(contact.phoneNumber)\"\n        return cell\n    }\n\n    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        tableView.deselectRow(at: indexPath, animated: true)\n        let contact = contacts[indexPath.row]\n        print(\"Selected contact: \\(contact.name)\")\n    }\n}\n\nstruct Contact {\n    let name: String\n    let phoneNumber: String\n}"
    },
    {
      "instruction": "Create a Swift function that asynchronously downloads an image from a URL and sets it to a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil, let image = UIImage(data: data) else {\n            completion(nil)\n            return\n        }\n        DispatchQueue.main.async {\n            completion(image)\n        }\n    }.resume()\n}\n\nfunc setImageAsync(for imageView: UIImageView, from url: URL) {\n    downloadImage(from: url) { image in\n        imageView.image = image\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to request the user's location with CLLocationManager",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    private let locationManager = CLLocationManager()\n\n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n    }\n\n    func requestLocationAuthorization() {\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n        if status == .authorizedWhenInUse {\n            locationManager.startUpdatingLocation()\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            print(\"Location: \\(location)\")\n        }\n    }\n}"
    },
    {
      "instruction": " Create a Swift function to play a sound using AVFoundation",
      "input": "",
      "output": "import AVFoundation\n\nvar audioPlayer: AVAudioPlayer?\n\nfunc playSound(filename: String, fileType: String) {\n    guard let url = Bundle.main.url(forResource: filename, withExtension: fileType) else { return }\n\n    do {\n        audioPlayer = try AVAudioPlayer(contentsOf: url)\n        audioPlayer?.play()\n    } catch {\n        print(\"Error playing sound: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that sends a POST request with JSON data",
      "input": "",
      "output": "import Foundation\n\nfunc sendPostRequest(url: URL, jsonData: Data, completion: @escaping (Data?, URLResponse?, Error?) -> Void) {\n    var request = URLRequest(url: url)\n    request.httpMethod = \"POST\"\n    request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n    request.httpBody = jsonData\n\n    let task = URLSession.shared.dataTask(with: request, completionHandler: completion)\n    task.resume()\n}"
    },
    {
      "instruction": " Implement a custom UICollectionViewCell with a UIImageView and UILabel",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    private(set) lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n\n    private(set) lazy var titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupViews()\n    }\n\n    private func setupViews() {\n        addSubview(imageView)\n        addSubview(titleLabel)\n\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.bottomAnchor.constraint(equalTo: titleLabel.topAnchor),\n\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor),\n        ])\n    }\n}"
    },
    {
      "instruction": " Implement a Swift function that fetches JSON data from a REST API and decodes it",
      "input": "",
      "output": "import Foundation\n\nstruct ExampleModel: Codable {\n    let id: Int\n    let name: String\n}\n\nfunc fetchJSONData<T: Codable>(url: URL, completion: @escaping (Result<T, Error>) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data\", code: 0)))\n            return\n        }\n\n        do {\n            let decodedData = try JSONDecoder().decode(T.self, from: data)\n            completion(.success(decodedData))\n        } catch {\n            completion(.failure(error))\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " Write a Swift functionthat animates a UIView with a spring effect",
      "input": "",
      "output": "import UIKit\n\nfunc animateSpringEffect(view: UIView, duration: TimeInterval, delay: TimeInterval, dampingRatio: CGFloat, initialVelocity: CGFloat) {\n    UIView.animate(withDuration: duration, delay: delay, usingSpringWithDamping: dampingRatio, initialSpringVelocity: initialVelocity, options: [], animations: {\n        view.transform = CGAffineTransform(scaleX: 1.2, y: 1.2)\n    }, completion: { _ in\n        UIView.animate(withDuration: duration, animations: {\n            view.transform = CGAffineTransform.identity\n        })\n    })\n}"
    },
    {
      "instruction": " Implement a Swift function that saves an image to the user's photo library",
      "input": "",
      "output": "import Photos\n\nfunc saveImageToPhotoLibrary(image: UIImage, completionHandler: @escaping (Bool, Error?) -> Void) {\n    PHPhotoLibrary.requestAuthorization { status in\n        if status == .authorized {\n            PHPhotoLibrary.shared().performChanges({\n                PHAssetChangeRequest.creationRequestForAsset(from: image)\n            }, completionHandler: completionHandler)\n        } else {\n            completionHandler(false, NSError(domain: \"Not authorized to access photo library\", code: 0))\n        }\n    }\n}"
    },
    {
      "instruction": " Create a Swift function that creates a UIAlertController with an action sheet",
      "input": "",
      "output": "import UIKit\n\nfunc createActionSheet(title: String?, message: String?, actions: [UIAlertAction]) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .actionSheet)\n\n    for action in actions {\n        alertController.addAction(action)\n    }\n\n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel)\n    alertController.addAction(cancelAction)\n\n    return alertController\n}"
    },
    {
      "instruction": "Create a Swift table view controller that displays a list of contacts with their names and phone numbers.",
      "input": "",
      "output": "import UIKit\n\nstruct Contact {\n    let name: String\n    let phoneNumber: String\n}\n\nclass ContactsTableViewController: UITableViewController {\n\n    let contacts: [Contact] = [\n        Contact(name: \"Alice\", phoneNumber: \"555-1234\"),\n        Contact(name: \"Bob\", phoneNumber: \"555-5678\"),\n        Contact(name: \"Charlie\", phoneNumber: \"555-8765\")\n    ]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"contactCell\")\n    }\n\n    override func numberOfSections(in tableView: UITableView) -> Int {\n        return 1\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return contacts.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"contactCell\", for: indexPath)\n        let contact = contacts[indexPath.row]\n        cell.textLabel?.text = \"\\(contact.name) - \\(contact.phoneNumber)\"\n        return cell\n    }\n}"
    },
    {
      "instruction": " Create a Swift function that retrieves weather data from an API endpoint and converts the JSON response into a Swift object.",
      "input": "",
      "output": "import Foundation\n\nstruct WeatherData: Decodable {\n    let temperature: Double\n    let humidity: Double\n    let pressure: Double\n}\n\nfunc fetchWeatherData(completion: @escaping (WeatherData?, Error?) -> Void) {\n    let url = URL(string: \"https://api.example.com/weather\")!\n\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data else {\n            completion(nil, error)\n            return\n        }\n\n        do {\n            let decoder = JSONDecoder()\n            let weatherData = try decoder.decode(WeatherData.self, from: data)\n            completion(weatherData, nil)\n        } catch {\n            completion(nil, error)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " Create a Swift UICollectionView that displays a grid of images.",
      "input": "",
      "output": "import UIKit\n\nclass ImageCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n}\n\nclass ImagesCollectionViewController: UICollectionViewController {\n    let imageNames = [\"image1\", \"image2\", \"image3\", \"image4\", \"image5\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.collectionView.register(UINib(nibName: \"ImageCollectionViewCell\", bundle: nil), forCellWithReuseIdentifier: \"imageCell\")\n    }\n\n    override func numberOfSections(in collectionView: UICollectionView) -> Int {\n        return 1\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return imageNames.count\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"imageCell\", for: indexPath) as! ImageCollectionViewCell\n        cell.imageView.image = UIImage(named: imageNames[indexPath.row])\n        return cell\n    }\n}"
    },
    {
      "instruction": " Implement a custom UIView subclass that draws a circular progress bar.",
      "input": "",
      "output": "import UIKit\n\nclass CircularProgressView: UIView {\n    var progress: CGFloat = 0.0 {\n        didSet {\n            setNeedsDisplay()\n        }\n    }\n\n    override func draw(_ rect: CGRect) {\n        let center = CGPoint(x: bounds.width / 2, y: bounds.height / 2)\n        let radius = min(bounds.width, bounds.height) / 2\n        let startAngle: CGFloat = -.pi / 2\n        let endAngle = startAngle + progress * 2 * .pi\n\n        let path = UIBezierPath(arcCenter: center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)\n\n        UIColor.blue.setStroke()\n        path.lineWidth = 10\n        path.lineCapStyle = .round\n        path.stroke()\n    }\n}"
    },
    {
      "instruction": " Implement a Swift function that saves an image to the user's photo library.",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToPhotoLibrary(image: UIImage, completion: @escaping (Bool, Error?) -> Void) {\n    PHPhotoLibrary.requestAuthorization { status in\n        guard status == .authorized else {\n            completion(false, nil)\n            return\n        }\n\n        PHPhotoLibrary.shared().performChanges({\n            PHAssetChangeRequest.creationRequestForAsset(from: image)\n        }) { success, error in\n            completion(success, error)\n        }\n    }\n}"
    },
    {
      "instruction": " Create a Swift class that uses Core Location to retrieve the user's current location.",
      "input": "",
      "output": "import UIKit\nimport CoreLocation\n\nclass LocationService: NSObject, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n    var currentLocation: CLLocation?\n\n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    func startUpdatingLocation() {\n        locationManager.startUpdatingLocation()\n    }\n\n    func stopUpdatingLocation() {\n        locationManager.stopUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            currentLocation = location\n            print(\"Current location: \\(location)\")\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error: \\(error)\")\n    }\n}\n\nlet locationService = LocationService()\nlocationService.startUpdatingLocation()"
    },
    {
      "instruction": " Create a Swift function that plays a sound file using AVFoundation.",
      "input": "",
      "output": "import AVFoundation\n\nvar audioPlayer: AVAudioPlayer?\n\nfunc playSound(soundFileName: String) {\n    if let url = Bundle.main.url(forResource: soundFileName, withExtension: \"mp3\") {\n        do {\n            audioPlayer = try AVAudioPlayer(contentsOf: url)\n            audioPlayer?.play()\n        } catch {\n            print(\"Error: Couldn't load sound file.\")\n        }\n    }\n}\n\nplaySound(soundFileName: \"exampleSound\")"
    },
    {
      "instruction": " Implement a Swift UIPickerView that displays a list of cities and prints the selected city when the picker is changed.",
      "input": "",
      "output": "import UIKit\n\nclass CityPickerViewController: UIViewController, UIPickerViewDataSource, UIPickerViewDelegate {\n    @IBOutlet weak var pickerView: UIPickerView!\n\n    let cities = [\"New York\", \"Los Angeles\", \"Chicago\", \"Houston\", \"Phoenix\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        pickerView.dataSource = self\n        pickerView.delegate = self\n    }\n\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return cities.count\n    }\n\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return cities[row]\n    }\n\n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        print(\"Selected city: \\(cities[row])\")\n    }\n}"
    },
    {
      "instruction": " \n\n\nImplement a function called `validateForm` that checks if all the required fields in a form are valid and returns a boolean indicating the form's validity.",
      "input": "class AddTransactionViewController: UIViewController {\n    // previous code\n    @IBOutlet weak var amountTextField: UITextField!\n    @IBOutlet weak var descriptionTextField: UITextField!\n    @IBOutlet weak var categoryPickerView: UIPickerView!\n    @IBOutlet weak var dateTextField: UITextField!\n    @IBOutlet weak var saveButton: UIButton!\n\n    private func validateForm() -> Bool {\n        // TODO: Add your code here\n    }\n}",
      "output": "class AddTransactionViewController: UIViewController {\n    // previous code\n    @IBOutlet weak var amountTextField: UITextField!\n    @IBOutlet weak var descriptionTextField: UITextField!\n    @IBOutlet weak var categoryPickerView: UIPickerView!\n    @IBOutlet weak var dateTextField: UITextField!\n    @IBOutlet weak var saveButton: UIButton!\n\n    private func validateForm() -> Bool {\n        guard let amountText = amountTextField.text,\n              let descriptionText = descriptionTextField.text,\n              let dateText = dateTextField.text,\n              !amountText.isEmpty,\n              !descriptionText.isEmpty,\n              categoryPickerView.selectedRow(inComponent: 0) != -1,\n              !dateText.isEmpty else {\n            return false\n        }\n        return true\n    }\n}"
    },
    {
      "instruction": " \n\n\nImplement a function called `saveTransaction` that creates a new `Transaction` object from the form values and saves it to the `transactions` array.",
      "input": "class AddTransactionViewController: UIViewController {\n    // previous code\n    private var transactions: [Transaction] = []\n\n    private func saveTransaction() {\n        // TODO: Add your code here\n    }\n}",
      "output": "class AddTransactionViewController: UIViewController {\n    // previous code\n    private var transactions: [Transaction] = []\n\n    private func saveTransaction() {\n        let amount = Double(amountTextField.text!)!\n        let description = descriptionTextField.text!\n        let categoryIndex = categoryPickerView.selectedRow(inComponent: 0)\n        let category = Category.allCases[categoryIndex]\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat = \"yyyy-MM-dd\"\n        let date = dateFormatter.date(from: dateTextField.text!)!\n\n        let newTransaction = Transaction(amount: amount, description: description, category: category, date: date)\n        transactions.append(newTransaction)\n    }\n}"
    },
    {
      "instruction": " \n\n\nImplement swipe-to-delete functionality for transactions in the `MainViewController`'s tableView.",
      "input": "class MainViewController: UIViewController {\n    // previous code\n    @IBOutlet weak var tableView: UITableView!\n}",
      "output": "extension MainViewController: UITableViewDelegate, UITableViewDataSource {\n    // other tableView delegate and data source methods\n\n    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {\n        if editingStyle == .delete {\n            transactions.remove(at: indexPath.row)\n            tableView.deleteRows(at: [indexPath], with: .automatic)\n        }\n    }\n}"
    },
    {
      "instruction": " \n\n\nImplement a function called `showTransactionDetails` that presents a `TransactionDetailsViewController` with the details of the selected transaction.",
      "input": "class MainViewController: UIViewController {\n    // previous code\n    private func showTransactionDetails(for transaction: Transaction) {\n        // TODO: Add your code here\n    }\n}",
      "output": "class MainViewController: UIViewController {\n    // previous code\n    private func showTransactionDetails(for transaction: Transaction) {\n        let transactionDetailsViewController = storyboard?.instantiateViewController(withIdentifier: \"TransactionDetailsViewController\") as! TransactionDetailsViewController\n        transactionDetailsViewController.configure(with: transaction)\n        present(transactionDetailsViewController, animated: true)\n    }\n}"
    },
    {
      "instruction": " \n\n\nImplement a function called `configureCardCell` that configures a `UICollectionViewCell` with the given card data.",
      "input": "class MainViewController: UIViewController {\n    // previous code\n    @IBOutlet weak var collectionView: UICollectionView!\n\n    private func configureCardCell(for cell: UICollectionViewCell, with card: Card) {\n        // TODO: Add your code here\n    }\n}",
      "output": "class MainViewController: UIViewController {\n    // previous code\n    @IBOutlet weak var collectionView: UICollectionView!\n\n    private func configureCardCell(for cell: UICollectionViewCell, with card: Card) {\n        guard let cardCell = cell as? CardCollectionViewCell else { return }\n        cardCell.cardNumberLabel.text = card.formattedNumber()\n        cardCell.cardHolderNameLabel.text = card.holderName\n        cardCell.expiryDateLabel.text = card.formattedExpiryDate()\n        cardCell.cardTypeImageView.image = UIImage(named: card.type.rawValue)\n    }\n}"
    },
    {
      "instruction": " \n\n\nImplement a function called `showCardDetails` that presents a `CardDetailsViewController` with the details of the selected card.",
      "input": "class MainViewController: UIViewController {\n    // previous code\n    private func showCardDetails(for card: Card) {\n        // TODO: Add your code here\n    }\n}",
      "output": "class MainViewController: UIViewController {\n    // previous code\n    private func showCardDetails(for card: Card) {\n        let cardDetailsViewController = storyboard?.instantiateViewController(withIdentifier: \"CardDetailsViewController\") as! CardDetailsViewController\n        cardDetailsViewController.configure(with: card)\n        present(cardDetailsViewController, animated: true)\n    }\n}"
    },
    {
      "instruction": " \n\n\nImplement a function called `updateAccountBalance` that updates the account balance label whenever a new transaction is added.",
      "input": "class MainViewController: UIViewController {\n    // previous code\n    @IBOutlet weak var accountBalanceLabel: UILabel!\n    \n    private func updateAccountBalance() {\n        // TODO: Add your code here\n    }\n}",
      "output": "class MainViewController: UIViewController {\n    // previous code\n    @IBOutlet weak var accountBalanceLabel: UILabel!\n    \n    private func updateAccountBalance() {\n        let totalBalance = transactions.reduce(0) { (result, transaction) -> Double in\n            return result + transaction.amount\n        }\n        accountBalanceLabel.text = String(format: \"%.2f\", totalBalance)\n    }\n}"
    },
    {
      "instruction": "Create a Swift function that accepts two date strings in the format \"yyyy-MM-dd\" and returns the number of days between them.",
      "input": "let date1 = \"2021-01-01\"\nlet date2 = \"2021-01-10\"",
      "output": "import Foundation\n\nfunc daysBetweenDates(date1: String, date2: String) -> Int? {\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = \"yyyy-MM-dd\"\n    \n    guard let firstDate = dateFormatter.date(from: date1), let secondDate = dateFormatter.date(from: date2) else {\n        return nil\n    }\n    \n    let calendar = Calendar.current\n    let dateComponents = calendar.dateComponents([.day], from: firstDate, to: secondDate)\n    \n    return dateComponents.day\n}\n\nlet date1 = \"2021-01-01\"\nlet date2 = \"2021-01-10\"\n\nif let days = daysBetweenDates(date1: date1, date2: date2) {\n    print(\"Days between dates: \\(days)\")\n}"
    },
    {
      "instruction": " Write a Swift function that converts a given temperature value in Fahrenheit to Celsius.",
      "input": "let temperatureInFahrenheit = 75.0",
      "output": "func fahrenheitToCelsius(_ fahrenheit: Double) -> Double {\n    return (fahrenheit - 32) * 5 / 9\n}\n\nlet temperatureInFahrenheit = 75.0\nlet temperatureInCelsius = fahrenheitToCelsius(temperatureInFahrenheit)\nprint(\"Temperature in Celsius: \\(temperatureInCelsius)\")"
    },
    {
      "instruction": " Create a custom UITableViewCell subclass that contains a title label and a switch control.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    let switchControl: UISwitch = {\n        let switchControl = UISwitch()\n        switchControl.translatesAutoresizingMaskIntoConstraints = false\n        return switchControl\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        addSubview(titleLabel)\n        addSubview(switchControl)\n        \n        NSLayoutConstraint.activate([\n            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 16),\n            titleLabel.centerYAnchor.constraint(equalTo: centerYAnchor),\n            \n            switchControl.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -16),\n            switchControl.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that accepts a string and returns the most occurring character from the input string.",
      "input": "let inputString = \"hello world\"",
      "output": "func mostOccurringCharacter(in string: String) -> Character? {\n    var characterCount = [Character: Int]()\n    \n    for character in string {\n        characterCount[character, default: 0] += 1\n    }\n    \n    return characterCount.max { a, b in a.value < b.value }?.key\n}\n\nlet inputString = \"hello world\"\nif let mostCommonCharacter = mostOccurringCharacter(in: inputString) {\n    print(\"Most occurring character: \\(mostCommonCharacter)\")\n}"
    },
    {
      "instruction": " Create a Swift function that takes an array of integers and returns the sum of all even numbers in the array.",
      "input": "let numbers = [1, 2, 3, 4, 5, 6]",
      "output": "func sumOfEvenNumbers(in numbers: [Int]) -> Int {\n    return numbers.filter { $0 % 2 == 0 }.reduce(0, +)\n}\n\nlet numbers = [1, 2, 3, 4, 5, 6]\nlet sum = sumOfEvenNumbers(in: numbers)\nprint(\"Sum of even numbers: \\(sum)\")"
    },
    {
      "instruction": " Write a Swift function that takes a string and returns the number of vowels and consonants in the string.",
      "input": "let inputString = \"hello world\"",
      "output": "func countVowelsAndConsonants(in string: String) -> (vowels: Int, consonants: Int) {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\n    var vowelCount = 0\n    var consonantCount = 0\n\n    for character in string.lowercased() {\n        if vowels.contains(character) {\n            vowelCount += 1\n        } else if consonants.contains(character) {\n            consonantCount += 1\n        }\n    }\n\n    return (vowels: vowelCount, consonants: consonantCount)\n}\n\nlet inputString = \"hello world\"\nlet counts = countVowelsAndConsonants(in: inputString)\nprint(\"Vowels: \\(counts.vowels), Consonants: \\(counts.consonants)\")"
    },
    {
      "instruction": " Create a Swift function that validates an email address using a regular expression.",
      "input": "let email = \"example@email.com\"",
      "output": "import Foundation\n\nfunc isValidEmail(_ email: String) -> Bool {\n    let regex = \"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}\"\n    let predicate = NSPredicate(format: \"SELF MATCHES %@\", regex)\n    return predicate.evaluate(with: email)\n}\n\nlet email = \"example@email.com\"\n\nif isValidEmail(email) {\n    print(\"Valid email\")\n} else {\n    print(\"Invalid email\")\n}"
    },
    {
      "instruction": " Create a Swift function that finds the longest word in a given string.",
      "input": "let inputString = \"The quick brown fox jumps over the lazy dog\"",
      "output": "func longestWord(in string: String) -> String? {\n    let words = string.components(separatedBy: \" \")\n    return words.max { a, b in a.count < b.count }\n}\n\nlet inputString = \"The quick brown fox jumps over the lazy dog\"\nif let longest = longestWord(in: inputString) {\n    print(\"Longest word: \\(longest)\")\n}"
    },
    {
      "instruction": " Write a Swift function to request location updates and print the user's current location using CoreLocation",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n\n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    func startLocationUpdates() {\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        guard let location = locations.last else { return }\n        print(\"Current location: \\(location)\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement a custom UIRefreshControl for a UITableView",
      "input": "",
      "output": "import UIKit\n\nclass RefreshableViewController: UITableViewController {\n\n    let refresh = UIRefreshControl()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupRefreshControl()\n    }\n\n    func setupRefreshControl() {\n        refresh.addTarget(self, action: #selector(refreshData), for: .valueChanged)\n        tableView.refreshControl = refresh\n    }\n\n    @objc func refreshData() {\n        // Perform your data fetching or tasks here\n        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n            self.refresh.endRefreshing()\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement a custom UITableViewCell with a custom xib file",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n\n    @IBOutlet weak var customLabel: UILabel!\n\n    override func awakeFromNib() {\n        super.awakeFromNib()\n    }\n\n    func configureCell(text: String) {\n        customLabel.text = text\n    }\n\n    static var nib: UINib {\n        return UINib(nibName: String(describing: self), bundle: nil)\n    }\n\n    static var reuseIdentifier: String {\n        return String(describing: self)\n    }\n}\n\n// Usage in a UIViewController\nclass MyTableViewController: UITableViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.nib, forCellReuseIdentifier: CustomTableViewCell.reuseIdentifier)\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.reuseIdentifier, for: indexPath) as! CustomTableViewCell\n        cell.configureCell(text: \"Custom cell\")\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a UIAlertController with multiple actions",
      "input": "",
      "output": "import UIKit\n\nclass AlertViewController: UIViewController {\n\n    func showAlert() {\n        let alertController = UIAlertController(title: \"Alert\", message: \"Choose an option\", preferredStyle: .alert)\n\n        let action1 = UIAlertAction(title: \"Option 1\", style: .default) { _ in\n            print(\"Option 1 selected\")\n        }\n        let action2 = UIAlertAction(title: \"Option 2\", style: .default) { _ in\n            print(\"Option 2 selected\")\n        }\n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n\n        alertController.addAction(action1)\n        alertController.addAction(action2)\n        alertController.addAction(cancelAction)\n\n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement a search bar using UISearchController in a UITableViewController",
      "input": "",
      "output": "import UIKit\n\nclass SearchTableViewController: UITableViewController, UISearchResultsUpdating {\n\n    let searchController = UISearchController(searchResultsController: nil)\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupSearchController()\n    }\n\n    func setupSearchController() {\n        searchController.searchResultsUpdater = self\n        searchController.obscuresBackgroundDuringPresentation = false\n        searchController.searchBar.placeholder = \"Search\"\n        navigationItem.searchController = searchController\n        definesPresentationContext =true\n    }\n\n    func updateSearchResults(for searchController: UISearchController) {\n        if let searchText = searchController.searchBar.text, !searchText.isEmpty {\n            // Perform your search using searchText\n            print(\"Searching for: \\(searchText)\")\n        } else {\n            // Reset the search results if the search bar text is empty\n            print(\"Resetting search results\")\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement pagination in a UITableView using UIScrollViewDelegate",
      "input": "",
      "output": "import UIKit\n\nclass PaginationTableViewController: UITableViewController, UIScrollViewDelegate {\n\n    var currentPage = 1\n    var isLoading = false\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        loadMoreData(page: currentPage)\n    }\n\n    func loadMoreData(page: Int) {\n        guard !isLoading else { return }\n        isLoading = true\n        // Fetch data for the current page\n        print(\"Fetching data for page: \\(page)\")\n\n        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n            // Update data source and reload table view\n            self.isLoading = false\n            self.currentPage += 1\n            self.tableView.reloadData()\n        }\n    }\n\n    override func scrollViewDidScroll(_ scrollView: UIScrollView) {\n        let offsetY = scrollView.contentOffset.y\n        let contentHeight = scrollView.contentSize.height\n\n        if offsetY > contentHeight - scrollView.frame.height {\n            loadMoreData(page: currentPage)\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement a simple UICollectionView with custom UICollectionViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n\n    @IBOutlet weak var titleLabel: UILabel!\n\n    func configureCell(title: String) {\n        titleLabel.text = title\n    }\n\n    static var nib: UINib {\n        return UINib(nibName: String(describing: self), bundle: nil)\n    }\n\n    static var reuseIdentifier: String {\n        return String(describing: self)\n    }\n}\n\nclass CollectionViewController: UICollectionViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.nib, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        cell.configureCell(title: \"Item \\(indexPath.row)\")\n        return cell\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to fetch data from a JSON API endpoint and decode it into a custom model using URLSession and Codable.",
      "input": "",
      "output": "import Foundation\n\nstruct MyModel: Codable {\n    let id: Int\n    let name: String\n}\n\nfunc fetchData(completion: @escaping (Result<MyModel, Error>) -> Void) {\n    let url = URL(string: \"https://api.example.com/data\")!\n\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else {\n            let error = NSError(domain: \"DataError\", code: 1, userInfo: nil)\n            completion(.failure(error))\n            return\n        }\n\n        do {\n            let decoder = JSONDecoder()\n            let decodedData = try decoder.decode(MyModel.self, from: data)\n            completion(.success(decodedData))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n\n    task.resume()\n}"
    },
    {
      "instruction": " Write a Swift function to validate an email address using a regular expression.",
      "input": "",
      "output": "import Foundation\n\nfunc isValidEmail(_ email: String) -> Bool {\n    let pattern = \"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,}\"\n    let regex = try? NSRegularExpression(pattern: pattern, options: .caseInsensitive)\n    return regex?.firstMatch(in: email, options: [], range: NSRange(location: 0, length: email.count)) != nil\n}"
    },
    {
      "instruction": " Write a Swift function to display an alert view controller with a single \"OK\" button.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(title: String, message: String, viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let okAction = UIAlertAction(title: \"OK\", style: .default, handler: nil)\n    alertController.addAction(okAction)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift function to add a gradient background to a UIView.",
      "input": "",
      "output": "import UIKit\n\nfunc addGradientBackground(to view: UIView, colors: [CGColor], startPoint: CGPoint, endPoint: CGPoint) {\n    let gradientLayer = CAGradientLayer()\n    gradientLayer.colors = colors\n    gradientLayer.startPoint = startPoint\n    gradientLayer.endPoint = endPoint\n    gradientLayer.frame = view.bounds\n    \n    view.layer.insertSublayer(gradientLayer, at: 0)\n}"
    },
    {
      "instruction": " Write a Swift function to animate the movement of a UIView.",
      "input": "",
      "output": "import UIKit\n\nfunc animateViewMovement(_ view: UIView, to newPosition: CGPoint, duration: TimeInterval) {\n    UIView.animate(withDuration: duration, animations: {\n        view.frame.origin = newPosition\n    })\n}"
    },
    {
      "instruction": " Write a Swift function to save an image to the user's photo library.",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToPhotoLibrary(_ image: UIImage, completion: @escaping (Result<Void, Error>) -> Void) {\n    PHPhotoLibrary.requestAuthorization { status in\n        if status == .authorized {\n            PHPhotoLibrary.shared().performChanges({\n                PHAssetChangeRequest.creationRequestForAsset(from: image)\n            }) { success, error in\n                if success {\n                    completion(.success(()))\n                } else if let error = error {\n                    completion(.failure(error))\n                }\n            }\n        } else {\n            let error = NSError(domain: \"PhotoLibraryError\", code: 1, userInfo: nil)\n            completion(.failure(error))\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to search for a specific string in a UITextView.",
      "input": "",
      "output": "import UIKit\n\nfunc findText(_ searchText: String, in textView: UITextView) -> [NSRange] {\n    let text = textView.text as NSString\n    let range = NSRange(location: 0, length: text.length)\n    let regex = try? NSRegularExpression(pattern: searchText, options: .caseInsensitive)\n    let matches = regex?.matches(in: textView.text, options: [], range: range) ?? []\n    \n    return matches.map { $0.range }\n}"
    },
    {
      "instruction": " Write a Swift function to calculate the distance between two CLLocationCoordinate2D points.",
      "input": "",
      "output": "import CoreLocation\n\nfunc distanceBetweenCoordinates(_coordinate1: CLLocationCoordinate2D, _ coordinate2: CLLocationCoordinate2D) -> CLLocationDistance {\n    let location1 = CLLocation(latitude: coordinate1.latitude, longitude: coordinate1.longitude)\n    let location2 = CLLocation(latitude: coordinate2.latitude, longitude: coordinate2.longitude)\n    \n    return location1.distance(from: location2)\n}"
    },
    {
      "instruction": " Write a Swift class that implements a custom UITableViewCell with an image and label.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let cellLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupSubviews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupSubviews() {\n        contentView.addSubview(cellImageView)\n        contentView.addSubview(cellLabel)\n\n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 8),\n            cellImageView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),\n            cellImageView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8),\n            cellImageView.widthAnchor.constraint(equalTo: cellImageView.heightAnchor),\n            \n            cellLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 16),\n            cellLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -8),\n            cellLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that registers a custom UICollectionViewCell for a UICollectionView.",
      "input": "",
      "output": "import UIKit\n\nfunc registerCustomCollectionViewCell(collectionView: UICollectionView, cellIdentifier: String) {\n    collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: cellIdentifier)\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // Custom cell implementation\n}"
    },
    {
      "instruction": " Write a Swift function that downloads an image from a URL and sets it to a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc setImageFromUrl(urlString: String, imageView: UIImageView) {\n    guard let url = URL(string: urlString) else { return }\n    \n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            print(\"Error downloading image: \\(error)\")\n            return\n        }\n        \n        guard let data = data else { return }\n        DispatchQueue.main.async {\n            imageView.image = UIImage(data: data)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " Write a Swift function that adds a pan gesture recognizer to a UIView.",
      "input": "",
      "output": "import UIKit\n\nfunc addPanGestureRecognizer(to view: UIView, target: Any, action: Selector) {\n    let panGestureRecognizer = UIPanGestureRecognizer(target: target, action: action)\n    view.addGestureRecognizer(panGestureRecognizer)\n}"
    },
    {
      "instruction": " Write a Swift function that animates the rotation of a UIView by a specified angle in radians.",
      "input": "",
      "output": "import UIKit\n\nfunc animateRotation(_ view: UIView, angle: CGFloat, duration: TimeInterval) {\n    UIView.animate(withDuration: duration) {\n        view.transform = CGAffineTransform(rotationAngle: angle)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that creates a URLSession data task and handles the response with a completion handler.",
      "input": "",
      "output": "import Foundation\n\nfunc fetchDataFromUrl(urlString: String, completionHandler: @escaping (Data?, URLResponse?, Error?) -> Void) {\n    guard let url = URL(string: urlString) else { return }\n    \n    let dataTask = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        completionHandler(data, response, error)\n    }\n    \n    dataTask.resume()\n}"
    },
    {
      "instruction": " Write a Swift function that saves a key-value pair to UserDefaults and a function that retrieves the value for a specified key.",
      "input": "",
      "output": "import Foundation\n\nfunc saveToUserDefaults(key: String, value: Any) {\n    UserDefaults.standard.set(value, forKey: key)\n}\n\nfunc getValueFromUserDefaults(key: String) -> Any? {\n    return UserDefaults.standard.object(forKey: key)\n}"
    },
    {
      "instruction": "Implement a function to handle a button tap event to toggle between dark and light mode in a mobile app. The provided code is in Swift language.",
      "input": "enum AppTheme {\n    case light\n    case dark\n}\n\nvar currentTheme: AppTheme = .light\n\nfunc toggleTheme() {\n    // TODO: Add your code here\n}\n\n// Simulate a button tap event\ntoggleTheme()",
      "output": "enum AppTheme {\n    case light\n    case dark\n}\n\nvar currentTheme: AppTheme = .light\n\nfunc toggleTheme() {\n    currentTheme = currentTheme == .light ? .dark : .light\n}\n\n// Simulate a button tap event\ntoggleTheme()"
    },
    {
      "instruction": " \nImplement a function that takes a UIImage and resizes it to the specified width and height, maintaining aspect ratio. The provided code is in Swift language.",
      "input": "import UIKit\n\nfunc resizeImage(image: UIImage, toWidth width: CGFloat, andHeight height: CGFloat) -> UIImage {\n    // TODO: Add your code here\n}",
      "output": "import UIKit\n\nfunc resizeImage(image: UIImage, toWidth width: CGFloat, andHeight height: CGFloat) -> UIImage {\n    let aspectRatio = image.size.width / image.size.height\n    var newSize: CGSize\n    \n    if aspectRatio > 1 {\n        newSize = CGSize(width: width, height: width / aspectRatio)\n    } else {\n        newSize = CGSize(width: height * aspectRatio, height: height)\n    }\n    \n    UIGraphicsBeginImageContextWithOptions(newSize, false, 0.0)\n    image.draw(in: CGRect(origin: .zero, size: newSize))\n    let resizedImage = UIGraphicsGetImageFromCurrentImageContext()\n    UIGraphicsEndImageContext()\n    \n    return resizedImage ?? image\n}"
    },
    {
      "instruction": " \nImplement a function that fetches data from a given URL and decodes it into a model object using Codable. The provided code is in Swift language.",
      "input": "import Foundation\n\nstruct MyModel: Codable {\n    let property1: String\n    let property2: Int\n}\n\nfunc fetchData(from url: URL, completion: @escaping (MyModel?) -> Void) {\n    // TODO: Add your code here\n}",
      "output": "import Foundation\n\nstruct MyModel: Codable {\n    let property1: String\n    let property2: Int\n}\n\nfunc fetchData(from url: URL, completion: @escaping (MyModel?) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let data = data {\n            let decoder = JSONDecoder()\n            let model = try? decoder.decode(MyModel.self, from: data)\n            completion(model)\n        } else {\n            completion(nil)\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " \nImplement a function that adds a UIPanGestureRecognizer to a UIView and handles the gesture event to move the view around. The provided code is in Swift language.",
      "input": "import UIKit\n\nfunc addPanGesture(to view: UIView) {\n    // TODO: Add your code here\n}",
      "output": "import UIKit\n\nfunc addPanGesture(to view: UIView) {\n    let panGesture = UIPanGestureRecognizer(target: view, action: #selector(handlePanGesture(_:)))\n    view.addGestureRecognizer(panGesture)\n}\n\n@objc func handlePanGesture(_ gesture: UIPanGestureRecognizer) {\n    let translation = gesture.translation(in: gesture.view?.superview)\n    gesture.view?.center = CGPoint(x: (gesture.view?.center.x)! + translation.x, y: (gesture.view?.center.y)! + translation.y)\n    gesture.setTranslation(.zero, in: gesture.view?.superview)\n}"
    },
    {
      "instruction": " \nImplement a function that initializes a UICollectionView with a custom UICollectionViewCell and registers a UICollectionViewCell subclass. The provided code is in Swift language.",
      "input": "import UIKit\n\nclass CustomCell: UICollectionViewCell {\n    // Custom cell implementation\n}\n\nfunc setupCollectionView() -> UICollectionView {\n    // TODO: Add your code here\n}",
      "output": "import UIKit\n\nclass CustomCell: UICollectionViewCell {\n    // Custom cell implementation\n}\n\nfunc setupCollectionView() -> UICollectionView {\n    let layout = UICollectionViewFlowLayout()\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.register(CustomCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n    \n    return collectionView\n}"
    },
    {
      "instruction": " \nImplement a function that starts a timer with a specified interval and updates a UILabel with the elapsed time. The provided code is in Swift language.",
      "input": "import UIKit\n\nfunc startTimer(interval: TimeInterval, label: UILabel) {\n    // TODO: Add your code here\n}",
      "output": "import UIKit\n\nfunc startTimer(interval: TimeInterval, label: UILabel) {\n    var elapsedTime: TimeInterval = 0.0\n    \n    let timer = Timer.scheduledTimer(withTimeInterval: interval, repeats: true) { timer in\n        elapsedTime += interval\n        label.text = String(format: \"%.2f\", elapsedTime)\n    }\n    timer.fire()\n}"
    },
    {
      "instruction": " \nImplement a function that adds a custom UIButton to a UIView and connects it to an action. The provided code is in Swift language.",
      "input": "import UIKit\n\nfunc addCustomButton(to view: UIView) {\n    // TODO: Add your code here\n}",
      "output": "import UIKit\n\nfunc addCustomButton(to view: UIView) {\n    let button = UIButton(type: .custom)\n    button.setTitle(\"Custom Button\", for: .normal)\n    button.addTarget(self, action: #selector(buttonAction), for: .touchUpInside)\n    view.addSubview(button)\n}\n\n@objc func buttonAction(sender: UIButton) {\n    print(\"Custom button tapped\")\n}"
    },
    {
      "instruction": " \nImplement a function that sets up a UITableView, registers a custom UITableViewCell, and implements the required UITableViewDataSource methods. The provided code is in Swift language.",
      "input": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    // Custom table view cell implementation\n}\n\nfunc setupTableView() -> UITableView {\n    // TODO: Add your code here\n}",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    // Custom table view cell implementation\n}\n\nclass TableViewDataSource: NSObject, UITableViewDataSource {\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 10 // Return the number of rows\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomTableViewCell\", for: indexPath) as! CustomTableViewCell\n        return cell\n    }\n}\n\nfunc setupTableView() -> UITableView {\n    let tableView = UITableView()\n    tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomTableViewCell\")\n    \n    let dataSource = TableViewDataSource()\n    tableView.dataSource = dataSource\n    \n    return tableView\n}"
    },
    {
      "instruction": "Implement a custom UIViewController with a UITextField and a UILabel, such that when the user types in the text field, the label updates with the typed text",
      "input": "",
      "output": "import UIKit\n\nclass CustomViewController: UIViewController, UITextFieldDelegate {\n    @IBOutlet weak var textField: UITextField!\n    @IBOutlet weak var label: UILabel!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        textField.delegate = self\n    }\n\n    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {\n        let currentText = textField.text ?? \"\"\n        guard let stringRange = Range(range, in: currentText) else { return false }\n        let updatedText = currentText.replacingCharacters(in: stringRange, with: string)\n        label.text = updatedText\n        return true\n    }\n}"
    },
    {
      "instruction": " Create a custom UITableViewCell subclass with an image view, a title label, and a subtitle label, and override the awakeFromNib function to configure the cell",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var thumbnailImageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n    @IBOutlet weak var subtitleLabel: UILabel!\n\n    override func awakeFromNib() {\n        super.awakeFromNib()\n        // Initialization code\n    }\n\n    func configure(with image: UIImage, title: String, subtitle: String) {\n        thumbnailImageView.image = image\n        titleLabel.text = title\n        subtitleLabel.text = subtitle\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to fetch JSON data from a URL using URLSession and decode it into a Codable struct, then call the function",
      "input": "",
      "output": "import Foundation\n\nstruct ExampleData: Codable {\n    let title: String\n    let description: String\n}\n\nfunc fetchData(from url: URL, completion: @escaping (ExampleData?) -> Void) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            completion(nil)\n            return\n        }\n\n        let decoder = JSONDecoder()\n        let decodedData = try? decoder.decode(ExampleData.self, from: data)\n        completion(decodedData)\n    }.resume()\n}\n\nlet url = URL(string: \"https://example.com/data.json\")!\nfetchData(from: url) { data in\n    print(data)\n}"
    },
    {
      "instruction": " Create a custom UIPickerView and its delegate that display an array of strings, and update a label with the selected value",
      "input": "",
      "output": "import UIKit\n\nclass CustomPickerViewController: UIViewController, UIPickerViewDelegate, UIPickerViewDataSource {\n    @IBOutlet weak var pickerView: UIPickerView!\n    @IBOutlet weak var selectedValueLabel: UILabel!\n\n    let values = [\"Apple\", \"Banana\", \"Orange\", \"Grape\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        pickerView.delegate = self\n        pickerView.dataSource = self\n    }\n\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return values.count\n    }\n\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return values[row]\n    }\n\n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        selectedValueLabel.text = values[row]\n    }\n}"
    },
    {
      "instruction": " Implement a UITableViewController that fetches data from a remote source as Codable objects and displays them in custom cells",
      "input": "",
      "output": "import UIKit\n\nstruct ExampleItem: Codable {\n    let title: String\n    let description: String\n}\n\nclass NetworkTableViewController: UITableViewController {\n    private var items: [ExampleItem] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        fetchData()\n    }\n\n    private func fetchData() {\n        let url = URL(string: \"https://example.com/data.json\")!\n        URLSession.shared.dataTask(with: url) { [weak self] (data, response, error) in\n            guard let data = data, error == nil else { return }\n\n            let decoder = JSONDecoder()\n            if let decodedData = try? decoder.decode([ExampleItem].self, from: data) {\n                DispatchQueue.main.async {\n                    self?.items = decodedData\n                    self?.tableView.reloadData()\n                }\n            }\n        }.resume()\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"ExampleItemCell\", for: indexPath) as! CustomTableViewCell\n        let item = items[indexPath.row]\n        cell.configure(with: UIImage(), title: item.title, subtitle: item.description)\n        return cell\n    }\n}"
    },
    {
      "instruction": " Create a custom UISlider that changes the background color of a UIView based on the slider's value",
      "input": "",
      "output": "import UIKit\n\nclass CustomSliderViewController: UIViewController {\n    @IBOutlet weak var colorSlider: UISlider!\n    @IBOutlet weak var targetView: UIView!\n\n    @IBAction func sliderValueChanged(_ sender: UISlider) {\n        let value = sender.value\n        let newColor = UIColor(hue: CGFloat(value), saturation: 1, brightness: 1, alpha: 1)\n        targetView.backgroundColor = newColor\n    }\n}"
    },
    {
      "instruction": " Implement a UIPageViewController with three view controllers, allowing the user to swipe between them",
      "input": "",
      "output": "import UIKit\n\nclass PageViewController: UIPageViewController, UIPageViewControllerDataSource, UIPageViewControllerDelegate {\n    private lazy var viewControllersList: [UIViewController] = {\n        let storyboard = UIStoryboard(name: \"Main\", bundle: nil)\n        let firstVC = storyboard.instantiateViewController(withIdentifier: \"FirstViewController\")\n        let secondVC = storyboard.instantiateViewController(withIdentifier: \"SecondViewController\")\n        let thirdVC = storyboard.instantiateViewController(withIdentifier: \"ThirdViewController\")\n\n        return [firstVC, secondVC, thirdVC]\n    }()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        dataSource = self\n        delegate = self\n\n        if let firstVC = viewControllersList.first {\n            setViewControllers([firstVC], direction: .forward, animated: true, completion: nil)\n        }\n    }\n\n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n        guard let index = viewControllersList.firstIndex(of: viewController) else { return nil }\n        let previousIndex = index - 1\n\n        if previousIndex < 0 {\n            return nil\n        }\n\n        return viewControllersList[previousIndex]\n    }\n\n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {\n        guard let index = viewControllersList.firstIndex(of: viewController) else { return nil }\n        let nextIndex = index + 1\n\n        if nextIndex >= viewControllersList.count {\n            return nil\n        }\n\n        return viewControllersList[nextIndex]\n    }\n}"
    },
    {
      "instruction": " Implement a search bar in a UITableViewController that filters and displays table view cells based on the user's search query",
      "input": "",
      "output": "import UIKit\n\nclass SearchTableViewController: UITableViewController, UISearchBarDelegate {\n    @IBOutlet weak var searchBar: UISearchBar!\n\n    private let items = [\"Apple\", \"Banana\", \"Cherry\", \"Orange\", \"Grape\"]\n    private var filteredItems: [String] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        searchBar.delegate = self\n        filteredItems = items\n    }\n\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredItems = items\n        } else {\n            filteredItems = items.filter { $0.lowercased().contains(searchText.lowercased()) }\n        }\n        tableView.reloadData()\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredItems.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"ItemCell\", for: indexPath)\n        cell.textLabel?.text = filteredItems[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that adds a UICollectionView with a specified layout to a UIView and sets its delegate and dataSource.",
      "input": "",
      "output": "import UIKit\n\nfunc addCollectionView(to view: UIView, withLayout layout: UICollectionViewLayout, delegate: UICollectionViewDelegate, dataSource: UICollectionViewDataSource) {\n    let collectionView = UICollectionView(frame: view.bounds, collectionViewLayout: layout)\n    collectionView.delegate = delegate\n    collectionView.dataSource = dataSource\n    view.addSubview(collectionView)\n}"
    },
    {
      "instruction": " Write a Swift function that presents a UIAlertController with a specified title, message, and action button.",
      "input": "",
      "output": "import UIKit\n\nfunc presentAlert(in viewController: UIViewController, title: String, message: String, actionTitle: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: actionTitle, style: .default, handler: nil)\n    alertController.addAction(action)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift function that performs a segue with a specified identifier from a UIViewController.",
      "input": "",
      "output": "import UIKit\n\nfunc performSegue(from viewController: UIViewController, withIdentifier identifier: String) {\n    viewController.performSegue(withIdentifier: identifier, sender: nil)\n}"
    },
    {
      "instruction": " Write a Swift function that adds a child view controller to a specified parent view controller and adds the child's view to the parent's view.",
      "input": "",
      "output": "import UIKit\n\nfunc addChildViewController(child: UIViewController, to parent: UIViewController) {\n    parent.addChild(child)\n    parent.view.addSubview(child.view)\n    child.didMove(toParent: parent)\n}"
    },
    {
      "instruction": " Write a Swift function that removes a specified child view controller from its parent view controller.",
      "input": "",
      "output": "import UIKit\n\nfunc removeChildViewController(child: UIViewController) {\n    child.willMove(toParent: nil)\n    child.view.removeFromSuperview()\n    child.removeFromParent()\n}"
    },
    {
      "instruction": " Write a Swift function that registers a UITableViewCell subclass with a specified identifier to a UITableView.",
      "input": "",
      "output": "import UIKit\n\nfunc register(cellClass: UITableViewCell.Type, forCellWithReuseIdentifier identifier: String, to tableView: UITableView) {\n    tableView.register(cellClass, forCellReuseIdentifier: identifier)\n}"
    },
    {
      "instruction": " Write a Swift function that sets the left and right bar button items of a UIViewController's navigation item with specified UIBarButtonItems.",
      "input": "",
      "output": "import UIKit\n\nfunc setLeftAndRightBarButtonItems(leftItem: UIBarButtonItem, rightItem: UIBarButtonItem, for viewController: UIViewController) {\n    viewController.navigationItem.leftBarButtonItem = leftItem\n    viewController.navigationItem.rightBarButtonItem = rightItem\n}"
    },
    {
      "instruction": " Create a custom UIControl subclass that displays a star rating using UIButton objects.",
      "input": "",
      "output": "import UIKit\n\nclass StarRatingControl: UIControl {\n    var rating = 0 {\n        didSet {\n            updateButtons()\n        }\n    }\n    private var buttons = [UIButton]()\n    private let starCount = 5\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupButtons()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupButtons()\n    }\n    \n    private func setupButtons() {\n        for _ in 0..<starCount {\n            let button = UIButton()\n            button.setImage(UIImage(named: \"emptyStar\"), for: .normal)\n            button.setImage(UIImage(named: \"filledStar\"), for: .selected)\n            button.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n            addSubview(button)\n            buttons.append(button)\n        }\n        updateButtons()\n    }\n    \n    override func layoutSubviews() {\n        let buttonSize = bounds.width / CGFloat(starCount)\n        for (index, button) in buttons.enumerated() {\n            button.frame = CGRect(x: CGFloat(index) * buttonSize, y: 0, width: buttonSize, height: bounds.height)\n        }\n    }\n    \n    @objc private func buttonTapped(_ sender: UIButton) {\n        guard let index = buttons.firstIndex(of: sender) else { return }\n        rating = index + 1\n        sendActions(for: .valueChanged)\n    }\n    \n    private func updateButtons() {\n        for (index, button) in buttons.enumerated() {\n            button.isSelected = index < rating\n        }\n    }\n}"
    },
    {
      "instruction": " Implement a UICollectionView with a custom UICollectionViewCell containing a UILabel and a UIImageView, using a UICollectionViewFlowLayout.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCell\"\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupUI()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupUI() {\n        addSubview(titleLabel)\n        addSubview(imageView)\n        \n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n            \n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n    let dataSource = [(\"Item 1\", \"image1\"), (\"Item 2\", \"image2\")]\n    \n    init() {\n        let layout = UICollectionViewFlowLayout()\n        layout.itemSize = CGSize(width: 100, height: 140)\n        layout.minimumLineSpacing = 16\n        layout.sectionInset = UIEdgeInsets(top: 16, left: 16, bottom: 16, right: 16)\n        super.init(collectionViewLayout: layout)\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n        collectionView.backgroundColor = .white\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return dataSource.count\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        let (title, imageName) = dataSource[indexPath.item]\n        cell.titleLabel.text = title\n        cell.imageView.image = UIImage(named: imageName)\n        return cell\n    }\n}"
    },
    {
      "instruction": " Create a custom UIView subclass that displays a circular progress bar using CAShapeLayer and a UILabel to show the percentage.",
      "input": "",
      "output": "import UIKit\n\nclass CircularProgressView: UIView {\n    private var progressLayer: CAShapeLayer!\n    private var backgroundLayer: CAShapeLayer!\n    private let percentageLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textAlignment = .center\n        return label\n    }()\n    \n    var progress: CGFloat = 0 {\n        didSet {\n            updateProgress()\n        }\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup()\n    }\n    \n    private func setup() {\n        backgroundLayer = createCircularLayer(strokeColor: UIColor.lightGray.cgColor)\n        progressLayer = createCircularLayer(strokeColor: UIColor.red.cgColor)\n        layer.addSublayer(backgroundLayer)\n        layer.addSublayer(progressLayer)\n        addSubview(percentageLabel)\n        \n        NSLayoutConstraint.activate([\n            percentageLabel.centerXAnchor.constraint(equalTo: centerXAnchor),\n            percentageLabel.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        backgroundLayer.path = createCircularPath().cgPath\n        progressLayer.path = createCircularPath().cgPath\n        updateProgress()\n    }\n    \n    private func createCircularLayer(strokeColor: CGColor) -> CAShapeLayer {\n        let layer = CAShapeLayer()\n        layer.strokeColor = strokeColor\n        layer.lineWidth = 10\n        layer.fillColor = UIColor.clear.cgColor\n        layer.lineCap = .round\n        return layer\n    }\n    \n    private func createCircularPath() -> UIBezierPath {\n        return UIBezierPath(arcCenter: CGPoint(x: bounds.midX, y: bounds.midY), radius: bounds.width / 2 - 10, startAngle: -CGFloat.pi / 2, endAngle: 3 * CGFloat.pi / 2, clockwise: true)\n    }\n    \n    private func updateProgress() {\n        progressLayer.strokeEnd = progress\n        percentageLabel.text = \"\\(Int(progress * 100))%\"\n    }\n}"
    },
    {
      "instruction": " Create a custom UIViewController subclass that uses a UIScrollView and UIStackView to display dynamic content.",
      "input": "",
      "output": "import UIKit\n\nclass DynamicContentViewController: UIViewController {\n    let scrollView: UIScrollView = {\n        let scrollView = UIScrollView()\n        scrollView.translatesAutoresizingMaskIntoConstraints = false\n        return scrollView\n    }()\n    \n    let stackView: UIStackView = {\n        let stackView = UIStackView()\n        stackView.translatesAutoresizingMaskIntoConstraints = false\n        stackView.axis = .vertical\n        stackView.spacing = 8\n        return stackView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n        \n        view.addSubview(scrollView)\n        scrollView.addSubview(stackView)\n        \n        NSLayoutConstraint.activate([\n            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            scrollView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            \n            stackView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor, constant: 16),\n            stackView.topAnchor.constraint(equalTo: scrollView.topAnchor, constant: 16),\n            stackView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor, constant: -16),\n            stackView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor, constant: -16),\n            stackView.widthAnchor.constraint(equalTo: scrollView.widthAnchor, constant: -32)\n        ])\n        \n        for i in 1...10 {\n            let label = UILabel()\n            label.text = \"This is label \\(i)\"\n            label.numberOfLines = 0\n            stackView.addArrangedSubview(label)\n        }\n    }\n}"
    },
    {
      "instruction": " Create a custom UITextField subclass that includes a left icon, a right clear button, and a custom border.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTextField: UITextField {\n    var leftIcon: UIImage? {\n        didSet {\n            updateView()\n        }\n    }\n    \n   "
    },
    {
      "instruction": "Implement a Swift function that calculates the factorial of a given integer using recursion.",
      "input": "5",
      "output": "func factorial(_ n: Int) -> Int {\n    if n == 0 {\n        return 1\n    } else {\n        return n * factorial(n - 1)\n    }\n}\nprint(factorial(5))"
    },
    {
      "instruction": " Create a custom UITableViewCell with an image and a label in Swift programmatically.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    \n    let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let cellLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        \n        contentView.addSubview(cellImageView)\n        contentView.addSubview(cellLabel)\n        \n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 10),\n            cellImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            cellImageView.widthAnchor.constraint(equalToConstant: 40),\n            cellImageView.heightAnchor.constraint(equalToConstant: 40),\n            \n            cellLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 10),\n            cellLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            cellLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -10),\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to check if a given string is a valid email address using regular expressions.",
      "input": "\"john.doe@example.com\"",
      "output": "import Foundation\n\nfunc isValidEmail(_ email: String) -> Bool {\n    let regexPattern = \"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,64}\"\n    let regex = try! NSRegularExpression(pattern: regexPattern)\n    let range = NSRange(location: 0, length: email.utf16.count)\n    return regex.firstMatch(in: email, options: [], range: range) != nil\n}\nprint(isValidEmail(\"john.doe@example.com\"))"
    },
    {
      "instruction": " Implement a Swift function that filters out even numbers from an array of integers using the `filter` higher-order function.",
      "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
      "output": "func filterEvenNumbers(_ numbers: [Int]) -> [Int] {\n    return numbers.filter({ $0 % 2 != 0 })\n}\nprint(filterEvenNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "instruction": " Write a Swift function to implement a simple stopwatch with start, stop, and reset actions.",
      "input": "",
      "output": "import Foundation\n\nclass Stopwatch {\n    private var startTime: Date?\n    \n    func start() {\n        startTime = Date()\n    }\n    \n    func stop() -> TimeInterval? {\n        guard let start = startTime else {\n            return nil\n        }\n        \n        let elapsedTime = Date().timeIntervalSince(start)\n        startTime = nil\n        return elapsedTime\n    }\n    \n    func reset() {\n        startTime = nil\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that fetches JSON data from a URL and decodes it into a custom object using the Decodable protocol.",
      "input": "\"https://api.example.com/data.json\"",
      "output": "import Foundation\n\nstruct CustomData: Decodable {\n    let id: Int\n    let title: String\n}\n\nfunc fetchData(from urlString: String, completion: @escaping (CustomData?) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(nil)\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data else {\n            completion(nil)\n            return\n        }\n        \n        let decoder = JSONDecoder()\n        let customData = try? decoder.decode(CustomData.self, from: data)\n        completion(customData)\n    }\n    \n    task.resume()\n}\n\nfetchData(from: \"https://api.example.com/data.json\") { (customData) in\n    print(customData)\n}"
    },
    {
      "instruction": " Use Swift to create a simple to-do list app with a table view, add items, and delete items.",
      "input": "",
      "output": "import UIKit\n\nclass TodoListViewController: UITableViewController {\n    \n    private var todos: [String]= []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        navigationItem.rightBarButtonItem = UIBarButtonItem(barButtonSystemItem: .add, target: self, action: #selector(addTodo))\n        \n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"cell\")\n    }\n    \n    @objc func addTodo() {\n        let alertController = UIAlertController(title: \"Add Todo\", message: nil, preferredStyle: .alert)\n        alertController.addTextField()\n        \n        let addAction = UIAlertAction(title: \"Add\", style: .default) { _ in\n            if let text = alertController.textFields?.first?.text, !text.isEmpty {\n                self.todos.append(text)\n                self.tableView.reloadData()\n            }\n        }\n        \n        alertController.addAction(addAction)\n        present(alertController, animated: true)\n    }\n    \n    // MARK: - Table view data source\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return todos.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        cell.textLabel?.text = todos[indexPath.row]\n        return cell\n    }\n    \n    // MARK: - Table view delegate\n    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {\n        if editingStyle == .delete {\n            todos.remove(at: indexPath.row)\n            tableView.deleteRows(at: [indexPath], with: .automatic)\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that asynchronously downloads an image from a URL and displays it in an ImageView.",
      "input": "\"https://example.com/image.png\"",
      "output": "import UIKit\n\nfunc downloadImage(from urlString: String, completion: @escaping (UIImage?) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(nil)\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, let image = UIImage(data: data) else {\n            completion(nil)\n            return\n        }\n        \n        DispatchQueue.main.async {\n            completion(image)\n        }\n    }\n    \n    task.resume()\n}\n\nclass ImageViewController: UIViewController {\n    let imageView = UIImageView()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        imageView.frame = view.bounds\n        imageView.contentMode = .scaleAspectFit\n        view.addSubview(imageView)\n        \n        downloadImage(from: \"https://example.com/image.png\") { (image) in\n            self.imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that downloads an image from a URL and displays it in a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            print(\"Error downloading image: \\(error?.localizedDescription ?? \"Unknown error\")\")\n            completion(nil)\n            return\n        }\n        \n        let image = UIImage(data: data)\n        completion(image)\n    }\n    \n    task.resume()\n}\n\nfunc displayImage(from url: URL, in imageView: UIImageView) {\n    downloadImage(from: url) { image in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " Implement a UITableView with custom UITableViewCell that displays a list of contacts",
      "input": "",
      "output": "import UIKit\n\nstruct Contact {\n    let name: String\n    let phoneNumber: String\n}\n\nclass ContactCell: UITableViewCell {\n    @IBOutlet weak var nameLabel: UILabel!\n    @IBOutlet weak var phoneNumberLabel: UILabel!\n    \n    func configure(with contact: Contact) {\n        nameLabel.text = contact.name\n        phoneNumberLabel.text = contact.phoneNumber\n    }\n}\n\nclass ContactsViewController: UITableViewController {\n    var contacts: [Contact] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UINib(nibName: \"ContactCell\", bundle: nil), forCellReuseIdentifier: \"ContactCell\")\n        loadContacts()\n    }\n    \n    func loadContacts() {\n        // Populate the contacts array with data\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return contacts.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"ContactCell\", for: indexPath) as! ContactCell\n        cell.configure(with: contacts[indexPath.row])\n        return cell\n    }\n}"
    },
    {
      "instruction": " Create a UINavigationController with a custom back button",
      "input": "",
      "output": "import UIKit\n\nclass CustomBackButtonViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupCustomBackButton()\n    }\n    \n    func setupCustomBackButton() {\n        let backButton = UIBarButtonItem(title: \"Back\", style: .plain, target: self, action: #selector(backButtonTapped))\n        navigationItem.leftBarButtonItem = backButton\n    }\n    \n    @objc func backButtonTapped() {\n        navigationController?.popViewController(animated: true)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that saves data to UserDefaults",
      "input": "",
      "output": "import Foundation\n\nfunc saveData<T: Codable>(data: T, forKey key: String) {\n    let encoder = JSONEncoder()\n    if let encodedData = try? encoder.encode(data) {\n        UserDefaults.standard.set(encodedData, forKey: key)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that retrieves data from UserDefaults",
      "input": "",
      "output": "import Foundation\n\nfunc retrieveData<T: Codable>(forKey key: String, as type: T.Type) -> T? {\n    guard let data = UserDefaults.standard.data(forKey: key) else { return nil }\n    let decoder = JSONDecoder()\n    return try? decoder.decode(type, from: data)\n}"
    },
    {
      "instruction": " Implement a UICollectionView with custom UICollectionViewCell that displays a grid of images",
      "input": "",
      "output": "import UIKit\n\nstruct ImageData {\n    let imageUrl: URL\n}\n\nclass ImageCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n    \n    func configure(with imageData: ImageData) {\n        displayImage(from: imageData.imageUrl, in: imageView)\n    }\n}\n\nclass ImagesViewController: UICollectionViewController {\n    var images: [ImageData] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(UINib(nibName: \"ImageCell\", bundle: nil), forCellWithReuseIdentifier: \"ImageCell\")\n        loadImages()\n    }\n    \n    func loadImages() {\n        // Populate the images array with data\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return images.count\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"ImageCell\", for: indexPath) as! ImageCell\n        cell.configure(with: images[indexPath.row])\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that adds a custom colored annotation to a MKMapView",
      "input": "",
      "output": "import MapKit\n\nclass ColoredAnnotation: NSObject, MKAnnotation {\n    let coordinate: CLLocationCoordinate2D\n    let color: UIColor\n    \n    init(coordinate: CLLocationCoordinate2D, color: UIColor) {\n        self.coordinate = coordinate\n        self.color = color\n    }\n}\n\nfunc addColoredAnnotation(to mapView: MKMapView, coordinate: CLLocationCoordinate2D, color: UIColor) {\n    let annotation = ColoredAnnotation(coordinate: coordinate, color: color)\n    mapView.addAnnotation(annotation)\n}"
    },
    {
      "instruction": " Implement a custom UIControl subclass that represents a star rating component",
      "input": "",
      "output": "import UIKit\n\nclass StarRatingControl: UIControl {\n    var rating: Int = 0 {\n        didSet {\n            setNeedsLayout()\n        }\n    }\n    \n    private var starButtons: [UIButton] = []\n    private let starCount = 5\n    private let starSpacing: CGFloat = 8\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupStarButtons()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupStarButtons()\n    }\n    \n    private func setupStarButtons() {\n        for _ in 0..<starCount {\n            let button = UIButton()\n            button.setImage(UIImage(named: \"emptyStar\"), for: .normal)\n            button.setImage(UIImage(named: \"filledStar\"), for: .selected)\n            button.addTarget(self, action: #selector(starButtonTapped), for: .touchUpInside)\n            addSubview(button)\n            starButtons.append(button)\n        }\n    }\n    \n    override func layoutSubviews() {\n        let buttonSize = Int(bounds.width) / (starCount * (Int(starSpacing) + 1))\n        var buttonFrame = CGRect(x: 0, y: 0, width: buttonSize, height: buttonSize)\n        \n        for (index, button) in starButtons.enumerated() {\n            buttonFrame.origin.x = CGFloat(index * (buttonSize + Int(starSpacing)))\n            button.frame = buttonFrame\n            button.isSelected = index < rating\n        }\n    }\n    \n    @objc func starButtonTapped(_ sender: UIButton) {\n        guard let index = starButtons.firstIndex(of: sender) else { return }\n        rating = index + 1\n        sendActions(for: .valueChanged)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that allows you to download an image from a URL and set it as the UIImage of a UIImageView in a UITableViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var customImageView: UIImageView!\n    \n    func setImageFrom(urlString: String) {\n        guard let url = URL(string: urlString) else { return }\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let error = error {\n                print(\"Failed to download image:\", error)\n                return\n            }\n            \n            DispatchQueue.main.async {\n                if let data = data {\n                    self.customImageView.image = UIImage(data: data)\n                }\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that uses the CoreLocation framework to get the user's current location and print the latitude and longitude",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n\n    func getCurrentLocation() {\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            print(\"Latitude: \\(location.coordinate.latitude), Longitude: \\(location.coordinate.longitude)\")\n            locationManager.stopUpdatingLocation()\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that saves a string value to the UserDefaults and retrieves it later",
      "input": "",
      "output": "func saveToUserDefaults(key: String, value: String) {\n    UserDefaults.standard.set(value, forKey: key)\n}\n\nfunc retrieveFromUserDefaults(key: String) -> String? {\n    return UserDefaults.standard.string(forKey: key)\n}"
    },
    {
      "instruction": " Write a Swift function that creates a custom UIView with a gradient background",
      "input": "",
      "output": "import UIKit\n\nclass GradientView: UIView {\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupGradient()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupGradient()\n    }\n    \n    private func setupGradient() {\n        let gradientLayer = CAGradientLayer()\n        gradientLayer.frame = bounds\n        gradientLayer.colors = [UIColor.red.cgColor, UIColor.blue.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 1)\n        layer.insertSublayer(gradientLayer, at: 0)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that plays a sound file using AVFoundation",
      "input": "",
      "output": "import AVFoundation\n\nclass SoundPlayer {\n    var audioPlayer: AVAudioPlayer?\n\n    func playSoundFile(named fileName: String, ofType fileType: String) {\n        guard let path = Bundle.main.path(forResource: fileName, ofType: fileType) else { return }\n        let url = URL(fileURLWithPath: path)\n\n        do {\n            audioPlayer = try AVAudioPlayer(contentsOf: url)\n            audioPlayer?.play()\n        } catch {\n            print(\"Error playing sound:\", error)\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that uses UICollectionView to display a list of images in a grid",
      "input": "",
      "output": "import UIKit\n\nclass ImageCollectionViewController: UICollectionViewController {\n    private let reuseIdentifier = \"ImageCell\"\n    private var images: [UIImage] = [/*...*/]\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return images.count\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! ImageCollectionViewCell\n        cell.imageView.image = images[indexPath.row]\n        return cell\n    }\n}\n\nclass ImageCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n}"
    },
    {
      "instruction": "Write a Swift function that uses the MapKit framework to display a map with a custom annotation",
      "input": "",
      "output": "import MapKit\n\nclass CustomAnnotation: NSObject, MKAnnotation {\n    let title: String?\n    let coordinate: CLLocationCoordinate2D\n\n    init(title: String, coordinate: CLLocationCoordinate2D) {\n        self.title = title\n        self.coordinate = coordinate\n    }\n}\n\nclass MapViewController: UIViewController, MKMapViewDelegate {\n    @IBOutlet weak var mapView: MKMapView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        mapView.delegate = self\n\n        let coordinate = CLLocationCoordinate2D(latitude: 37.3317, longitude: -122.0307)\n        let annotation = CustomAnnotation(title: \"Custom Location\", coordinate: coordinate)\n        mapView.addAnnotation(annotation)\n        mapView.setCenter(coordinate, animated: true)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that uses the UITableViewDelegate and UITableViewDataSource protocols to display a list of names in a UITableView",
      "input": "",
      "output": "import UIKit\n\nclass NamesTableViewController: UITableViewController {\n    private let reuseIdentifier = \"NameCell\"\n    private var names: [String] = [/*...*/]\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return names.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: reuseIdentifier, for: indexPath)\n        cell.textLabel?.text = names[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " Create a Swift function that takes a UIImageView, a URL, and a placeholder UIImage. The function should download the image from the URL and set it to the UIImageView, using the placeholder UIImage while the image is being downloaded.",
      "input": "",
      "output": "import UIKit\n\nfunc setImage(from url: URL, to imageView: UIImageView, placeholder: UIImage? = nil) {\n    imageView.image = placeholder\n    \n    fetchData(from: url) { result in\n        switch result {\n        case .success(let data):\n            let image = UIImage(data: data)\n            DispatchQueue.main.async {\n                imageView.image = image\n            }\n        case .failure(let error):\n            print(\"Error loading image: \\(error.localizedDescription)\")\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that initializes a UITableView with a custom UITableViewCell and sets up its delegate and dataSource",
      "input": "",
      "output": "func setupTableView() -> UITableView {\n    let tableView = UITableView(frame: .zero, style: .plain)\n    tableView.translatesAutoresizingMaskIntoConstraints = false\n    tableView.delegate = self\n    tableView.dataSource = self\n    tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomCell\")\n    return tableView\n}\n\n// Make sure to conform to UITableViewDelegate & UITableViewDataSource\n// extension ViewController: UITableViewDelegate, UITableViewDataSource {\n//     func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n//         return dataSource.count\n//     }\n//\n//     func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n//         let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomCell\", for: indexPath) as! CustomTableViewCell\n//         cell.configure(with: dataSource[indexPath.row])\n//         return cell\n//     }\n// }"
    },
    {
      "instruction": " Write a Swift function that initializes a UIPageViewController with custom view controllers and sets up its dataSource",
      "input": "",
      "output": "func setupPageViewController() -> UIPageViewController {\n    let pageViewController = UIPageViewController(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil)\n    pageViewController.dataSource = self\n    \n    let firstViewController = CustomViewController()\n    let secondViewController = CustomViewController()\n    \n    pageViewController.setViewControllers([firstViewController], direction: .forward, animated: true, completion: nil)\n    \n    return pageViewController\n}\n\n// Make sure to conform to UIPageViewControllerDataSource\n// extension ViewController: UIPageViewControllerDataSource {\n//     func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n//         if viewController == secondViewController {\n//             return firstViewController\n//         }\n//         return nil\n//     }\n//\n//     func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {\n//         if viewController == firstViewController {\n//             return secondViewController\n//         }\n//         return nil\n//     }\n// }"
    },
    {
      "instruction": " Write a function that fetches JSON data from a URL and decodes it into a Swift object using Codable.",
      "input": "",
      "output": "import Foundation\n\nstruct ResponseData: Codable {\n    // Define the properties based on the JSON structure\n}\n\nfunc fetchData(from url: String, completion: @escaping (Result<ResponseData, Error>) -> Void) {\n    guard let url = URL(string: url) else {\n        completion(.failure(NSError(domain: \"\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"Invalid URL\"])))\n        return\n    }\n    \n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"No data received\"])))\n            return\n        }\n        \n        do {\n            let jsonData = try JSONDecoder().decode(ResponseData.self, from: data)\n            completion(.success(jsonData))\n        } catch {\n            completion(.failure(error))\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " Implement a view controller that displays a UICollectionView with images and their titles.",
      "input": "",
      "output": "import UIKit\n\nstruct ImageData {\n    let image: UIImage\n    let title: String\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n    \n    func configure(with data: ImageData) {\n        imageView.image = data.image\n        titleLabel.text = data.title\n    }\n}\n\nclass ImagesCollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    @IBOutlet weak var collectionView: UICollectionView!\n    var imagesData: [ImageData] = [] // Populate this array with your data\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(UINib(nibName: \"CustomCollectionViewCell\", bundle: nil), forCellWithReuseIdentifier: \"CustomCell\")\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return imagesData.count\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        cell.configure(with: imagesData[indexPath.item])\n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: (collectionView.bounds.width - 40) / 2, height: (collectionView.bounds.width - 40) / 2)\n    }\n}"
    },
    {
      "instruction": " Create a custom UIView that displays a circular progress bar using Core Graphics.",
      "input": "",
      "output": "import UIKit\n\nclass CircularProgressView: UIView {\n    var progress: CGFloat = 0 {\n        didSet {\n            setNeedsDisplay()\n        }\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        backgroundColor = .clear\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        backgroundColor = .clear\n    }\n    \n    override func draw(_ rect: CGRect) {\n        let center = CGPoint(x: rect.midX, y: rect.midY)\n        let radius = min(rect.width, rect.height) / 2 - 10\n        let startAngle = -CGFloat.pi / 2\n        let endAngle = startAngle + 2 * CGFloat.pi * progress\n        \n        let path = UIBezierPath(arcCenter: center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)\n        path.lineWidth = 10\n        UIColor.blue.setStroke()\n        path.stroke()\n    }\n}"
    },
    {
      "instruction": " Implement a view controller that uses a WKWebView to load a webpage and provides a progress bar to track the loading progress.",
      "input": "",
      "output": "import UIKit\nimport WebKit\n\nclass WebViewController: UIViewController, WKNavigationDelegate {\n    @IBOutlet weak var webView: WKWebView!\n    @IBOutlet weak var progressBar: UIProgressView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        webView.navigationDelegate = self\n        webView.addObserver(self, forKeyPath: #keyPath(WKWebView.estimatedProgress), options: .new, context: nil)\n        \n        if let url = URL(string: \"https://www.example.com\") {\n            let request = URLRequest(url: url)\n            webView.load(request)\n        }\n    }\n    \n    deinit {\n        webView.removeObserver(self, forKeyPath: #keyPath(WKWebView.estimatedProgress))\n    }\n    \n    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {\n        if keyPath == #keyPath(WKWebView.estimatedProgress) {\n            progressBar.progress = Float(webView.estimatedProgress)\n        }\n    }\n    \n    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {\n        progressBar.isHidden = true\n    }\n    \n    func webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!) {\n        progressBar.isHidden = false\n    }\n}"
    },
    {
      "instruction": " Implement a custom UITableViewCell with swipe actions for editing and deleting rows in a UITableView.",
      "input": "",
      "output": "import UIKit\n\nclass EditableTableViewCell: UITableViewCell {\n    // Add your outlets and configure the cell based on your needs\n}\n\nclass EditableTableViewController: UITableViewController {\n    // Populate this array with your data\n    var data: [String] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UINib(nibName: \"EditableTableViewCell\", bundle: nil), forCellReuseIdentifier: \"EditableCell\")\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"EditableCell\", for: indexPath) as! EditableTableViewCell\n        // Configure the cell based on your data\n        return cell\n    }\n    \n    override func tableView(_ tableView: UITableView, leadingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {\n        let editAction = UIContextualAction(style: .normal, title: \"Edit\") { (action, view, completionHandler) in\n            // Perform edit action\n            completionHandler(true)\n        }\n        editAction.backgroundColor = .blue\n        return UISwipeActionsConfiguration(actions: [editAction])\n    }\n    \n    override func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {\n        let deleteAction = UIContextualAction(style: .destructive, title: \"Delete\") { (action, view, completionHandler) in\n            // Perform delete action\n            completionHandler(true)\n        }\n        return UISwipeActionsConfiguration"
    },
    {
      "instruction": " Create a UITableView subclass that implements UITableViewDataSource and UITableViewDelegate, and allows users to set the data source and cell configuration.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableView: UITableView, UITableViewDataSource, UITableViewDelegate {\n    var data: [String] = []\n    var configureCell: ((UITableViewCell, IndexPath, String) -> Void)?\n\n    init(frame: CGRect) {\n        super.init(frame: frame, style: .plain)\n        setupTableView()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupTableView()\n    }\n\n    private func setupTableView() {\n        dataSource = self\n        delegate = self\n        register(UITableViewCell.self, forCellReuseIdentifier: \"Cell\")\n    }\n\n    // MARK: - UITableViewDataSource\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\n        let item = data[indexPath.row]\n        configureCell?(cell, indexPath, item)\n        return cell\n    }\n\n    // MARK: - UITableViewDelegate\n    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        tableView.deselectRow(at: indexPath, animated: true)\n    }\n}"
    },
    {
      "instruction": " Create a protocol named \"Animatable\" with a function called \"animate\". Implement the protocol in a UIViewController subclass, and call the animate function when the view appears.",
      "input": "",
      "output": "import UIKit\n\nprotocol Animatable {\n    func animate()\n}\n\nclass CustomViewController: UIViewController, Animatable {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    override func viewDidAppear(_ animated: Bool) {\n        super.viewDidAppear(animated)\n        animate()\n    }\n\n    func animate() {\n        // Add your animation code here\n    }\n}"
    },
    {
      "instruction": " Create a custom UIPickerView subclass that allows users to set the data source and the row selection handler.",
      "input": "",
      "output": "import UIKit\n\nclass CustomPickerView: UIPickerView, UIPickerViewDataSource, UIPickerViewDelegate {\n    var data: [String] = []\n    var onRowSelected: ((Int, String) -> Void)?\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupPickerView()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupPickerView()\n    }\n\n    private func setupPickerView() {\n        dataSource = self\n        delegate = self\n    }\n\n    // MARK: - UIPickerViewDataSource\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return data.count\n    }\n\n    // MARK: - UIPickerViewDelegate\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return data[row]\n    }\n\n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        let selectedItem = data[row]\n        onRowSelected?(row, selectedItem)\n    }\n}"
    },
    {
      "instruction": " Create a custom UICollectionView subclass that implements UICollectionViewDataSource and UICollectionViewDelegate, and allows users to set the data source and cell configuration.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionView: UICollectionView, UICollectionViewDataSource, UICollectionViewDelegate {\n    var data: [String] = []\n    var configureCell: ((UICollectionViewCell, IndexPath, String) -> Void)?\n\n    init(frame: CGRect, collectionViewLayout layout: UICollectionViewLayout) {\n        super.init(frame: frame, collectionViewLayout: layout)\n        setupCollectionView()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupCollectionView()\n    }\n\n    private func setupCollectionView() {\n        dataSource = self\n        delegate = self\n        register(UICollectionViewCell.self, forCellWithReuseIdentifier: \"Cell\")\n    }\n\n    // MARK: - UICollectionViewDataSource\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return data.count\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"Cell\", for: indexPath)\n        let item = data[indexPath.item]\n        configureCell?(cell, indexPath, item)\n        return cell\n    }\n\n    // MARK: - UICollectionViewDelegate\n    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {\n        collectionView.deselectItem(at: indexPath, animated: true)\n    }\n}"
    },
    {
      "instruction": " Create a custom UIControl subclass that has a UISlider and a UILabel, and allows setting the label text and slider value through a custom initializer.",
      "input": "",
      "output": "import UIKit\n\nclass CustomControl: UIControl {\n    private let slider: UISlider\n    private let label: UILabel\n\n    init(frame: CGRect, labelText: String, sliderValue: Float) {\n        slider = UISlider()\n        label = UILabel()\n        super.init(frame: frame)\n        setupSlider(with: sliderValue)\n        setupLabel(with: labelText)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupSlider(with value: Float) {\n        slider.value = value\n        slider.translatesAutoresizingMaskIntoConstraints = false\n        addSubview(slider)\n        NSLayoutConstraint.activate([\n            slider.topAnchor.constraint(equalTo: topAnchor),\n            slider.leadingAnchor.constraint(equalTo: leadingAnchor),\n            slider.trailingAnchor.constraint(equalTo: trailingAnchor)\n        ])\n    }\n\n    private func setupLabel(with text: String) {\n        label.text = text\n        label.textAlignment = .center\n        label.translatesAutoresizingMaskIntoConstraints = false\n        addSubview(label)\n        NSLayoutConstraint.activate([\n            label.topAnchor.constraint(equalTo: slider.bottomAnchor),\n            label.leadingAnchor.constraint(equalTo: leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: trailingAnchor),\n            label.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " Create a custom UIButton subclass that has a rounded corner and a custom initializer that allows setting the button title and corner radius.",
      "input": "",
      "output": "import UIKit\n\nclass CustomButton: UIButton {\n    init(frame: CGRect, title: String, cornerRadius: CGFloat) {\n        super.init(frame: frame)\n        setTitle(title, for: .normal)\n        setTitleColor(.white, for: .normal)\n        backgroundColor = .systemBlue\n        layer.cornerRadius = cornerRadius\n        clipsToBounds = true\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " Create a custom UITextField subclass that has a left padding and a custom initializer that allows setting the placeholder text and padding value.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTextField: UITextField {\n    private let padding: CGFloat\n\n    init(frame: CGRect, placeholderText: String, leftPadding: CGFloat) {\n        padding = leftPadding\n        super.init(frame: frame)\n        placeholder = placeholderText\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func textRect(forBounds bounds: CGRect) -> CGRect {\n        return bounds.insetBy(dx: padding, dy: 0)\n    }\n\n    override func editingRect(forBounds bounds: CGRect) -> CGRect {\n        return bounds.insetBy(dx: padding, dy: 0)\n    }\n}"
    },
    {
      "instruction": " Write a function that asynchronously downloads an image from a URL and displays it in a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            print(\"Error downloading image: \\(error.localizedDescription)\")\n            completion(nil)\n            return\n        }\n        \n        guard let data = data else {\n            completion(nil)\n            return\n        }\n        \n        let image = UIImage(data: data)\n        completion(image)\n    }.resume()\n}\n\nfunc updateImageView(with url: URL, imageView: UIImageView) {\n    downloadImage(from: url) { image in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " Create a view controller that displays a map with the user's current location, and add a pin annotation at the user's location",
      "input": "",
      "output": "import UIKit\nimport MapKit\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n    @IBOutlet weak var mapView: MKMapView!\n    private let locationManager = CLLocationManager()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            let span = MKCoordinateSpan(latitudeDelta: 0.05, longitudeDelta: 0.05)\n            let region = MKCoordinateRegion(center: location.coordinate, span: span)\n            mapView.setRegion(region, animated: true)\n            \n            let annotation = MKPointAnnotation()\n            annotation.coordinate = location.coordinate\n            mapView.addAnnotation(annotation)\n        }\n    }\n}"
    },
    {
      "instruction": " Implement a custom UITableViewCell with a UISwitch and a delegate pattern to handle the switch value change",
      "input": "",
      "output": "import UIKit\n\nprotocol CustomSwitchCellDelegate: AnyObject {\n    func switchValueChanged(isOn: Bool, forCell cell: CustomSwitchTableViewCell)\n}\n\nclass CustomSwitchTableViewCell: UITableViewCell {\n    @IBOutlet weak var customSwitch: UISwitch!\n    \n    weak var delegate: CustomSwitchCellDelegate?\n\n    @IBAction func switchValueChanged(_ sender: UISwitch) {\n        delegate?.switchValueChanged(isOn: sender.isOn, forCell: self)\n    }\n}\n\nclass CustomSwitchTableViewController: UITableViewController, CustomSwitchCellDelegate {\n    func switchValueChanged(isOn: Bool, forCell cell: CustomSwitchTableViewCell) {\n        if let indexPath = tableView.indexPath(for: cell) {\n            print(\"Switch at row \\(indexPath.row) changed to \\(isOn)\")\n        }\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 10 // Your data source count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomSwitchTableViewCell\", for: indexPath) as! CustomSwitchTableViewCell\n        cell.delegate = self\n        return cell\n    }\n}"
    },
    {
      "instruction": " Create a custom UIView with a progress bar and a label indicating the percentage of progress",
      "input": "",
      "output": "import UIKit\n\nclass CustomProgressView: UIView {\n    @IBOutlet weak var progressBar: UIProgressView!\n    @IBOutlet weak var progressLabel: UILabel!\n    \n    func updateProgress(_ progress: Float) {\n        progressBar.progress = progress\n        progressLabel.text = String(format: \"%.0f%%\", progress * 100)\n    }\n}"
    },
    {
      "instruction": " Write a function that retrieves the user's contacts and prints their names and phone numbers",
      "input": "",
      "output": "import Contacts\n\nfunc fetchContacts() {\n    let store = CNContactStore()\n    let keysToFetch = [CNContactGivenNameKey, CNContactFamilyNameKey, CNContactPhoneNumbersKey] as [CNKeyDescriptor]\n    let request = CNContactFetchRequest(keysToFetch: keysToFetch)\n\n    do {\n        try store.enumerateContacts(with: request) { (contact, stop) in\n            let name = contact.givenName + \" \" + contact.familyName\n            let phoneNumbers = contact.phoneNumbers.map { $0.value.stringValue }\n            print(\"Name: \\(name), Phone Numbers: \\(phoneNumbers)\")\n        }\n    } catch let error {\n        print(\"Failed to fetch contacts: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " Implement a UIViewController with a UIScrollView and a UIImageView to display a zoomable image",
      "input": "",
      "output": "import UIKit\n\nclass ZoomableImageViewController: UIViewController, UIScrollViewDelegate {\n    @IBOutlet weak var scrollView: UIScrollView!\n    @IBOutlet weak var imageView: UIImageView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        scrollView.minimumZoomScale = 1.0\n        scrollView.maximumZoomScale = 6.0\n        scrollView.delegate = self\n    }\n\n    func viewForZooming(in scrollView: UIScrollView) -> UIView? {\n        return imageView\n    }\n}"
    },
    {
      "instruction": " Create a custom UIControl that displays a rating using stars, allowing users to select the rating by tapping on the stars",
      "input": "",
      "output": "import UIKit\n\nclass StarRatingControl: UIControl {\n    private var starButtons: [UIButton] = []\n    private let numberOfStars = 5\n    private let starSize: CGSize = CGSize(width: 44, height: 44)\n    private let starSpacing: CGFloat = 8\n\n    var rating: Int = 0 {\n        didSet {\n            updateButtonSelectionStates()\n        }\n    }\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupButtons()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupButtons()\n    }\n\n    private func setupButtons() {\n        for _ in 0..<numberOfStars {\n            let button = UIButton()\n            button.setImage(UIImage(named: \"emptyStar\"), for: .normal)\n            button.setImage(UIImage(named: \"filledStar\"), for: .selected)\n\n            button.addTarget(self, action: #selector(ratingButtonTapped(button:)), for: .touchUpInside)\n\n            starButtons.append(button)\n            addSubview(button)\n        }\n    }\n\n    override func layoutSubviews() {\n        let buttonWidth = starSize.width + starSpacing\n        var buttonFrame = CGRect(origin: .zero, size: starSize)\n\n        for (index, button) in starButtons.enumerated() {\n            buttonFrame.origin.x = CGFloat(index) * buttonWidth\n            button.frame = buttonFrame\n        }\n    }\n\n    override var intrinsicContentSize: CGSize {\n        let width = CGFloat(numberOfStars) * starSize.width + CGFloat(numberOfStars - 1) * starSpacing\n        return CGSize(width: width, height: starSize.height)\n    }\n\n    @objc private func ratingButtonTapped(button: UIButton) {\n        guard let index = starButtons.firstIndex(of: button) else { return }\n        rating = index + 1\n\n        sendActions(for: .valueChanged)\n    }\n\n    private func updateButtonSelectionStates() {\n        for (index, button) in starButtons.enumerated() {\n            button.isSelected = index < rating\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to create a UITableView with a custom UITableViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    static let reuseIdentifier = \"CustomTableViewCell\"\n\n    // Add your custom UI elements and layout here\n}\n\nclass CustomTableViewController: UITableViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: CustomTableViewCell.reuseIdentifier)\n    }\n\n    // MARK: - Table view data source\n\n    override func numberOfSections(in tableView: UITableView) -> Int {\n        return 1\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        // Return the number of rows in the section\n        return 30\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.reuseIdentifier, for: indexPath) as! CustomTableViewCell\n\n        // Configure the cell...\n\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to add a UIActivityIndicatorView to a view and start animating it",
      "input": "",
      "output": "func addActivityIndicatorView(to view: UIView) -> UIActivityIndicatorView {\n    let activityIndicatorView = UIActivityIndicatorView(style: .medium)\n    activityIndicatorView.translatesAutoresizingMaskIntoConstraints = false\n    view.addSubview(activityIndicatorView)\n    activityIndicatorView.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true\n    activityIndicatorView.centerYAnchor.constraint(equalTo: view.centerYAnchor).isActive = true\n    activityIndicatorView.startAnimating()\n    return activityIndicatorView\n}"
    },
    {
      "instruction": " Write a Swift function to create a UICollectionView with a custom UICollectionViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n\n    // Add your custom UI elements and layout here\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n    \n    init() {\n        let layout = UICollectionViewFlowLayout()\n        super.init(collectionViewLayout: layout)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n    }\n\n    // MARK: UICollectionViewDataSource\n\n    override func numberOfSections(in collectionView: UICollectionView) -> Int {\n        return 1\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 30\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n\n        // Configure the cell...\n\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a UIStackView with an array of UIViews and set the axis, distribution, and spacing",
      "input": "",
      "output": "func createStackView(with views: [UIView], axis: NSLayoutConstraint.Axis, distribution: UIStackView.Distribution, spacing: CGFloat) -> UIStackView {\n    let stackView = UIStackView(arrangedSubviews: views)\n    stackView.axis = axis\n    stackView.distribution = distribution\n    stackView.spacing = spacing\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    return stackView\n}"
    },
    {
      "instruction": " Write a Swift function to programmatically present a UIAlertController with a title, message, and an array of UIAlertAction",
      "input": "",
      "output": "func presentAlertController(with title: String, message: String, actions: [UIAlertAction], viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    for action in actions {\n        alertController.addAction(action)\n    }\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift function to programmatically create a UIBarButtonItem and add it to the navigation bar",
      "input": "",
      "output": "func addBarButtonItem(with title: String, target: Any?, action: Selector, viewController: UIViewController) -> UIBarButtonItem {\n    let barButtonItem = UIBarButtonItem(title: title, style: .plain, target: target, action: action)\n    viewController.navigationItem.rightBarButtonItem = barButtonItem\n    return barButtonItem\n}"
    },
    {
      "instruction": " Write a Swift function to programmatically create a UINavigationBar and add it to a view",
      "input": "",
      "output": "func addNavigationBar(to view: UIView, title: String) -> UINavigationBar {\n    let navigationBar = UINavigationBar(frame: CGRect(x: 0, y: 0, width:view.bounds.width, height: 44))\n    navigationBar.translatesAutoresizingMaskIntoConstraints = false\n    view.addSubview(navigationBar)\n\n    let navigationItem = UINavigationItem(title: title)\n    navigationBar.setItems([navigationItem], animated: false)\n\n    NSLayoutConstraint.activate([\n        navigationBar.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n        navigationBar.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n        navigationBar.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor)\n    ])\n\n    return navigationBar\n}"
    },
    {
      "instruction": " Write a Swift function to programmatically create a UIPickerView and implement its data source and delegate methods",
      "input": "",
      "output": "import UIKit\n\nclass CustomPickerViewController: UIViewController, UIPickerViewDataSource, UIPickerViewDelegate {\n    \n    let pickerView = UIPickerView()\n    let pickerData = [\"Option 1\", \"Option 2\", \"Option 3\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupPickerView()\n    }\n\n    func setupPickerView() {\n        pickerView.dataSource = self\n        pickerView.delegate = self\n        pickerView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(pickerView)\n\n        NSLayoutConstraint.activate([\n            pickerView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            pickerView.centerXAnchor.constraint(equalTo: view.centerXAnchor)\n        ])\n    }\n\n    // MARK: UIPickerViewDataSource\n\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return pickerData.count\n    }\n\n    // MARK: UIPickerViewDelegate\n\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return pickerData[row]\n    }\n\n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        print(\"Selected row: \\(row), value: \\(pickerData[row])\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that takes a UITableView and a UITableViewCell identifier as parameters, and registers and dequeues a UITableViewCell with the given identifier",
      "input": "",
      "output": "import UIKit\n\nfunc dequeueReusableCell<T: UITableViewCell>(tableView: UITableView, withIdentifier identifier: String) -> T {\n    tableView.register(T.self, forCellReuseIdentifier: identifier)\n    guard let cell = tableView.dequeueReusableCell(withIdentifier: identifier) as? T else {\n        fatalError(\"Unable to dequeue cell with identifier: \\(identifier)\")\n    }\n    return cell\n}"
    },
    {
      "instruction": " Write a Swift function to create and present a UIAlertController with a specified title, message, and a list of UIAlertAction objects",
      "input": "",
      "output": "import UIKit\n\nfunc presentAlertController(_ viewController: UIViewController, title: String, message: String, actions: [UIAlertAction]) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    for action in actions {\n        alertController.addAction(action)\n    }\n    \n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift function that takes a latitude and longitude, and returns a CLLocation object",
      "input": "",
      "output": "import CoreLocation\n\nfunc createLocation(latitude: CLLocationDegrees, longitude: CLLocationDegrees) -> CLLocation {\n    let location = CLLocation(latitude: latitude, longitude: longitude)\n    return location\n}"
    },
    {
      "instruction": " Write a Swift function to asynchronously download an image from a URL and update a UIImageView's image property with the downloaded image",
      "input": "",
      "output": "import UIKit\n\nfunc loadImage(from url: URL, into imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            print(\"Error downloading image: \\(error.localizedDescription)\")\n            return\n        }\n        \n        guard let data = data else {\n            print(\"No data received.\")\n            return\n        }\n        \n        DispatchQueue.main.async {\n            imageView.image = UIImage(data: data)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " Write a Swift function that takes a string and validates if it's a valid email address using a regular expression",
      "input": "",
      "output": "import Foundation\n\nfunc isValidEmail(_ email: String) -> Bool {\n    let emailRegex = \"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\\\.[A-Za-z]{2,64}\"\n    let emailPredicate = NSPredicate(format: \"SELF MATCHES %@\", emailRegex)\n    return emailPredicate.evaluate(with: email)\n}"
    },
    {
      "instruction": " Write a Swift function that takes an array of integers and a completion handler, and computes the sum of the integers asynchronously using Grand Central Dispatch (GCD)",
      "input": "",
      "output": "import Dispatch\n\nfunc asyncSum(integers: [Int], completion: @escaping (Int) -> Void) {\n    DispatchQueue.global(qos: .userInitiated).async {\n        let sum = integers.reduce(0, +)\n        DispatchQueue.main.async {\n            completion(sum)\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that takes a UICollectionView and a UICollectionViewCell identifier as parameters, and registers and dequeues a UICollectionViewCell with the given identifier",
      "input": "",
      "output": "import UIKit\n\nfunc dequeueReusableCell<T: UICollectionViewCell>(collectionView: UICollectionView, withIdentifier identifier: String, for indexPath: IndexPath) -> T {\n    collectionView.register(T.self, forCellWithReuseIdentifier: identifier)\n    guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: identifier, for: indexPath) as? T else {\n        fatalError(\"Unable to dequeue cell with identifier: \\(identifier)\")\n    }\n    return cell\n}"
    },
    {
      "instruction": " Write a Swift function that creates a UICollectionView with a custom layout and cell registration",
      "input": "",
      "output": "func createCollectionView() -> UICollectionView {\n    let layout = UICollectionViewFlowLayout()\n    layout.scrollDirection = .vertical\n    layout.minimumLineSpacing = 10\n    layout.minimumInteritemSpacing = 10\n    layout.itemSize = CGSize(width: 100, height: 100)\n\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    collectionView.delegate = self\n    collectionView.dataSource = self\n    collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n    return collectionView\n}\n\n// Make sure to conform to UICollectionViewDelegate & UICollectionViewDataSource\n// extension ViewController: UICollectionViewDelegate, UICollectionViewDataSource {\n// func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int { return dataSource.count }\n// func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n//     let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n//     cell.configure(with: dataSource[indexPath.item])\n//     return cell\n// }\n// }"
    },
    {
      "instruction": " Write a Swift function that initializes a UIAlertController with a given title, message, and UIAlertAction",
      "input": "",
      "output": "func showAlert(title: String, message: String, actionTitle: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: actionTitle, style: .default, handler: nil)\n    alertController.addAction(action)\n    present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift function that initializes a UIPageViewController with a custom view controller data source",
      "input": "",
      "output": "func createPageViewController() -> UIPageViewController {\n    let pageViewController = UIPageViewController(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil)\n    pageViewController.delegate = self\n    pageViewController.dataSource = self\n    return pageViewController\n}\n\n// Make sure to conform to UIPageViewControllerDelegate & UIPageViewControllerDataSource\n// extension ViewController: UIPageViewControllerDelegate, UIPageViewControllerDataSource {\n// func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n//     guard let index = orderedViewControllers.firstIndex(of: viewController), index > 0 else { return nil }\n//     return orderedViewControllers[index - 1]\n// }\n//\n// func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {\n//     guard let index = orderedViewControllers.firstIndex(of: viewController), index < orderedViewControllers.count - 1 else { return nil }\n//     return orderedViewControllers[index + 1]\n// }\n// }"
    },
    {
      "instruction": " Write a Swift function that initializes a UIImagePickerController with a given source type and delegate",
      "input": "",
      "output": "func createImagePickerController(sourceType: UIImagePickerController.SourceType) -> UIImagePickerController? {\n    guard UIImagePickerController.isSourceTypeAvailable(sourceType) else { return nil }\n    let imagePickerController = UIImagePickerController()\n    imagePickerController.sourceType = sourceType\n    imagePickerController.delegate = self\n    return imagePickerController\n}\n\n// Make sure to conform to UIImagePickerControllerDelegate & UINavigationControllerDelegate\n// extension ViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n// func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {\n//     if let image = info[.originalImage] as? UIImage {\n//         // Do something with the image\n//     }\n//     picker.dismiss(animated: true, completion: nil)\n// }\n// }"
    },
    {
      "instruction": " Write a Swift function that initializes a CLLocationManager with a given delegate and desired accuracy",
      "input": "",
      "output": "func createLocationManager() -> CLLocationManager {\n    let locationManager = CLLocationManager()\n    locationManager.delegate = self\n    locationManager.desiredAccuracy = kCLLocationAccuracyBest\n    locationManager.requestWhenInUseAuthorization()\n    return locationManager\n}\n\n// Make sure to conform to CLLocationManagerDelegate\n// extension ViewController: CLLocationManagerDelegate {\n// func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n//     if let location = locations.first {\n//         // Do something with the location\n//     }\n// }\n// }"
    },
    {
      "instruction": " Write a Swift function that initializes a WKWebView with a given URL and navigation delegate",
      "input": "",
      "output": "func createWebView(url: URL) -> WKWebView {\n    let webView = WKWebView()\n    webView.translatesAutoresizingMaskIntoConstraints = false\n    webView.navigationDelegate = self\n    let request = URLRequest(url: url)\n    webView.load(request)\n    return webView\n}\n\n// Make sure to conform to WKNavigationDelegate\n// extension ViewController: WKNavigationDelegate {\n// func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {\n//     // Do something when the web view finishes loading\n// }\n// }"
    },
    {
      "instruction": " Write a Swift function that initializes a UIStackView with a given axis, distribution, and alignment",
      "input": "",
      "output": "func createStackView(axis: NSLayoutConstraint.Axis, distribution: UIStackView.Distribution, alignment: UIStackView.Alignment) -> UIStackView {\n    let stackView = UIStackView()\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    stackView.axis = axis\n    stackView.distribution = distribution\n    stackView.alignment = alignment\n    stackView.spacing = 8\n    return stackView\n}"
    },
    {
      "instruction": " Write a Swift function to play an audio file from a URL using AVFoundation",
      "input": "",
      "output": "import AVFoundation\n\nclass AudioPlayer: NSObject, AVAudioPlayerDelegate {\n    private var audioPlayer: AVAudioPlayer?\n    \n    func playAudio(from url: URL, completion: @escaping (Bool) -> Void) {\n        do {\n            audioPlayer = try AVAudioPlayer(contentsOf: url)\n            audioPlayer?.delegate = self\n            audioPlayer?.prepareToPlay()\n            audioPlayer?.play()\n            completion(true)\n        } catch {\n            completion(false)\n        }\n    }\n    \n    func audioPlayerDidFinishPlaying(_ player: AVAudioPlayer, successfully flag: Bool) {\n        audioPlayer = nil\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement a custom UITableView with a refresh control",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewController: UITableViewController {\n    private let refresh = UIRefreshControl()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupRefreshControl()\n    }\n    \n    private func setupRefreshControl() {\n        refresh.addTarget(self, action: #selector(refreshData), for: .valueChanged)\n        tableView.refreshControl = refresh\n    }\n    \n    @objc private func refreshData() {\n        // Fetch new data and reload the table view\n        refresh.endRefreshing()\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to authenticate a user using Face ID or Touch ID",
      "input": "",
      "output": "import LocalAuthentication\n\nclass BiometricAuthenticator {\n    func authenticateUser(completion: @escaping (Bool, Error?) -> Void) {\n        let context = LAContext()\n        var error: NSError?\n\n        if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {\n            let reason = \"Authenticate with biometrics\"\n            context.evaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, localizedReason: reason) { success, error in\n                DispatchQueue.main.async {\n                    completion(success, error)\n                }\n            }\n        } else {\n            DispatchQueue.main.async {\n                completion(false, error)\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UICollectionView with a flow layout",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UICollectionViewController {\n    private let reuseIdentifier = \"CustomCell\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupCollectionView()\n    }\n    \n    private func setupCollectionView() {\n        let layout = UICollectionViewFlowLayout()\n        layout.itemSize = CGSize(width: 100, height: 100)\n        collectionView.setCollectionViewLayout(layout, animated: true)\n        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: reuseIdentifier)\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath)\n        cell.backgroundColor = .blue\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UIView with rounded corners and a shadow",
      "input": "",
      "output": "import UIKit\n\nclass RoundedShadowView: UIView {\n    override func awakeFromNib() {\n        super.awakeFromNib()\n        setupView()\n    }\n    \n    private func setupView() {\n        layer.cornerRadius = 10\n        layer.masksToBounds = false\n        layer.shadowColor = UIColor.black.cgColor\n        layer.shadowOffset = CGSize(width: 0, height: 2)\n        layer.shadowOpacity = 0.3\n        layer.shadowRadius = 4\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UIButton with an animated tap effect",
      "input": "",
      "output": "import UIKit\n\nclass AnimatedButton: UIButton {\n    override func awakeFromNib() {\n        super.awakeFromNib()\n        addTarget(self, action: #selector(animateTap), for: .touchUpInside)\n    }\n    \n    @objc private func animateTap() {\n        UIView.animate(withDuration: 0.1, animations: {\n            self.transform = CGAffineTransform(scaleX: 0.95, y: 0.95)\n        }) { _ in\n            UIView.animate(withDuration: 0.1) {\n                self.transform = CGAffineTransform.identity\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement a custom UISearchBar with a clear button and a cancel button",
      "input": "",
      "output": "import UIKit\n\nclass CustomSearchBarController: UIViewController, UISearchBarDelegate {\n    private let searchBar = UISearchBar()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupSearchBar()\n    }\n    \n    private func setupSearchBar() {\n        searchBar.delegate = self\n        searchBar.showsCancelButton = true\n        searchBar.placeholder = \"Search\"\n        searchBar.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(searchBar)\n        \n        NSLayoutConstraint.activate([\n            searchBar.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            searchBar.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            searchBar.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            searchBar.perform(#selector(resignFirstResponder), with: nil, afterDelay: 0.1)\n        }\n    }\n    \n    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {\n        searchBar.text = \"\"\n        searchBar.resignFirstResponder()\n    }\n}"
    },
    {
      "instruction": "Create a custom UICollectionViewCell with an image and title.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    \n    var imageView: UIImageView!\n    var titleLabel: UILabel!\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        \n        imageView = UIImageView(frame: CGRect(x: 5, y: 5, width: frame.width - 10, height: frame.height - 30))\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        contentView.addSubview(imageView)\n        \n        titleLabel = UILabel(frame: CGRect(x: 5, y: imageView.frame.height + 10, width: frame.width - 10, height: 20))\n        titleLabel.textAlignment = .center\n        titleLabel.font = UIFont.systemFont(ofSize: 14)\n        contentView.addSubview(titleLabel)\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that downloads an image from a URL and sets it to a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc loadImage(from url: URL, into imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let data = data, let image = UIImage(data: data) {\n            DispatchQueue.main.async {\n                imageView.image = image\n            }\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " Create a simple table view with custom cells that display a list of contacts with their name and phone number.",
      "input": "",
      "output": "import UIKit\n\nstruct Contact {\n    let name: String\n    let phoneNumber: String\n}\n\nclass ContactTableViewCell: UITableViewCell {\n    var nameLabel: UILabel!\n    var phoneNumberLabel: UILabel!\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n\n        nameLabel = UILabel(frame: CGRect(x: 20, y: 10, width: contentView.frame.width - 40, height: 20))\n        contentView.addSubview(nameLabel)\n\n        phoneNumberLabel = UILabel(frame: CGRect(x: 20, y: 40, width: contentView.frame.width - 40, height: 20))\n        contentView.addSubview(phoneNumberLabel)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n\nclass ContactsTableViewController: UITableViewController {\n    var contacts: [Contact] = [\n        Contact(name: \"John Doe\", phoneNumber: \"123-456-7890\"),\n        Contact(name: \"Jane Smith\", phoneNumber: \"321-654-0987\"),\n        // Add more contacts...\n    ]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(ContactTableViewCell.self, forCellReuseIdentifier: \"ContactCell\")\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return contacts.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"ContactCell\", for: indexPath) as! ContactTableViewCell\n        let contact = contacts[indexPath.row]\n        cell.nameLabel.text = contact.name\n        cell.phoneNumberLabel.text = contact.phoneNumber\n        return cell\n    }\n}"
    },
    {
      "instruction": " Create a function that calculates the distance between two CLLocationCoordinate2D points.",
      "input": "",
      "output": "import CoreLocation\n\nfunc distanceBetween(point1: CLLocationCoordinate2D, point2: CLLocationCoordinate2D) -> CLLocationDistance {\n    let location1 = CLLocation(latitude: point1.latitude, longitude: point1.longitude)\n    let location2 = CLLocation(latitude: point2.latitude, longitude: point2.longitude)\n    return location1.distance(from: location2)\n}"
    },
    {
      "instruction": " Implement a custom UINavigationController that has a transparent navigation bar with white text.",
      "input": "",
      "output": "import UIKit\n\nclass TransparentNavigationController: UINavigationController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        navigationBar.setBackgroundImage(UIImage(), for: .default)\n        navigationBar.shadowImage = UIImage()\n        navigationBar.isTranslucent = true\n        navigationBar.tintColor = .white\n        navigationBar.titleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor.white]\n    }\n}"
    },
    {
      "instruction": " Create a Swift function that adds a blur effect to a UIView.",
      "input": "",
      "output": "import UIKit\n\nfunc addBlurEffect(to view: UIView, style: UIBlurEffect.Style = .light) {\n    let blurEffect = UIBlurEffect(style: style)\n    let blurEffectView = UIVisualEffectView(effect: blurEffect)\n    blurEffectView.frame = view.bounds\n    blurEffectView.autoresizingMask = [.flexibleWidth, .flexibleHeight]\n    view.addSubview(blurEffectView)\n}"
    },
    {
      "instruction": " Create a Swift function that animates the changing of constraints for a UIView.",
      "input": "",
      "output": "import UIKit\n\nfunc animateConstraintChange(for view: UIView, duration: TimeInterval, layoutConstraint: NSLayoutConstraint, constant: CGFloat) {\n    layoutConstraint.constant = constant\n    UIView.animate(withDuration: duration) {\n        view.layoutIfNeeded()\n    }\n}"
    },
    {
      "instruction": " Create a custom UIPickerView that displays a list of emoji and returns the selected emoji.",
      "input": "",
      "output": "import UIKit\n\nprotocol EmojiPickerDelegate: AnyObject {\n    func didSelectEmoji(_ emoji: String)\n}\n\nclass EmojiPickerView: UIPickerView, UIPickerViewDataSource, UIPickerViewDelegate {\n    \n    let emojis = [\"😀\", \"😃\", \"😄\", \"😁\", \"😆\", \"😅\", \"😂\", \"🤣\", \"😊\", \"😇\"]\n    weak var emojiPickerDelegate: EmojiPickerDelegate?\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        self.dataSource = self\n        self.delegate = self\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return emojis.count\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return emojis[row]\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        emojiPickerDelegate?.didSelectEmoji(emojis[row])\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that asynchronously downloads an image from a URL and sets it to a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc setImage(from url: URL, to imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil, let image = UIImage(data: data) else {\n            return\n        }\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " Write a Swift function that adds a simple parallax effect to a UIScrollView.",
      "input": "",
      "output": "import UIKit\n\nfunc addParallaxEffect(to scrollView: UIScrollView, with intensity: CGFloat) {\n    let parallaxEffect = UIInterpolatingMotionEffect(keyPath: \"center.x\", type: .tiltAlongHorizontalAxis)\n    parallaxEffect.minimumRelativeValue = -intensity\n    parallaxEffect.maximumRelativeValue = intensity\n    scrollView.addMotionEffect(parallaxEffect)\n}"
    },
    {
      "instruction": " Write a Swift function that detects whether a device is in landscape or portrait orientation.",
      "input": "",
      "output": "import UIKit\n\nfunc isLandscape() -> Bool {\n    return UIApplication.shared.statusBarOrientation.isLandscape\n}"
    },
    {
      "instruction": " Write a Swift function that programmatically creates a UIButton with a specified title, color, and touchUpInside action.",
      "input": "",
      "output": "import UIKit\n\nfunc createButton(title: String, color: UIColor, action: Selector, target: Any) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.setTitleColor(color, for: .normal)\n    button.addTarget(target, action: action, for: .touchUpInside)\n    return button\n}"
    },
    {
      "instruction": " Write a Swift function that animates the changing of a UILabel's text color.",
      "input": "",
      "output": "import UIKit\n\nfunc animateTextColorChange(of label: UILabel, to color: UIColor, duration: TimeInterval) {\n    UIView.animate(withDuration: duration) {\n        label.textColor = color\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that presents an alert with a specified title, message, and action button.",
      "input": "",
      "output": "import UIKit\n\nfunc presentAlert(in viewController: UIViewController, title: String, message: String, buttonText: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: buttonText, style: .default, handler: nil)\n    alertController.addAction(action)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift function that adds a shadow to a UIView with specified color, offset, radius, and opacity.",
      "input": "",
      "output": "import UIKit\n\nfunc addShadow(to view: UIView, color: UIColor, offset: CGSize, radius: CGFloat, opacity: Float) {\n    view.layer.shadowColor = color.cgColor\n    view.layer.shadowOffset = offset\n    view.layer.shadowRadius = radius\n    view.layer.shadowOpacity = opacity\n}"
    },
    {
      "instruction": " Write a Swift function that checks if the user has granted a specified permission and requests it if not.",
      "input": "",
      "output": "import AVFoundation\n\nfunc checkPermissionAndRequest(_ permission: AVCaptureDevice.Permission, completionHandler: @escaping (Bool) -> Void) {\n    switch AVCaptureDevice.authorizationStatus(for: .video) {\n    case .authorized:\n        completionHandler(true)\n    case .notDetermined:\n        AVCaptureDevice.requestAccess(for: .video) { granted in\n            completionHandler(granted)\n        }\n    case .denied, .restricted:\n        completionHandler(false)\n    default:\n        completionHandler(false)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that asynchronously fetches JSON data from a URL and decodes it into a specified model type.",
      "input": "URL: https://api.example.com/data\nModel: DataModel",
      "output": "import Foundation\n\nstruct DataModel: Codable {\n    // Properties go here.\n}\n\nfunc fetchJSONData<T: Decodable>(url: URL, completion: @escaping (Result<T, Error>) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(.failure(error))\n        } else if let data = data {\n            do {\n                let decodedData = try JSONDecoder().decode(T.self, from: data)\n                completion(.success(decodedData))\n            } catch {\n                completion(.failure(error))\n            }\n        }\n    }\n    task.resume()\n}\n\nlet dataUrl = URL(string: \"https://api.example.com/data\")!\nfetchJSONData(url: dataUrl) { (result: Result<DataModel, Error>) in\n    switch result {\n    case .success(let data):\n        print(data)\n    case .failure(let error):\n        print(error)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that saves a string to UserDefaults and another function that retrieves the string.",
      "input": "Key: \"username\"\nValue: \"john_doe\"",
      "output": "import Foundation\n\nfunc saveToUserDefaults(key: String, value: String) {\n    UserDefaults.standard.set(value, forKey: key)\n}\n\nfunc retrieveFromUserDefaults(key: String) -> String? {\n    return UserDefaults.standard.string(forKey: key)\n}\n\nlet key = \"username\"\nlet value = \"john_doe\"\n\nsaveToUserDefaults(key: key, value: value)\nif let retrievedValue = retrieveFromUserDefaults(key: key) {\n    print(retrievedValue)\n}"
    },
    {
      "instruction": " Write a Swift function that registers a local notification with a specified title, body, and time interval.",
      "input": "Title: \"Reminder\"\nBody: \"Don't forget to check the app.\"\nTimeInterval: 5",
      "output": "import UserNotifications\n\nfunc scheduleLocalNotification(title: String, body: String, timeInterval: TimeInterval) {\n    let center = UNUserNotificationCenter.current()\n\n    let content = UNMutableNotificationContent()\n    content.title = title\n    content.body = body\n\n    let trigger = UNTimeIntervalNotificationTrigger(timeInterval: timeInterval, repeats: false)\n\n    let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)\n    center.add(request) { (error) in\n        if let error = error {\n            print(\"Error scheduling notification: \\(error)\")\n        }\n    }\n}\n\nlet title = \"Reminder\"\nlet body = \"Don't forget to check the app.\"\nlet timeInterval: TimeInterval = 5\n\nscheduleLocalNotification(title: title, body: body, timeInterval: timeInterval)"
    },
    {
      "instruction": " Write a Swift function that plays a sound file stored in the app's main bundle.",
      "input": "Sound file: \"example.wav\"",
      "output": "import AVFoundation\n\nfunc playSound(named fileName: String) {\n    guard let url = Bundle.main.url(forResource: fileName, withExtension: nil) else {\n        print(\"Unable to find file: \\(fileName)\")\n        return\n    }\n\n    do {\n        let audioPlayer = try AVAudioPlayer(contentsOf: url)\n        audioPlayer.play()\n    } catch {\n        print(\"Error playing sound: \\(error)\")\n    }\n}\n\nlet soundFileName = \"example.wav\"\nplaySound(named: soundFileName)"
    },
    {
      "instruction": " Write a Swift function that creates a custom UIAlertController with one UIAlertAction.",
      "input": "Title: \"Warning\"\nMessage: \"Are you sure you want to continue?\"\nAction title: \"Continue\"",
      "output": "import UIKit\n\nfunc presentAlertController(title: String, message: String, actionTitle: String, viewController: UIViewController) {\n    letalertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: actionTitle, style: .default, handler: nil)\n    alertController.addAction(action)\n    viewController.present(alertController, animated: true, completion: nil)\n}\n\nlet title = \"Warning\"\nlet message = \"Are you sure you want to continue?\"\nlet actionTitle = \"Continue\"\nlet viewController = UIViewController() // Replace with your view controller\n\npresentAlertController(title: title, message: message, actionTitle: actionTitle, viewController: viewController)"
    },
    {
      "instruction": " Write a Swift function that converts a Date to a formatted String.",
      "input": "Date: 2023-05-26 09:00:00\nFormat: \"yyyy-MM-dd HH:mm\"",
      "output": "import Foundation\n\nfunc formatDate(_ date: Date, format: String) -> String {\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = format\n    return dateFormatter.string(from: date)\n}\n\nlet date = Date(timeIntervalSince1970: 1674256800) // 2023-05-26 09:00:00\nlet format = \"yyyy-MM-dd HH:mm\"\n\nlet formattedDate = formatDate(date, format: format)\nprint(formattedDate)"
    },
    {
      "instruction": " Write a Swift function that takes a UIImage and returns a grayscale version of the image.",
      "input": "UIImage: originalImage",
      "output": "import UIKit\n\nfunc convertToGrayscale(image: UIImage) -> UIImage? {\n    guard let cgImage = image.cgImage else { return nil }\n    \n    let width = Int(image.size.width)\n    let height = Int(image.size.height)\n    \n    let colorSpace = CGColorSpaceCreateDeviceGray()\n    let bitmapInfo = CGBitmapInfo(rawValue: CGImageAlphaInfo.none.rawValue)\n    \n    guard let context = CGContext(data: nil, width: width, height: height, bitsPerComponent: 8, bytesPerRow: 0, space: colorSpace, bitmapInfo: bitmapInfo.rawValue) else { return nil }\n    \n    context.draw(cgImage, in: CGRect(x: 0, y: 0, width: width, height: height))\n    \n    guard let grayImage = context.makeImage() else { return nil }\n    \n    return UIImage(cgImage: grayImage)\n}\n\nlet originalImage = UIImage(named: \"example.jpg\")! // Replace with your UIImage\nif let grayscaleImage = convertToGrayscale(image: originalImage) {\n    print(\"Grayscale image created.\")\n}"
    },
    {
      "instruction": "Write a custom UITableView cell class that displays a person's profile image, name, and age in a nicely formatted layout.",
      "input": "",
      "output": "import UIKit\n\nclass ProfileTableViewCell: UITableViewCell {\n\n    let profileImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.layer.cornerRadius = 25\n        imageView.clipsToBounds = true\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n\n    let nameLabel: UILabel = {\n        let label = UILabel()\n        label.font = UIFont.systemFont(ofSize: 18, weight: .bold)\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    let ageLabel: UILabel = {\n        let label = UILabel()\n        label.font = UIFont.systemFont(ofSize: 16, weight: .regular)\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupSubviews()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupSubviews() {\n        contentView.addSubview(profileImageView)\n        contentView.addSubview(nameLabel)\n        contentView.addSubview(ageLabel)\n\n        NSLayoutConstraint.activate([\n            profileImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 12),\n            profileImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            profileImageView.heightAnchor.constraint(equalToConstant: 50),\n            profileImageView.widthAnchor.constraint(equalToConstant: 50),\n\n            nameLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 12),\n            nameLabel.leadingAnchor.constraint(equalTo: profileImageView.trailingAnchor, constant: 12),\n\n            ageLabel.topAnchor.constraint(equalTo: nameLabel.bottomAnchor, constant: 4),\n            ageLabel.leadingAnchor.constraint(equalTo: nameLabel.leadingAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nImplement a function that asynchronously fetches a list of users from a JSON API and decodes them into an array of User objects.",
      "input": "",
      "output": "import Foundation\n\nstruct User: Decodable {\n    let id: Int\n    let name: String\n    let email: String\n    let phoneNumber: String\n}\n\nfunc fetchUsers(completion: @escaping (Result<[User], Error>) -> Void) {\n    let url = URL(string: \"https://api.example.com/users\")!\n\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else {\n            let error = NSError(domain: \"\", code: 0, userInfo: [NSLocalizedDescriptionKey: \"No data received\"])\n            completion(.failure(error))\n            return\n        }\n\n        do {\n            let users = try JSONDecoder().decode([User].self, from: data)\n            completion(.success(users))\n        } catch {\n            completion(.failure(error))\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nCreate a custom UICollectionView layout that displays items in a grid with variable column widths and equal row heights.",
      "input": "",
      "output": "import UIKit\n\nclass VariableWidthGridLayout: UICollectionViewLayout {\n    private var cache: [UICollectionViewLayoutAttributes] = []\n    private var contentWidth: CGFloat = 0\n    private let rowHeight: CGFloat = 100\n\n    override var collectionViewContentSize: CGSize {\n        return CGSize(width: contentWidth, height: rowHeight * CGFloat(collectionView!.numberOfSections))\n    }\n\n    override func prepare() {\n        guard cache.isEmpty, let collectionView = collectionView else { return }\n\n        var xOffset: CGFloat = 0\n        for item in 0..<collectionView.numberOfItems(inSection: 0) {\n            let indexPath = IndexPath(item: item, section: 0)\n            let columnWidth = CGFloat(100 * (item % 2 + 1))\n            let frame = CGRect(x: xOffset, y: 0, width: columnWidth, height: rowHeight)\n            let attributes = UICollectionViewLayoutAttributes(forCellWith: indexPath)\n            attributes.frame = frame\n            cache.append(attributes)\n\n            xOffset += columnWidth\n            contentWidth = max(contentWidth, xOffset)\n        }\n    }\n\n    override func layoutAttributesForElements(in rect: CGRect) -> [UICollectionViewLayoutAttributes]? {\n        return cache.filter { $0.frame.intersects(rect) }\n    }\n\n    override func layoutAttributesForItem(at indexPath: IndexPath) -> UICollectionViewLayoutAttributes? {\n        return cache[indexPath.item]\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom UIControl subclass that represents a star rating control, allowing users to tap and select a rating from 1 to 5 stars.",
      "input": "",
      "output": "import UIKit\n\nclass StarRatingControl: UIControl {\n    private var starButtons: [UIButton] = []\n\n    var rating: Int = 0 {\n        didSet {\n            updateButtonSelectionStates()\n            sendActions(for: .valueChanged)\n        }\n    }\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupButtons()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupButtons()\n    }\n\n    private func setupButtons() {\n        for index in 1...5 {\n            let button = UIButton()\n            let emptyStarImage = UIImage(named: \"emptyStar\")\n            let filledStarImage = UIImage(named: \"filledStar\")\n            button.setImage(emptyStarImage, for: .normal)\n            button.setImage(filledStarImage, for: .selected)\n            button.tag = index\n            button.addTarget(self, action: #selector(starButtonTapped(_:)), for: .touchUpInside)\n            addSubview(button)\n            starButtons.append(button)\n        }\n        updateButtonSelectionStates()\n    }\n\n    override func layoutSubviews() {\n        let buttonSize = Int(bounds.size.height)\n        var buttonFrame = CGRect(x: 0, y: 0, width: buttonSize, height: buttonSize)\n\n        for (index, button) in starButtons.enumerated() {\n            buttonFrame.origin.x = CGFloat(index * (buttonSize + 5))\n            button.frame = buttonFrame\n        }\n    }\n\n    override var intrinsicContentSize: CGSize {\n        let buttonSize = Int(bounds.size.height)\n        let width = (buttonSize * starButtons.count) + (5 * (starButtons.count - 1))\n        return CGSize(width: width, height: buttonSize)\n    }\n\n    @objc func starButtonTapped(_ button: UIButton) {\n        rating = button.tag\n    }\n\n    private func updateButtonSelectionStates() {\n        for button in starButtons {\n            button.isSelected = button.tag <= rating\n        }\n    }\n}"
    },
    {
      "instruction": " \nDesign a view controller that displays user profiles in a UITableView using the custom ProfileTableViewCell from example 3.",
      "input": "",
      "output": "import UIKit\n\nclass UserProfileViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    private let tableView = UITableView()\n    private var users: [User] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        tableView.dataSource = self\n        tableView.delegate = self\n        tableView.register(ProfileTableViewCell.self, forCellReuseIdentifier: \"ProfileTableViewCell\")\n        tableView.rowHeight = 80\n        tableView.frame = view.bounds\n        view.addSubview(tableView)\n\n        // Load users data\n        users = loadSampleUsers()\n\n        tableView.reloadData()\n    }\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return users.count\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"ProfileTableViewCell\", for: indexPath) as! ProfileTableViewCell\n        let user = users[indexPath.row]\n        cell.nameLabel.text = user.name\n        cell.ageLabel.text = \"\\(user.age) years old\"\n        cell.profileImageView.image = UIImage(named: user.profileImageName)\n        return cell\n    }\n\n    private func loadSampleUsers() -> [User] {\n        // Load user data from your data source, e.g., JSON, CoreData, etc.\n        // Here, we return an array of sample users for demonstration purposes.\n        return [\n            User(name: \"Alice\", age: 28, profileImageName: \"alice\"),\n            User(name: \"Bob\", age: 34, profileImageName: \"bob\"),\n            User(name: \"Charlie\", age: 23, profileImageName: \"charlie\")\n        ]\n    }\n}\n\nstruct User {\n    let name: String\n    let age: Int\n    let profileImageName: String\n}"
    },
    {
      "instruction": " \nCreate a view controller that displays a collection of images in a UICollectionView with a custom layout from example 5.",
      "input": "",
      "output": "import UIKit\n\nclass ImageGalleryViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {\n    private let collectionView = UICollectionView(frame: .zero, collectionViewLayout: VariableWidthGridLayout())\n\n    private let reuseIdentifier = \"ImageCell\"\n    private var images: [UIImage] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: reuseIdentifier)\n        collectionView.backgroundColor = .white\n        collectionView.frame = view.bounds\n        view.addSubview(collectionView)\n\n        // Load images\n        images = loadSampleImages()\n\n        collectionView.reloadData()\n    }\n\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return images.count\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath)\n        let imageView = UIImageView(image: images[indexPath.item])\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        imageView.frame = cell.bounds\n        cell.contentView.addSubview(imageView)\n        return"
    },
    {
      "instruction": "Write a Swift function to asynchronously download an image from a URL and set it as the image of a UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    let imageView = UIImageView()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        downloadAndSetImage(from: \"https://example.com/image.jpg\")\n    }\n\n    func downloadAndSetImage(from urlString: String) {\n        guard let url = URL(string: urlString) else {\n            print(\"Invalid URL\")\n            return\n        }\n\n        URLSession.shared.dataTask(with: url) { [weak self] data, response, error in\n            if let error = error {\n                print(\"Error downloading image: \\(error)\")\n                return\n            }\n\n            guard let data = data, let image = UIImage(data: data) else {\n                print(\"Error decoding image data\")\n                return\n            }\n\n            DispatchQueue.main.async {\n                self?.imageView.image = image\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function to implement a UITableView with a custom UITableViewCell, and display data from an array of strings.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var titleLabel: UILabel!\n}\n\nclass TableViewController: UITableViewController {\n\n    let data = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UINib(nibName: \"CustomTableViewCell\", bundle: nil), forCellReuseIdentifier: \"CustomCell\")\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomCell\", for: indexPath) as! CustomTableViewCell\n        cell.titleLabel.text = data[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function to create a UICollectionView with a custom UICollectionViewCell, and display data from an array of strings.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var titleLabel: UILabel!\n}\n\nclass CollectionViewController: UICollectionViewController, UICollectionViewDelegateFlowLayout {\n\n    let data = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(UINib(nibName: \"CustomCollectionViewCell\", bundle: nil), forCellWithReuseIdentifier: \"CustomCell\")\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return data.count\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        cell.titleLabel.text = data[indexPath.row]\n        return cell\n    }\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: 100, height: 100)\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function to implement a search bar in a tableView to filter and display data from an array of strings.",
      "input": "",
      "output": "import UIKit\n\nclass SearchViewController: UITableViewController, UISearchBarDelegate {\n\n    let data = [\"Apple\", \"Orange\", \"Banana\", \"Grape\", \"Watermelon\"]\n    var filteredData: [String] = []\n\n    lazy var searchBar: UISearchBar = {\n        let searchBar = UISearchBar()\n        searchBar.delegate = self\n        return searchBar\n    }()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        navigationItem.titleView = searchBar\n        filteredData = data\n    }\n\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredData = data\n        } else {\n            filteredData = data.filter { $0.lowercased().contains(searchText.lowercased()) }\n        }\n        tableView.reloadData()\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredData.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\n        cell.textLabel?.text = filteredData[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function to implement a simple MapView using MapKit, and set the map region to a specific coordinate and zoom level.",
      "input": "",
      "output": "import UIKit\nimport MapKit\n\nclass MapViewController: UIViewController {\n\n    let mapView = MKMapView(frame: UIScreen.main.bounds)\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(mapView)\n        let coordinate = CLLocationCoordinate2D(latitude: 37.7749, longitude: -122.4194)\n        let region = MKCoordinateRegion(center: coordinate, latitudinalMeters: 1000, longitudinalMeters: 1000)\n        mapView.setRegion(region, animated: true)\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function to implement a simple user registration form using UITextField for collecting user information and a UIButton to submit the form.",
      "input": "",
      "output": "import UIKit\n\nclass RegistrationViewController: UIViewController {\n\n    @IBOutlet weak var usernameTextField: UITextField!\n    @IBOutlet weak var emailTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n    @IBOutlet weak var submitButton: UIButton!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    @IBAction func submitButtonTapped(_ sender: UIButton) {\n        guard let username = usernameTextField.text,\n              let email = emailTextField.text,\n              let password = passwordTextField.text else {\n            print(\"Incomplete form\")\n            return\n        }\n\n        // Handle form submission, such as sending data to a server or saving in CoreData\n        print(\"Username: \\(username), Email: \\(email), Password: \\(password)\")\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function to implement a custom UIView with a gradient background using CAGradientLayer.",
      "input": "",
      "output": "import UIKit\n\nclass GradientView: UIView {\n\n    let gradientLayer = CAGradientLayer()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupGradient()\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        setupGradient()\n    }\n\n    func setupGradient() {\n        gradientLayer.colors = [\n            UIColor.red.cgColor,\n            UIColor.blue.cgColor\n        ]\n        layer.insertSublayer(gradientLayer, at: 0)\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        gradientLayer.frame = bounds\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function to implement a simple login screen with text fields for email and password, and a UIButton to log in.",
      "input": "",
      "output": "import UIKit\n\nclass LoginViewController: UIViewController {\n\n    @IBOutlet weak var emailTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n    @IBOutlet weak var loginButton: UIButton!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    @IBAction func loginButtonTapped(_ sender: UIButton) {\n        guard let email = emailTextField.text, let password = passwordTextField.text else {\n            print(\"Email or password missing\")\n            return\n        }\n\n        // Handle login, such as authenticating with a server or checking against stored credentials\n        print(\"Email: \\(email), Password: \\(password)\")\n    }\n}"
    },
    {
      "instruction": " \n\nWrite a Swift function to implement a custom UICollectionViewCell with a UIImageView and UILabel, and configure the cell with data from an array of tuples containing image names and titles.",
      "input": "",
      "output": "import UIKit\n\nstruct CellData {\n    let imageName: String\n    let title: String\n}\n\nclass CustomImageLabelCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n\n    func configure(with data: CellData) {\n        self.imageView.image = UIImage(named: data.imageName)\n        self.titleLabel.text = data.title\n    }\n}\n\nclass ImageLabelCollectionViewController: UICollectionViewController {\n\n    let data: [CellData] = [\n        CellData(imageName: \"image1\", title: \"Item 1\"),\n        CellData(imageName: \"image2\", title: \"Item 2\"),\n        CellData(imageName: \"image3\", title: \"Item 3\")\n    ]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(UINib(nibName: \"CustomImageLabelCell\", bundle: nil), forCellWithReuseIdentifier: \"CustomCell\")\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return data.count\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomImageLabelCell\n        cell.configure(with: data[indexPath.row])\n        return cell\n    }\n}"
    },
    {
      "instruction": " Create a Swift function that detects faces in a UIImage using Vision framework",
      "input": "",
      "output": "import UIKit\nimport Vision\n\nfunc detectFaces(in image: UIImage, completion: @escaping ([VNFaceObservation]) -> Void) {\n    guard let cgImage = image.cgImage else {\n        completion([])\n        return\n    }\n    \n    let request = VNDetectFaceRectanglesRequest { request, error in\n        guard let observations = request.results as? [VNFaceObservation] else {\n            completion([])\n            return\n        }\n        completion(observations)\n    }\n    \n    let handler = VNImageRequestHandler(cgImage: cgImage, options: [:])\n    do {\n        try handler.perform([request])\n    } catch {\n        print(\"Failed to perform face detection: \\(error)\")\n        completion([])\n    }\n}"
    },
    {
      "instruction": " Create a Swift function that downloads an image from a URL and caches it using NSCache",
      "input": "",
      "output": "import UIKit\n\nclass ImageCache {\n    private let imageCache = NSCache<NSURL, UIImage>()\n\n    func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n        if let cachedImage = imageCache.object(forKey: url as NSURL) {\n            completion(cachedImage)\n            return\n        }\n\n        let task = URLSession.shared.dataTask(with: url) { [weak self] data, response, error in\n            guard let data = data, let image = UIImage(data: data), error == nil else {\n                completion(nil)\n                return\n            }\n\n            self?.imageCache.setObject(image, forKey: url as NSURL)\n            completion(image)\n        }\n        task.resume()\n    }\n}"
    },
    {
      "instruction": " Create a Swift function that saves and retrieves user settings using UserDefaults",
      "input": "",
      "output": "import Foundation\n\nstruct Settings {\n    private enum Keys: String {\n        case username\n        case email\n    }\n\n    static var username: String? {\n        get {\n            return UserDefaults.standard.string(forKey: Keys.username.rawValue)\n        }\n        set {\n            UserDefaults.standard.set(newValue, forKey: Keys.username.rawValue)\n        }\n    }\n\n    static var email: String? {\n        get {\n            return UserDefaults.standard.string(forKey: Keys.email.rawValue)\n        }\n        set {\n            UserDefaults.standard.set(newValue, forKey: Keys.email.rawValue)\n        }\n    }\n}"
    },
    {
      "instruction": " \n Create a Swift function that authenticates a user using Firebase Authentication",
      "input": "",
      "output": "import FirebaseAuth\n\nfunc authenticateUser(email: String, password: String, completion: @escaping (Result<User, Error>) -> Void) {\n    Auth.auth().signIn(withEmail: email, password: password) { authResult, error in\n        if let user = authResult?.user {\n            completion(.success(user))\n        } else if let error = error {\n            completion(.failure(error))\n        } else {\n            completion(.failure(NSError(domain: \"AuthenticationError\", code: -1, userInfo: nil)))\n        }\n    }\n}"
    },
    {
      "instruction": " \n Create a Swift function that sends a push notification using Firebase Cloud Messaging",
      "input": "",
      "output": "import FirebaseMessaging\n\nfunc sendPushNotification(to token: String, title: String, body: String, completion: @escaping (Error?) -> Void) {\n    let message: [String: Any] = [\n        \"to\": token,\n        \"notification\": [\n            \"title\": title,\n            \"body\": body\n        ]\n    ]\n\n    var request = URLRequest(url: URL(string: \"https://fcm.googleapis.com/fcm/send\")!)\n    request.httpMethod = \"POST\"\n    request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n    request.setValue(\"key=\\(ServerKey)\", forHTTPHeaderField: \"Authorization\")\n    request.httpBody = try? JSONSerialization.data(withJSONObject: message, options: .prettyPrinted)\n\n    let task = URLSession.shared.dataTask(with: request) { data, response, error in\n        completion(error)\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " \n Create a Swift function that fetches userlocation using CoreLocation and returns CLLocationCoordinate2D",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    private let locationManager = CLLocationManager()\n    private var locationCallback: ((CLLocationCoordinate2D?) -> Void)?\n\n    func fetchUserLocation(completion: @escaping (CLLocationCoordinate2D?) -> Void) {\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n        locationCallback = completion\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            locationManager.stopUpdatingLocation()\n            locationCallback?(location.coordinate)\n            locationManager.delegate = nil\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        locationManager.stopUpdatingLocation()\n        locationCallback?(nil)\n        locationManager.delegate = nil\n    }\n}"
    },
    {
      "instruction": " \n Create a Swift function that downloads and parses JSON data from an API using Codable and URLSession",
      "input": "",
      "output": "import Foundation\n\nstruct ApiResponse: Codable {\n    let data: [String]\n}\n\nfunc downloadAndParseJson(url: URL, completion: @escaping (Result<[String], Error>) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else {\n            completion(.failure(NSError(domain: \"DataError\", code: -1, userInfo: nil)))\n            return\n        }\n\n        do {\n            let decoder = JSONDecoder()\n            let response = try decoder.decode(ApiResponse.self, from: data)\n            completion(.success(response.data))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": "Create a custom UICollectionViewCell with a UIImageView and UILabel.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    \n    static let identifier = \"CustomCollectionViewCell\"\n    \n    private let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n    \n    private let titleLabel: UILabel = {\n        let label = UILabel()\n        label.textAlignment = .center\n        label.font = UIFont.systemFont(ofSize: 14)\n        label.numberOfLines = 0\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        addSubview(imageView)\n        addSubview(titleLabel)\n        \n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        titleLabel.translatesAutoresizingMaskIntoConstraints = false\n        \n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.heightAnchor.constraint(equalToConstant: 120),\n            \n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 8),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -8),\n            titleLabel.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -8)\n        ])\n    }\n    \n    func configure(with image: UIImage, title: String) {\n        imageView.image = image\n        titleLabel.text = title\n    }\n}"
    },
    {
      "instruction": " Implement a custom loading spinner view using UIView.",
      "input": "",
      "output": "import UIKit\n\nclass LoadingSpinnerView: UIView {\n    \n    private let spinner: UIActivityIndicatorView = {\n        let spinner = UIActivityIndicatorView(style: .large)\n        spinner.color = .gray\n        spinner.translatesAutoresizingMaskIntoConstraints = false\n        return spinner\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupView() {\n        addSubview(spinner)\n        NSLayoutConstraint.activate([\n            spinner.centerXAnchor.constraint(equalTo: centerXAnchor),\n            spinner.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n    \n    func startAnimating() {\n        spinner.startAnimating()\n    }\n    \n    func stopAnimating() {\n        spinner.stopAnimating()\n    }\n}"
    },
    {
      "instruction": "Implement a custom UITextField with a clear button and left padding.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTextField: UITextField {\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n    \n    private func setupView() {\n        clearButtonMode = .whileEditing\n        leftViewMode = .always\n        let paddingView = UIView(frame: CGRect(x: 0, y: 0, width: 8, height: frame.height))\n        leftView = paddingView\n    }\n}"
    },
    {
      "instruction": "Create a UITableView with a search bar and filter functionality.",
      "input": "",
      "output": "import UIKit\n\nclass SearchTableViewController: UITableViewController, UISearchBarDelegate {\n    \n    let searchBar = UISearchBar()\n    var dataSource: [String] = [\"Apple\", \"Banana\", \"Cherry\", \"Orange\", \"Grape\"]\n    var filteredData: [String] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"cell\")\n        filteredData = dataSource\n        \n        searchBar.delegate = self\n        searchBar.placeholder = \"Search\"\n        navigationItem.titleView = searchBar\n    }\n\n    // MARK: - Table view data source\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredData.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        cell.textLabel?.text = filteredData[indexPath.row]\n        return cell\n    }\n\n    // MARK: - Search bar delegate\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredData = dataSource\n        } else {\n            filteredData = dataSource.filter { $0.lowercased().contains(searchText.lowercased()) }\n        }\n        tableView.reloadData()\n    }\n}"
    },
    {
      "instruction": "Implement a custom UIButton with rounded corners and a gradient background.",
      "input": "",
      "output": "import UIKit\n\nclass GradientButton: UIButton {\n    \n    private let gradientLayer = CAGradientLayer()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n       required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n    \n    private func setupView() {\n        layer.cornerRadius = 8\n        clipsToBounds = true\n        \n        gradientLayer.startPoint = CGPoint(x: 0, y: 0.5)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 0.5)\n        gradientLayer.colors = [UIColor.red.cgColor, UIColor.orange.cgColor]\n        layer.insertSublayer(gradientLayer, at: 0)\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        gradientLayer.frame = bounds\n    }\n}"
    },
    {
      "instruction": "Create a custom UIView that displays a user's profile image, name, and bio.",
      "input": "",
      "output": "import UIKit\n\nclass UserProfileView: UIView {\n    \n    private let profileImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.layer.cornerRadius = 40\n        imageView.clipsToBounds = true\n        imageView.contentMode = .scaleAspectFill\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    private let nameLabel: UILabel = {\n        let label = UILabel()\n        label.font = UIFont.boldSystemFont(ofSize: 18)\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    private let bioLabel: UILabel = {\n        let label = UILabel()\n        label.font = UIFont.systemFont(ofSize: 16)\n        label.numberOfLines = 0\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    init(profileImage: UIImage, name: String, bio: String) {\n        super.init(frame: .zero)\n        profileImageView.image = profileImage\n        nameLabel.text = name\n        bioLabel.text = bio\n        setupView()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupView() {\n        addSubview(profileImageView)\n        addSubview(nameLabel)\n        addSubview(bioLabel)\n        \n        NSLayoutConstraint.activate([\n            profileImageView.topAnchor.constraint(equalTo: topAnchor),\n            profileImageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            profileImageView.widthAnchor.constraint(equalToConstant: 80),\n            profileImageView.heightAnchor.constraint(equalToConstant: 80),\n            \n            nameLabel.centerYAnchor.constraint(equalTo: profileImageView.centerYAnchor),\n            nameLabel.leadingAnchor.constraint(equalTo: profileImageView.trailingAnchor, constant: 16),\n            nameLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -16),\n            \n            bioLabel.topAnchor.constraint(equalTo: profileImageView.bottomAnchor, constant: 16),\n            bioLabel.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 8),\n            bioLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -8),\n            bioLabel.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -8)\n        ])\n    }\n}"
    },
    {
      "instruction": "Create a custom UIAlertController with a text field and a submit action.",
      "input": "",
      "output": "import UIKit\n\nclass CustomAlertController: UIAlertController {\n    \n    var inputTextField: UITextField?\n    \n    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {\n        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)\n        setupView()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n    \n    private func setupView() {\n        title = \"Enter your name\"\n        message = \"Please provide your name to continue.\"\n        \n        addTextField { textField in\n            textField.placeholder = \"Name\"\n            self.inputTextField = textField\n        }\n        \n        let submitAction = UIAlertAction(title: \"Submit\", style: .default) { _ in\n            if let name = self.inputTextField?.text {\n                print(\"Name entered: \\(name)\")\n            }\n        }\n        \n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n        \n        addAction(submitAction)\n        addAction(cancelAction)\n    }\n}"
    },
    {
      "instruction": "Implement a UIScrollView with paging for displaying multiple images.",
      "input": "",
      "output": "import UIKit\n\nclass ImagePagingViewController: UIViewController {\n    \n    private let scrollView = UIScrollView()\n    private let images: [UIImage]\n    \n    init(images: [UIImage]) {\n        self.images = images\n        super.init(nibName: nil, bundle: nil)\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        scrollView.frame = view.bounds\n        scrollView.isPagingEnabled = true\n        scrollView.contentSize = CGSize(width: view.bounds.width * CGFloat(images.count), height: view.bounds.height)\n        \n        for (index, image) in images.enumerated() {\n            let imageView = UIImageView(image: image)\n            imageView.contentMode = .scaleAspectFit\n            imageView.frame = CGRect(x: CGFloat(index) * view.bounds.width, y: 0, width: view.bounds.width, height:"
    },
    {
      "instruction": "Write a Swift function to display an alert with a custom message in a UIViewController.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    func showAlert(withMessage message: String) {\n        let alertController = UIAlertController(title: \"Alert\", message: message, preferredStyle: .alert)\n        let okAction = UIAlertAction(title: \"OK\", style: .default)\n        alertController.addAction(okAction)\n        present(alertController, animated: true)\n    }\n\n    // Example usage:\n    // showAlert(withMessage: \"This is a custom message.\")\n}"
    },
    {
      "instruction": " Write a Swift function to load images asynchronously using URLSession.",
      "input": "",
      "output": "import UIKit\n\nclass ImageLoader {\n    static func loadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            guard let data = data, error == nil else {\n                completion(nil)\n                return\n            }\n            DispatchQueue.main.async {\n                completion(UIImage(data: data))\n            }\n        }.resume()\n    }\n}\n\n// Example usage:\n// ImageLoader.loadImage(from: URL(string: \"https://example.com/image.jpg\")!) { image in\n//     imageView.image = image\n// }"
    },
    {
      "instruction": " Write a Swift function to save a UIImage to the user's photo library.",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nclass PhotoSaver {\n    static func saveImage(_ image: UIImage, completion: @escaping (Bool, Error?) -> Void) {\n        PHPhotoLibrary.requestAuthorization { status in\n            guard status == .authorized else {\n                completion(false, nil)\n                return\n            }\n            \n            PHPhotoLibrary.shared().performChanges({\n                PHAssetChangeRequest.creationRequestForAsset(from: image)\n            }) { success, error in\n                DispatchQueue.main.async {\n                    completion(success, error)\n                }\n            }\n        }\n    }\n}\n\n// Example usage:\n// PhotoSaver.saveImage(image) { success, error in\n//     // Handle the result\n// }"
    },
    {
      "instruction": " Write a Swift function to create a custom UITableViewCell with an image and a label.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    \n    let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let cellLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    func setupViews() {\n        addSubview(cellImageView)\n        addSubview(cellLabel)\n        \n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 16),\n            cellImageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            cellImageView.widthAnchor.constraint(equalToConstant: 40),\n            cellImageView.heightAnchor.constraint(equalToConstant: 40),\n            \n            cellLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 16),\n            cellLabel.centerYAnchor.constraint(equalTo: centerYAnchor),\n            cellLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -16)\n        ])\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to animate a view's alpha value from 0 to 1.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let viewToAnimate = UIView(frame: CGRect(x: 0, y: 0, width: 100, height: 100))\n        viewToAnimate.backgroundColor = .red\n        viewToAnimate.alpha = 0\n        view.addSubview(viewToAnimate)\n        \n        animateAlpha(view: viewToAnimate)\n    }\n    \n    func animateAlpha(view: UIView) {\n        UIView.animate(withDuration: 1.0) {\n            view.alpha = 1.0\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a UICollectionView with a custom UICollectionViewCell containing a label.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCell\"\n    \n    let label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        addSubview(label)\n        \n        NSLayoutConstraint.activate([\n            label.centerXAnchor.constraint(equalTo: centerXAnchor),\n            label.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n        collectionView.backgroundColor = .white\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        cell.label.text = \"Item \\(indexPath.item)\"\n        return cell\n    }\n}\n\n// Example usage:\n// let layout = UICollectionViewFlowLayout()\n// let customCollectionViewController = CustomCollectionViewController(collectionViewLayout: layout)"
    },
    {
      "instruction": " Write a Swift function to cache images in an iOS app using NSCache.",
      "input": "",
      "output": "import UIKit\n\nclass ImageCache {\n    \n    private let cache = NSCache<NSString, UIImage>()\n    \n    static let shared = ImageCache()\n    \n    private init() {}\n    \n    func setImage(_ image: UIImage, forKey key: String) {\n        cache.setObject(image, forKey: key as NSString)\n    }\n    \n    func image(forKey key: String) -> UIImage? {\n        return cache.object(forKey: key as NSString)\n    }\n}\n\nextension UIImageView {\n    func setImage(from url: URL, placeholder: UIImage? = nil) {\n        if let cachedImage = ImageCache.shared.image(forKey: url.absoluteString) {\n            self.image = cachedImage\n            return\n        }\n        \n        self.image = placeholder\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            guard let data = data, error == nil else { return }\n            DispatchQueue.main.async {\n                if let image = UIImage(data: data) {\n                    ImageCache.shared.setImage(image, forKey: url.absoluteString)\n                    self.image = image\n                }\n            }\n        }.resume()\n    }\n}\n\n// Example usage:\n// imageView.setImage(from: URL(string: \"https://example.com/image.jpg\")!)"
    },
    {
      "instruction": " Write a Swift function to create a timer that updates a label with the current time every second.",
      "input": "",
      "output": "import UIKit\n\nclass TimeViewController: UIViewController {\n    \n    let timeLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    var timer: Timer?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(timeLabel)\n        \n        NSLayoutConstraint.activate([\n            timeLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            timeLabel.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n        \n        timer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { [weak self] _ in\n            self?.updateTimeLabel()\n        }\n    }\n    \n    func updateTimeLabel() {\n        let formatter = DateFormatter()\n        formatter.timeStyle = .medium\n        timeLabel.text = formatter.string(from: Date())\n    }\n    \n    deinit {\n        timer?.invalidate()\n    }\n}\n\n// Example usage:\n// let timeViewController = TimeViewController()"
    },
    {
      "instruction": " Write a Swift function that creates a custom UIButton with a gradient background and rounded corners.",
      "input": "",
      "output": "import UIKit\n\nfunc createGradientButton(frame: CGRect, cornerRadius: CGFloat, colors: [CGColor]) -> UIButton {\n    let button = UIButton(frame: frame)\n    let gradientLayer = CAGradientLayer()\n    gradientLayer.frame = button.bounds\n    gradientLayer.colors = colors\n    gradientLayer.cornerRadius = cornerRadius\n    button.layer.insertSublayer(gradientLayer, at: 0)\n    button.layer.cornerRadius = cornerRadius\n    button.clipsToBounds = true\n    return button\n}"
    },
    {
      "instruction": " Write a Swift function that animates a UIView to fade in with a specified duration and completion handler.",
      "input": "",
      "output": "import UIKit\n\nfunc fadeIn(_ view: UIView, duration: TimeInterval, completion: ((Bool) -> Void)? = nil) {\n    view.alpha = 0\n    UIView.animate(withDuration: duration, animations: {\n        view.alpha = 1\n    }, completion: completion)\n}"
    },
    {
      "instruction": " Write a Swift function that presents a UIAlertController with a specified title, message, and button titles, handling button taps with a completion handler.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(on viewController: UIViewController, title: String, message: String, buttonTitles: [String], completion: @escaping (Int) -> Void) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    for (index, buttonTitle) in buttonTitles.enumerated() {\n        let action = UIAlertAction(title: buttonTitle, style: .default) { _ in\n            completion(index)\n        }\n        alertController.addAction(action)\n    }\n    \n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift function that registers a UICollectionViewCell subclass with a UICollectionView using the cell's class name as the reuse identifier.",
      "input": "",
      "output": "import UIKit\n\nfunc registerCell<T: UICollectionViewCell>(_ collectionView: UICollectionView, cellClass: T.Type) {\n    let identifier = String(describing: cellClass)\n    collectionView.register(cellClass, forCellWithReuseIdentifier: identifier)\n}"
    },
    {
      "instruction": " Write a Swift function that asynchronously fetches JSON data from an API endpoint, decodes it into a specified Codable model, and returns the result via a completion handler.",
      "input": "",
      "output": "import Foundation\n\nfunc fetchData<T: Codable>(url: URL, model: T.Type, completion: @escaping (Result<T, Error>) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n        } else if let data = data {\n            do {\n                let decodedData = try JSONDecoder().decode(model, from: data)\n                completion(.success(decodedData))\n            } catch {\n                completion(.failure(error))\n            }\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " Write a Swift function that sets up an NSLayoutConstraint and activates it for a specified horizontal distance between two UIViews.",
      "input": "",
      "output": "import UIKit\n\nfunc setHorizontalDistanceConstraint(from leftView: UIView, to rightView: UIView, distance: CGFloat) {\n    let constraint = NSLayoutConstraint(item: leftView, attribute: .trailing, relatedBy: .equal, toItem: rightView, attribute: .leading, multiplier: 1, constant: -distance)\n    constraint.isActive = true\n}"
    },
    {
      "instruction": " Write a Swift function that creates a UIStackView with specified views, axis, alignment, distribution, and spacing.",
      "input": "",
      "output": "import UIKit\n\nfunc createStackView(views: [UIView], axis: NSLayoutConstraint.Axis, alignment: UIStackView.Alignment, distribution: UIStackView.Distribution, spacing: CGFloat) -> UIStackView {\n    let stackView = UIStackView(arrangedSubviews: views)\n    stackView.axis = axis\n    stackView.alignment= alignment\n    stackView.distribution = distribution\n    stackView.spacing = spacing\n    return stackView\n}"
    },
    {
      "instruction": "Write a Swift function to register a UITableViewCell subclass in a UITableView programmatically",
      "input": "",
      "output": "func registerTableViewCell(in tableView: UITableView) {\n    tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomCell\")\n}\n\nclass CustomTableViewCell: UITableViewCell {\n    // Custom cell implementation\n}"
    },
    {
      "instruction": " Write a Swift function to create a UICollectionView with a custom UICollectionViewCell subclass",
      "input": "",
      "output": "func createCollectionView() -> UICollectionView {\n    let layout = UICollectionViewFlowLayout()\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n    return collectionView\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // Custom cell implementation\n}"
    },
    {
      "instruction": " Write a Swift function to create and configure a UIButton with a custom background color and title",
      "input": "",
      "output": "func createCustomButton(title: String, backgroundColor: UIColor) -> UIButton {\n    let button = UIButton(type: .system)\n    button.translatesAutoresizingMaskIntoConstraints = false\n    button.setTitle(title, for: .normal)\n    button.backgroundColor = backgroundColor\n    return button\n}"
    },
    {
      "instruction": " Write a Swift function to create and configure a UIStackView with an array of UIViews",
      "input": "",
      "output": "func createStackView(views: [UIView], axis: NSLayoutConstraint.Axis, spacing: CGFloat) -> UIStackView {\n    let stackView = UIStackView(arrangedSubviews: views)\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    stackView.axis = axis\n    stackView.spacing = spacing\n    return stackView\n}"
    },
    {
      "instruction": " Write a Swift function to create a UIAlertController with a UIAlertAction that handles the user tapping on the action",
      "input": "",
      "output": "func presentAlertController(title: String, message: String, actionTitle: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: actionTitle, style: .default) { _ in\n        // Handle action\n    }\n    alertController.addAction(action)\n    self.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift function to create and present a UIActivityViewController for sharing a UIImage",
      "input": "",
      "output": "func presentActivityViewController(image: UIImage) {\n    let activityViewController = UIActivityViewController(activityItems: [image], applicationActivities: nil)\n    self.present(activityViewController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift function to create a UIPickerView with a custom UIPickerViewDataSource and UIPickerViewDelegate",
      "input": "",
      "output": "func createPickerView(dataSourceDelegate: UIPickerViewDataSource & UIPickerViewDelegate) -> UIPickerView {\n    let pickerView = UIPickerView()\n    pickerView.translatesAutoresizingMaskIntoConstraints = false\n    pickerView.dataSource = dataSourceDelegate\n    pickerView.delegate = dataSourceDelegate\n    return pickerView\n}\n\nclass CustomPickerViewDataSourceDelegate: NSObject, UIPickerViewDataSource, UIPickerViewDelegate {\n    // Custom data source & delegate implementation\n}"
    },
    {
      "instruction": " Write a Swift function to create a UISlider with a custom minimum, maximum, and current value",
      "input": "",
      "output": "func createCustomSlider(minValue: Float, maxValue: Float, currentValue: Float) -> UISlider {\n    let slider = UISlider()\n    slider.translatesAutoresizingMaskIntoConstraints = false\n    slider.minimumValue = minValue\n    slider.maximumValue = maxValue\n    slider.value = currentValue\n    return slider\n}"
    },
    {
      "instruction": " Create a custom UIViewController that allows users to pick an image from their photo library and display it in an UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass ImagePickerViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n    @IBOutlet weak var imageView: UIImageView!\n\n    @IBAction func pickImage(_ sender: UIButton) {\n        let imagePickerController = UIImagePickerController()\n        imagePickerController.delegate = self\n        imagePickerController.sourceType = .photoLibrary\n        present(imagePickerController, animated: true, completion: nil)\n    }\n\n    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {\n        if let selectedImage = info[.originalImage] as? UIImage {\n            imageView.image = selectedImage\n        }\n        dismiss(animated: true, completion: nil)\n    }\n\n    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {\n        dismiss(animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " Create a view controller that displays a list of contacts using a table view and allows users to add new contacts with a modal presentation.",
      "input": "",
      "output": "import UIKit\n\nstruct Contact {\n    let name: String\n    let phoneNumber: String\n}\n\nclass ContactsViewController: UIViewController, UITableViewDataSource, UITableViewDelegate, AddContactDelegate {\n    @IBOutlet weak var tableView: UITableView!\n    \n    var contacts: [Contact] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        tableView.delegate = self\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return contacts.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"ContactCell\", for: indexPath)\n        let contact = contacts[indexPath.row]\n        cell.textLabel?.text = contact.name\n        cell.detailTextLabel?.text = contact.phoneNumber\n        return cell\n    }\n    \n    @IBAction func addContact(_ sender: UIBarButtonItem) {\n        let addContactVC = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"AddContactViewController\") as! AddContactViewController\n        addContactVC.delegate = self\n        present(addContactVC, animated: true, completion: nil)\n    }\n    \n    func addContact(_ contact: Contact) {\n        contacts.append(contact)\n        tableView.reloadData()\n    }\n}\n\nprotocol AddContactDelegate: AnyObject {\n    func addContact(_ contact: Contact)\n}"
    },
    {
      "instruction": " Create a custom UICollectionView layout with horizontally-scrolling sections and sticky section headers.",
      "input": "",
      "output": "import UIKit\n\nclass StickyHeadersCollectionViewLayout: UICollectionViewFlowLayout {\n    override func layoutAttributesForElements(in rect: CGRect) -> [UICollectionViewLayoutAttributes]? {\n        let layoutAttributes = super.layoutAttributesForElements(in: rect)?.map { $0.copy() } as? [UICollectionViewLayoutAttributes]\n        guard let collectionView = collectionView, let attributes = layoutAttributes else { return layoutAttributes }\n\n        for attribute in attributes {\n            if attribute.representedElementKind == UICollectionView.elementKindSectionHeader {\n                let section = attribute.indexPath.section\n                let numberOfItemsInSection = collectionView.numberOfItems(inSection: section)\n\n                let firstCellIndexPath = IndexPath(item: 0, section: section)\n                let lastCellIndexPath = IndexPath(item: max(0, numberOfItemsInSection - 1), section: section)\n\n                let firstCellAttributes = layoutAttributesForItem(at: firstCellIndexPath)\n                let lastCellAttributes = layoutAttributesForItem(at: lastCellIndexPath)\n\n                let leftEdge = collectionView.contentInset.left\n                let rightEdge = collectionView.frame.width - collectionView.contentInset.right\n\n                let headerWidth = attribute.frame.width\n                let minX = firstCellAttributes?.frame.minX ?? 0\n                let maxX = (lastCellAttributes?.frame.maxX ?? 0) - headerWidth\n\n                let leftAlignedX = max(minX, leftEdge)\n                let rightAlignedX = min(maxX, rightEdge - headerWidth)\n\n                attribute.frame.origin.x = leftAlignedX + (rightAlignedX - leftAlignedX) * collectionView.contentOffset.x / (collectionView.contentSize.width - collectionView.frame.width)\n                attribute.zIndex = 1024\n            }\n        }\n\n        return attributes\n    }\n\n    override func shouldInvalidateLayout(forBoundsChange newBounds: CGRect) -> Bool {\n        return true\n    }\n}"
    },
    {
      "instruction": " Create a view controller that shows a list of events and allows users to filter the list by date using a segmented control.",
      "input": "",
      "output": "import UIKit\n\nstruct Event {\n    let name: String\n    let date: Date\n}\n\nclass EventsViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    @IBOutlet weak var tableView: UITableView!\n    @IBOutlet weak var segmentedControl: UISegmentedControl!\n    \n    var events: [Event] = []\n    var filteredEvents: [Event] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        tableView.delegate = self\n        filterEvents(segmentedControl)\n    }\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredEvents.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"EventCell\", for: indexPath)\n        let event = filteredEvents[indexPath.row]\n        cell.textLabel?.text = event.name\n        return cell\n    }\n\n    @IBAction func filterEvents(_ sender: UISegmentedControl) {\n        let now = Date()\n        let calendar = Calendar.current\n        let oneDayAgo = calendar.date(byAdding: .day, value: -1, to: now)\n        let oneWeekAgo = calendar.date(byAdding: .weekOfYear, value: -1, to: now)\n\n        switch sender.selectedSegmentIndex {\n        case 0:\n            filteredEvents = events\n        case 1:\n            filteredEvents = events.filter { $0.date >= (oneDayAgo ?? now) }\n        case 2:\n            filteredEvents = events.filter { $0.date >= (oneWeekAgo ?? now) }\n        default:\n            break\n        }\n        tableView.reloadData()\n    }\n}"
    },
    {
      "instruction": " Create a view controller that allows users to sign in using their email and password, and displays an error message if the credentials are incorrect.",
      "input": "",
      "output": "import UIKit\n\nclass SignInViewController: UIViewController {\n    @IBOutlet weak var emailTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n    @IBOutlet weak var errorLabel: UILabel!\n    \n    let validEmail = \"example@example.com\"\n    let validPassword = \"password123\"\n\n    @IBAction func signIn(_ sender: UIButton) {\n        guard let email = emailTextField.text, let password = passwordTextField.text else { return }\n        \n        if email == validEmail && password == validPassword {\n            // Perform sign-in action, e.g. navigate to the main app screen\n            errorLabel.isHidden = true\n        } else {\n            errorLabel.text = \"Invalid email or password.\"\n            errorLabel.isHidden = false\n        }\n    }\n}"
    },
    {
      "instruction": " Create a custom UITableViewCell with a text label, detail text label, and a switch control.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var titleLabel: UILabel!\n    @IBOutlet weak var detailLabel: UILabel!\n    @IBOutlet weak var switchControl: UISwitch!\n\n    func configure(withTitle title: String, detailText: String, isSwitchOn: Bool) {\n        titleLabel.text = title\n        detailLabel.text = detailText\n        switchControl.isOn = isSwitchOn\n    }\n}"
    },
    {
      "instruction": " Create a view controller that displays a list of to-do items in a table view, allows users to add new items, and supports swipe-to-delete functionality.",
      "input": "",
      "output": "import UIKit\n\nclass TodoListViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    @IBOutlet weak var tableView: UITableView!\n    @IBOutlet weak var textField: UITextField!\n\n    var todoItems: [String] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        tableView.delegate = self\n    }\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return todoItems.count\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"TodoItemCell\", for:"
    },
    {
      "instruction": " Write a Swift function that creates a UITableView with a custom UITableViewCell using a .xib file.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var customLabel: UILabel!\n}\n\nfunc setupTableView(tableView: UITableView, viewController: UIViewController) {\n    let nib = UINib(nibName: \"CustomTableViewCell\", bundle: nil)\n    tableView.register(nib, forCellReuseIdentifier: \"CustomTableViewCell\")\n    tableView.delegate = viewController as? UITableViewDelegate\n    tableView.dataSource = viewController as? UITableViewDataSource\n}"
    },
    {
      "instruction": " Write a Swift function that sets up a URLSession for a GET request and parses the JSON response.",
      "input": "",
      "output": "import Foundation\n\nfunc fetchJSONData(url: String, completion: @escaping (Result<Any, Error>) -> Void) {\n    guard let url = URL(string: url) else {\n        completion(.failure(NSError(domain: \"Invalid URL\", code: -1, userInfo: nil)))\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data received\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let jsonObject = try JSONSerialization.jsonObject(with: data, options: [])\n            completion(.success(jsonObject))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    \n    task.resume()\n}"
    },
    {
      "instruction": " Write a Swift function that configures a UICollectionView with a custom UICollectionViewCell using a .xib file.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var customImageView: UIImageView!\n}\n\nfunc setupCollectionView(collectionView: UICollectionView, viewController: UIViewController) {\n    let nib = UINib(nibName: \"CustomCollectionViewCell\", bundle: nil)\n    collectionView.register(nib, forCellWithReuseIdentifier: \"CustomCollectionViewCell\")\n    collectionView.delegate = viewController as? UICollectionViewDelegate\n    collectionView.dataSource = viewController as? UICollectionViewDataSource\n}"
    },
    {
      "instruction": " Write a Swift function that creates and presents an UIAlertController with a single action.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(title: String, message"
    },
    {
      "instruction": " Write a Swift function to implement a custom UINavigationController",
      "input": "",
      "output": "import UIKit\n\nclass CustomNavigationController: UINavigationController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupNavigationBar()\n    }\n\n    private func setupNavigationBar() {\n        navigationBar.barTintColor = .systemBlue\n        navigationBar.tintColor = .white\n        navigationBar.titleTextAttributes = [\n            NSAttributedString.Key.foregroundColor: UIColor.white\n        ]\n        navigationBar.largeTitleTextAttributes = [\n            NSAttributedString.Key.foregroundColor: UIColor.white\n        ]\n        navigationBar.prefersLargeTitles = true\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that implements a UICollectionView with custom UICollectionViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n\n    static let identifier = \"CustomCollectionViewCell\"\n\n    private let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(imageView)\n        NSLayoutConstraint.activate([\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    func configure(with image: UIImage) {\n        imageView.image = image\n    }\n\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n\n    private let images = [UIImage(named: \"image1\"), UIImage(named: \"image2\"), UIImage(named: \"image3\")]\n\n    init() {\n        let layout = UICollectionViewFlowLayout()\n        layout.itemSize = CGSize(width: 100, height: 100)\n        layout.sectionInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)\n        super.init(collectionViewLayout: layout)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.identifier)\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return images.count\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.identifier, for: indexPath) as! CustomCollectionViewCell\n        cell.configure(with: images[indexPath.row]!)\n        return cell\n    }\n\n}"
    },
    {
      "instruction": " Write a Swift function to implement a UIPickerView",
      "input": "",
      "output": "import UIKit\n\nclass PickerViewExampleViewController: UIViewController, UIPickerViewDelegate, UIPickerViewDataSource {\n\n    private let pickerView = UIPickerView()\n\n    private let pickerData = [\"Option 1\", \"Option 2\", \"Option 3\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        pickerView.delegate = self\n        pickerView.dataSource = self\n        view.addSubview(pickerView)\n        pickerView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            pickerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            pickerView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return pickerData.count\n    }\n\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return pickerData[row]\n    }\n\n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        print(\"Selected option: \\(pickerData[row])\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement a UISearchBar",
      "input": "",
      "output": "import UIKit\n\nclass SearchBarExampleViewController: UIViewController, UISearchBarDelegate {\n\n    private let searchBar = UISearchBar()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        searchBar.delegate = self\n        view.addSubview(searchBar)\n        searchBar.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            searchBar.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            searchBar.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            searchBar.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor)\n        ])\n    }\n\n    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {\n        searchBar.resignFirstResponder()\n        if let searchText = searchBar.text {\n            print(\"Searching for: \\(searchText)\")\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement a UIPageViewController",
      "input": "",
      "output": "import UIKit\n\nclass PageContentViewController: UIViewController {\n    var pageIndex: Int = 0\n    var displayText: String = \"\"\n    \n    private let label: UILabel = {\n        let label = UILabel()\n        label.textAlignment = .center\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n        label.text = displayText\n        view.addSubview(label)\n        NSLayoutConstraint.activate([\n            label.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            label.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n}\n\nclass PageViewControllerExample: UIPageViewController, UIPageViewControllerDataSource {\n    \n    private let pages: [PageContentViewController] = {\n        var pages = [PageContentViewController]()\n        for i in 1...5 {\n            let page = PageContentViewController()\n            page.pageIndex = i\n            page.displayText = \"Page \\(i)\"\n            pages.append(page)\n        }\n        return pages\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        dataSource = self\n        setViewControllers([pages[0]], direction: .forward, animated: true, completion: nil)\n    }\n    \n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n        if let vc = viewController as? PageContentViewController, vc.pageIndex > 1 {\n            return pages[vc.pageIndex - 2]\n        }\n        return nil\n    }\n    \n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {\n        if let vc = viewController as? PageContentViewController, vc.pageIndex < pages.count {\n            return pages[vc.pageIndex]\n        }\n        return nil\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement a UIViewController with a UISlider and UILabel to display the slider value",
      "input": "",
      "output": "import UIKit\n\nclass SliderExampleViewController: UIViewController {\n\n    private let slider: UISlider = {\n        let slider = UISlider()\n        slider.minimumValue = 0\n        slider.maximumValue = 100\n        slider.translatesAutoresizingMaskIntoConstraints = false\n        return slider\n    }()\n\n    private let valueLabel: UILabel = {\n        let label = UILabel()\n        label.textAlignment = .center\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n        view.addSubview(slider)\n        view.addSubview(valueLabel)\n\n        NSLayoutConstraint.activate([\n            slider.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            slider.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            valueLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            valueLabel.bottomAnchor.constraint(equalTo: slider.topAnchor, constant: -16)\n        ])\n\n        slider.addTarget(self, action: #selector(sliderValueChanged), for: .valueChanged)\n        updateValueLabel()\n    }\n\n    @objc private func sliderValueChanged() {\n        updateValueLabel()\n    }\n\n    private func updateValueLabel() {\n        let sliderValue = Int(slider.value)\n        valueLabel.text = \"Value: \\(sliderValue)\"\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to request user's location permission and start updating their location using CLLocationManager",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    private let locationManager = CLLocationManager()\n\n    func requestLocationPermissionsAndUpdate() {\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n\n        switch CLLocationManager.authorizationStatus() {\n        case .notDetermined:\n            locationManager.requestWhenInUseAuthorization()\n        case .restricted, .denied:\n            // Handle the case when user denies the permission\n            break\n        case .authorizedWhenInUse, .authorizedAlways:\n            locationManager.startUpdatingLocation()\n        @unknown default:\n            break\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            print(\"User's location: \\(location)\")\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n        if status == .authorizedWhenInUse || status == .authorizedAlways {\n            locationManager.startUpdatingLocation()\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that fetches data from a JSON API and decodes it into a Codable model",
      "input": "",
      "output": "import Foundation\n\nstruct MyDataModel: Codable {\n    let id: Int\n    let title: String\n    // Add other properties as needed\n}\n\nfunc fetchData(completion: @escaping (Result<MyDataModel, Error>) -> Void) {\n    let urlString = \"https://api.example.com/data\"\n    guard let url = URL(string: urlString) else { return }\n\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else {\n            completion(.failure(NSError(domain: \"\", code: -1, userInfo: nil)))\n            return\n        }\n\n        do {\n            let decodedData = try JSONDecoder().decode(MyDataModel.self, from: data)\n            completion(.success(decodedData))\n        } catch {\n            completion(.failure(error))\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " Write a Swift function to implement a pull-to-refresh feature in a UITableView",
      "input": "",
      "output": "import UIKit\n\nclass MyTableViewController: UITableViewController {\n    private let refresh = UIRefreshControl()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        refresh.addTarget(self, action: #selector(handleRefresh), for: .valueChanged)\n        tableView.refreshControl = refresh\n    }\n\n    @objc private func handleRefresh() {\n        // Fetch new data and reload the table view\n        fetchData { [weak self] result in\n            DispatchQueue.main.async {\n                self?.refresh.endRefreshing()\n                switch result {\n                case .success(let newData):\n                    // Update data source and reload table view\n                    break\n                case .failure(let error):\n                    print(\"Error fetching data: \\(error)\")\n                }\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to save an image to the user's photo library using UIImageWriteToSavedPhotosAlbum",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToPhotoLibrary(image: UIImage, completion: @escaping (Result<Void, Error>) -> Void) {\n    PHPhotoLibrary.requestAuthorization { status in\n        if status == .authorized {\n            UIImageWriteToSavedPhotosAlbum(image, self, #selector(image(_:didFinishSavingWithError:contextInfo:)), nil)\n        } else {\n            DispatchQueue.main.async {\n                completion(.failure(NSError(domain: \"PhotoLibraryAccessDenied\", code: -1, userInfo: nil)))\n            }\n        }\n    }\n}\n\n@objc private func image(_ image: UIImage, didFinishSavingWithError error: NSError?, contextInfo: UnsafeRawPointer) {\n    if let error = error {\n        print(\"Error saving photo: \\(error)\")\n    } else {\n        print(\"Photo saved successfully\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to play an audio file using AVAudioPlayer",
      "input": "",
      "output": "import AVFoundation\n\nclass AudioPlayer: NSObject, AVAudioPlayerDelegate {\n    private var audioPlayer: AVAudioPlayer?\n\n    func playAudioFile(url: URL) {\n        do {\n            audioPlayer = try AVAudioPlayer(contentsOf: url)\n            audioPlayer?.delegate = self\n            audioPlayer?.prepareToPlay()\n            audioPlayer?.play()\n        } catch {\n            print(\"Error initializing audio player: \\(error)\")\n        }\n    }\n\n    func audioPlayerDidFinishPlaying(_ player: AVAudioPlayer, successfully flag: Bool) {\n        if flag {\n            print(\"Audio finished playing successfully\")\n        } else {\n            print(\"Audio did not finish playing successfully\")\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement a search bar in a UITableView using UISearchController",
      "input": "",
      "output": "import UIKit\n\nclass MyTableViewController: UITableViewController, UISearchResultsUpdating {\n    private let searchController = UISearchController(searchResultsController: nil)\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        searchController.searchResultsUpdater = self\n        searchController.obscuresBackgroundDuringPresentation = false\n        searchController.searchBar.placeholder = \"Search\"\n        navigationItem.searchController = searchController\n        definesPresentationContext = true\n    }\n\n    func updateSearchResults(for searchController: UISearchController) {\n        if let searchText = searchController.searchBar.text {\n            // Filter your data based on searchText and reload the table view\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UICollectionViewCell and register it for use in a UICollectionView",
      "input": "",
      "output": "import UIKit\n\nclass MyCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"MyCollectionViewCell\"\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        configureCell()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        configureCell()\n    }\n\n    private func configureCell() {\n        // Add subviews and set up the layout\n    }\n}\n\nclass MyCollectionViewController: UICollectionViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        collectionView.register(MyCollectionViewCell.self, forCellWithReuseIdentifier: MyCollectionViewCell.reuseIdentifier)\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: MyCollectionViewCell.reuseIdentifier, for: indexPath) as! MyCollectionViewCell\n        // Configure cell\n        return cell\n    }\n}"
    },
    {
      "instruction": "Create a table view controller that displays a list of contacts with their names and phone numbers. The contacts should be fetched from a JSON file named \"contacts.json\".",
      "input": "",
      "output": "import UIKit\n\nstruct Contact: Codable {\n    let name: String\n    let phoneNumber: String\n}\n\nclass ContactsTableViewController: UITableViewController {\n    \n    var contacts: [Contact] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        loadContacts()\n    }\n    \n    func loadContacts() {\n        guard let url = Bundle.main.url(forResource: \"contacts\", withExtension: \"json\") else { return }\n        do {\n            let data = try Data(contentsOf: url)\n            let decoder = JSONDecoder()\n            contacts = try decoder.decode([Contact].self, from: data)\n            tableView.reloadData()\n        } catch {\n            print(\"Error decoding contacts: \\(error)\")\n        }\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return contacts.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"ContactCell\", for: indexPath)\n        let contact = contacts[indexPath.row]\n        cell.textLabel?.text = contact.name\n        cell.detailTextLabel?.text = contact.phoneNumber\n        return cell\n    }\n}"
    },
    {
      "instruction": " \nCreate a custom `UITableViewCell` subclass that displays an image, title, and subtitle in a custom layout.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    \n    let customImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    let subtitleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupSubviews()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupSubviews()\n    }\n    \n    private func setupSubviews() {\n        addSubview(customImageView)\n        addSubview(titleLabel)\n        addSubview(subtitleLabel)\n        \n        NSLayoutConstraint.activate([\n            customImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 16),\n            customImageView.topAnchor.constraint(equalTo: topAnchor, constant: 8),\n            customImageView.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -8),\n            customImageView.widthAnchor.constraint(equalTo: customImageView.heightAnchor),\n            \n            titleLabel.leadingAnchor.constraint(equalTo: customImageView.trailingAnchor, constant: 16),\n            titleLabel.topAnchor.constraint(equalTo: topAnchor, constant: 8),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -16),\n            \n            subtitleLabel.leadingAnchor.constraint(equalTo: customImageView.trailingAnchor, constant: 16),\n            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 4),\n            subtitleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -16),\n            subtitleLabel.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -8)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nImplement a custom `UICollectionViewFlowLayout` subclass that displays cells in a grid with a dynamic number of columns based on the device's screen width.",
      "input": "",
      "output": "import UIKit\n\nclass CustomFlowLayout: UICollectionViewFlowLayout {\n    \n    override func prepare() {\n        super.prepare()\n        \n        guard let collectionView = collectionView else { return }\n        \n        let availableWidth = collectionView.bounds.width - sectionInset.left - sectionInset.right\n        let minWidth: CGFloat = 100\n        let numberOfColumns = Int(availableWidth / minWidth)\n        let width = availableWidth / CGFloat(numberOfColumns)\n        \n        itemSize = CGSize(width: width, height: width)\n        minimumInteritemSpacing = 0\n        minimumLineSpacing = 0\n    }\n    \n    override func shouldInvalidateLayout(forBoundsChange newBounds: CGRect) -> Bool {\n        return collectionView?.bounds.width != newBounds.width\n    }\n}"
    },
    {
      "instruction": " \nImplement a view controller that uses CoreLocation to obtain the user's current location and displays it as a coordinate (latitude, longitude) on a label.",
      "input": "",
      "output": "import UIKit\nimport CoreLocation\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n    \n    let locationManager = CLLocationManager()\n    let locationLabel = UILabel()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        locationManager.delegate = self\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.startUpdatingLocation()\n        \n        view.addSubview(locationLabel)\n        locationLabel.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            locationLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            locationLabel.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            locationLabel.text = \"Latitude: \\(location.coordinate.latitude), Longitude: \\(location.coordinate.longitude)\"\n            locationManager.stopUpdatingLocation()\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error obtaining location: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " \nImplement a view controller that displays a `UIPickerView` for selecting a date and a `UILabel` that shows the selected date in a formatted string.",
      "input": "",
      "output": "import UIKit\n\nclass DatePickerViewController: UIViewController, UIPickerViewDataSource, UIPickerViewDelegate {\n    \n    let datePicker = UIPickerView()\n    let dateFormatter = DateFormatter()\n    let currentDate = Date()\n    let dateLabel = UILabel()\n    \n    var selectedDate: Date {\n        let components = DateComponents(year: datePicker.selectedRow(inComponent: 0) + 1970,\n                                        month: datePicker.selectedRow(inComponent: 1) + 1,\n                                        day: datePicker.selectedRow(inComponent: 2) + 1)\n        return Calendar.current.date(from: components) ?? currentDate\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        datePicker.dataSource = self\n        datePicker.delegate = self\n        view.addSubview(datePicker)\n        datePicker.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            datePicker.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            datePicker.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n        \n        dateFormatter.dateStyle = .long\n        dateLabel.text = dateFormatter.string(from: currentDate)\n        view.addSubview(dateLabel)\n        dateLabel.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            dateLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            dateLabel.bottomAnchor.constraint(equalTo: datePicker.topAnchor, constant: -16)\n        ])\n    }\n    \n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 3\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        switch component {\n        case 0:\n            return 100\n        case 1:\n            return 12\n        case 2:\n            return 31\n        default:\n            return 0\n        }\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return String(row + 1)\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        dateLabel.text = dateFormatter.string(from: selectedDate)\n    }\n}"
    },
    {
      "instruction": " \nCreate a view controller that uses `UIImagePickerController` to allow the user to select an image from their photo library and display it in a `UIImageView`.",
      "input": "",
      "output": "import UIKit\n\nclass ImagePickerViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n    \n    let imageView = UIImageView()\n    let chooseImageButton = UIButton(type: .system)\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(imageView)\n        NSLayoutConstraint.activate([\n            imageView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            imageView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            imageView.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.8),\n            imageView.heightAnchor.constraint(equalTo: imageView.widthAnchor)\n        ])\n        \n        chooseImageButton.setTitle(\"Choose Image\", for: .normal)\n        chooseImageButton.addTarget(self, action: #selector(chooseImage), for: .touchUpInside)\n        view.addSubview(chooseImageButton)\n        chooseImageButton.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            chooseImageButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            chooseImageButton.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 16)\n        ])\n    }\n    \n    @objc func chooseImage() {\n        let imagePicker = UIImagePickerController()\n        imagePicker.delegate = self\n        imagePicker.sourceType = .photoLibrary\n        present(imagePicker, animated: true)\n    }\n    \n    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {\n        if let image = info[.originalImage] as? UIImage {\n            imageView.image = image\n        }\n        dismiss(animated: true)\n    }\n    \n    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {\n        dismiss(animated: true)\n    }\n}"
    },
    {
      "instruction": " \nImplement a view controller that shows a `UIWebView` loading a URL passed as a string. Handle the case when the URL is not valid.",
      "input": "",
      "output": "import UIKit\nimport WebKit\n\nclass WebViewController: UIViewController, WKNavigationDelegate {\n    \n    var urlString: String\n    let webView = WKWebView()\n    \n    init(urlString: String) {\n        self"
    },
    {
      "instruction": " Write a Swift function to implement a custom UITableViewCell with a left-aligned UILabel and a right-aligned UISwitch",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n\n    let label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    let toggleSwitch: UISwitch = {\n        let toggleSwitch = UISwitch()\n        toggleSwitch.translatesAutoresizingMaskIntoConstraints = false\n        return toggleSwitch\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupCell()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupCell()\n    }\n    \n    private func setupCell() {\n        contentView.addSubview(label)\n        contentView.addSubview(toggleSwitch)\n        \n        NSLayoutConstraint.activate([\n            label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            label.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            \n            toggleSwitch.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\n            toggleSwitch.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n        ])\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to present a UIAlertController with an action sheet style, containing options to share content via email, message, or cancel",
      "input": "",
      "output": "import UIKit\n\nfunc presentShareActionSheet(from viewController: UIViewController) {\n    let alertController = UIAlertController(title: \"Share\", message: \"Choose a method to share\", preferredStyle: .actionSheet)\n\n    let emailAction = UIAlertAction(title: \"Email\", style: .default) { _ in\n        // Implement email sharing functionality\n    }\n\n    let messageAction = UIAlertAction(title: \"Message\", style: .default) { _ in\n        // Implement message sharing functionality\n    }\n\n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n\n    alertController.addAction(emailAction)\n    alertController.addAction(messageAction)\n    alertController.addAction(cancelAction)\n\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift function to create and configure a UICollectionView with a custom UICollectionViewCell and a specified number of items in a section",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // Custom UICollectionViewCell implementation\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n    private let numberOfItemsInSection: Int\n\n    init(numberOfItemsInSection: Int) {\n        self.numberOfItemsInSection = numberOfItemsInSection\n        let layout = UICollectionViewFlowLayout()\n        super.init(collectionViewLayout: layout)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n        collectionView.backgroundColor = .white\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return numberOfItemsInSection\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        // Configure the custom cell\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to fetch JSON data from a given URL and decode it into a specified Codable model using Combine",
      "input": "",
      "output": "import Foundation\nimport Combine\n\nstruct ExampleModel: Codable {\n    let id: Int\n    let name: String\n    // Other properties\n}\n\nfunc fetchJSONData<T: Codable>(from url: URL, model: T.Type) -> AnyPublisher<T, Error> {\n    return URLSession.shared.dataTaskPublisher(for: url)\n        .tryMap { data, response -> Data in            guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {\n                throw URLError(.badServerResponse)\n            }\n            return data\n        }\n        .decode(type: T.self, decoder: JSONDecoder())\n        .receive(on: DispatchQueue.main)\n        .eraseToAnyPublisher()\n}"
    },
    {
      "instruction": " Write a Swift function to create and configure a UIPageViewController with an array of view controllers and allow looping through the pages",
      "input": "",
      "output": "import UIKit\n\nclass LoopingPageViewController: UIPageViewController, UIPageViewControllerDataSource, UIPageViewControllerDelegate {\n    private var viewControllersList: [UIViewController] = []\n\n    init(viewControllersList: [UIViewController]) {\n        self.viewControllersList = viewControllersList\n        super.init(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.dataSource = self\n        self.delegate = self\n\n        if let firstViewController = viewControllersList.first {\n            setViewControllers([firstViewController], direction: .forward, animated: true, completion: nil)\n        }\n    }\n\n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n        guard let currentIndex = viewControllersList.firstIndex(of: viewController) else { return nil }\n        let previousIndex = (currentIndex - 1 + viewControllersList.count) % viewControllersList.count\n        return viewControllersList[previousIndex]\n    }\n\n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -> UIViewController? {\n        guard let currentIndex = viewControllersList.firstIndex(of: viewController) else { return nil }\n        let nextIndex = (currentIndex + 1) % viewControllersList.count\n        return viewControllersList[nextIndex]\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement a custom UISearchBar with a specified placeholder text and a clear button",
      "input": "",
      "output": "import UIKit\n\nclass CustomSearchBar: UISearchBar {\n\n    init(placeholderText: String) {\n        super.init(frame: .zero)\n        self.placeholder = placeholderText\n        self.showsCancelButton = true\n        self.showsSearchResultsButton = false\n        self.translatesAutoresizingMaskIntoConstraints = false\n        self.barStyle = .default\n        self.autocapitalizationType = .none\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        if let textField = self.value(forKey: \"searchField\") as? UITextField {\n            textField.clearButtonMode = .whileEditing\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UIView that contains a UILabel and a UITextField arranged vertically in a UIStackView",
      "input": "",
      "output": "import UIKit\n\nclass CustomLabelAndTextFieldView: UIView {\n\n    let label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    let textField: UITextField = {\n        let textField = UITextField()\n        textField.borderStyle = .roundedRect\n        textField.translatesAutoresizingMaskIntoConstraints = false\n        return textField\n    }()\n\n    init(labelText: String, textFieldPlaceholder: String) {\n        super.init(frame: .zero)\n        label.text = labelText\n        textField.placeholder = textFieldPlaceholder\n        setupView()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n\n    private func setupView() {\n        let stackView = UIStackView(arrangedSubviews: [label, textField])\n        stackView.axis = .vertical\n        stackView.spacing = 8\n        stackView.translatesAutoresizingMaskIntoConstraints = false\n        addSubview(stackView)\n\n        NSLayoutConstraint.activate([\n            stackView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            stackView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            stackView.topAnchor.constraint(equalTo: topAnchor),\n            stackView.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": "Create a Swift TableView cell to display a user's avatar, username, and bio.",
      "input": "",
      "output": "import UIKit\n\nclass UserTableViewCell: UITableViewCell {\n\n    @IBOutlet private weak var avatarImageView: UIImageView!\n    @IBOutlet private weak var usernameLabel: UILabel!\n    @IBOutlet private weak var bioLabel: UILabel!\n    \n    override func awakeFromNib() {\n        super.awakeFromNib()\n        setupImageView()\n    }\n    \n    private func setupImageView() {\n        avatarImageView.layer.cornerRadius = avatarImageView.frame.size.width / 2\n        avatarImageView.clipsToBounds = true\n    }\n    \n    func configure(with user: User) {\n        avatarImageView.image = UIImage(named: user.avatarImageName)\n        usernameLabel.text = user.username\n        bioLabel.text = user.bio\n    }\n}"
    },
    {
      "instruction": " Implement a SwiftUI View displaying a list of contacts with their name, phone number, and email.",
      "input": "",
      "output": "import SwiftUI\n\nstruct Contact: Identifiable {\n    let id = UUID()\n    let name: String\n    let phoneNumber: String\n    let email: String\n}\n\nstruct ContactListView: View {\n    let contacts: [Contact]\n    \n    var body: some View {\n        NavigationView {\n            List(contacts) { contact in\n                VStack(alignment: .leading, spacing: 8) {\n                    Text(contact.name).font(.headline)\n                    Text(contact.phoneNumber).font(.subheadline).foregroundColor(.green)\n                    Text(contact.email).font(.subheadline).foregroundColor(.blue)\n                }\n            }.navigationBarTitle(\"Contacts\")\n        }\n    }\n}"
    },
    {
      "instruction": " Create a Swift function that downloads an image from a URL and assigns it to a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nextension UIImageView {\n    func setImage(from url: URL, placeholder: UIImage? = nil) {\n        self.image = placeholder\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            guard let data = data, error == nil else { return }\n            DispatchQueue.main.async {\n                self.image = UIImage(data: data)\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " Implement a UICollectionView with custom UICollectionViewCell to display images in a grid layout.",
      "input": "",
      "output": "import UIKit\n\nclass ImageCollectionViewCell: UICollectionViewCell {\n    @IBOutlet private weak var imageView: UIImageView!\n    \n    func configure(with image: UIImage) {\n        imageView.image = image\n    }\n}\n\nclass ImageCollectionViewController: UICollectionViewController {\n    private let reuseIdentifier = \"ImageCell\"\n    private let images: [UIImage] = [] // Assume this array is populated withUIImage instances\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        self.collectionView.register(UINib(nibName: \"ImageCollectionViewCell\", bundle: nil), forCellWithReuseIdentifier: reuseIdentifier)\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return images.count\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! ImageCollectionViewCell\n        cell.configure(with: images[indexPath.row])\n        return cell\n    }\n}\n\nextension ImageCollectionViewController: UICollectionViewDelegateFlowLayout {\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        let width = (collectionView.bounds.width - 30) / 2\n        return CGSize(width: width, height: width)\n    }\n}"
    },
    {
      "instruction": " Create a Swift function that reads data from a JSON file and decodes it into an array of custom objects.",
      "input": "",
      "output": "import Foundation\n\nstruct MyData: Codable {\n    let id: Int\n    let name: String\n}\n\nfunc loadData() -> [MyData]? {\n    guard let url = Bundle.main.url(forResource: \"data\", withExtension: \"json\") else { return nil }\n    \n    do {\n        let data = try Data(contentsOf: url)\n        let decoder = JSONDecoder()\n        let decodedData = try decoder.decode([MyData].self, from: data)\n        return decodedData\n    } catch {\n        print(\"Error loading data: \\(error)\")\n        return nil\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to register a new user using Firebase Authentication with email and password.",
      "input": "",
      "output": "import FirebaseAuth\n\nfunc registerUser(email: String, password: String, completion: @escaping (Result<AuthDataResult, Error>) -> Void) {\n    Auth.auth().createUser(withEmail: email, password: password) { authDataResult, error in\n        if let error = error {\n            completion(.failure(error))\n        } else if let authDataResult = authDataResult {\n            completion(.success(authDataResult))\n        }\n    }\n}"
    },
    {
      "instruction": " Implement a SwiftUI View for a chat screen with a text input and a send button.",
      "input": "",
      "output": "import SwiftUI\n\nstruct ChatView: View {\n    @State private var inputText: String = \"\"\n    \n    var body: some View {\n        VStack {\n            // Assume this ScrollView represents the list of messages\n            ScrollView {\n                // Message content here\n            }\n            \n            HStack {\n                TextField(\"Type a message\", text: $inputText)\n                    .padding(12)\n                    .background(Color.gray.opacity(0.2))\n                    .cornerRadius(20)\n                    .padding(.horizontal)\n                \n                Button(action: {\n                    sendMessage()\n                }) {\n                    Image(systemName: \"paperplane.fill\")\n                        .resizable()\n                        .frame(width: 22, height: 22)\n                        .padding()\n                }\n            }.padding(.bottom)\n        }.navigationBarTitle(\"Chat\")\n    }\n    \n    private func sendMessage() {\n        // Implement send message logic here\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to save and retrieve data to/from UserDefaults.",
      "input": "",
      "output": "import Foundation\n\nstruct UserDefaultsManager {\n    private static let key = \"savedDataKey\"\n\n    static func save(data: String) {\n        UserDefaults.standard.setValue(data, forKey: key)\n    }\n\n    static func retrieveData() -> String? {\n        UserDefaults.standard.string(forKey: key)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that fetches user's current location and displays it on a map within the app.",
      "input": "",
      "output": "import UIKit\nimport MapKit\nimport CoreLocation\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n    \n    @IBOutlet weak var mapView: MKMapView!\n    \n    let locationManager = CLLocationManager()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            let center = CLLocationCoordinate2D(latitude: location.coordinate.latitude, longitude: location.coordinate.longitude)\n            let region = MKCoordinateRegion(center: center, latitudinalMeters: 1000, longitudinalMeters: 1000)\n            mapView.setRegion(region, animated: true)\n            locationManager.stopUpdatingLocation()\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error fetching location: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that authenticates a user using their email and password with Firebase.",
      "input": "",
      "output": "import UIKit\nimport FirebaseAuth\n\nclass LoginViewController: UIViewController {\n\n    @IBOutlet weak var emailTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n    \n    @IBAction func loginButtonTapped(_ sender: UIButton) {\n        guard let email = emailTextField.text, let password = passwordTextField.text else { return }\n        \n        Auth.auth().signIn(withEmail: email, password: password) { [weak self] result, error in\n            if let error = error {\n                print(\"Error logging in: \\(error)\")\n            } else {\n                self?.performSegue(withIdentifier: \"LoggedInSegue\", sender: nil)\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that allows the user to select an image from their photo library and display it in an UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass ImagePickerViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n\n    @IBOutlet weak var imageView: UIImageView!\n    \n    @IBAction func selectImageButtonTapped(_ sender: UIButton) {\n        let imagePickerController = UIImagePickerController()\n        imagePickerController.delegate = self\n        imagePickerController.sourceType = .photoLibrary\n        present(imagePickerController, animated: true, completion: nil)\n    }\n    \n    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {\n        if let selectedImage = info[.originalImage] as? UIImage {\n            imageView.image = selectedImage\n        }\n        dismiss(animated: true, completion: nil)\n    }\n    \n    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {\n        dismiss(animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that uses Core Data to save and fetch notes in a note-taking app.",
      "input": "",
      "output": "import UIKit\nimport CoreData\n\nclass NotesViewController: UIViewController, UITableViewDataSource {\n\n    @IBOutlet weak var tableView: UITableView!\n    \n    var notes: [NSManagedObject] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        fetchNotes()\n    }\n    \n    func fetchNotes() {\n        guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else { return }\n        let managedContext = appDelegate.persistentContainer.viewContext\n        let fetchRequest = NSFetchRequest<NSManagedObject>(entityName: \"Note\")\n        \n        do {\n            notes = try managedContext.fetch(fetchRequest)\n            tableView.reloadData()\n       } catch let error as NSError {\n            print(\"Error fetching notes: \\(error), \\(error.userInfo)\")\n        }\n    }\n    \n    @IBAction func addNoteButtonTapped(_ sender: UIBarButtonItem) {\n        let alertController = UIAlertController(title: \"New Note\", message: \"Enter a note\", preferredStyle: .alert)\n        alertController.addTextField()\n        let saveAction = UIAlertAction(title: \"Save\", style: .default) { [unowned self] action in\n            guard let textField = alertController.textFields?.first, let noteText = textField.text else { return }\n            self.save(noteText: noteText)\n        }\n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel)\n        \n        alertController.addAction(saveAction)\n        alertController.addAction(cancelAction)\n        present(alertController, animated: true)\n    }\n    \n    func save(noteText: String) {\n        guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else { return }\n        let managedContext = appDelegate.persistentContainer.viewContext\n        let entity = NSEntityDescription.entity(forEntityName: \"Note\", in: managedContext)!\n        let note = NSManagedObject(entity: entity, insertInto: managedContext)\n        \n        note.setValue(noteText, forKey: \"text\")\n        \n        do {\n            try managedContext.save()\n            notes.append(note)\n            tableView.reloadData()\n        } catch let error as NSError {\n            print(\"Error saving note: \\(error), \\(error.userInfo)\")\n        }\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return notes.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"NoteCell\", for: indexPath)\n        let note = notes[indexPath.row]\n        cell.textLabel?.text = note.value(forKey: \"text\") as? String\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that performs a search on a UITableView by filtering its data source based on user input.",
      "input": "",
      "output": "import UIKit\n\nclass SearchViewController: UIViewController, UITableViewDataSource, UISearchBarDelegate {\n\n    @IBOutlet weak var searchBar: UISearchBar!\n    @IBOutlet weak var tableView: UITableView!\n    \n    let data: [String] = [\"Apple\", \"Banana\", \"Grape\", \"Orange\", \"Peach\", \"Strawberry\", \"Watermelon\"]\n    var filteredData: [String] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        searchBar.delegate = self\n        filteredData = data\n    }\n    \n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredData = data\n        } else {\n            filteredData = data.filter { $0.lowercased().contains(searchText.lowercased()) }\n        }\n        tableView.reloadData()\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredData.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"DataCell\", for: indexPath)\n        cell.textLabel?.text = filteredData[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that uses URLSession to make a GET request to a REST API and parses the JSON response.",
      "input": "",
      "output": "import UIKit\n\nclass APIViewController: UIViewController {\n\n    @IBOutlet weak var textView: UITextView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        fetchData()\n    }\n    \n    func fetchData() {\n        let url = URL(string: \"https://jsonplaceholder.typicode.com/posts\")!\n        \n        let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let error = error {\n                print(\"Error fetching data: \\(error)\")\n                return\n            }\n            \n            guard let data = data else {\n                print(\"Error: No data received\")\n                return\n            }\n            \n            do {\n                let json = try JSONSerialization.jsonObject(with: data, options: [])\n                if let jsonArray = json as? [[String: Any]] {\n                    DispatchQueue.main.async {\n                        self.textView.text = self.parse(jsonArray: jsonArray)\n                    }\n                }\n            } catch let error as NSError {\n                print(\"Error parsing JSON: \\(error)\")\n            }\n        }\n        \n        task.resume()\n    }\n    \n    func parse(jsonArray: [[String: Any]]) -> String {\n        var result = \"\"\n        \n        for json in jsonArray {\n            if let id = json[\"id\"] as? Int, let title = json[\"title\"] as? String {\n                result += \"ID: \\(id)\\nTitle: \\(title)\\n\\n\"\n            }\n        }\n        \n        return result\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that plays an audio file from a given URL when a button is clicked.",
      "input": "",
      "output": "import AVFoundation\nimport UIKit\n\nclass ViewController: UIViewController, AVAudioPlayerDelegate {\n    var audioPlayer: AVAudioPlayer?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    @objc func playAudio() {\n        let audioUrl = \"https://example.com/audiofile.mp3\"\n        guard let url = URL(string: audioUrl) else { return }\n        \n        do {\n            let data = try Data(contentsOf: url)\n            try AVAudioSession.sharedInstance().setCategory(.playback)\n            try AVAudioSession.sharedInstance().setActive(true)\n            \n            audioPlayer = try AVAudioPlayer(data: data)\n            audioPlayer?.delegate = self\n            audioPlayer?.prepareToPlay()\n            audioPlayer?.play()\n        } catch {\n            print(\"Error playing audio: \\(error.localizedDescription)\")\n        }\n    }\n}\n// Add a UIButton and addTarget to call playAudio() function when the button is tapped"
    },
    {
      "instruction": " Write a Swift function that fetches and parses a JSON file from a given URL, and then prints the result.",
      "input": "",
      "output": "import Foundation\nimport UIKit\n\nstruct ExampleData: Codable {\n    let id: Int\n    let title: String\n}\n\nclass ViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    func fetchAndParseJSON() {\n        let urlString = \"https://api.example.com/data\"\n        guard let url = URL(string: urlString) else { return }\n        \n        let task = URLSession.shared.dataTask(with: url) { data, response, error in\n            guard let data = data, error == nil else {\n                print(\"Error fetching data: \\(error?.localizedDescription ?? \"Unknown error\")\")\n                return\n            }\n            \n            do {\n                let decodedData = try JSONDecoder().decode([ExampleData].self, from: data)\n                print(decodedData)\n            } catch {\n                print(\"Error decoding data: \\(error.localizedDescription)\")\n            }\n        }\n        \n        task.resume()\n    }\n}\n// Call fetchAndParseJSON() function when needed, such as in viewDidLoad() or in response to a button tap"
    },
    {
      "instruction": " Write a Swift function that captures a photo using the device's camera and displays the captured image in a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n    let imageView = UIImageView()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Configure the imageView and add it to the view\n    }\n    \n    @objc func capturePhoto() {\n        if UIImagePickerController.isSourceTypeAvailable(.camera) {\n            let imagePicker = UIImagePickerController()\n            imagePicker.delegate = self\n            imagePicker.sourceType = .camera\n            imagePicker.allowsEditing = false\n            self.present(imagePicker, animated: true, completion: nil)\n        } else {\n            print(\"Camera not available\")\n        }\n    }\n    \n    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {\n        if let pickedImage = info[.originalImage] as? UIImage {\n            imageView.contentMode = .scaleAspectFit\n            imageView.image = pickedImage\n        }\n        \n        dismiss(animated: true, completion: nil)\n    }\n}\n// Add a UIButton and addTarget to call capturePhoto() function when the button is tapped"
    },
    {
      "instruction": " Write a Swift function that animates a UIViewto move from its current position to a specified CGPoint, with a given duration and delay.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    let animatedView = UIView()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Configure the animatedView and add it to the view\n    }\n    \n    func animateView(to position: CGPoint, duration: TimeInterval, delay: TimeInterval) {\n        UIView.animate(withDuration: duration, delay: delay, options: .curveEaseInOut) {\n            self.animatedView.frame.origin = position\n        } completion: { _ in\n            print(\"Animation completed\")\n        }\n    }\n}\n// Call animateView(to:duration:delay:) function when needed, such as in response to a button tap\n// Example usage: animateView(to: CGPoint(x: 50, y: 100), duration: 1.0, delay: 0)"
    },
    {
      "instruction": " Write a Swift function that adds a custom annotation to a MKMapView at a specified CLLocationCoordinate2D.",
      "input": "",
      "output": "import MapKit\nimport UIKit\n\nclass CustomAnnotation: NSObject, MKAnnotation {\n    var coordinate: CLLocationCoordinate2D\n    var title: String?\n    \n    init(coordinate: CLLocationCoordinate2D, title: String?) {\n        self.coordinate = coordinate\n        self.title = title\n    }\n}\n\nclass ViewController: UIViewController, MKMapViewDelegate {\n    let mapView = MKMapView()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        mapView.delegate = self\n        // Configure the mapView and add it to the view\n    }\n    \n    func addCustomAnnotation(at coordinate: CLLocationCoordinate2D, title: String?) {\n        let annotation = CustomAnnotation(coordinate: coordinate, title: title)\n        mapView.addAnnotation(annotation)\n    }\n}\n// Call addCustomAnnotation(at:title:) function when needed, such as in viewDidLoad() or in response to a button tap\n// Example usage: addCustomAnnotation(at: CLLocationCoordinate2D(latitude: 37.7749, longitude: -122.4194), title: \"San Francisco\")"
    },
    {
      "instruction": " Write a Swift function that saves an image to the device's photo library and displays a success or error message.",
      "input": "",
      "output": "import Photos\nimport UIKit\n\nclass ViewController: UIViewController {\n    \n    let imageView = UIImageView()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Configure the imageView and add it to the view\n    }\n    \n    @objc func saveImageToPhotoLibrary() {\n        guard let image = imageView.image else {\n            print(\"No image to save\")\n            return\n        }\n        \n        PHPhotoLibrary.shared().performChanges({\n            PHAssetChangeRequest.creationRequestForAsset(from: image)\n        }, completionHandler: { success, error in\n            DispatchQueue.main.async {\n                if success {\n                    print(\"Image saved to photo library\")\n                } else {\n                    print(\"Error saving image: \\(error?.localizedDescription ?? \"Unknown error\")\")\n                }\n            }\n        })\n    }\n}\n// Add a UIButton and addTarget to call saveImageToPhotoLibrary() function when the button is tapped"
    },
    {
      "instruction": " Write a Swift function that observes the device's battery level and logs it to the console when it changes.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        observeBatteryLevelChanges()\n    }\n    \n    func observeBatteryLevelChanges() {\n        UIDevice.current.isBatteryMonitoringEnabled = true\n        NotificationCenter.default.addObserver(self, selector: #selector(batteryLevelDidChange), name: UIDevice.batteryLevelDidChangeNotification, object: nil)\n    }\n    \n    @objc func batteryLevelDidChange(_ notification: Notification) {\n        let batteryLevel = UIDevice.current.batteryLevel\n        print(\"Battery level changed: \\(batteryLevel * 100)%\")\n    }\n    \n    deinit {\n        NotificationCenter.default.removeObserver(self, name: UIDevice.batteryLevelDidChangeNotification, object: nil)\n    }\n}\n// The function will automatically start observing battery level changes when the view controller is loaded"
    },
    {
      "instruction": " Write a Swift function to create and configure a UICollectionView with a custom UICollectionViewCell",
      "input": "",
      "output": "class CustomCollectionViewCell: UICollectionViewCell {\n    // Add custom UI elements and configure the cell\n}\n\nfunc setupCollectionView() {\n    let layout = UICollectionViewFlowLayout()\n    layout.itemSize = CGSize(width: 100, height: 100)\n    layout.sectionInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)\n\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    collectionView.dataSource = self\n    collectionView.delegate = self\n    collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n    view.addSubview(collectionView)\n    \n    // Add constraints to position the collection view\n    NSLayoutConstraint.activate([\n        collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n        collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),\n        collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n        collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor)\n    ])\n}"
    },
    {
      "instruction": " Write a Swift function to create a UIPickerView and implement its delegate and data source methods",
      "input": "",
      "output": "class ViewController: UIViewController, UIPickerViewDelegate, UIPickerViewDataSource {\n    let pickerView = UIPickerView()\n    let data = [\"Option 1\", \"Option 2\", \"Option 3\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupPickerView()\n    }\n\n    func setupPickerView() {\n        pickerView.translatesAutoresizingMaskIntoConstraints = false\n        pickerView.delegate = self\n        pickerView.dataSource = self\n        view.addSubview(pickerView)\n        \n        // Add constraints to position the picker view\n        NSLayoutConstraint.activate([\n            pickerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            pickerView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n    \n    // UIPickerViewDataSource methods\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return data.count\n    }\n    \n    // UIPickerViewDelegate methods\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return data[row]\n    }\n\n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        print(\"Selected option: \\(data[row])\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to make a network request using URLSession and decode the JSON response",
      "input": "",
      "output": "struct ApiResponse: Codable {\n    let result: String\n}\n\nfunc makeNetworkRequest() {\n    guard let url = URL(string: \"https://api.example.com/data\") else { return }\n\n    let task = URLSession.shared.dataTask(with: url) { (data, _, error) in\n        guard let data = data, error == nil else {\n            print(\"Error: \\(error?.localizedDescription ?? \"Unknown error\")\")\n            return\n        }\n\n        do {\n            let decodedData = try JSONDecoder().decode(ApiResponse.self, from: data)\n            print(\"Result: \\(decodedData.result)\")\n        } catch {\n            print(\"Error decoding JSON: \\(error.localizedDescription)\")\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " Write a Swift function to save and retrieve data using UserDefaults",
      "input": "",
      "output": "func saveDataToUserDefaults(key: String, value: String) {\n    UserDefaults.standard.set(value, forKey: key)\n}\n\nfunc retrieveDataFromUserDefaults(key: String) -> String? {\n    return UserDefaults.standard.string(forKey: key)\n}\n\n// Usage:\nsaveDataToUserDefaults(key: \"username\", value: \"JohnDoe\")\nif let username = retrieveDataFromUserDefaults(key: \"username\") {\n    print(\"Username: \\(username)\")\n}"
    },
    {
      "instruction": " Write a Swift function to create and present a UIAlertController with a single button",
      "input": "",
      "output": "func showAlert(title: String, message: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let okAction = UIAlertAction(title: \"OK\", style: .default, handler: nil)\n    alertController.addAction(okAction)\n    present(alertController, animated: true, completion: nil)\n}\n\n// Usage:\nshowAlert(title: \"Error\", message: \"An error occurred while processing your request.\")"
    },
    {
      "instruction": " Write a Swift function to create and configure a UISlider with a specified range and value",
      "input": "",
      "output": "func createSlider(minValue: Float, maxValue: Float, currentValue: Float) -> UISlider {\n    let slider = UISlider()\n    slider.minimumValue = minValue\n    slider.maximumValue = maxValue\n    slider.value = currentValue\n    slider.translatesAutoresizingMaskIntoConstraints = false\n    return slider\n}\n\n// Usage:\nlet slider = createSlider(minValue: 0, maxValue: 100, currentValue: 50)\nview.addSubview(slider)\n\n// Add constraints to position the slider\nNSLayoutConstraint.activate([\n    slider.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n    slider.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n])"
    },
    {
      "instruction": " Write a Swift function to create and configure a UIStackView with an array of UIViews",
      "input": "",
      "output": "func createStackView(subviews: [UIView], axis: NSLayoutConstraint.Axis, spacing: CGFloat) -> UIStackView {\n    let stackView = UIStackView(arrangedSubviews: subviews)\n    stackView.axis = axis\n    stackView.spacing = spacing\n    stackView.alignment = .fill\n    stackView.distribution = .fillEqually\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    return stackView\n}\n\n// Usage:\nlet button1 = UIButton(type: .system)\nbutton1.setTitle(\"Button 1\", for: .normal)\n\nlet button2 = UIButton(type: .system)\nbutton2.setTitle(\"Button 2\", for: .normal)\n\nlet stackView = createStackView(subviews: [button1, button2], axis: .vertical, spacing: 10)\nview.addSubview(stackView)\n\n// Add constraints to position the stack view\nNSLayoutConstraint.activate([\n    stackView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n    stackView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n])"
    },
    {
      "instruction": " Using the comment as a guide, complete the following code.",
      "input": "class LoginViewController: UIViewController {\n    @IBOutlet weak var usernameTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n    \n    // TODO: Add your code here\n}",
      "output": "class LoginViewController: UIViewController {\n    @IBOutlet weak var usernameTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n    \n    @IBAction func loginButtonTapped(_ sender: UIButton) {\n        guard let username = usernameTextField.text, !username.isEmpty,\n              let password = passwordTextField.text, !password.isEmpty else {\n            showAlert(message: \"Please enter your username and password.\")\n            return\n        }\n        \n        loginUser(username: username, password: password)\n    }\n    \n    private func loginUser(username: String, password: String) {\n        // Implement your login logic here\n    }\n    \n    private func showAlert(message: String) {\n        let alertController = UIAlertController(title: \"Error\", message: message, preferredStyle: .alert)\n        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n        self.present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " Using the comment as a guide, complete the following code.",
      "input": "class UserProfileViewController: UIViewController {\n    @IBOutlet weak var nameLabel: UILabel!\n    @IBOutlet weak var emailLabel: UILabel!\n    var user: User?\n    \n    // TODO: Add your code here\n}",
      "output": "class UserProfileViewController: UIViewController {\n    @IBOutlet weak var nameLabel: UILabel!\n    @IBOutlet weak var emailLabel: UILabel!\n    var user: User?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        if let user = user {\n            nameLabel.text = user.name\n            emailLabel.text = user.email\n        }\n    }\n}"
    },
    {
      "instruction": " Using the comment as a guide, complete the following code.",
      "input": "class RegisterViewController: UIViewController {\n    @IBOutlet weak var usernameTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n    @IBOutlet weak var confirmPasswordTextField: UITextField!\n    \n    // TODO: Add your code here\n}",
      "output": "class RegisterViewController: UIViewController {\n    @IBOutlet weak var usernameTextField: UITextField!\n    @IBOutlet weak var passwordTextField: UITextField!\n    @IBOutlet weak var confirmPasswordTextField: UITextField!\n    \n    @IBAction func registerButtonTapped(_ sender: UIButton) {\n        guard let username = usernameTextField.text, !username.isEmpty,\n              let password = passwordTextField.text, !password.isEmpty,\n              let confirmPassword = confirmPasswordTextField.text, !confirmPassword.isEmpty else {\n            showAlert(message: \"Please fill in all fields.\")\n            return\n        }\n        \n        if password != confirmPassword {\n            showAlert(message: \"Passwords do not match.\")\n            return\n        }\n        \n        registerUser(username: username, password: password)\n    }\n    \n    private func registerUser(username: String, password: String) {\n        // Implement your registration logic here\n    }\n    \n    private func showAlert(message: String) {\n        let alertController = UIAlertController(title: \"Error\", message: message, preferredStyle: .alert)\n        alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n        self.present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " Using the comment as a guide, complete the following code.",
      "input": "class PermissionsManager {\n    // TODO: Add your code here\n}",
      "output": "import UserNotifications\n\nclass PermissionsManager {\n    func requestNotificationPermission(completion: @escaping (Bool) -> Void) {\n        let center = UNUserNotificationCenter.current()\n        let options: UNAuthorizationOptions = [.alert, .sound, .badge]\n        \n        center.requestAuthorization(options: options) { granted, error in\n            if let error = error {\n                print(\"Error requesting notification permissions: \\(error)\")\n            }\n            completion(granted)\n        }\n    }\n}"
    },
    {
      "instruction": " Using the comment as a guide, complete the following code.",
      "input": "class LocationManager: NSObject {\n    private let locationManager = CLLocationManager()\n    \n    // TODO: Add your code here\n}",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    private let locationManager = CLLocationManager()\n    \n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n    }\n    \n    func requestLocationPermission() {\n        locationManager.requestWhenInUseAuthorization()\n    }\n    \n    func startUpdatingLocation() {\n        locationManager.startUpdatingLocation()\n    }\n    \n    func stopUpdatingLocation() {\n        locationManager.stopUpdatingLocation()\n    }\n    \n    // CLLocationManagerDelegate\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            print(\"Current location: \\(location)\")\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error getting location: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " Using the comment as a guide, complete the following code.",
      "input": "class SearchViewController: UIViewController {\n    @IBOutlet weak var searchBar: UISearchBar!\n    @IBOutlet weak var tableView: UITableView!\n    let dataSource = TableViewDataSource()\n    \n    // TODO: Add your code here\n}",
      "output": "class SearchViewController: UIViewController, UISearchBarDelegate {\n    @IBOutlet weak var searchBar: UISearchBar!\n    @IBOutlet weak var tableView: UITableView!\n    let dataSource = TableViewDataSource()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        searchBar.delegate = self\n        tableView.dataSource = dataSource\n    }\n    \n    // UISearchBarDelegate\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        dataSource.transactions = searchTransactions(query: searchText)\n        tableView.reloadData()\n    }\n    \n    private func searchTransactions(query: String) -> [Transaction] {\n        // Implement your search logic here\n        return []\n    }\n}"
    },
    {
      "instruction": " Using the comment as a guide, complete the following code.",
      "input": "class SettingsViewController: UIViewController {\n    @IBOutlet weak var notificationsSwitch: UISwitch!\n    \n    // TODO: Add your code here\n}",
      "output": "class SettingsViewController: UIViewController {\n    @IBOutlet weak var notificationsSwitch: UISwitch!\n    private let permissionsManager = PermissionsManager()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        notificationsSwitch.setOn(UserDefaults.standard.bool(forKey: \"notificationsEnabled\"), animated: false)\n    }\n    \n    @IBAction func notificationsSwitchChanged(_ sender: UISwitch) {\n        let enabled = sender.isOn\n        UserDefaults.standard.set(enabled, forKey: \"notificationsEnabled\")\n        \n        if enabled {\n            permissionsManager.requestNotificationPermission { granted in\n                if !granted {\n                    DispatchQueue.main.async {\n                        sender.setOn(false, animated: true)\n                        UserDefaults.standard.set(false, forKey: \"notificationsEnabled\")\n                    }\n                }\n            }\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to create a custom UIButton with rounded corners and a specified background color",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomButton(backgroundColor: UIColor, cornerRadius: CGFloat) -> UIButton {\n    let button = UIButton(type: .system)\n    button.backgroundColor = backgroundColor\n    button.layer.cornerRadius = cornerRadius\n    button.clipsToBounds = true\n    return button\n}"
    },
    {
      "instruction": " Write a Swift function to present a UIAlertController with a specified title, message, and action",
      "input": "",
      "output": "import UIKit\n\nfunc presentAlert(viewController: UIViewController, title: String, message: String, actionTitle: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: actionTitle, style: .default, handler: nil)\n    alertController.addAction(action)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift function to fetch and parse JSON data from a URL using URLSession",
      "input": "",
      "output": "import Foundation\n\nstruct ExampleData: Codable {\n    let id: Int\n    let name: String\n}\n\nfunc fetchJSONData(url: URL, completion: @escaping (Result<[ExampleData], Error>) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data received\", code: -1, userInfo: nil)))\n            return\n        }\n\n        do {\n            let jsonData = try JSONDecoder().decode([ExampleData].self, from: data)\n            completion(.success(jsonData))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n\n    task.resume()\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UICollectionViewCell with a UIImageView and UILabel",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView = {\n        let imgView = UIImageView()\n        imgView.contentMode = .scaleAspectFill\n        imgView.clipsToBounds = true\n        return imgView\n    }()\n\n    let label: UILabel = {\n        let lbl = UILabel()\n        lbl.textAlignment = .center\n        lbl.font = UIFont.systemFont(ofSize: 14)\n        return lbl\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    func setupViews() {\n        addSubview(imageView)\n        addSubview(label)\n        // Add constraints or layout code here\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to play a video file in a UIView using AVPlayer",
      "input": "",
      "output": "import AVFoundation\nimport UIKit\n\nfunc playVideo(url: URL, in view: UIView) {\n    let player = AVPlayer(url: url)\n    let playerLayer = AVPlayerLayer(player: player)\n    playerLayer.frame = view.bounds\n    view.layer.addSublayer(playerLayer)\n    player.play()\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UITableView with a specified delegate and data source",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomTableView(delegate: UITableViewDelegate, dataSource: UITableViewDataSource) -> UITableView {\n    let tableView = UITableView()\n    tableView.delegate = delegate\n    tableView.dataSource = dataSource\n    tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"cell\")\n    return tableView\n}"
    },
    {
      "instruction": " Write a Swift function to create a UIStackView with a specified axis, alignment, and distribution",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomStackView(axis: NSLayoutConstraint.Axis, alignment: UIStackView.Alignment, distribution: UIStackView.Distribution) -> UIStackView {\n    let stackView = UIStackView()\n    stackView.axis = axis\n    stackView.alignment = alignment\n    stackView.distribution = distribution\n    return stackView\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UISlider with a specified minimum, maximum value, and tint color",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomSlider(minValue: Float, maxValue: Float, tintColor: UIColor) -> UISlider {\n    let slider = UISlider()\n    slider.minimumValue = minValue\n    slider.maximumValue = maxValue\n    slider.minimumTrackTintColor = tintColor\n    return slider\n}"
    },
    {
      "instruction": "Write a Swift function to create a UIPickerView with a specified delegate and data source",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomPickerView(delegate: UIPickerViewDelegate, dataSource: UIPickerViewDataSource) -> UIPickerView {\n    let pickerView = UIPickerView()\n    pickerView.delegate = delegate\n    pickerView.dataSource = dataSource\n    return pickerView\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UIPageControl with a specified number of pages and current page indicator tint color",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomPageControl(numberOfPages: Int, currentPageIndicatorTintColor: UIColor) -> UIPageControl {\n    let pageControl = UIPageControl()\n    pageControl.numberOfPages = numberOfPages\n    pageControl.currentPageIndicatorTintColor = currentPageIndicatorTintColor\n    return pageControl\n}"
    },
    {
      "instruction": " Write a Swift function to handle user location updates using CLLocationManager and its delegate methods",
      "input": "",
      "output": "import CoreLocation\nimport UIKit\n\nclass LocationHandler: NSObject, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n\n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            print(\"Current location: \\(location)\")\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error while updating location: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UISearchBar with a specified placeholder and tint color",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomSearchBar(placeholder: String, tintColor: UIColor) -> UISearchBar {\n    let searchBar = UISearchBar()\n    searchBar.placeholder = placeholder\n    searchBar.tintColor = tintColor\n    return searchBar\n}"
    },
    {
      "instruction": " Write a Swift function to create and present a UIImagePickerController with a specified delegate and source type",
      "input": "",
      "output": "import UIKit\n\nfunc presentImagePickerController(delegate: (UIImagePickerControllerDelegate & UINavigationControllerDelegate), sourceType: UIImagePickerController.SourceType, viewController: UIViewController) {\n    guard UIImagePickerController.isSourceTypeAvailable(sourceType) else { return }\n    let imagePickerController = UIImagePickerController()\n    imagePickerController.delegate = delegate\n    imagePickerController.sourceType = sourceType\n    viewController.present(imagePickerController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift function to handle image caching using NSCache and URLSession",
      "input": "",
      "output": "import UIKit\n\nclass ImageCache {\n    private let cache = NSCache<NSString, UIImage>()\n\n    func loadImage(url: URL, completion: @escaping (UIImage?) -> Void) {\n        if let cachedImage = cache.object(forKey: url.absoluteString as NSString) {\n            completion(cachedImage)\n        } else {\n            URLSession.shared.dataTask(with: url) { (data, _, error) in\n                guard let data = data, error == nil, let image = UIImage(data: data) else {\n                    completion(nil)\n                    return\n                }\n\n                self.cache.setObject(image, forKey: url.absoluteString as NSString)\n                DispatchQueue.main.async {\n                    completion(image)\n                }\n            }.resume()\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UISegmentedControl with a specified array of titles and a selected segment tint color",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomSegmentedControl(titles: [String], selectedSegmentTintColor: UIColor) -> UISegmentedControl {\n    let segmentedControl = UISegmentedControl(items: titles)\n    segmentedControl.selectedSegmentTintColor = selectedSegmentTintColor\n    return segmentedControl\n}"
    },
    {
      "instruction": " Implement a custom UITableViewDelegate to handle row selection and present a new view controller.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController, UITableViewDelegate {\n\n    private let tableView = UITableView()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        tableView.delegate = self\n        // additional setup for the tableView\n    }\n\n    // MARK: - UITableViewDelegate\n\n    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        tableView.deselectRow(at: indexPath, animated: true)\n\n        let nextViewController = NextViewController()\n        navigationController?.pushViewController(nextViewController, animated: true)\n    }\n}\n\nclass NextViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n        title = \"Next View Controller\"\n    }\n}"
    },
    {
      "instruction": " Implement a UISearchBar with a UISearchController and show search results in a UICollectionView.",
      "input": "",
      "output": "import UIKit\n\nclass SearchViewController: UIViewController {\n\n    private var collectionView: UICollectionView!\n    private let searchController = UISearchController(searchResultsController: nil)\n    private var searchResults: [Product] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        setupSearchController()\n        setupCollectionView()\n    }\n\n    private func setupSearchController() {\n        searchController.searchResultsUpdater = self\n        searchController.obscuresBackgroundDuringPresentation = false\n        searchController.searchBar.placeholder = \"Search for products\"\n        navigationItem.searchController = searchController\n        definesPresentationContext = true\n    }\n\n    private func setupCollectionView() {\n        let layout = UICollectionViewFlowLayout()\n        collectionView = UICollectionView(frame: view.bounds, collectionViewLayout: layout)\n        collectionView.autoresizingMask = [.flexibleWidth, .flexibleHeight]\n        collectionView.backgroundColor = .white\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(ProductCollectionViewCell.self, forCellWithReuseIdentifier: ProductCollectionViewCell.reuseIdentifier)\n\n        view.addSubview(collectionView)\n    }\n}\n\n// MARK: - UICollectionViewDataSource\nextension SearchViewController: UICollectionViewDataSource {\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return searchResults.count\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: ProductCollectionViewCell.reuseIdentifier, for: indexPath) as! ProductCollectionViewCell\n        cell.configure(with: searchResults[indexPath.item])\n        return cell\n    }\n}\n\n// MARK: - UICollectionViewDelegateFlowLayout\nextension SearchViewController: UICollectionViewDelegateFlowLayout {\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        let width = (collectionView.frame.width - 20) / 2\n        return CGSize(width: width, height: width + 40)\n    }\n}\n\n// MARK: - UISearchResultsUpdating\nextension SearchViewController: UISearchResultsUpdating {\n    func updateSearchResults(for searchController: UISearchController) {\n        guard let searchText = searchController.searchBar.text, !searchText.isEmpty else {\n            searchResults = []\n            collectionView.reloadData()\n            return\n        }\n\n        searchResults = Product.searchProducts(query: searchText)\n        collectionView.reloadData()\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a UITableView with custom UITableViewCell containing an image and labels.",
      "input": "",
      "output": "import UIKit\n\nstruct CustomCellData {\n    let image: UIImage\n    let title: String\n    let subtitle: String\n}\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var cellImageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n    @IBOutlet weak var subtitleLabel: UILabel!\n}\n\nclass CustomTableViewController: UITableViewController {\n\n    let cellData: [CustomCellData] = [\n        CustomCellData(image: UIImage(named: \"example1\")!, title: \"Title 1\", subtitle: \"Subtitle 1\"),\n        CustomCellData(image: UIImage(named: \"example2\")!, title: \"Title 2\", subtitle: \"Subtitle 2\")\n    ]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UINib(nibName: \"CustomTableViewCell\", bundle: nil), forCellReuseIdentifier: \"customCell\")\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return cellData.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"customCell\", for: indexPath) as! CustomTableViewCell\n        let data = cellData[indexPath.row]\n        cell.cellImageView.image = data.image\n        cell.titleLabel.text = data.title\n        cell.subtitleLabel.text = data.subtitle\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a UICollectionView with custom UICollectionViewCell containing an image and a label.",
      "input": "",
      "output": "import UIKit\n\nstruct CustomCollectionCellData {\n    let image: UIImage\n    let title: String\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var cellImageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n\n    let cellData: [CustomCollectionCellData] = [\n        CustomCollectionCellData(image: UIImage(named: \"example1\")!, title: \"Title 1\"),\n        CustomCollectionCellData(image: UIImage(named: \"example2\")!, title: \"Title 2\")\n    ]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(UINib(nibName: \"CustomCollectionViewCell\", bundle: nil), forCellWithReuseIdentifier: \"customCell\")\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return cellData.count\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"customCell\", for: indexPath) as! CustomCollectionViewCell\n        let data = cellData[indexPath.row]\n        cell.cellImageView.image = data.image\n        cell.titleLabel.text = data.title\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that adds a local notification in an iOS app with a given title and body.",
      "input": "",
      "output": "import UserNotifications\n\nfunc scheduleLocalNotification(withTitle title: String, body: String) {\n    let center = UNUserNotificationCenter.current()\n    let content = UNMutableNotificationContent()\n    content.title = title\n    content.body = body\n    content.sound = UNNotificationSound.default\n\n    let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 5, repeats: false)\n    let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)\n    center.add(request) { (error) in\n        if let error = error {\n            print(\"Error scheduling notification: \\(error.localizedDescription)\")\n        }\n    }\n}\n\n// Don't forget to request notification permission from the user.\nfunc requestNotificationPermission() {\n    let center = UNUserNotificationCenter.current()\n    center.requestAuthorization(options: [.alert, .sound]) { granted, error in\n        if let error = error {\n            print(\"Error requesting notification permission: \\(error.localizedDescription)\")\n        }\n    }\n}\n\n// Call requestNotificationPermission() before trying to schedule a local notification.\nrequestNotificationPermission()\nscheduleLocalNotification(withTitle: \"Example Title\", body: \"Example Body\")"
    },
    {
      "instruction": " Write a Swift function to create a custom UIView with rounded corners and a shadow.",
      "input": "",
      "output": "import UIKit\n\nclass CustomRoundedShadowView: UIView {\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n\n    private func setupView() {\n        layer.cornerRadius = 10\n        layer.shadowColor = UIColor.black.cgColor\n        layer.shadowOpacity = 0.2\n        layer.shadowOffset = CGSize(width: 0, height: 2)\n        layer.shadowRadius = 4\n    }\n}\n\n// Usage\nlet customView = CustomRoundedShadowView()\ncustomView.backgroundColor = .systemBlue"
    },
    {
      "instruction": " Write a Swift function to create a custom UIButton with a gradient background.",
      "input": "",
      "output": "import UIKit\n\nclass GradientButton: UIButton {\n    private let gradientLayer = CAGradientLayer()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupButton()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupButton()\n    }\n\n    private func setupButton() {\n        gradientLayer.colors = [UIColor.systemBlue.cgColor, UIColor.systemGreen.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0.5)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 0.5)\n        layer.insertSublayer(gradientLayer, at: 0)\n        layer.cornerRadius = 10\n        clipsToBounds = true\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        gradientLayer.frame = bounds\n    }\n}\n\n// Usage\nlet customButton = GradientButton(type: .system)\ncustomButton.setTitle(\"Gradient Button\", for: .normal)"
    },
    {
      "instruction": " Write a Swift function to create a horizontal UIScrollView containing a dynamic number of UIButtons.",
      "input": "",
      "output": "import UIKit\n\nclass HorizontalButtonScrollViewController: UIViewController {\n    let scrollView = UIScrollView()\n    let buttonTitles = [\"Button 1\", \"Button 2\", \"Button 3\", \"Button 4\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupScrollView()\n        addButtonsToScrollView()\n    }\n\n    func setupScrollView() {\n        scrollView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(scrollView)\n        NSLayoutConstraint.activate([\n            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            scrollView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            scrollView.heightAnchor.constraint(equalToConstant: 50)\n        ])\n    }\n\n    func addButtonsToScrollView() {\n        var previousButton: UIButton?\n\n        for title in buttonTitles {\n            let button = UIButton(type: .system)\n            button.setTitle(title, for: .normal)\n            button.translatesAutoresizingMaskIntoConstraints = false\n            scrollView.addSubview(button)\n\n            NSLayoutConstraint.activate([\n                button.topAnchor.constraint(equalTo: scrollView.topAnchor),\n                button.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),\n                button.widthAnchor.constraint(equalToConstant: 100)\n            ])\n\n            if let previousButton = previousButton {\n                button.leadingAnchor.constraint(equalTo: previousButton.trailingAnchor, constant: 10).isActive = true\n            } else {\n                button.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor, constant: 10).isActive = true\n            }\n\n            previousButton = button\n        }\n\n        if let previousButton = previousButton {\n            previousButton.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor, constant: -10).isActive = true\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that saves a string to UserDefaults and retrieves it later.",
      "input": "",
      "output": "func saveStringToUserDefaults(string: String, forKey key: String) {\n    UserDefaults.standard.set(string, forKey: key)\n}\n\nfunc getStringFromUserDefaults(forKey key: String) -> String? {\n    return UserDefaults.standard.string(forKey: key)\n}\n\n// Usage\nlet key = \"exampleKey\"\nlet stringValue = \"Example String\"\nsaveStringToUserDefaults(string: stringValue, forKey: key)\n\nif let retrievedString = getStringFromUserDefaults(forKey: key) {\n    print(\"Retrieved string: \\(retrievedString)\")\n} else {\n    print(\"No string found for key: \\(key)\")\n}"
    },
    {
      "instruction": " \nWrite a Swift function that handles the user's location update in a CLLocationManagerDelegate.",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationHandler: NSObject, CLLocationManagerDelegate {\n    var locationManager: CLLocationManager\n\n    init(locationManager: CLLocationManager) {\n        self.locationManager = locationManager\n        super.init()\n        self.locationManager.delegate = self\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        guard let mostRecentLocation = locations.last else { return }\n        print(\"Updated location: \\(mostRecentLocation)\")\n        // TODO: Handle the location update as required\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that asynchronously downloads a JSON from a given URL and parses it into a specified Swift type.",
      "input": "",
      "output": "import Foundation\n\nfunc downloadJSON<T: Decodable>(from url: URL, responseType: T.Type, completion: @escaping (Result<T, Error>) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data\", code: 0, userInfo: nil)))\n            return\n        }\n\n        do {\n            let decodedObject = try JSONDecoder().decode(responseType, from: data)\n            completion(.success(decodedObject))\n        } catch {\n            completion(.failure(error))\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function that saves an image to the user's photo library and handles the result.",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToPhotoLibrary(_ image: UIImage, completion: @escaping (Result<Void, Error>) -> Void) {\n    PHPhotoLibrary.shared().performChanges({\n        PHAssetChangeRequest.creationRequestForAsset(from: image)\n    }) { success, error in\n        DispatchQueue.main.async {\n            if success {\n                completion(.success(()))\n            } else if let error = error {\n                completion(.failure(error))\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that retrieves the user's contacts and filters them by a given search term.",
      "input": "",
      "output": "import Contacts\n\nfunc fetchContacts(matching searchTerm: String, completion: @escaping (Result<[CNContact], Error>) -> Void) {\n    let contactStore = CNContactStore()\n    let keysToFetch = [CNContactGivenNameKey, CNContactFamilyNameKey] as [CNKeyDescriptor]\n    let predicate = CNContact.predicateForContacts(matchingName: searchTerm)\n    \n    do {\n        let contacts = try contactStore.unifiedContacts(matching: predicate, keysToFetch: keysToFetch)\n        completion(.success(contacts))\n    } catch {\n        completion(.failure(error))\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that detects when the user's device is shaken using a motion event.",
      "input": "",
      "output": "import UIKit\n\nclass ShakeDetectionViewController: UIViewController {\n    override func motionEnded(_ motion: UIEvent.EventSubtype, with event: UIEvent?) {\n        if motion == .motionShake {\n            print(\"Device shaken\")\n            // TODO: Handle the shake event as required\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates the scaling of a UIView with a completion handler.",
      "input": "",
      "output": "import UIKit\n\nfunc animateScaling(of view: UIView, scaleFactor: CGFloat, duration: TimeInterval, completion: @escaping () -> Void) {\n    UIView.animate(withDuration: duration, animations: {\n        view.transform = CGAffineTransform(scaleX: scaleFactor, y: scaleFactor)\n    }) { _ in\n        completion()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that calculates the time difference between two dates in a human-readable format.",
      "input": "",
      "output": "import Foundation\n\nfunc timeDifference(from startDate: Date, to endDate: Date)-> String {\n    let components = Calendar.current.dateComponents([.year, .month, .day, .hour, .minute, .second], from: startDate, to: endDate)\n\n    let formatter = DateComponentsFormatter()\n    formatter.unitsStyle = .full\n    formatter.allowedUnits = [.year, .month, .day, .hour, .minute, .second]\n    formatter.maximumUnitCount = 2\n\n    guard let formattedString = formatter.string(from: components) else {\n        return \"Invalid time difference\"\n    }\n\n    return formattedString\n}"
    },
    {
      "instruction": "Write a Swift function to create a UITableView and register a custom UITableViewCell subclass.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    // Custom implementation\n}\n\nfunc createTableViewAndRegisterCustomCell() -> UITableView {\n    let tableView = UITableView(frame: .zero, style: .plain)\n    tableView.translatesAutoresizingMaskIntoConstraints = false\n    tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomCell\")\n    return tableView\n}"
    },
    {
      "instruction": " Write a Swift function to present a UIAlertController with a title, message, and OK and Cancel buttons.",
      "input": "",
      "output": "import UIKit\n\nfunc presentAlertController(title: String, message: String, viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    alertController.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n    alertController.addAction(UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil))\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift function to save a UIImage to the user's photo library.",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToPhotoLibrary(image: UIImage) {\n    PHPhotoLibrary.shared().performChanges({\n        PHAssetChangeRequest.creationRequestForAsset(from: image)\n    }, completionHandler: { success, error in\n        if success {\n            print(\"Image saved to photo library\")\n        } else if let error = error {\n            print(\"Error saving image: \\(error.localizedDescription)\")\n        }\n    })\n}"
    },
    {
      "instruction": " Write a Swift function to fetch the user's current location using CLLocationManager.",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n\n    func requestLocation() {\n        locationManager.delegate = self\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            print(\"Current location: \\(location)\")\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Failed to fetch location: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to fetch JSON data from a URL and decode it into a Decodable model object.",
      "input": "",
      "output": "import Foundation\n\nstruct Model: Codable {\n    // Model properties\n}\n\nfunc fetchJSONData(urlString: String, completion: @escaping (Model?, Error?) -> Void) {\n    guard let url = URL(string: urlString) else { return }\n\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil else {\n            completion(nil, error)\n            return\n        }\n\n        do {\n            let model = try JSONDecoder().decode(Model.self, from: data)\n            completion(model, nil)\n        } catch {\n            completion(nil, error)\n        }\n    }\n\n    task.resume()\n}"
    },
    {
      "instruction": " Write a Swift function to create a UICollectionView with a custom UICollectionViewCell subclass and a flow layout.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // Custom implementation\n}\n\nfunc createCollectionViewAndRegisterCustomCell() -> UICollectionView {\n    let layout = UICollectionViewFlowLayout()\n    layout.scrollDirection = .vertical\n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n    return collectionView\n}"
    },
    {
      "instruction": " Write a Swift function to play a local video file using AVPlayerViewController.",
      "input": "",
      "output": "import AVFoundation\nimport AVKit\n\nfunc playLocalVideoFile(fileName: String, fileExtension: String, viewController: UIViewController) {\n    guard let url = Bundle.main.url(forResource: fileName, withExtension: fileExtension) else {\n        print(\"Error: Video file not found\")\n        return\n    }\n\n    let player = AVPlayer(url: url)\n    let playerViewController = AVPlayerViewController()\n    playerViewController.player = player\n    viewController.present(playerViewController, animated: true) {\n        playerViewController.player?.play()\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to apply a Core Image filter to a UIImage.",
      "input": "",
      "output": "import UIKit\nimport CoreImage\n\nfunc applyFilter(to image: UIImage, filterName: String)-> UIImage? {\n    let context = CIContext(options: nil)\n    guard let filter = CIFilter(name: filterName),\n          let inputImage = CIImage(image: image) else {\n        return nil\n    }\n\n    filter.setValue(inputImage, forKey: kCIInputImageKey)\n\n    guard let outputImage = filter.outputImage,\n          let cgImage = context.createCGImage(outputImage, from: outputImage.extent) else {\n        return nil\n    }\n\n    return UIImage(cgImage: cgImage)\n}"
    },
    {
      "instruction": " Write a Swift function to make an API request with URLSession and decode the JSON response using Codable",
      "input": "",
      "output": "import Foundation\n\nstruct APIResponse: Codable {\n    let data: [String: String]\n}\n\nclass APIManager {\n    \n    func fetchData(completion: @escaping (APIResponse?, Error?) -> Void) {\n        let urlString = \"https://api.example.com/data\"\n        \n        guard let url = URL(string: urlString) else { return }\n        \n        URLSession.shared.dataTask(with: url) { data, response, error in\n            guard let data = data, error == nil else {\n                completion(nil, error)\n                return\n            }\n            \n            do {\n                let decodedData = try JSONDecoder().decode(APIResponse.self, from: data)\n                completion(decodedData, nil)\n            } catch {\n                completion(nil, error)\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a UICollectionView with custom UICollectionViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n    // Add your custom UI components here\n}\n\nclass ViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {\n    \n    private lazy var collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        return collectionView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(collectionView)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10 // Return the number of items\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        // Configure cell\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a horizontal UIScrollView with multiple UIViews inside",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    \n    private let numberOfPages = 4\n    \n    private lazy var scrollView: UIScrollView = {\n        let scrollView = UIScrollView()\n        scrollView.isPagingEnabled = true\n        scrollView.showsHorizontalScrollIndicator = false\n        scrollView.translatesAutoresizingMaskIntoConstraints = false\n        return scrollView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(scrollView)\n        setupConstraints()\n        createScrollContent()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            scrollView.topAnchor.constraint(equalTo: view.topAnchor),\n            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    private func createScrollContent() {\n        for i in 0..<numberOfPages {\n            let view = UIView()\n            view.backgroundColor = UIColor.random()\n            view.frame = CGRect(x: CGFloat(i) * view.bounds.width, y: 0, width: view.bounds.width, height: view.bounds.height)\n            scrollView.addSubview(view)\n        }\n        \n        scrollView.contentSize = CGSize(width: view.bounds.width * CGFloat(numberOfPages), height: view.bounds.height)\n    }\n}\n\nextension UIColor {\n    static func random() -> UIColor {\n        return UIColor(red: CGFloat.random(in: 0...1), green: CGFloat.random(in: 0...1), blue: CGFloat.random(in: 0...1), alpha: 1.0)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement infinite scrolling in a UITableView",
      "input": "",
      "output": "import UIKit\n\nclass InfiniteScrollTableViewController: UITableViewController {\n    \n    private var data: [String] = []\n    private var isLoadingData = false\n    private let loadMoreThreshold = 5\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"Cell\")\n        loadData()\n    }\n    \n    private func loadData() {\n        isLoadingData = true\n        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {\n            for i in 1...10 {\n                self.data.append(\"Item \\(i)\")\n            }\n            self.tableView.reloadData()\n            self.isLoadingData = false\n        }\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"Cell\", for: indexPath)\n        cell.textLabel?.text = data[indexPath.row]\n        \n        if !isLoadingData && indexPath.row >= data.count - loadMoreThreshold {\n            loadData()\n        }\n        \n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to play a video from a URL using AVPlayerViewController",
      "input": "",
      "output": "import UIKit\nimport AVKit\nimport AVFoundation\n\nclass ViewController: UIViewController {\n    \n    @IBAction func playVideo(_ sender: UIButton) {\n        guard let url = URL(string: \"https://example.com/video.mp4\") else { return }\n        let player = AVPlayer(url: url)\n        let playerViewController = AVPlayerViewController()\n        playerViewController.player = player\n        present(playerViewController, animated: true) {\n            playerViewController.player?.play()\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UIView with a UILabel and a UITextField, then return the custom UIView.",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomView() -> UIView {\n    let customView = UIView()\n    customView.translatesAutoresizingMaskIntoConstraints = false\n\n    let label = UILabel()\n    label.text = \"Name:\"\n    label.translatesAutoresizingMaskIntoConstraints = false\n    customView.addSubview(label)\n\n    let textField = UITextField()\n    textField.borderStyle = .roundedRect\n    textField.translatesAutoresizingMaskIntoConstraints = false\n    customView.addSubview(textField)\n\n    NSLayoutConstraint.activate([\n        label.leadingAnchor.constraint(equalTo: customView.leadingAnchor),\n        label.topAnchor.constraint(equalTo: customView.topAnchor),\n        textField.leadingAnchor.constraint(equalTo: label.trailingAnchor, constant: 8),\n        textField.trailingAnchor.constraint(equalTo: customView.trailingAnchor),\n        textField.topAnchor.constraint(equalTo: customView.topAnchor),\n        textField.bottomAnchor.constraint(equalTo: customView.bottomAnchor)\n    ])\n\n    return customView\n}"
    },
    {
      "instruction": " Write a Swift function that configures a UITableView to display a list of names and register a custom UITableViewCell.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    static let reuseIdentifier = \"CustomTableViewCell\"\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        // Add custom UI elements and configuration here\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n\nfunc configureTableView(_ tableView: UITableView, names: [String]) {\n    tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: CustomTableViewCell.reuseIdentifier)\n\n    tableView.dataSource = UITableViewDataSource.self\n\n    class UITableViewDataSource: NSObject, UITableViewDataSource {\n        private let names: [String]\n\n        init(names: [String]) {\n            self.names = names\n            super.init()\n        }\n        \n        func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n            return names.count\n        }\n        \n        func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n            let cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.reuseIdentifier, for: indexPath)\n            cell.textLabel?.text = names[indexPath.row]\n            return cell\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that adds a UITapGestureRecognizer to a UIImageView, allowing the user to tap the image to perform an action.",
      "input": "",
      "output": "import UIKit\n\nfunc addTapGestureToImageView(_ imageView: UIImageView, action: @escaping () -> Void) {\n    imageView.isUserInteractionEnabled = true\n    let tapGesture = UITapGestureRecognizer(target: self, action: #selector(imageTapped))\n    imageView.addGestureRecognizer(tapGesture)\n\n    class TapGestureHandler: NSObject {\n        private let action: () -> Void\n\n        init(action: @escaping () -> Void) {\n            self.action = action\n            super.init()\n        }\n\n        @objc func imageTapped() {\n            action()\n        }\n    }\n\n    let handler = TapGestureHandler(action: action)\n    objc_setAssociatedObject(tapGesture, Unmanaged.passUnretained(handler).toOpaque(), handler, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)\n}"
    },
    {
      "instruction": " Write a Swift function that presents an UIAlertController with a text field, allowing the user to enter their name and then performs an action with the entered name.",
      "input": "",
      "output": "import UIKit\n\nfunc presentNameAlertController(viewController: UIViewController, completion: @escaping (String) -> Void) {\n    let alertController = UIAlertController(title: \"Enter your name\", message: nil, preferredStyle: .alert)\n    alertController.addTextField { textField in        textField.placeholder = \"Name\"\n    }\n\n    let submitAction = UIAlertAction(title: \"Submit\", style: .default) { _ in\n        if let name = alertController.textFields?.first?.text {\n            completion(name)\n        }\n    }\n    alertController.addAction(submitAction)\n\n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n    alertController.addAction(cancelAction)\n\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift function that takes a UIViewController and adds a UIStackView with two UIButtons to the view, then configures the buttons to perform separate actions when tapped.",
      "input": "",
      "output": "import UIKit\n\nfunc addStackViewWithButtons(to viewController: UIViewController, button1Action: @escaping () -> Void, button2Action: @escaping () -> Void) {\n    let stackView = UIStackView()\n    stackView.axis = .horizontal\n    stackView.distribution = .fillEqually\n    stackView.spacing = 10\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    viewController.view.addSubview(stackView)\n\n    NSLayoutConstraint.activate([\n        stackView.centerXAnchor.constraint(equalTo: viewController.view.centerXAnchor),\n        stackView.centerYAnchor.constraint(equalTo: viewController.view.centerYAnchor)\n    ])\n\n    let button1 = UIButton(type: .system)\n    button1.setTitle(\"Button 1\", for: .normal)\n    button1.addTarget(self, action: #selector(button1Tapped), for: .touchUpInside)\n    stackView.addArrangedSubview(button1)\n\n    let button2 = UIButton(type: .system)\n    button2.setTitle(\"Button 2\", for: .normal)\n    button2.addTarget(self, action: #selector(button2Tapped), for: .touchUpInside)\n    stackView.addArrangedSubview(button2)\n\n    class ButtonActions: NSObject {\n        private let button1Action: () -> Void\n        private let button2Action: () -> Void\n\n        init(button1Action: @escaping () -> Void, button2Action: @escaping () -> Void) {\n            self.button1Action = button1Action\n            self.button2Action = button2Action\n            super.init()\n        }\n\n        @objc func button1Tapped() {\n            button1Action()\n        }\n\n        @objc func button2Tapped() {\n            button2Action()\n        }\n    }\n\n    let actions = ButtonActions(button1Action: button1Action, button2Action: button2Action)\n    objc_setAssociatedObject(viewController, Unmanaged.passUnretained(actions).toOpaque(), actions, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)\n}"
    },
    {
      "instruction": " Write a Swift function that takes a UISlider's value and adjusts the font size of a UILabel accordingly.",
      "input": "",
      "output": "import UIKit\n\nfunc adjustFontSize(sliderValue: Float, label: UILabel) {\n    let minFontSize: CGFloat = 10\n    let maxFontSize: CGFloat = 30\n    let fontSize = minFontSize + (maxFontSize - minFontSize) * CGFloat(sliderValue)\n    label.font = UIFont.systemFont(ofSize: fontSize)\n}"
    },
    {
      "instruction": " Write a Swift function that creates a custom UICollectionViewCell with a UIImageView and a UILabel, and configure the cell to display an image and a title.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n\n    private let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n\n    private let titleLabel: UILabel = {\n        let label = UILabel()\n        label.numberOfLines = 1\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupViews() {\n        addSubview(imageView)\n        addSubview(titleLabel)\n\n        NSLayoutConstraint.activate([\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.heightAnchor.constraint(equalTo: heightAnchor, multiplier: 0.75),\n\n            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor),\n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 4),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n\n    func configureCell(image: UIImage, title: String) {\n        imageView.image = image\n        titleLabel.text = title\n    }\n}"
    },
    {
      "instruction": " Implement a Swift function to download an image from a URL and display it in a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil, let image = UIImage(data: data) else {\n            completion(nil)\n            return\n        }\n        DispatchQueue.main.async {\n            completion(image)\n        }\n    }.resume()\n}\n\nfunc setImage(from url: URL, to imageView: UIImageView) {\n    downloadImage(from: url) { image in\n        imageView.image = image\n    }\n}"
    },
    {
      "instruction": " Create a custom UIButton with rounded corners and a gradient background",
      "input": "",
      "output": "import UIKit\n\nclass GradientButton: UIButton {\n\n    private let gradientLayer = CAGradientLayer()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupGradient()\n        setupRoundedCorners()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupGradient()\n        setupRoundedCorners()\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        gradientLayer.frame = bounds\n    }\n\n    private func setupGradient() {\n        gradientLayer.colors = [UIColor.red.cgColor, UIColor.orange.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0.5)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 0.5)\n        layer.insertSublayer(gradientLayer, at: 0)\n    }\n\n    private func setupRoundedCorners() {\n        layer.cornerRadius = bounds.height / 2\n        clipsToBounds = true\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to register for and handle remote push notifications",
      "input": "",
      "output": "import UIKit\nimport UserNotifications\n\nfunc registerForPushNotifications(application: UIApplication) {\n    let center = UNUserNotificationCenter.current()\n    center.requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in\n        if granted {\n            DispatchQueue.main.async {\n                application.registerForRemoteNotifications()\n            }\n        }\n    }\n}\n\nfunc application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    // Send device token to your server\n}\n\nfunc application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n    print(\"Failed to register for remote notifications: \\(error)\")\n}\n\nfunc application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n    // Handle remote notification\n    completionHandler(.newData)\n}"
    },
    {
      "instruction": " Create a view controller that displays a list of items using UICollectionView",
      "input": "",
      "output": "import UIKit\n\nclass CollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n\n    private let collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .vertical\n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: \"cell\")\n        collectionView.backgroundColor = .white\n        return collectionView\n    }()\n\n    private let items = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(collectionView)\n        collectionView.dataSource = self\n        collectionView.delegate = self\n    }\n\n    override func viewDidLayoutSubviews() {\n        super.viewDidLayoutSubviews()\n        collectionView.frame = view.bounds\n    }\n\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"cell\", for: indexPath)\n        cell.backgroundColor = .blue\n        return cell\n    }\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: view.frame.size.width / 2 - 15, height: view.frame.size.width / 2 - 15)\n    }\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {\n        return 10\n    }\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {\n        return 10\n    }\n}"
    },
    {
      "instruction": " Create a custom swipe-to-delete action for UITableViewCell",
      "input": "",
      "output": "import UIKit\n\nclass SwipeToDeleteViewController: UITableViewController {\n\n    private var data = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"cell\")\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        cell.textLabel?.text = data[indexPath.row]\n        return cell\n    }\n\n    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {\n        if editingStyle == .delete {\n            data.remove(at: indexPath.row)\n            tableView.deleteRows(at: [indexPath], with: .automatic)\n        }\n    }\n}"
    },
    {
      "instruction": " Implement a custom UIAlertController with multiple actions",
      "input": "",
      "output": "import UIKit\n\nfunc showCustomAlertController(on viewController: UIViewController) {\n    let alertController = UIAlertController(title: \"Custom Alert\", message: \"Choose an option\", preferredStyle: .alert)\n\n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n    alertController.addAction(cancelAction)\n\n    let optionOneAction = UIAlertAction(title: \"Option 1\", style: .default) { _ in\n        print(\"Option 1 selected\")\n    }\n    alertController.addAction(optionOneAction)\n\n    let optionTwoAction = UIAlertAction(title: \"Option 2\", style: .default) { _ in\n        print(\"Option 2 selected\")\n    }\n    alertController.addAction(optionTwoAction)\n\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Create a custom UIPageViewController that displays a series of images",
      "input": "",
      "output": "import UIKit\n\nclass ImagePageViewController: UIPageViewController, UIPageViewControllerDataSource, UIPageViewControllerDelegate {\n\n    private let images: [UIImage] = [\n        UIImage(named: \"image1\")!,\n        UIImage(named: \"image2\")!,\n        UIImage(named: \"image3\")!\n    ]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        dataSource = self\n        delegate = self\n\n        setViewControllers([createImageViewController(image: images[0])], direction: .forward, animated: false, completion: nil)\n    }\n\n    func createImageViewController(image: UIImage) -> UIViewController {\n        let viewController = UIViewController()\n        let imageView = UIImageView(image: image)\n        imageView.contentMode = .scaleAspectFit\n        viewController.view = imageView\n        return viewController\n    }\n\n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n        guard let imageView = (viewController.view as? UIImageView), let image = imageView.image, let index = images.firstIndex(of: image), index > 0 else {\n            return nil\n        }\n        return createImageViewController(image: images[index - 1])\n    }\n\n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) ->"
    },
    {
      "instruction": " Write a Swift function to programmatically create a UICollectionView with a custom UICollectionViewCell that displays a label inside a colored square.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        addSubview(label)\n        NSLayoutConstraint.activate([\n            label.centerXAnchor.constraint(equalTo: centerXAnchor),\n            label.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n        backgroundColor = .blue\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n    init() {\n        let layout = UICollectionViewFlowLayout()\n        layout.itemSize = CGSize(width: 100, height: 100)\n        super.init(collectionViewLayout: layout)\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"customCell\")\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 20\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"customCell\", for: indexPath) as! CustomCollectionViewCell\n        cell.label.text = \"Cell \\(indexPath.item)\"\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UIView that displays a UITextView and UIButton. Tapping the button should print the content of the UITextView.",
      "input": "",
      "output": "import UIKit\n\nclass CustomView: UIView {\n    let textView: UITextView = {\n        let textView = UITextView()\n        textView.translatesAutoresizingMaskIntoConstraints = false\n        return textView\n    }()\n    \n    let button: UIButton = {\n        let button = UIButton(type: .system)\n        button.setTitle(\"Print text\", for: .normal)\n        button.translatesAutoresizingMaskIntoConstraints = false\n        return button\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        addSubview(textView)\n        addSubview(button)\n        NSLayoutConstraint.activate([\n            textView.centerXAnchor.constraint(equalTo: centerXAnchor),\n            textView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            textView.widthAnchor.constraint(equalToConstant: 200),\n            textView.heightAnchor.constraint(equalToConstant: 100),\n            button.topAnchor.constraint(equalTo: textView.bottomAnchor, constant: 8),\n            button.centerXAnchor.constraint(equalTo: centerXAnchor)\n        ])\n        button.addTarget(self, action: #selector(printText), for: .touchUpInside)\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    @objc func printText() {\n        print(textView.text)\n    }\n}"
    },
    {
      "instruction": " Create a Swift function that uses CoreLocation to get the user's current location and print the latitude and longitude.",
      "input": "",
      "output": "import UIKit\nimport CoreLocation\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            print(\"Latitude: \\(location.coordinate.latitude), Longitude: \\(location.coordinate.longitude)\")\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that uses MapKit to display a map with the user's current location and a custom annotation at a given latitude and longitude.",
      "input": "",
      "output": "import UIKit\nimport MapKit\n\nclass CustomAnnotation: NSObject, MKAnnotation {\n    let title: String?\n    let coordinate: CLLocationCoordinate2D\n\n    init(title: String, coordinate: CLLocationCoordinate2D) {\n        self.title = title\n        self.coordinate = coordinate\n    }\n}\n\nclass MapViewController: UIViewController, MKMapViewDelegate {\n    let mapView = MKMapView()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        mapView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(mapView)\n        NSLayoutConstraint.activate([\n            mapView.topAnchor.constraint(equalTo: view.topAnchor),\n            mapView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            mapView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            mapView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n        \n        mapView.delegate = self\n        mapView.showsUserLocation = true\n        mapView.userTrackingMode = .follow\n        \n        let customAnnotation = CustomAnnotation(title: \"Custom Annotation\", coordinate: CLLocationCoordinate2D(latitude: 37.7749, longitude: -122.4194))\n        mapView.addAnnotation(customAnnotation)\n    }\n    \n    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {\n        if annotation is CustomAnnotation {\n            let identifier = \"customAnnotation\"\n            var annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: identifier)\n            \n            if annotationView == nil {\n                annotationView = MKPinAnnotationView(annotation: annotation, reuseIdentifier: identifier)\n                annotationView?.canShowCallout = true\n            } else {\n                annotationView?.annotation = annotation\n            }\n            \n            return annotationView\n        }\n        \n        return nil\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UIControl that acts as a rating control with a series of stars. Tapping on a star should update the rating value.",
      "input": "",
      "output": "import UIKit\n\nclass RatingControl: UIControl {\n    var rating = 0 {\n        didSet {\n            setNeedsLayout()\n        }\n    }\n    \n    private var starButtons = [UIButton]()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupStars()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupStars()\n    }\n    \n    private func setupStars() {\n        for _ in 0..<5 {\n            let button = UIButton()\n            button.setImage(UIImage(systemName: \"star.fill\"), for: .selected)\n            button.setImage(UIImage(systemName: \"star\"), for: .normal)\n            button.translatesAutoresizingMaskIntoConstraints = false\n            button.addTarget(self, action: #selector(ratingButtonTapped(button:)), for: .touchUpInside)\n            addSubview(button)\n            starButtons.append(button)\n        }\n        \n        var constraints = [NSLayoutConstraint]()\n        for (index, button) in starButtons.enumerated() {\n            constraints += [\n                button.widthAnchor.constraint(equalToConstant: 44),\n                button.heightAnchor.constraint(equalToConstant: 44),\n                button.centerYAnchor.constraint(equalTo: centerYAnchor)\n            ]\n            \n            if index == 0 {\n                constraints.append(button.leadingAnchor.constraint(equalTo: leadingAnchor))\n            } else {\n                constraints.append(button.leadingAnchor.constraint(equalTo: starButtons[index - 1].trailingAnchor))\n            }\n        }\n        NSLayoutConstraint.activate(constraints)\n    }\n    \n    @objc func ratingButtonTapped(button: UIButton) {\n        if let index = starButtons.firstIndex(of: button) {\n            rating = index + 1\n            updateStarSelectionStates()\n        }\n    }\n    \n    private func updateStarSelectionStates() {\n        for (index, button) in starButtons.enumerated() {\n            button.isSelected = index < rating\n        }\n    }\n}"
    },
    {
      "instruction": "Write the code to create a custom TableView cell that displays an image, title, and subtitle.",
      "input": "Create a custom UITableViewCell subclass called MyCustomCell.\nIn the MyCustomCell class, create a UIImageView called cellImageView, a UILabel called titleLabel, and a UILabel called subtitleLabel.\nInitialize the cellImageView, titleLabel, and subtitleLabel using lazy property initialization, setting appropriate properties for each subview.\nOverride the init(style:reuseIdentifier:) initializer and add the subviews to the contentView.\nIn the required init?(coder:) initializer, call the superclass implementation.\nOverride the layoutSubviews() method to position and size each subview within the contentView, and update their frames accordingly.",
      "output": "import UIKit\n\nclass MyCustomCell: UITableViewCell {\n    \n    private lazy var cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n    \n    private lazy var titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.font = UIFont.boldSystemFont(ofSize: 16)\n        return label\n    }()\n    \n    private lazy var subtitleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.font = UIFont.systemFont(ofSize: 14)\n        label.textColor = .gray\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        \n        contentView.addSubview(cellImageView)\n        contentView.addSubview(titleLabel)\n        contentView.addSubview(subtitleLabel)\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        \n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 8),\n            cellImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            cellImageView.widthAnchor.constraint(equalToConstant: 40),\n            cellImageView.heightAnchor.constraint(equalToConstant: 40),\n            \n            titleLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 8),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -8),\n            \n            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 4),\n            subtitleLabel.leadingAnchor.constraint(equalTo: titleLabel.leadingAnchor),\n            subtitleLabel.trailingAnchor.constraint(equalTo: titleLabel.trailingAnchor),\n        ])\n    }\n}"
    },
    {
      "instruction": "Write a Swift function called `fetchWeather` that takes a `latitude` and `longitude` as input and fetches weather data from the OpenWeatherMap API using URLSession. The function should handle errors and return the weather data in a completion handler. ",
      "input": "import Foundation\n\nstruct WeatherData: Codable {\n    let main: Main\n    let weather: [Weather]\n}\n\nstruct Main: Codable {\n    let temp: Double\n}\n\nstruct Weather: Codable {\n    let description: String\n}\n\nfunc fetchWeather(latitude: Double, longitude: Double, apiKey: String, completion: @escaping (Result<WeatherData, Error>) -> Void) {\n    // Implement this function\n}",
      "output": "func fetchWeather(latitude: Double, longitude: Double, apiKey: String, completion: @escaping (Result<WeatherData, Error>) -> Void) {\n    let urlString = \"https://api.openweathermap.org/data/2.5/weather?lat=\\(latitude)&lon=\\(longitude)&appid=\\(apiKey)\"\n    guard let url = URL(string: urlString) else {\n        completion(.failure(NSError(domain: \"Invalid URL\", code: -1, userInfo: nil)))\n        return\n    }\n\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n\n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data received\", code: -1, userInfo: nil)))\n            return\n        }\n\n        do {\n            let decoder = JSONDecoder()\n            let weatherData = try decoder.decode(WeatherData.self, from: data)\n            completion(.success(weatherData))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function called `saveImageToGallery` that saves an image from a URL to the user's photo library using `PHPhotoLibrary`. The function should handle permissions and errors.",
      "input": "import Photos\n\nfunc saveImageToGallery(imageURL: URL, completion: @escaping (Result<Void, Error>) -> Void) {\n    // Implement this function\n}",
      "output": "import Photos\n\nfunc saveImageToGallery(imageURL: URL, completion: @escaping (Result<Void, Error>) -> Void) {\n    func save() {\n        DispatchQueue.global(qos: .background).async {\n            do {\n                let imageData = try Data(contentsOf: imageURL)\n                guard let image = UIImage(data: imageData) else {\n                    completion(.failure(NSError(domain: \"Invalid image data\", code: -1, userInfo: nil)))\n                    return\n                }\n\n                PHPhotoLibrary.shared().performChanges({\n                    PHAssetChangeRequest.creationRequestForAsset(from: image)\n                }) { success, error in\n                    if let error = error {\n                        completion(.failure(error))\n                    } else {\n                        completion(.success(()))\n                    }\n                }\n            } catch {\n                completion(.failure(error))\n            }\n        }\n    }\n\n    let status = PHPhotoLibrary.authorizationStatus()\n\n    if status == .authorized {\n        save()\n    } else if status == .notDetermined {\n        PHPhotoLibrary.requestAuthorization { newStatus in\n            if newStatus == .authorized {\n                save()\n            } else {\n                completion(.failure(NSError(domain: \"Permission denied\", code: -1, userInfo: nil)))\n            }\n        }\n    } else {\n        completion(.failure(NSError(domain: \"Permission not granted\", code: -1, userInfo: nil)))\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function called `configureTableView` that registers UITableViewCell subclasses `TransactionCell` and `ShowAllCell` to a UITableView and sets the dataSource and delegate to the current view controller. The UITableViewDelegate and UITableViewDataSource protocols should be already conformed to.",
      "input": "class TransactionCell: UITableViewCell {\n    // Implementation\n}\n\nclass ShowAllCell: UITableViewCell {\n    // Implementation\n}\n\nclass TransactionsViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {\n    private let tableView = UITableView()\n    \n    func configureTableView() {\n        // Implement this function\n    }\n}",
      "output": "class TransactionCell: UITableViewCell {\n    // Implementation\n}\n\nclass ShowAllCell: UITableViewCell {\n    // Implementation\n}\n\nclass TransactionsViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {\n    private let tableView = UITableView()\n    \n    func configureTableView() {\n        tableView.register(TransactionCell.self, forCellReuseIdentifier: \"TransactionCell\")\n        tableView.register(ShowAllCell.self, forCellReuseIdentifier: \"ShowAllCell\")\n        tableView.delegate = self\n       tableView.dataSource = self\n        view.addSubview(tableView)\n        tableView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            tableView.leftAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leftAnchor),\n            tableView.rightAnchor.constraint(equalTo: view.safeAreaLayoutGuide.rightAnchor),\n            tableView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function called `loadContacts` that fetches the user's contacts from the Contacts framework, sorts them by given name, and returns the sorted contacts in a completion handler.",
      "input": "import Contacts\n\nfunc loadContacts(completion: @escaping (Result<[CNContact], Error>) -> Void) {\n    // Implement this function\n}",
      "output": "import Contacts\n\nfunc loadContacts(completion: @escaping (Result<[CNContact], Error>) -> Void) {\n    let store = CNContactStore()\n    store.requestAccess(for: .contacts) { granted, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        if granted {\n            let keysToFetch = [CNContactGivenNameKey, CNContactFamilyNameKey] as [CNKeyDescriptor]\n            let fetchRequest = CNContactFetchRequest(keysToFetch: keysToFetch)\n            fetchRequest.sortOrder = .givenName\n            \n            do {\n                var contacts: [CNContact] = []\n                try store.enumerateContacts(with: fetchRequest) { contact, _ in\n                    contacts.append(contact)\n                }\n                completion(.success(contacts))\n            } catch {\n                completion(.failure(error))\n            }\n        } else {\n            completion(.failure(NSError(domain: \"Permission denied\", code: -1, userInfo: nil)))\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function called `configureMap` that adds an MKMapView to the current view controller and sets its delegate to the current view controller. The MKMapViewDelegate protocol should be already conformed to.",
      "input": "import MapKit\n\nclass MapViewController: UIViewController, MKMapViewDelegate {\n    func configureMap() {\n        // Implement this function\n    }\n}",
      "output": "import MapKit\n\nclass MapViewController: UIViewController, MKMapViewDelegate {\n    func configureMap() {\n        let mapView = MKMapView()\n        mapView.delegate = self\n        view.addSubview(mapView)\n        mapView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            mapView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            mapView.leftAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leftAnchor),\n            mapView.rightAnchor.constraint(equalTo: view.safeAreaLayoutGuide.rightAnchor),\n            mapView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function called `retrieveUserLocation` that takes a CLLocationManager as input and checks if the user has granted location permissions. If granted, the function should request the user's current location.",
      "input": "import CoreLocation\n\nfunc retrieveUserLocation(locationManager: CLLocationManager) {\n    // Implement this function\n}",
      "output": "import CoreLocation\n\nfunc retrieveUserLocation(locationManager: CLLocationManager) {\n    if CLLocationManager.authorizationStatus() == .authorizedWhenInUse || CLLocationManager.authorizationStatus() == .authorizedAlways {\n        locationManager.requestLocation()\n    } else if CLLocationManager.authorizationStatus() == .notDetermined {\n        locationManager.requestWhenInUseAuthorization()\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function called `presentAlert` that takes a title, message, and an array of UIAlertAction objects as input, and presents an alert with the provided actions on the current view controller.",
      "input": "class CustomViewController: UIViewController {\n    func presentAlert(title: String, message: String, actions: [UIAlertAction]) {\n        // Implement this function\n    }\n}",
      "output": "class CustomViewController: UIViewController {\n    func presentAlert(title: String, message: String, actions: [UIAlertAction]) {\n        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n        for action in actions {\n            alertController.addAction(action)\n        }\n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function called `configureCollectionView` that registers UICollectionViewCell subclass `ImageCell` to a UICollectionView and sets the dataSource and delegate to the current view controller. The UICollectionViewDelegate and UICollectionViewDataSource protocols should be already conformed to.",
      "input": "class ImageCell: UICollectionViewCell {\n    // Implementation\n}\n\nclass GalleryViewController: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource {\n    private let collectionView = UICollectionView(frame: .zero, collectionViewLayout: UICollectionViewFlowLayout())\n    \n    func configureCollectionView() {\n        // Implement this function\n    }\n}",
      "output": "class ImageCell: UICollectionViewCell {\n    // Implementation\n}\n\nclass GalleryViewController: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource {\n    private let collectionView = UICollectionView(frame: .zero, collectionViewLayout: UICollectionViewFlowLayout())\n    \n    func configureCollectionView() {\n        collectionView.register(ImageCell.self, forCellWithReuseIdentifier: \"ImageCell\")\n        collectionView.delegate = self\n        collectionView.dataSource = self\n        view.addSubview(collectionView)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            collectionView.leftAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leftAnchor),\n            collectionView.rightAnchor.constraint(equalTo: view.safeAreaLayoutGuide.rightAnchor),\n            collectionView.bottomAnchor"
    },
    {
      "instruction": "Write a Swift function to implement a UITableView with a custom UITableViewCell",
      "input": "",
      "output": "// Custom TableViewCell\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var customLabel: UILabel!\n}\n\n// In your view controller\nclass ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    @IBOutlet weak var tableView: UITableView!\n\n    let dataSource = [\"Item 1\", \"Item 2\", \"Item 3\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.delegate = self\n        tableView.dataSource = self\n        tableView.register(UINib(nibName: \"CustomTableViewCell\", bundle: nil), forCellReuseIdentifier: \"customCell\")\n    }\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return dataSource.count\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"customCell\", for: indexPath) as! CustomTableViewCell\n        cell.customLabel.text = dataSource[indexPath.row]\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to add pull-to-refresh functionality to a UIScrollView",
      "input": "",
      "output": "class ViewController: UIViewController {\n    @IBOutlet weak var scrollView: UIScrollView!\n\n    private let refreshControl = UIRefreshControl()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        scrollView.refreshControl = refreshControl\n        refreshControl.addTarget(self, action: #selector(refreshData(_:)), for: .valueChanged)\n    }\n\n    @objc private func refreshData(_ sender: Any) {\n        // Refresh your data here...\n\n        // Once the data is refreshed, end the refresh control\n        refreshControl.endRefreshing()\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a programmatic UICollectionView with a custom UICollectionViewCell",
      "input": "",
      "output": "class CustomCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var customImageView: UIImageView!\n}\n\nclass ViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {\n    private var collectionView: UICollectionView!\n\n    let dataSource = [\"Image1\", \"Image2\", \"Image3\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        let layout = UICollectionViewFlowLayout()\n        collectionView = UICollectionView(frame: view.bounds, collectionViewLayout: layout)\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(UINib(nibName: \"CustomCollectionViewCell\", bundle: nil), forCellWithReuseIdentifier: \"customCell\")\n        collectionView.backgroundColor = .clear\n\n        view.addSubview(collectionView)\n    }\n\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return dataSource.count\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"customCell\", for: indexPath) as! CustomCollectionViewCell\n        // Set your image here\n        // cell.customImageView.image = ...\n        return cell\n    }\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: 100, height: 100)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to request location permission from the user",
      "input": "",
      "output": "import CoreLocation\n\nclass ViewController: UIViewController, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        locationManager.delegate = self\n        requestLocationPermission()\n    }\n\n    func requestLocationPermission() {\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n        switch status {\n        case .authorizedWhenInUse, .authorizedAlways:\n            // Location permission granted\n            break\n        case .denied, .restricted:\n            // Location permission denied\n            break\n        case .notDetermined:\n            // Location permission not determined\n            break\n        default:\n            break\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to fetch JSON data from a URL and decode it using Codable",
      "input": "",
      "output": "import Foundation\n\nstruct MyData: Codable {\n    let id: Int\n    let title: String\n}\n\nclass ViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        fetchData()\n    }\n\n    func fetchData() {\n        let url = URL(string: \"https://api.example.com/data\")!\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let data = data {\n                do {\n                    let decodedData = try JSONDecoder().decode([MyData].self, from: data)\n                    print(decodedData)\n                } catch {\n                    print(\"Error decoding data: \\(error)\")\n                }\n            } else {\n                print(\"Error fetching data: \\(error?.localizedDescription ?? \"Unknown error\")\")\n            }\n        }.resume()\n   }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UIAlertController with multiple actions",
      "input": "",
      "output": "class ViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n\n    func presentCustomAlert() {\n        let alertController = UIAlertController(title: \"Custom Alert\", message: \"Choose an option\", preferredStyle: .alert)\n        \n        let option1 = UIAlertAction(title: \"Option 1\", style: .default) { (action) in\n            // Handle action for option 1\n        }\n        \n        let option2 = UIAlertAction(title: \"Option 2\", style: .default) { (action) in\n            // Handle action for option 2\n        }\n        \n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n        \n        alertController.addAction(option1)\n        alertController.addAction(option2)\n        alertController.addAction(cancelAction)\n        \n        self.present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create and configure a UIPageControl",
      "input": "",
      "output": "class ViewController: UIViewController {\n\n    private let pageControl = UIPageControl()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        configurePageControl()\n    }\n\n    private func configurePageControl() {\n        pageControl.numberOfPages = 3\n        pageControl.currentPage = 0\n        pageControl.pageIndicatorTintColor = .lightGray\n        pageControl.currentPageIndicatorTintColor = .darkGray\n        pageControl.addTarget(self, action: #selector(pageControlTapped(_:)), for: .valueChanged)\n\n        view.addSubview(pageControl)\n        pageControl.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            pageControl.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            pageControl.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -10)\n        ])\n    }\n\n    @objc private func pageControlTapped(_ sender: UIPageControl) {\n        // Handle page control tap event\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UIView with rounded corners and a shadow",
      "input": "",
      "output": "class CustomUIView: UIView {\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        configure()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        configure()\n    }\n\n    private func configure() {\n        layer.cornerRadius = 10\n        layer.masksToBounds = false\n        layer.shadowOpacity = 0.3\n        layer.shadowRadius = 4\n        layer.shadowOffset = CGSize(width: 0, height: 2)\n        layer.shadowColor = UIColor.black.cgColor\n    }\n}\n\nclass ViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        addCustomView()\n    }\n\n    private func addCustomView() {\n        let customView = CustomUIView(frame: CGRect(x: 50, y: 50, width: 200, height: 200))\n        customView.backgroundColor = .blue\n        view.addSubview(customView)\n    }\n}"
    },
    {
      "instruction": "Implement a custom UITableViewCell with a UIImageView and UILabel using Auto Layout programmatically.",
      "input": "",
      "output": "class CustomTableViewCell: UITableViewCell {\n\n    private lazy var customImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFill\n        return imageView\n    }()\n    \n    private lazy var customLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.numberOfLines = 0\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupSubviews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupSubviews() {\n        addSubview(customImageView)\n        addSubview(customLabel)\n        \n        NSLayoutConstraint.activate([\n            customImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 16),\n            customImageView.topAnchor.constraint(equalTo: topAnchor, constant: 8),\n            customImageView.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -8),\n            customImageView.widthAnchor.constraint(equalTo: customImageView.heightAnchor),\n            \n            customLabel.leadingAnchor.constraint(equalTo: customImageView.trailingAnchor, constant: 16),\n            customLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -16),\n            customLabel.topAnchor.constraint(equalTo: topAnchor, constant: 8),\n            customLabel.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -8),\n        ])\n    }\n}"
    },
    {
      "instruction": " Create a UIViewController with a UITextField and UIButton to perform a search operation.",
      "input": "",
      "output": "class SearchViewController: UIViewController {\n    \n    private lazy var textField: UITextField = {\n        let textField = UITextField()\n        textField.translatesAutoresizingMaskIntoConstraints = false\n        textField.placeholder = \"Search\"\n        textField.borderStyle = .roundedRect\n        return textField\n    }()\n    \n    private lazy var searchButton: UIButton = {\n        let button = UIButton(type: .system)\n        button.translatesAutoresizingMaskIntoConstraints = false\n        button.setTitle(\"Search\", for: .normal)\n        button.addTarget(self, action: #selector(searchButtonTapped), for: .touchUpInside)\n        return button\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupSubviews()\n    }\n    \n    private func setupSubviews() {\n        view.addSubview(textField)\n        view.addSubview(searchButton)\n        \n        NSLayoutConstraint.activate([\n            textField.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 16),\n            textField.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -16),\n            textField.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 16),\n            \n            searchButton.topAnchor.constraint(equalTo: textField.bottomAnchor, constant: 8),\n            searchButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n        ])\n    }\n    \n    @objc private func searchButtonTapped() {\n        print(\"Search button tapped, search for: \\(textField.text ?? \"\")\")\n    }\n}"
    },
    {
      "instruction": " Implement a UIViewController with a UICollectionView that displays images stored in an array.",
      "input": "",
      "output": "class ImageCollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    private let imageArray = [UIImage(named: \"image1\"), UIImage(named: \"image2\"), UIImage(named: \"image3\")]\n    \n    private lazy var collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .vertical\n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(ImageCollectionViewCell.self, forCellWithReuseIdentifier: \"ImageCell\")\n        return collectionView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupCollectionView()\n    }\n    \n    private func setupCollectionView() {\n        view.addSubview(collectionView)\n        \n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor)\n        ])\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return imageArray.count\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"ImageCell\", for: indexPath) as! ImageCollectionViewCell\n        cell.imageView.image = imageArray[indexPath.item]\n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        let width = collectionView.bounds.width / 2 - 10\n        return CGSize(width: width, height: width)\n    }\n}"
    },
    {
      "instruction": " Implement a UIViewController with a UIPickerViewthat displays an array of strings and prints the selected value.",
      "input": "",
      "output": "class PickerViewController: UIViewController, UIPickerViewDataSource, UIPickerViewDelegate {\n    \n    private let dataArray = [\"Option 1\", \"Option 2\", \"Option 3\", \"Option 4\", \"Option 5\"]\n    \n    private lazy var pickerView: UIPickerView = {\n        let pickerView = UIPickerView()\n        pickerView.translatesAutoresizingMaskIntoConstraints = false\n        pickerView.dataSource = self\n        pickerView.delegate = self\n        return pickerView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupPickerView()\n    }\n    \n    private func setupPickerView() {\n        view.addSubview(pickerView)\n        \n        NSLayoutConstraint.activate([\n            pickerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            pickerView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n        ])\n    }\n    \n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return dataArray.count\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return dataArray[row]\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        print(\"Selected value: \\(dataArray[row])\")\n    }\n}"
    },
    {
      "instruction": " Create a UIViewController with a UISwitch that changes the background color of the view when toggled.",
      "input": "",
      "output": "class SwitchViewController: UIViewController {\n    \n    private lazy var colorSwitch: UISwitch = {\n        let colorSwitch = UISwitch()\n        colorSwitch.translatesAutoresizingMaskIntoConstraints = false\n        colorSwitch.addTarget(self, action: #selector(switchToggled), for: .valueChanged)\n        return colorSwitch\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupColorSwitch()\n    }\n    \n    private func setupColorSwitch() {\n        view.addSubview(colorSwitch)\n        \n        NSLayoutConstraint.activate([\n            colorSwitch.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            colorSwitch.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n        ])\n    }\n    \n    @objc private func switchToggled() {\n        if colorSwitch.isOn {\n            view.backgroundColor = .blue\n        } else {\n            view.backgroundColor = .white\n        }\n    }\n}"
    },
    {
      "instruction": " Implement a UIViewController with a UISlider that adjusts the alpha value of a UIView.",
      "input": "",
      "output": "class SliderViewController: UIViewController {\n    \n    private lazy var alphaView: UIView = {\n        let view = UIView()\n        view.translatesAutoresizingMaskIntoConstraints = false\n        view.backgroundColor = .red\n        return view\n    }()\n    \n    private lazy var alphaSlider: UISlider = {\n        let slider = UISlider()\n        slider.translatesAutoresizingMaskIntoConstraints = false\n        slider.minimumValue = 0\n        slider.maximumValue = 1\n        slider.value = 1\n        slider.addTarget(self, action: #selector(sliderValueChanged), for: .valueChanged)\n        return slider\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupSubviews()\n    }\n    \n    private func setupSubviews() {\n        view.addSubview(alphaView)\n        view.addSubview(alphaSlider)\n        \n        NSLayoutConstraint.activate([\n            alphaView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            alphaView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            alphaView.widthAnchor.constraint(equalToConstant: 100),\n            alphaView.heightAnchor.constraint(equalToConstant: 100),\n            \n            alphaSlider.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            alphaSlider.topAnchor.constraint(equalTo: alphaView.bottomAnchor, constant: 16),\n            alphaSlider.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.8)\n        ])\n    }\n    \n    @objc private func sliderValueChanged() {\n        alphaView.alpha = CGFloat(alphaSlider.value)\n    }\n}"
    },
    {
      "instruction": " Create a UIViewController with a UIStepper that updates the value of a UILabel.",
      "input": "",
      "output": "class StepperViewController: UIViewController {\n    \n    private lazy var valueLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.text = \"0\"\n        return label\n    }()\n    \n    private lazy var valueStepper: UIStepper = {\n        let stepper = UIStepper()\n        stepper.translatesAutoresizingMaskIntoConstraints = false\n        stepper.addTarget(self, action: #selector(stepperValueChanged), for: .valueChanged)\n        return stepper\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupSubviews()\n    }\n    \n    private func setupSubviews() {\n        view.addSubview(valueLabel)\n        view.addSubview(valueStepper)\n        \n        NSLayoutConstraint.activate([\n            valueLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            valueLabel.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            \n            valueStepper.centerXAnchor.constraint(equalTo: view.centerX"
    },
    {
      "instruction": " Implement a custom UIView called CircularProgressBar that displays a circular progress bar with a customizable progress percentage, color, and thickness. Add the ability to animate the progress update.",
      "input": "import UIKit\n\nclass CircularProgressBar: UIView {\n    var progress: CGFloat\n    var progressColor: UIColor\n    var progressThickness: CGFloat\n}",
      "output": "class CircularProgressBar: UIView {\n    private var progressLayer: CAShapeLayer!\n    \n    var progress: CGFloat {\n        didSet {\n            setNeedsDisplay()\n        }\n    }\n    \n    var progressColor: UIColor {\n        didSet {\n            progressLayer.strokeColor = progressColor.cgColor\n        }\n    }\n    \n    var progressThickness: CGFloat {\n        didSet {\n            progressLayer.lineWidth = progressThickness\n        }\n    }\n    \n    override init(frame: CGRect) {\n        self.progress = 0\n        self.progressColor = .blue\n        self.progressThickness = 5\n        super.init(frame: frame)\n        setup()\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        self.progress = 0\n        self.progressColor = .blue\n        self.progressThickness = 5\n        super.init(coder: aDecoder)\n        setup()\n    }\n    \n    private func setup() {\n        progressLayer = CAShapeLayer()\n        progressLayer.strokeColor = progressColor.cgColor\n        progressLayer.lineWidth = progressThickness\n        progressLayer.fillColor = UIColor.clear.cgColor\n        progressLayer.lineCap = .round\n        layer.addSublayer(progressLayer)\n    }\n    \n    override func draw(_ rect: CGRect) {\n        let center = CGPoint(x: bounds.midX, y: bounds.midY)\n        let radius = min(bounds.width, bounds.height) / 2 - progressThickness / 2\n        let startAngle = CGFloat(-Double.pi / 2)\n        let endAngle = startAngle + 2 * CGFloat(Double.pi) * progress\n        \n        let path = UIBezierPath(arcCenter: center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)\n        progressLayer.path = path.cgPath\n    }\n    \n    func animateProgress(to value: CGFloat, duration: TimeInterval) {\n        progress = value\n        let animation = CABasicAnimation(keyPath: \"strokeEnd\")\n        animation.fromValue = 0\n        animation.toValue = value\n        animation.duration = duration\n        animation.isRemovedOnCompletion = false\n        animation.fillMode = .forwards\n        progressLayer.add(animation, forKey: \"progressAnimation\")\n    }\n}"
    },
    {
      "instruction": " Implement a Swift function called searchForContacts that searches the user's contact list for a contact with a given name, using the Contacts framework. The function should return an array of matching contacts.",
      "input": "import Contacts\n\nfunc searchForContacts(searchText: String) -> [CNContact] {\n}",
      "output": "import Contacts\n\nfunc searchForContacts(searchText: String) -> [CNContact] {\n    let contactStore = CNContactStore()\n    let keysToFetch = [CNContactGivenNameKey, CNContactFamilyNameKey] as [CNKeyDescriptor]\n    let predicate = CNContact.predicateForContacts(matchingName: searchText)\n    var matchingContacts: [CNContact] = []\n    \n    do {\n        matchingContacts = try contactStore.unifiedContacts(matching: predicate, keysToFetch: keysToFetch)\n    } catch let error as NSError {\n        print(\"Error searching for contacts: \\(error.localizedDescription)\")\n    }\n    \n    return matchingContacts\n}"
    },
    {
      "instruction": " Create a Swift function called showAlert that takes a UIViewController, a title, a message, and an array of UIAlertAction objects as parameters, and presents a UIAlertController with the given parameters on the UIViewController.",
      "input": "import UIKit\n\nfunc showAlert(on viewController: UIViewController, title: String, message: String, actions: [UIAlertAction]) {\n}",
      "output": "import UIKit\n\nfunc showAlert(on viewController: UIViewController, title: String, message: String, actions: [UIAlertAction]) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    for action in actions {\n        alertController.addAction(action)\n    }\n    \n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Implement a Swift function called saveImageToPhotoLibrary that saves a UIImage to the user's photo library using the Photos framework. The function should include a completion handler that returns an optional Error object.",
      "input": "import Photos\n\nfunc saveImageToPhotoLibrary(image: UIImage, completion: @escaping (Error?) -> Void) {\n}",
      "output": "import Photos\n\nfunc saveImageToPhotoLibrary(image: UIImage, completion: @escaping (Error?) -> Void) {\n    PHPhotoLibrary.requestAuthorization { status in\n        guard status == .authorized else {\n            completion(NSError(domain: \"PhotoLibrary\", code: 1, userInfo: [NSLocalizedDescriptionKey: \"Unauthorized access to photo library\"]))\n            return\n        }\n        \n        PHPhotoLibrary.shared().performChanges({\n            PHAssetChangeRequest.creationRequestForAsset(from: image)\n        }, completionHandler: { success, error in\n            DispatchQueue.main.async {\n                if success {\n                    completion(nil)\n                } else {\n                    completion(error)\n                }\n            }\n        })\n    }\n}"
    },
    {
      "instruction": " Implement a Swift function called getDeviceBatteryLevel that returns the current battery level of the device as a percentage. Use the UIDevice class to access the battery information.",
      "input": "import UIKit\n\nfunc getDeviceBatteryLevel() -> Float {\n}",
      "output": "import UIKit\n\nfunc getDeviceBatteryLevel() -> Float {\n    UIDevice.current.isBatteryMonitoringEnabled = true\n    let batteryLevel = UIDevice.current.batteryLevel\n    UIDevice.current.isBatteryMonitoringEnabled = false\n    \n    return batteryLevel * 100\n}"
    },
    {
      "instruction": " Create a Swift function called registerForRemoteNotifications that registers the app for remote notifications using the UserNotifications framework. The function should request authorization for alert, sound, and badge notification options.",
      "input": "import UserNotifications\n\nfunc registerForRemoteNotifications() {\n}",
      "output": "import UserNotifications\n\nfunc registerForRemoteNotifications() {\n    let center = UNUserNotificationCenter.current()\n    let options: UNAuthorizationOptions = [.alert, .sound, .badge]\n    \n    center.requestAuthorization(options: options) { granted, error in\n        if granted {\n            DispatchQueue.main.async {\n                UIApplication.shared.registerForRemoteNotifications()\n            }\n        } else {\n            print(\"Error requesting authorization for remote notifications: \\(String(describing: error?.localizedDescription))\")\n        }\n    }\n}"
    },
    {
      "instruction": " Implement a Swift function called getCurrentLocation that retrieves the user's current location using CoreLocation and returns a CLLocation object via a completion handler. The function should request the user's authorization for location services if necessary.",
      "input": "import CoreLocation\n\nfunc getCurrentLocation(completion: @escaping (CLLocation?) -> Void) {\n}",
      "output": "import CoreLocation\n\nfunc getCurrentLocation(completion: @escaping (CLLocation?) -> Void) {\n    let locationManager = CLLocationManager()\n    locationManager.desiredAccuracy = kCLLocationAccuracyBest\n    \n    let authorizationStatus = CLLocationManager.authorizationStatus()\n    if authorizationStatus == .notDetermined {\n        locationManager.requestWhenInUseAuthorization()\n    }\n    \n    guard authorizationStatus == .authorizedWhenInUse || authorizationStatus == .authorizedAlways else {\n        completion(nil)\n        return\n    }\n    \n    locationManager.requestLocation()\n    locationManager.startUpdatingLocation()\n    \n    locationManager.didUpdateLocations = { locations in\n        locationManager.stopUpdatingLocation()\n        completion(locations.first)\n    }\n    \n    locationManager.didFailWithError = { error in\n        print(\"Error retrieving location: \\(error.localizedDescription)\")\n        completion(nil)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that asynchronously downloads an image from a URL and sets it as the background image of a UIButton",
      "input": "",
      "output": "import UIKit\n\nextension UIButton {\n    func setBackgroundImageFrom(url: URL, forState state: UIControl.State) {\n        DispatchQueue.global().async {\n            if let data = try? Data(contentsOf: url), let image = UIImage(data: data) {\n                DispatchQueue.main.async {\n                    self.setBackgroundImage(image, for: state)\n                }\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that animates a UIView to fade in with a given duration",
      "input": "",
      "output": "import UIKit\n\nextension UIView {\n    func fadeIn(withDuration duration: TimeInterval) {\n        self.alpha = 0.0\n        UIView.animate(withDuration: duration) {\n            self.alpha = 1.0\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that registers a custom UITableViewCell class to a UITableView and dequeue it with an identifier",
      "input": "",
      "output": "import UIKit\n\nextension UITableView {\n    func registerAndDequeueCell<Cell: UITableViewCell>(withIdentifier identifier: String) -> Cell {\n        self.register(Cell.self, forCellReuseIdentifier: identifier)\n        let cell = self.dequeueReusableCell(withIdentifier: identifier) as! Cell\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that sets up a UIPickerView with a given array of items, including a custom UIPickerViewDelegate and UIPickerViewDataSource",
      "input": "",
      "output": "import UIKit\n\nclass PickerViewController: UIViewController, UIPickerViewDelegate, UIPickerViewDataSource {\n    var items: [String] = []\n\n    func setupPickerView(withArray array: [String], pickerView: UIPickerView) {\n        self.items = array\n        pickerView.delegate = self\n        pickerView.dataSource = self\n    }\n\n    // MARK: - UIPickerViewDataSource\n\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return items.count\n    }\n\n    // MARK: - UIPickerViewDelegate\n\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return items[row]\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that presents an UIAlertController with a title, message, and a list of UIAlertAction buttons with completion handlers",
      "input": "",
      "output": "import UIKit\n\nextension UIViewController {\n    func showAlert(title: String, message: String, actions: [(String, UIAlertAction.Style, ((UIAlertAction) -> Void)?)]) {\n        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n        for action in actions {\n            let alertAction = UIAlertAction(title: action.0, style: action.1, handler: action.2)\n            alertController.addAction(alertAction)\n        }\n        self.present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that initializes and configures a UICollectionView with a custom UICollectionViewFlowLayout, including a specified number of columns and cell spacing",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    var numberOfColumns: Int = 2\n    var cellSpacing: CGFloat = 8.0\n\n    func setupCollectionView() {\n        let layout = UICollectionViewFlowLayout()\n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.delegate = self\n        collectionView.dataSource = self\n        self.view.addSubview(collectionView)\n    }\n\n    // MARK: - UICollectionViewDelegateFlowLayout\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        let totalSpacing = (2 * cellSpacing) + CGFloat(numberOfColumns - 1) * cellSpacing\n        let width = (collectionView.bounds.width - totalSpacing) / CGFloat(numberOfColumns)\n        return CGSize(width: width, height: width)\n    }\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {\n        return cellSpacing\n    }\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {\n        return cellSpacing\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that validates and formats a given phone number string using libPhoneNumber-iOS library",
      "input": "",
      "output": "import libPhoneNumber_iOS\n\nfunc validateAndFormatPhoneNumber(phoneNumber: String, region: String) -> String? {\n    let phoneUtil = NBPhoneNumberUtil()\n    do {\n        let parsedNumber = try phoneUtil.parse(phoneNumber, defaultRegion: region)\n        if phoneUtil.isValidNumber(parsedNumber) {\n            return try phoneUtil.format(parsedNumber, numberFormat: .INTERNATIONAL)\n        } else {\n            return nil\n        }\n    } catch {\n        return nil\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that checks and asks for the user's permission to access their location using CLLocationManager",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n    \n    func checkAndRequestLocationPermission() {\n        locationManager.delegate = self\n        switch CLLocationManager.authorizationStatus() {\n        case .notDetermined:\n            locationManager.requestWhenInUseAuthorization()\n        case .restricted, .denied:\n            // Handle location services being disabled or restricted\n            break\n        case .authorizedAlways, .authorizedWhenInUse:\n            // Location services are available\n            break\n        @unknown default:\n            break\n        }\n    }\n\n    // MARK: - CLLocationManagerDelegate\n\n    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n        if status == .authorizedWhenInUse || status == .authorizedAlways {\n            // Location services are available\n        }\n    }\n}"
    },
    {
      "instruction": " Create a custom UIView subclass that presents a circular progress bar with a percentage label",
      "input": "",
      "output": "import UIKit\n\nclass CircularProgressView: UIView {\n    private var progressLayer = CAShapeLayer()\n    private var backgroundLayer = CAShapeLayer()\n    private let percentageLabel = UILabel()\n    \n    var progress: CGFloat = 0 {\n        didSet {\n            updateProgress()\n        }\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupLayers()\n        setupPercentageLabel()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupLayers()\n        setupPercentageLabel()\n    }\n    \n    private func setupLayers() {\n        backgroundLayer.strokeColor = UIColor.lightGray.cgColor\n        backgroundLayer.lineWidth = 10\n        backgroundLayer.fillColor = UIColor.clear.cgColor\n        layer.addSublayer(backgroundLayer)\n        \n        progressLayer.strokeColor = UIColor.red.cgColor\n        progressLayer.lineWidth = 10\n        progressLayer.fillColor = UIColor.clear.cgColor\n        progressLayer.lineCap = .round\n        layer.addSublayer(progressLayer)\n    }\n    \n    private func setupPercentageLabel() {\n        percentageLabel.textAlignment = .center\n        percentageLabel.font = UIFont.systemFont(ofSize: 20)\n        addSubview(percentageLabel)\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        backgroundLayer.frame = bounds\n        progressLayer.frame = bounds\n        percentageLabel.frame = bounds\n        \n        let center = CGPoint(x: bounds.midX, y: bounds.midY)\n        let radius = min(bounds.width, bounds.height) / 2 - progressLayer.lineWidth / 2\n        let startAngle = -CGFloat.pi / 2\n        let endAngle = startAngle + 2 * CGFloat.pi\n        \n        let backgroundPath = UIBezierPath(arcCenter: center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)\n        backgroundLayer.path = backgroundPath.cgPath\n        \n        let progressPath = UIBezierPath(arcCenter: center, radius: radius, startAngle: startAngle, endAngle: startAngle + progress * 2 * CGFloat.pi, clockwise: true)\n        progressLayer.path = progressPath.cgPath\n    }\n    \n    private func updateProgress() {\n        let progressPath = UIBezierPath(arcCenter: CGPoint(x: bounds.midX, y: bounds.midY), radius: min(bounds.width, bounds.height) / 2 - progressLayer.lineWidth / 2, startAngle: -CGFloat.pi / 2, endAngle: -CGFloat.pi / 2 + progress * 2 * CGFloat.pi, clockwise: true)\n        progressLayer.path = progressPath.cgPath\n        percentageLabel.text = String(format: \"%.0f%%\", progress * 100)\n    }\n}"
    },
    {
      "instruction": " Write a function that fetches and parses JSON data from a URL and displays it in a UITableView",
      "input": "",
      "output": "import UIKit\n\nstruct Item: Decodable {\n    let title: String\n    let description: String\n}\n\nclass ItemListTableViewController: UITableViewController {\n    private var items: [Item] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        fetchData()\n    }\n    \n    private func fetchData() {\n        let urlString = \"https://example.com/items.json\"\n        guard let url = URL(string: urlString) else { return }\n        \n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            if let error = error {\n                print(\"Error fetching data: \\(error.localizedDescription)\")\n                return\n            }\n            \n            guard let data = data else { return }\n            \n            do {\n                let items = try JSONDecoder().decode([Item].self, from: data)\n                DispatchQueue.main.async {\n                    self.items = items\n                    self.tableView.reloadData()\n                }\n            } catch {\n                print(\"Error decoding JSON: \\(error.localizedDescription)\")\n            }\n        }.resume()\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"ItemCell\", for: indexPath)\n        let item = items[indexPath.row]\n        cell.textLabel?.text = item.title\n        cell.detailTextLabel?.text = item.description\n        return cell\n    }\n}"
    },
    {
      "instruction": " Create a custom UIPickerView that displays a list of countries, allowing the user to select their country",
      "input": "",
      "output": "import UIKit\n\nclass CountryPickerView: UIPickerView, UIPickerViewDataSource, UIPickerViewDelegate {\n    private let countries = [\"United States\", \"United Kingdom\", \"Canada\", \"France\", \"Germany\", \"Japan\", \"Australia\", \"Brazil\", \"China\", \"India\"]\n    \n    var selectedCountry: String {\n        return countries[selectedRow(inComponent: 0)]\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupPickerView()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupPickerView()\n    }\n    \n    private func setupPickerView() {\n        self.dataSource = self\n        self.delegate = self\n    }\n    \n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return countries.count\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return countries[row]\n    }\n}"
    },
    {
      "instruction": " Write a function that saves an image to the user's photo library",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToPhotoLibrary(_ image: UIImage) {\n    PHPhotoLibrary.requestAuthorization { status in\n        if status == .authorized {\n            PHPhotoLibrary.shared().performChanges({\n                PHAssetChangeRequest.creationRequestForAsset(from: image)\n            }, completionHandler: { success, error in\n                if success {\n                    print(\"Image saved to photo library\")\n                } else {\n                    print(\"Error saving image: \\(String(describing: error?.localizedDescription))\")\n                }\n            })\n        } else {\n            print(\"Photo library access not granted\")\n        }\n    }\n}"
    },
    {
      "instruction": " Create a custom UISlider that changes its thumb image when the value changes",
      "input": "",
      "output": "import UIKit\n\nclass CustomSlider: UISlider {\n    private var thumbImages: [UIImage] = [] // Add your thumb images to this array\n    \n    override func awakeFromNib() {\n        super.awakeFromNib()\n        addTarget(self, action: #selector(valueChanged), for: .valueChanged)\n        updateThumbImage()\n    }\n    \n    @objc private func valueChanged() {\n        updateThumbImage()\n    }\n    \n    private func updateThumbImage() {\n        let index = Int(value * Float(thumbImages.count - 1))\n        setThumbImage(thumbImages[index], for: .normal)\n    }\n}"
    },
    {
      "instruction": " Implement a UIViewController that plays a video from a remote URL using AVPlayer",
      "input": "",
      "output": "import UIKit\nimport AVFoundation\n\nclass VideoPlayerViewController: UIViewController {\n    private var player: AVPlayer?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupPlayer()\n    }\n    \n    private func setupPlayer() {\n        guard let url = URL(string: \"https://example.com/video.mp4\") else { return }\n        let playerItem = AVPlayerItem(url: url)\n        player = AVPlayer(playerItem: playerItem)\n        \n        let playerLayer = AVPlayerLayer(player: player)\n        playerLayer.frame = view.bounds\n        playerLayer.videoGravity = .resizeAspect\n        view.layer.addSublayer(playerLayer)\n        \n        player?.play()\n    }\n    \n    override func viewWillDisappear(_ animated: Bool) {\n        super.viewWillDisappear(animated)\n        player?.pause()\n    }\n}"
    },
    {
      "instruction": " Create a custom UISearchBar with a clear button that resets the search query",
      "input": "",
      "output": "import UIKit\n\nclass CustomSearchBar: UISearchBar {\n    private let clearButton: UIButton = {\n        let button = UIButton(type: .system)\n        button.setTitle(\"Clear\", for: .normal)\n        button.addTarget(self, action: #selector(clearButtonTapped), for: .touchUpInside)\n        return button\n    }()\n    \n   "
    },
    {
      "instruction": "Write a Swift function to register a custom UICollectionViewCell in a UICollectionView",
      "input": "",
      "output": "func registerCustomCell(collectionView: UICollectionView, cellIdentifier: String, nibName: String) {\n    let nib = UINib(nibName: nibName, bundle: nil)\n    collectionView.register(nib, forCellWithReuseIdentifier: cellIdentifier)\n}"
    },
    {
      "instruction": " Create a Swift function to download an image from a URL and display it in a UIImageView",
      "input": "",
      "output": "func downloadImage(from url: URL, imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let data = data, let image = UIImage(data: data) {\n            DispatchQueue.main.async {\n                imageView.image = image\n            }\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " Write a Swift function to create a gradient background for a UIView",
      "input": "",
      "output": "func createGradientBackground(view: UIView, startColor: UIColor, endColor: UIColor) {\n    let gradientLayer = CAGradientLayer()\n    gradientLayer.frame = view.bounds\n    gradientLayer.colors = [startColor.cgColor, endColor.cgColor]\n    gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n    gradientLayer.endPoint = CGPoint(x: 1, y: 1)\n    view.layer.insertSublayer(gradientLayer, at: 0)\n}"
    },
    {
      "instruction": " Write a Swift function to create a circular progress bar",
      "input": "",
      "output": "func createCircularProgressBar(view: UIView, progress: CGFloat, lineWidth: CGFloat, trackColor: UIColor, progressColor: UIColor) {\n    let circlePath = UIBezierPath(arcCenter: view.center, radius: (view.bounds.width - lineWidth) / 2, startAngle: -.pi / 2, endAngle: 2 * .pi * progress - .pi / 2, clockwise: true)\n    \n    let trackLayer = CAShapeLayer()\n    trackLayer.path = circlePath.cgPath\n    trackLayer.strokeColor = trackColor.cgColor\n    trackLayer.lineWidth = lineWidth\n    trackLayer.fillColor = UIColor.clear.cgColor\n    view.layer.addSublayer(trackLayer)\n    \n    let progressLayer = CAShapeLayer()\n    progressLayer.path = circlePath.cgPath\n    progressLayer.strokeColor = progressColor.cgColor\n    progressLayer.lineWidth = lineWidth\n    progressLayer.fillColor = UIColor.clear.cgColor\n    progressLayer.lineCap = .round\n    progressLayer.strokeEnd = progress\n    view.layer.addSublayer(progressLayer)\n}"
    },
    {
      "instruction": " Write a Swift function to create a UITableView with automatic cell height",
      "input": "",
      "output": "func setupTableViewWithAutomaticCellHeight(tableView: UITableView) {\n    tableView.rowHeight = UITableView.automaticDimension\n    tableView.estimatedRowHeight = 44\n}"
    },
    {
      "instruction": " Write a Swift function to create a UISearchBar and add it to a UITableViewController's navigation bar",
      "input": "",
      "output": "func addSearchBarToNavigationBar(controller: UITableViewController) {\n    let searchBar = UISearchBar()\n    searchBar.sizeToFit()\n    controller.navigationItem.titleView = searchBar\n}"
    },
    {
      "instruction": " Write a Swift function to create a UIButton with rounded corners and a custom background color",
      "input": "",
      "output": "func createRoundedButton(button: UIButton, cornerRadius: CGFloat, backgroundColor: UIColor) {\n    button.layer.cornerRadius = cornerRadius\n    button.layer.masksToBounds = true\n    button.backgroundColor = backgroundColor\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UIPickerView with a specified height",
      "input": "",
      "output": "func createCustomPickerView(height: CGFloat) -> UIPickerView {\n    let pickerView = UIPickerView()\n    pickerView.translatesAutoresizingMaskIntoConstraints = false\n    pickerView.heightAnchor.constraint(equalToConstant: height).isActive = true\n    return pickerView\n}"
    },
    {
      "instruction": " Write a Swift function to download an image from a URL and set it to an UIImageView",
      "input": "",
      "output": "import UIKit\n\nextension UIImageView {\n    func downloadImage(from url: URL, completion: ((UIImage?) -> Void)? = nil) {\n        URLSession.shared.dataTask(with: url) { (data, response, error) in\n            guard let data = data, error == nil, let image = UIImage(data: data) else {\n                DispatchQueue.main.async { completion?(nil) }\n                return\n            }\n            \n            DispatchQueue.main.async {\n                self.image = image\n                completion?(image)\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to request user's location and update a UILabel with the current city name",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n    let locationLabel = UILabel()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        locationManager.delegate = self\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.desiredAccuracy = kCLLocationAccuracyKilometer\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        guard let location = locations.last else { return }\n        locationManager.stopUpdatingLocation()\n        CLGeocoder().reverseGeocodeLocation(location) { (placemarks, error) in\n            if let error = error {\n                print(\"Error: \\(error.localizedDescription)\")\n            } else if let placemark = placemarks?.first {\n                DispatchQueue.main.async {\n                    self.locationLabel.text = placemark.locality\n                }\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a UICollectionView with a custom UICollectionViewCell with an image and a label",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UICollectionViewController, UICollectionViewDelegateFlowLayout {\n    private let reuseIdentifier = \"CustomCell\"\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: reuseIdentifier)\n        collectionView.backgroundColor = .white\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return dataSource.count\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        cell.customImageView.image = UIImage(named: dataSource[indexPath.item].imageName)\n        cell.customLabel.text = dataSource[indexPath.item].title\n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: view.frame.width / 2 - 16, height: view.frame.width / 2 - 16)\n    }\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let customImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let customLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        addSubview(customImageView)\n        addSubview(customLabel)\n        \n        NSLayoutConstraint.activate([\n            customImageView.topAnchor.constraint(equalTo: topAnchor),\n            customImageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            customImageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            customImageView.heightAnchor.constraint(equalTo: widthAnchor),\n            \n            customLabel.topAnchor.constraint(equalTo: customImageView.bottomAnchor, constant: 8),\n            customLabel.leadingAnchor.constraint(equalTo: leadingAnchor),\n           customLabel.trailingAnchor.constraint(equalTo: trailingAnchor),\n            customLabel.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to authenticate users with Apple Sign In",
      "input": "",
      "output": "import AuthenticationServices\nimport UIKit\n\nclass AppleSignInViewController: UIViewController, ASAuthorizationControllerDelegate {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupAppleSignInButton()\n    }\n\n    func setupAppleSignInButton() {\n        let appleSignInButton = ASAuthorizationAppleIDButton()\n        appleSignInButton.translatesAutoresizingMaskIntoConstraints = false\n        appleSignInButton.addTarget(self, action: #selector(handleAppleSignInTapped), for: .touchUpInside)\n\n        view.addSubview(appleSignInButton)\n\n        NSLayoutConstraint.activate([\n            appleSignInButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            appleSignInButton.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            appleSignInButton.widthAnchor.constraint(equalToConstant: 200),\n            appleSignInButton.heightAnchor.constraint(equalToConstant: 40)\n        ])\n    }\n\n    @objc func handleAppleSignInTapped() {\n        let appleIDProvider = ASAuthorizationAppleIDProvider()\n        let request = appleIDProvider.createRequest()\n        request.requestedScopes = [.fullName, .email]\n\n        let authorizationController = ASAuthorizationController(authorizationRequests: [request])\n        authorizationController.delegate = self\n        authorizationController.performRequests()\n    }\n\n    func authorizationController(controller: ASAuthorizationController, didCompleteWithAuthorization authorization: ASAuthorization) {\n        guard let appleIDCredential = authorization.credential as? ASAuthorizationAppleIDCredential else { return }\n        // Handle the received data (full name, email, user identifier) as needed.\n    }\n\n    func authorizationController(controller: ASAuthorizationController, didCompleteWithError error: Error) {\n        // Handle error.\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to play an audio file using AVFoundation",
      "input": "",
      "output": "import AVFoundation\nimport UIKit\n\nclass AudioPlayerViewController: UIViewController {\n    var audioPlayer: AVAudioPlayer?\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupAudioPlayer()\n    }\n\n    func setupAudioPlayer() {\n        guard let audioURL = Bundle.main.url(forResource: \"example\", withExtension: \"mp3\") else { return }\n\n        do {\n            audioPlayer = try AVAudioPlayer(contentsOf: audioURL)\n        } catch {\n            print(\"Error: \\(error)\")\n        }\n    }\n\n    func playAudio() {\n        audioPlayer?.play()\n    }\n\n    func pauseAudio() {\n        audioPlayer?.pause()\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to display a modal view controller with a custom transition",
      "input": "",
      "output": "import UIKit\n\nclass CustomTransitionViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupModalButton()\n    }\n\n    func setupModalButton() {\n        let showModalButton = UIButton(type: .system)\n        showModalButton.setTitle(\"Show Modal\", for: .normal)\n        showModalButton.addTarget(self, action: #selector(showModalTapped), for: .touchUpInside)\n        showModalButton.translatesAutoresizingMaskIntoConstraints = false\n\n        view.addSubview(showModalButton)\n\n        NSLayoutConstraint.activate([\n            showModalButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            showModalButton.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n\n    @objc func showModalTapped() {\n        let modalViewController = ModalViewController()\n        modalViewController.modalPresentationStyle = .custom\n        modalViewController.transitioningDelegate = self\n        present(modalViewController, animated: true, completion: nil)\n    }\n}\n\nextension CustomTransitionViewController: UIViewControllerTransitioningDelegate {\n    func animationController(forPresented presented: UIViewController, presenting: UIViewController, source: UIViewController) -> UIViewControllerAnimatedTransitioning? {\n        return CustomPresentAnimationController()\n    }\n\n    func animationController(forDismissed dismissed: UIViewController) -> UIViewControllerAnimatedTransitioning? {\n        return CustomDismissAnimationController()\n    }\n}\n\nclass CustomPresentAnimationController: NSObject, UIViewControllerAnimatedTransitioning {\n    func transitionDuration(using transitionContext: UIViewControllerContextTransitioning?) -> TimeInterval {\n        return 0.5\n    }\n\n    func animateTransition(using transitionContext: UIViewControllerContextTransitioning) {\n        guard let toViewController = transitionContext.viewController(forKey: .to),\n              let toView = transitionContext.view(forKey: .to) else { return }\n\n        let containerView = transitionContext.containerView\n        containerView.addSubview(toView)\n        toView.frame = CGRect(x: 0, y: containerView.bounds.height, width: containerView.bounds.width, height: containerView.bounds.height)"
    },
    {
      "instruction": " Write a Swift UITableView with custom UITableViewCell that displays a list of names and their corresponding images.",
      "input": "",
      "output": "import UIKit\n\nstruct Person {\n    let name: String\n    let imageURL: URL\n}\n\nclass CustomTableViewCell: UITableViewCell {\n    static let identifier = \"CustomTableViewCell\"\n    \n    private lazy var nameLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    private lazy var personImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFit\n        return imageView\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        contentView.addSubview(nameLabel)\n        contentView.addSubview(personImageView)\n        setupConstraints()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            personImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 8),\n            personImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            personImageView.widthAnchor.constraint(equalToConstant: 50),\n            personImageView.heightAnchor.constraint(equalToConstant: 50),\n            \n            nameLabel.leadingAnchor.constraint(equalTo: personImageView.trailingAnchor, constant: 8),\n            nameLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -8),\n            nameLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n        ])\n    }\n    \n    func configure(with person: Person) {\n        nameLabel.text = person.name\n        URLSession.shared.dataTask(with: person.imageURL) { [weak self] data, _, _ in\n            guard let data = data else { return }\n            DispatchQueue.main.async {\n                self?.personImageView.image = UIImage(data: data)\n            }\n        }.resume()\n    }\n    \n}\n\nclass NamesViewController: UITableViewController {\n    private let people: [Person] = [\n        // Populate with Person objects\n    ]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: CustomTableViewCell.identifier)\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return people.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: CustomTableViewCell.identifier, for: indexPath) as! CustomTableViewCell\n        cell.configure(with: people[indexPath.row])\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that uses CoreLocation to get the current user's location and display it as an annotation on an MKMapView.",
      "input": "",
      "output": "import UIKit\nimport MapKit\nimport CoreLocation\n\nclass MapViewController: UIViewController, CLLocationManagerDelegate {\n    private lazy var mapView: MKMapView = {\n        let mapView = MKMapView()\n        mapView.translatesAutoresizingMaskIntoConstraints = false\n        return mapView\n    }()\n    \n    private let locationManager = CLLocationManager()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        view.addSubview(mapView)\n        setupConstraints()\n        setupLocationManager()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            mapView.topAnchor.constraint(equalTo: view.topAnchor),\n            mapView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            mapView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            mapView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    private func setupLocationManager() {\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        guard let location = locations.last else { return }\n       let center = CLLocationCoordinate2D(latitude: location.coordinate.latitude, longitude: location.coordinate.longitude)\n        let region = MKCoordinateRegion(center: center, latitudinalMeters: 1000, longitudinalMeters: 1000)\n        mapView.setRegion(region, animated: true)\n        \n        let annotation = MKPointAnnotation()\n        annotation.coordinate = center\n        annotation.title = \"Current Location\"\n        mapView.addAnnotation(annotation)\n    }\n    \n}"
    },
    {
      "instruction": " Write a Swift function that retrieves data from a REST API, decodes it using JSONDecoder, and populates a UITableView with the results.",
      "input": "",
      "output": "import UIKit\n\nstruct APIResponse: Codable {\n    let items: [Item]\n}\n\nstruct Item: Codable {\n    let title: String\n}\n\nclass APIItemsViewController: UITableViewController {\n    \n    private var items: [Item] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"cell\")\n        fetchData()\n    }\n    \n    private func fetchData() {\n        guard let url = URL(string: \"https://api.example.com/items\") else { return }\n        URLSession.shared.dataTask(with: url) { [weak self] data, _, error in\n            guard let data = data, error == nil else { return }\n            \n            do {\n                let response = try JSONDecoder().decode(APIResponse.self, from: data)\n                DispatchQueue.main.async {\n                    self?.items = response.items\n                    self?.tableView.reloadData()\n                }\n            } catch {\n                print(\"Error decoding JSON: \\(error)\")\n            }\n        }.resume()\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        cell.textLabel?.text = items[indexPath.row].title\n        return cell\n    }\n    \n}"
    },
    {
      "instruction": " Write a Swift function that plays an audio file using AVFoundation.",
      "input": "",
      "output": "import UIKit\nimport AVFoundation\n\nclass AudioPlayerViewController: UIViewController {\n    \n    private var player: AVAudioPlayer?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupAudioPlayer()\n    }\n    \n    private func setupAudioPlayer() {\n        guard let url = Bundle.main.url(forResource: \"example\", withExtension: \"mp3\") else { return }\n        \n        do {\n            player = try AVAudioPlayer(contentsOf: url)\n            player?.prepareToPlay()\n            player?.play()\n        } catch {\n            print(\"Error initializing audio player: \\(error)\")\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that implements a basic authentication flow using Firebase Authentication.",
      "input": "",
      "output": "import UIKit\nimport FirebaseAuth\n\nclass AuthenticationViewController: UIViewController {\n    \n    private lazy var emailTextField: UITextField = {\n        let textField = UITextField()\n        textField.translatesAutoresizingMaskIntoConstraints = false\n        textField.placeholder = \"Email\"\n        return textField\n    }()\n    \n    private lazy var passwordTextField: UITextField = {\n        let textField = UITextField()\n        textField.translatesAutoresizingMaskIntoConstraints = false\n        textField.placeholder = \"Password\"\n        textField.isSecureTextEntry = true\n        return textField\n    }()\n    \n    private lazy var signInButton: UIButton = {\n        let button = UIButton(type: .system)\n        button.translatesAutoresizingMaskIntoConstraints = false\n        button.setTitle(\"Sign In\", for: .normal)\n        button.addTarget(self, action: #selector(signIn), for: .touchUpInside)\n        return button\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(emailTextField)\n        view.addSubview(passwordTextField)\n        view.addSubview(signInButton)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            emailTextField.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            emailTextField.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),\n            emailTextField.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),\n            emailTextField.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),\n            \n            passwordTextField.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            passwordTextField.topAnchor.constraint(equalTo: emailTextField.bottomAnchor, constant: 10),\n            passwordTextField.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),\n            passwordTextField.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),\n            \n            signInButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            signInButton.topAnchor.constraint(equalTo: passwordTextField.bottomAnchor, constant: 20),\n        ])\n    }\n    \n    @objc private func signIn() {\n        guard let email = emailTextField.text, let password = passwordTextField.text else { return }\n        \n        Auth.auth().signIn(withEmail: email, password: password) { [weak self] result, error in\n            if let error = error {\n                print(\"Error signing in: \\("
    },
    {
      "instruction": " Write a Swift function to download an image from a URL and display it in a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass ImageDownloader {\n    static let shared = ImageDownloader()\n    private init() {}\n\n    func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            guard let data = data, error == nil else {\n                completion(nil)\n                return\n            }\n            DispatchQueue.main.async {\n                completion(UIImage(data: data))\n            }\n        }.resume()\n    }\n}\n\n// Usage:\nlet imageUrl = URL(string: \"https://example.com/image.jpg\")!\nlet imageView = UIImageView()\nImageDownloader.shared.downloadImage(from: imageUrl) { image in\n    imageView.image = image\n}"
    },
    {
      "instruction": " Write a Swift function to store and retrieve user preferences using UserDefaults.",
      "input": "",
      "output": "import Foundation\n\nclass UserPreferences {\n    private let userDefaults = UserDefaults.standard\n\n    func setUserName(_ name: String) {\n        userDefaults.set(name, forKey: \"userName\")\n    }\n\n    func getUserName() -> String? {\n        return userDefaults.string(forKey: \"userName\")\n    }\n\n    func setDarkModeEnabled(_ isEnabled: Bool) {\n        userDefaults.set(isEnabled, forKey: \"darkModeEnabled\")\n    }\n\n    func isDarkModeEnabled() -> Bool {\n        return userDefaults.bool(forKey: \"darkModeEnabled\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement a custom UICollectionViewCell with a UIImageView and a UILabel.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView = {\n        let iv = UIImageView()\n        iv.contentMode = .scaleAspectFill\n        iv.clipsToBounds = true\n        return iv\n    }()\n\n    let label: UILabel = {\n        let label = UILabel()\n        label.textAlignment = .center\n        return label\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n\n        addSubview(imageView)\n        addSubview(label)\n\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        label.translatesAutoresizingMaskIntoConstraints = false\n\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.heightAnchor.constraint(equalTo: heightAnchor, multiplier: 0.7),\n\n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            label.leadingAnchor.constraint(equalTo: leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: trailingAnchor),\n            label.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a UIAlertController with a text field and two actions: \"Save\" and \"Cancel\".",
      "input": "",
      "output": "import UIKit\n\nfunc presentAlertControllerWithTextField() {\n    let alertController = UIAlertController(title: \"Enter Text\", message: nil, preferredStyle: .alert)\n\n    alertController.addTextField { textField in\n        textField.placeholder = \"Enter some text\"\n    }\n\n    let saveAction = UIAlertAction(title: \"Save\", style: .default) { _ in\n        if let textField = alertController.textFields?.first, let text = textField.text {\n            print(\"Text entered: \\(text)\")\n        }\n    }\n\n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n\n    alertController.addAction(saveAction)\n    alertController.addAction(cancelAction)\n\n    self.present(alertController, animated: true, completion: nil)\n}\n\n// Usage:\n// Call this function inside a view controller to present the alert controller\npresentAlertControllerWithTextField()"
    },
    {
      "instruction": " Write a Swift function to handle the navigation between two view controllers using a UINavigationController.",
      "input": "",
      "output": "import UIKit\n\nclass FirstViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .white\n\n        let button = UIButton(type: .system)\n        button.setTitle(\"Go to Second View\", for: .normal)\n        button.addTarget(self, action: #selector(goToSecondView), for: .touchUpInside)\n\n        view.addSubview(button)\n        button.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            button.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            button.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n\n    @objc func goToSecondView() {\n        let secondViewController = SecondViewController()\n        navigationController?.pushViewController(secondViewController, animated: true)\n    }\n}\n\nclass SecondViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.backgroundColor = .green\n        title = \"Second View\"\n    }\n}\n\n// Usage:\n// In the AppDelegate.swift or SceneDelegate.swift, set the root view controller as follows:\nlet viewController = FirstViewController()\nlet navigationController = UINavigationController(rootViewController: viewController)\nwindow?.rootViewController = navigationController"
    },
    {
      "instruction": " Write a Swift function to create a custom UIButton and handle its touchUpInside event.",
      "input": "",
      "output": "import UIKit\n\nclass CustomButton: UIButton {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setTitle(\"Custom Button\", for: .normal)\n        setTitleColor(.white, for: .normal)\n        backgroundColor = .blue\n        addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    @objc private func buttonTapped() {\n        print(\"Custom button tapped\")\n    }\n}\n\n// Usage:\n// Add the custom button to a view controller's view\nlet customButton = CustomButton()\nview.addSubview(customButton)\ncustomButton.translatesAutoresizingMaskIntoConstraints = false\nNSLayoutConstraint.activate([\n    customButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n    customButton.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n])"
    },
    {
      "instruction": " Write a Swift function to create a custom UIView with a gradient background.",
      "input": "",
      "output": "import UIKit\n\nclass GradientView: UIView {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        addGradientBackground()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        addGradientBackground()\n    }\n\n    private func addGradientBackground() {\n        let gradientLayer = CAGradientLayer()\n        gradientLayer.frame = bounds\n        gradientLayer.colors = [UIColor.red.cgColor, UIColor.blue.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 1)\n        layer.insertSublayer(gradientLayer, at: 0)\n    }\n}\n\n// Usage:\n// Add the custom gradient view to a view controller's view\nlet gradientView = GradientView()\nview.addSubview(gradientView)\ngradientView.translatesAutoresizingMaskIntoConstraints = false\nNSLayoutConstraint.activate([\n    gradientView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n    gradientView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n    gradientView.topAnchor.constraint(equalTo: view.topAnchor),\n    gradientView.bottomAnchor.constraint(equalTo: view.bottomAnchor)\n])"
    },
    {
      "instruction": " Write a Swift function to authenticate a user using biometric authentication.",
      "input": "",
      "output": "import LocalAuthentication\n\nfunc authenticateUser(completion: @escaping (Bool) -> Void) {\n    let context = LAContext()\n    var error: NSError?\n    \n    if context.canEvaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, error: &error) {\n        context.evaluatePolicy(.deviceOwnerAuthenticationWithBiometrics, localizedReason: \"Please authenticate\") { success, authenticationError in\n            DispatchQueue.main.async {\n                if success {\n                    completion(true)\n                } else {\n                    completion(false)\n                }\n            }\n        }\n    } else {\n        DispatchQueue.main.async {\n            completion(false)\n        }\n    }\n}"
    },
    {
      "instruction": " Implement a UICollectionView with custom UICollectionViewCell.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    \n    private lazy var collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.backgroundColor = .white\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n        return collectionView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(collectionView)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 20\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        cell.configure(with: \"Item \\(indexPath.row + 1)\")\n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: collectionView.bounds.width / 2 - 10, height: collectionView.bounds.width / 2 - 10)\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {\n        return 10\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {\n        return 10\n    }\n    \n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    \n    private lazy var label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textAlignment = .center\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(label)\n        setupConstraints()\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            label.topAnchor.constraint(equalTo: contentView.topAnchor),\n            label.bottomAnchor.constraint(equalTo: contentView.bottomAnchor),\n            label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: contentView.trailingAnchor)\n        ])\n    }\n    \n    func configure(with text: String) {\n        label.text = text\n    }\n    \n}"
    },
    {
      "instruction": " Implement a pull-to-refresh functionality in a UITableView.",
      "input": "",
      "output": "import UIKit\n\nclass RefreshTableViewController: UITableViewController {\n    \n    private let cellReuseIdentifier = \"RefreshCell\"\n    \n    private var data: [String] = [\"Item 1\", \"Item 2\", \"Item 3\"]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)\n        setupRefreshControl()\n    }\n    \n    private func setupRefreshControl() {\n        let refreshControl = UIRefreshControl()\n        refreshControl.addTarget(self, action: #selector(refreshData), for: .valueChanged)\n        tableView.refreshControl = refreshControl\n    }\n    \n    @objc private func refreshData() {\n        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {\n            self.data = [\"New Item 1\", \"New Item 2\", \"New Item 3\"]\n            self.tableView.reloadData()\n            self.tableView.refreshControl?.endRefreshing()\n        }\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier, for: indexPath)\n        cell.textLabel?.text = data[indexPath.row]\n        return cell\n    }\n    \n}"
    },
    {
      "instruction": " Implement a custom UIAlert with a text field.",
      "input": "",
      "output": "import UIKit\n\nclass CustomAlertViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    @IBAction func showAlertButtonTapped(_ sender: UIButton) {\n        showCustomAlert()\n    }\n    \n    func showCustomAlert() {\n        let alertController = UIAlertController(title: \"Custom Alert\", message: \"Enter text:\", preferredStyle: .alert)\n        \n        alertController.addTextField { (textField) in\n            textField.placeholder = \"Enter text here\"\n        }\n        \n        let confirmAction = UIAlertAction(title: \"Confirm\", style: .default) { (_) in\n            if let textField = alertController.textFields?.first {\n                print(\"Text: \\(textField.text ?? \"\")\")\n            }\n        }\n        \n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n        \n        alertController.addAction(confirmAction)\n        alertController.addAction(cancelAction)\n        \n        present(alertController, animated: true, completion: nil)\n    }\n    \n}"
    },
    {
      "instruction": " Implement a search functionality in a UITableView.",
      "input": "",
      "output": "import UIKit\n\nclass SearchTableViewController: UITableViewController, UISearchBarDelegate {\n    \n    private let cellReuseIdentifier = \"SearchCell\"\n    \n    private let data: [String] = [\"Apple\", \"Banana\", \"Cherry\", \"Grape\", \"Lemon\", \"Mango\", \"Orange\", \"Peach\", \"Plum\", \"Strawberry\", \"Watermelon\"]\n    private var filteredData: [String] = []\n    \n    private lazy var searchBar: UISearchBar = {\n        let searchBar = UISearchBar()\n        searchBar.delegate = self\n        return searchBar\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)\n        tableView.tableHeaderView = searchBar\n        \n        filteredData = data\n    }\n    \n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredData = data\n        } else {\n            filteredData = data.filter { $0.lowercased().contains(searchText.lowercased()) }\n        }\n        tableView.reloadData()\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredData.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier, for: indexPath)\n        cell.textLabel?.text = filteredData[indexPath.row]\n        return cell\n    }\n    \n}"
    },
    {
      "instruction": " Implement a function to request and parse a JSON response using URLSession and Codable.",
      "input": "",
      "output": "import Foundation\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let username: String\n    let email: String\n}\n\nfunc fetchUsers(completion: @escaping ([User]?) -> Void) {\n    let url = URL(string: \"https://jsonplaceholder.typicode.com/users\")!\n    \n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            completion(nil)\n            return\n        }\n        \n        do {\n            let users = try JSONDecoder().decode([User].self, from: data)\n            completion(users)\n        } catch {\n            print(\"Error decoding JSON: \\(error.localizedDescription)\")\n            completion(nil)\n        }\n    }.resume"
    },
    {
      "instruction": " Write a Swift function to implement pull-to-refresh functionality in a UITableView",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    @IBOutlet weak var tableView: UITableView!\n\n    private let refreshControl = UIRefreshControl()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        tableView.delegate = self\n        setupRefreshControl()\n    }\n\n    private func setupRefreshControl() {\n        tableView.refreshControl = refreshControl\n        refreshControl.addTarget(self, action: #selector(refreshData(_:)), for: .valueChanged)\n    }\n\n    @objc private func refreshData(_ sender: Any) {\n        // Call your data fetching method here\n        // After fetching data, end refreshing\n        refreshControl.endRefreshing()\n    }\n\n    // UITableViewDataSource and UITableViewDelegate methods\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UICollectionViewCell with a UIImageView and UILabel",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n\n    let label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupImageView()\n        setupLabel()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupImageView() {\n        addSubview(imageView)\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.heightAnchor.constraint(equalTo: heightAnchor, multiplier: 0.6)\n        ])\n    }\n\n    private func setupLabel() {\n        addSubview(label)\n        NSLayoutConstraint.activate([\n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            label.leadingAnchor.constraint(equalTo: leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: trailingAnchor),\n            label.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to handle push notifications and present an alert when a notification is received",
      "input": "",
      "output": "import UIKit\nimport UserNotifications\n\nclass NotificationHandler: NSObject, UNUserNotificationCenterDelegate {\n\n    func userNotificationCenter(_ center: UNUserNotificationCenter,\n                                willPresent notification: UNNotification,\n                                withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {\n        let alert = UIAlertController(title: \"Notification Received\", message: notification.request.content.body, preferredStyle: .alert)\n        alert.addAction(UIAlertAction(title: \"OK\", style: .default, handler: nil))\n        UIApplication.shared.keyWindow?.rootViewController?.present(alert, animated: true, completion: nil)\n        completionHandler([.banner, .sound])\n    }\n}\n\n// In AppDelegate.swift\n// func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n//     let center = UNUserNotificationCenter.current()\n//     center.delegate = NotificationHandler()\n//     center.requestAuthorization(options: [.alert, .sound]) { granted, error in\n//         // Handle authorization\n//     }\n//     return true\n// }"
    },
    {
      "instruction": " Write a Swift function to save data to UserDefaults and retrieve it later",
      "input": "",
      "output": "class UserDefaultsHelper {\n    static let shared = UserDefaultsHelper()\n    private let userDefaults = UserDefaults.standard\n    private let key = \"savedData\"\n\n    func saveData(_ data: String) {\n        userDefaults.set(data, forKey: key)\n    }\n\n    func retrieveData() -> String? {\n        return userDefaults.string(forKey: key)\n    }\n}\n\n// Usage:\n// UserDefaultsHelper.shared.saveData(\"Example data\")\n// let retrievedData = UserDefaultsHelper.shared.retrieveData()"
    },
    {
      "instruction": " Write a Swift function to create a UIStackView with multiple buttons",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    private let buttonTitles = [\"Button 1\", \"Button 2\", \"Button3\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupStackView()\n    }\n\n    private func setupStackView() {\n        let stackView = UIStackView()\n        stackView.axis = .vertical\n        stackView.distribution = .fillEqually\n        stackView.spacing = 10\n        stackView.translatesAutoresizingMaskIntoConstraints = false\n\n        for title in buttonTitles {\n            let button = UIButton(type: .system)\n            button.setTitle(title, for: .normal)\n            button.addTarget(self, action: #selector(buttonTapped(_:)), for: .touchUpInside)\n            stackView.addArrangedSubview(button)\n        }\n\n        view.addSubview(stackView)\n\n        NSLayoutConstraint.activate([\n            stackView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            stackView.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            stackView.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.5)\n        ])\n    }\n\n    @objc private func buttonTapped(_ sender: UIButton) {\n        print(\"Button tapped: \\(sender.titleLabel?.text ?? \"Unknown\")\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement a search bar in a UITableView",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate, UISearchBarDelegate {\n    @IBOutlet weak var tableView: UITableView!\n    @IBOutlet weak var searchBar: UISearchBar!\n\n    var data: [String] = [\"Apple\", \"Banana\", \"Orange\", \"Pineapple\", \"Strawberry\"]\n    var filteredData: [String] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        tableView.delegate = self\n        searchBar.delegate = self\n        filteredData = data\n    }\n\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredData = data\n        } else {\n            filteredData = data.filter { $0.lowercased().contains(searchText.lowercased()) }\n        }\n        tableView.reloadData()\n    }\n\n    // UITableViewDataSource and UITableViewDelegate methods\n}"
    },
    {
      "instruction": " Write a Swift function to request and handle location updates using CoreLocation",
      "input": "",
      "output": "import UIKit\nimport CoreLocation\n\nclass ViewController: UIViewController, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupLocationManager()\n    }\n\n    private func setupLocationManager() {\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n        if status == .authorizedWhenInUse {\n            locationManager.startUpdatingLocation()\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            print(\"Latitude: \\(location.coordinate.latitude), Longitude: \\(location.coordinate.longitude)\")\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that downloads an image from a URL and sets it to a UIImageView",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil else {\n            completion(nil)\n            return\n        }\n        completion(UIImage(data: data))\n    }.resume()\n}\n\nfunc setImage(url: URL, imageView: UIImageView) {\n    downloadImage(from: url) { image in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to handle user location updates using CLLocationManager",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManagerDelegate: NSObject, CLLocationManagerDelegate {\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            print(\"Current location: \\(location)\")\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Location update failed: \\(error.localizedDescription)\")\n    }\n}\n\nclass LocationHandler: NSObject {\n    private let locationManager = CLLocationManager()\n    private let delegate = LocationManagerDelegate()\n\n    override init() {\n        super.init()\n        locationManager.delegate = delegate\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n    }\n\n    func requestLocationPermission() {\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    func startUpdatingLocation() {\n        locationManager.startUpdatingLocation()\n    }\n\n    func stopUpdatingLocation() {\n        locationManager.stopUpdatingLocation()\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a UICollectionView with a custom UICollectionViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // Add custom UI elements and constraints here\n}\n\nclass CustomCollectionViewController: UICollectionViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return dataList.count\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        let data = dataList[indexPath.row]\n        // Configure the custom cell with data\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement a UIPickerView with a custom data source",
      "input": "",
      "output": "import UIKit\n\nclass CustomPickerViewDataSource: NSObject, UIPickerViewDataSource, UIPickerViewDelegate {\n    let dataList: [String]\n\n    init(dataList: [String]) {\n        self.dataList = dataList\n    }\n\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return dataList.count\n    }\n\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return dataList[row]\n    }\n\n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        print(\"Selected: \\(dataList[row])\")\n    }\n}\n\nclass CustomPickerViewController: UIViewController {\n    let pickerView = UIPickerView()\n    let pickerViewDataSource: CustomPickerViewDataSource\n\n    init(dataList: [String]) {\n        self.pickerViewDataSource = CustomPickerViewDataSource(dataList: dataList)\n        super.init(nibName: nil, bundle: nil)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        pickerView.dataSource= pickerViewDataSource\n        pickerView.delegate = pickerViewDataSource\n        view.addSubview(pickerView)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that adds a UITextField with a custom delegate to handle text changes",
      "input": "",
      "output": "import UIKit\n\nclass CustomTextFieldDelegate: NSObject, UITextFieldDelegate {\n    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {\n        // Handle text changes\n        print(\"Text changed: \\(string)\")\n        return true\n    }\n}\n\nclass CustomTextFieldViewController: UIViewController {\n    let textField = UITextField()\n    let textFieldDelegate = CustomTextFieldDelegate()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        textField.delegate = textFieldDelegate\n        view.addSubview(textField)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that sends an HTTP GET request to a URL and handles JSON response",
      "input": "",
      "output": "import Foundation\n\nfunc sendGetRequest(url: URL, completion: @escaping (Result<Data, Error>) -> Void) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        if let data = data {\n            completion(.success(data))\n        }\n    }.resume()\n}\n\nfunc handleJSONResponse(data: Data) {\n    do {\n        let jsonObject = try JSONSerialization.jsonObject(with: data, options: [])\n        print(\"JSON Object: \\(jsonObject)\")\n    } catch {\n        print(\"Error: \\(error)\")\n    }\n}\n\nif let url = URL(string: \"https://jsonplaceholder.typicode.com/todos/1\") {\n    sendGetRequest(url: url) { result in\n        switch result {\n        case .success(let data):\n            handleJSONResponse(data: data)\n        case .failure(let error):\n            print(\"Error: \\(error)\")\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that adds a UITapGestureRecognizer to a UIView and handles the tap gesture",
      "input": "",
      "output": "import UIKit\n\nclass CustomTapGestureRecognizer: UITapGestureRecognizer {\n    var action: (() -> Void)?\n\n    @objc func handleTap() {\n        action?()\n    }\n}\n\nclass CustomTapGestureViewController: UIViewController {\n    let customView = UIView()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        let tapGestureRecognizer = CustomTapGestureRecognizer(target: self, action: #selector(handleTapGesture))\n        tapGestureRecognizer.action = {\n            print(\"View tapped\")\n        }\n        customView.addGestureRecognizer(tapGestureRecognizer)\n        view.addSubview(customView)\n    }\n\n    @objc func handleTapGesture(sender: UITapGestureRecognizer) {\n        sender.action?()\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that takes a URL as input and downloads an image, then sets it as the content of a UIImageView passed as a parameter.",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, to imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            print(\"Error downloading image: \\(String(describing: error))\")\n            return\n        }\n        DispatchQueue.main.async {\n            imageView.image = UIImage(data: data)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " Write a Swift function to implement a simple login flow using a username and password.",
      "input": "",
      "output": "import UIKit\n\nfunc loginUser(username: String, password: String, completion: @escaping (Bool, String?) -> Void) {\n    let url = URL(string: \"https://your-api/login\")!\n    var request = URLRequest(url: url)\n    request.httpMethod = \"POST\"\n    \n    let body = \"username=\\(username)&password=\\(password)\"\n    request.httpBody = body.data(using: .utf8)\n    \n    let task = URLSession.shared.dataTask(with: request) { data, response, error in\n        guard let data = data, error == nil,\n              let httpResponse = response as? HTTPURLResponse,\n              httpResponse.statusCode == 200 else {\n            completion(false, \"Request failed: \\(String(describing: error))\")\n            return\n        }\n        \n        do {\n            let json = try JSONSerialization.jsonObject(with: data, options: [])\n            guard let jsonObject = json as? [String: Any],\n                  let token = jsonObject[\"token\"] as? String else {\n                completion(false, \"Invalid response\")\n                return\n            }\n            completion(true, token)\n        } catch {\n            completion(false, \"Error parsing response\")\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " Write a Swift function that takes a UITableView and an array of data, then populates the table view using a custom UITableViewCell.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    @IBOutlet weak var titleLabel: UILabel!\n    @IBOutlet weak var subtitleLabel: UILabel!\n}\n\nfunc populateTableView(tableView: UITableView, data: [(String, String)]) {\n    tableView.register(UINib(nibName: \"CustomTableViewCell\", bundle: nil), forCellReuseIdentifier: \"CustomCell\")\n    \n    let dataSource = UITableViewDataSource.self\n    tableView.dataSource = dataSource\n    \n    dataSource.numberOfRowsInSection = { _ in\n        return data.count\n    }\n    \n    dataSource.cellForRow = { tableView, indexPath in\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomCell\", for: indexPath) as! CustomTableViewCell\n        let item = data[indexPath.row]\n        cell.titleLabel.text = item.0\n        cell.subtitleLabel.text = item.1\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom progress bar using a UIView and CALayer.",
      "input": "",
      "output": "import UIKit\n\nclass CustomProgressBar: UIView {\n    \n    private let progressLayer = CALayer()\n\n    var progress: CGFloat = 0 {\n        didSet {\n            setNeedsLayout()\n        }\n    }\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup()\n    }\n\n    private func setup() {\n        layer.addSublayer(progressLayer)\n        progressLayer.backgroundColor = UIColor.systemBlue.cgColor\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        progressLayer.frame = CGRect(x: 0, y: 0, width: bounds.width * progress, height: bounds.height)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UIAlertController with a text field, and return the text entered by the user.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlertWithTextField(title: String, message: String, viewController: UIViewController, completion: @escaping (String?) -> Void) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    alertController.addTextField { textField in\n        textField.placeholder = \"Enter text\"\n    }\n    \n    let submitAction = UIAlertAction(title: \"Submit\", style: .default) { _ in\n        let textField = alertController.textFields![0]\n        completion(textField.text)\n    }\n    \n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel) { _ in\n        completion(nil)\n    }\n    \n    alertController.addAction(submitAction)\n    alertController.addAction(cancelAction)\n    viewController.present(alertController, animated: true)\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UIPickerView and handle the selection of items.",
      "input": "<noinput",
      "output": "import UIKit\n\nclass CustomPickerViewController: UIViewController, UIPickerViewDelegate, UIPickerViewDataSource {\n    \n    let pickerView = UIPickerView()\n    let data = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\"]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        pickerView.delegate = self\n        pickerView.dataSource = self\n        view.addSubview(pickerView)\n        pickerView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            pickerView.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            pickerView.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n        ])\n    }\n    \n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return data.count\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return data[row]\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        print(\"Selected item: \\(data[row])\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement a simple UICollectionView with custom UICollectionViewCell and display the images from an array of URLs.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n}\n\nclass CustomCollectionViewController: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource {\n    @IBOutlet weak var collectionView: UICollectionView!\n    let imageUrls = [\n        URL(string: \"https://example.com/image1.jpg\")!,\n        URL(string: \"https://example.com/image2.jpg\")!,\n        URL(string: \"https://example.com/image3.jpg\")!\n    ]\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.delegate = self\n        collectionView.dataSource = self\n        collectionView.register(UINib(nibName: \"CustomCollectionViewCell\", bundle: nil), forCellWithReuseIdentifier: \"CustomCell\")\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return imageUrls.count\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        let imageUrl = imageUrls[indexPath.row]\n        downloadImage(from: imageUrl, to: cell.imageView)\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement a custom UISlider with a minimum and maximum value, and update a UILabel with the current value.",
      "input": "",
      "output": "import UIKit\n\nclass SliderViewController: UIViewController {\n    @IBOutlet weak var slider: UISlider!\n    @IBOutlet weak var valueLabel: UILabel!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        slider.minimumValue = 0\n        slider.maximumValue = 100\n        slider.addTarget(self, action: #selector(sliderValueChanged(_:)), for: .valueChanged)\n    }\n    \n    @objc func sliderValueChanged(_ sender: UISlider) {\n        let currentValue = Int(sender.value)\n        valueLabel.text = \"Value: \\(currentValue)\"\n    }\n}"
    },
    {
      "instruction": " Write a custom UIView subclass that renders a circular progress bar with a configurable percentage.",
      "input": "",
      "output": "import UIKit\n\nclass CircularProgressView: UIView {\n    \n    private var progressLayer = CAShapeLayer()\n    \n    @IBInspectable var progress: CGFloat = 0 {\n        didSet {\n            setNeedsDisplay()\n        }\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupProgressLayer()\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        setupProgressLayer()\n    }\n    \n    private func setupProgressLayer() {\n        progressLayer.strokeColor = UIColor.blue.cgColor\n        progressLayer.fillColor = UIColor.clear.cgColor\n        progressLayer.lineWidth = 5\n        layer.addSublayer(progressLayer)\n    }\n    \n    override func draw(_ rect: CGRect) {\n        let center = CGPoint(x: bounds.midX, y: bounds.midY)\n        let radius = min(bounds.width, bounds.height) / 2 - progressLayer.lineWidth / 2\n        let startAngle = -CGFloat.pi / 2\n        let endAngle = startAngle + 2 * CGFloat.pi * progress\n        \n        let path = UIBezierPath(arcCenter: center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)\n        progressLayer.path = path.cgPath\n    }\n}"
    },
    {
      "instruction": " Create an extension for UIColor that allows the instantiation of colors using hexadecimal values.",
      "input": "",
      "output": "import UIKit\n\nextension UIColor {\n    convenience init(hex: Int, alpha: CGFloat = 1.0) {\n        let red = CGFloat((hex >> 16) & 0xFF) / 255.0\n        let green = CGFloat((hex >> 8) & 0xFF) / 255.0\n        let blue = CGFloat(hex & 0xFF) / 255.0\n        self.init(red: red, green: green, blue: blue, alpha: alpha)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that asynchronously downloads an image from a URL and sets it as the image of a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc setImage(from url: URL, to imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil else {\n            return\n        }\n        DispatchQueue.main.async {\n            imageView.image = UIImage(data: data)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " Implement a Swift function that takes a string and returns the number of occurrences of a specified character.",
      "input": "",
      "output": "func countOccurrences(of character: Character, in string: String) -> Int {\n    return string.reduce(0) { count, currentCharacter in\n        return count + (currentCharacter == character ? 1 : 0)\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to asynchronously download an image from a URL and set it to a UIImageView in a UITableViewCell",
      "input": "",
      "output": "import UIKit\n\nclass ImageDownloader {\n    static let shared = ImageDownloader()\n    private init() {}\n    \n    func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n        URLSession.shared.dataTask(with: url) { data, _, _ in\n            guard let data = data, let image = UIImage(data: data) else {\n                completion(nil)\n                return\n            }\n            DispatchQueue.main.async {\n                completion(image)\n            }\n        }.resume()\n    }\n}\n\nextension UITableViewCell {\n    func setImage(from url: URL) {\n        ImageDownloader.shared.downloadImage(from: url) { [weak self] image in\n            guard let self = self, let image = image else { return }\n            self.imageView?.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIButton with rounded corners, custom background color, and title",
      "input": "",
      "output": "import UIKit\n\nfunc createRoundedButton(title: String, backgroundColor: UIColor, cornerRadius: CGFloat) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.backgroundColor = backgroundColor\n    button.layer.cornerRadius = cornerRadius\n    button.clipsToBounds = true\n    return button\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIAlertController with a title, message, and actions",
      "input": "",
      "output": "import UIKit\n\nfunc createAlertController(title: String, message: String, actions: [UIAlertAction]) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    actions.forEach { action in\n        alertController.addAction(action)\n    }\n    return alertController\n}"
    },
    {
      "instruction": " \nWrite a Swift function to present a UIImagePickerController with a specified source type and delegate",
      "input": "",
      "output": "import UIKit\n\nfunc presentImagePickerController(sourceType: UIImagePickerController.SourceType, delegate: (UIImagePickerControllerDelegate & UINavigationControllerDelegate), viewController: UIViewController) {\n    guard UIImagePickerController.isSourceTypeAvailable(sourceType) else { return }\n    let imagePickerController = UIImagePickerController()\n    imagePickerController.sourceType = sourceType\n    imagePickerController.delegate = delegate\n    viewController.present(imagePickerController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to register a custom UICollectionViewCell to a UICollectionView",
      "input": "",
      "output": "import UIKit\n\nfunc registerCustomCell(_ collectionView: UICollectionView, cellIdentifier: String) {\n    let nib = UINib(nibName: cellIdentifier, bundle: nil)\n    collectionView.register(nib, forCellWithReuseIdentifier: cellIdentifier)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIView with a specified frame, background color, and corner radius",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomView(frame: CGRect, backgroundColor: UIColor, cornerRadius: CGFloat) -> UIView {\n    let customView = UIView(frame: frame)\n    customView.backgroundColor = backgroundColor\n    customView.layer.cornerRadius = cornerRadius\n    customView.clipsToBounds = true\n    return customView\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIBarButtonItem with a custom image, target, and action",
      "input": "",
      "output": "import UIKit\n\nfunc createBarButtonItem(image: UIImage, target: Any, action: Selector) -> UIBarButtonItem {\n    let barButtonItem = UIBarButtonItem(image: image, style: .plain, target: target, action: action)\n    return barButtonItem\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a gradient background for a UIView",
      "input": "",
      "output": "import UIKit\n\nfunc createGradientBackground(view: UIView, colors: [CGColor], startPoint: CGPoint, endPoint: CGPoint) {\n    let gradientLayer = CAGradientLayer()\n    gradientLayer.frame = view.bounds\n    gradientLayer.colors = colors\n    gradientLayer.startPoint = startPoint\n    gradientLayer.endPoint = endPoint\n    view.layer.insertSublayer(gradientLayer, at: 0)\n}"
    },
    {
      "instruction": "Create a custom UIView subclass that displays a circular progress bar.",
      "input": "",
      "output": "import UIKit\n\nclass CircularProgressView: UIView {\n    private var progressLayer = CAShapeLayer()\n    private var backgroundLayer = CAShapeLayer()\n    private(set) var progress: CGFloat = 0\n    \n    var lineWidth: CGFloat = 10 {\n        didSet {\n            updateLayers()\n        }\n    }\n    \n    var progressColor: UIColor = .blue {\n        didSet {\n            progressLayer.strokeColor = progressColor.cgColor\n        }\n    }\n    \n    var backgroundColor: UIColor = .lightGray {\n        didSet {\n            backgroundLayer.strokeColor = backgroundColor.cgColor\n        }\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupLayers()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupLayers()\n    }\n    \n    private func setupLayers() {\n        backgroundLayer.strokeColor = backgroundColor.cgColor\n        backgroundLayer.fillColor = nil\n        backgroundLayer.lineCap = .round\n        layer.addSublayer(backgroundLayer)\n        \n        progressLayer.strokeColor = progressColor.cgColor\n        progressLayer.fillColor = nil\n        progressLayer.lineCap = .round\n        layer.addSublayer(progressLayer)\n        \n        updateLayers()\n    }\n    \n    private func updateLayers() {\n        backgroundLayer.lineWidth = lineWidth\n        progressLayer.lineWidth = lineWidth\n        \n        let center = CGPoint(x: bounds.midX, y: bounds.midY)\n        let radius = min(bounds.width, bounds.height) / 2 - lineWidth / 2\n        let startAngle: CGFloat = -.pi / 2\n        let endAngle: CGFloat = startAngle + 2 * .pi\n        \n        let path = UIBezierPath(arcCenter: center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)\n        backgroundLayer.path = path.cgPath\n        \n        let progressPath = UIBezierPath(arcCenter: center, radius: radius, startAngle: startAngle, endAngle: startAngle + 2 * .pi * progress, clockwise: true)\n        progressLayer.path = progressPath.cgPath\n    }\n    \n    func setProgress(_ progress: CGFloat, animated: Bool) {\n        self.progress = min(max(progress, 0), 1)\n        let endAngle: CGFloat = -.pi / 2 + 2 * .pi * self.progress\n        let center = CGPoint(x: bounds.midX, y: bounds.midY)\n        let radius = min(bounds.width, bounds.height) / 2 - lineWidth / 2\n        \n        if animated {\n            let animation = CABasicAnimation(keyPath: \"path\")\n            animation.fromValue = progressLayer.path\n            let newPath = UIBezierPath(arcCenter: center, radius: radius, startAngle: -.pi / 2, endAngle: endAngle, clockwise: true)\n            animation.toValue = newPath.cgPath\n            animation.duration = 0.25\n            progressLayer.add(animation, forKey: \"path\")\n        }\n        \n        let progressPath = UIBezierPath(arcCenter: center, radius: radius, startAngle: -.pi / 2, endAngle: endAngle, clockwise: true)\n        progressLayer.path = progressPath.cgPath\n    }\n    \n    override func layoutSubviews() {\n        super.layoutSubviews()\n        backgroundLayer.frame = bounds\n        progressLayer.frame = bounds\n        updateLayers()\n    }\n}"
    },
    {
      "instruction": " Create a TableViewDataSource class that can be initialized with a custom cell configuration closure.",
      "input": "",
      "output": "import UIKit\n\nclass TableViewDataSource<T, Cell: UITableViewCell>: NSObject, UITableViewDataSource {\n    private let items: [T]\n    private let reuseIdentifier: String\n    private let configureCell: (Cell, T) -> Void\n    \n    init(items: [T], reuseIdentifier: String, configureCell: @escaping (Cell, T) -> Void) {\n        self.items = items\n        self.reuseIdentifier = reuseIdentifier\n        self.configureCell = configureCell\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: reuseIdentifier, for: indexPath) as! Cell\n        let item = items[indexPath.row]\n        configureCell(cell, item)\n        return cell\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to register a UITableViewCell subclass with a UITableView using a custom identifier",
      "input": "",
      "output": "func registerCustomTableViewCell(tableView: UITableView, cellClass: UITableViewCell.Type, reuseIdentifier: String) {\n    tableView.register(cellClass, forCellReuseIdentifier: reuseIdentifier)\n}\n\n// Usage:\n// registerCustomTableViewCell(tableView: myTableView, cellClass: CustomTableViewCell.self, reuseIdentifier: \"CustomCell\")"
    },
    {
      "instruction": " Write a Swift function to add a blur effect to a UIView using UIVisualEffectView",
      "input": "",
      "output": "func addBlurEffect(to view: UIView, style: UIBlurEffect.Style) {\n    let blurEffect = UIBlurEffect(style: style)\n    let blurEffectView = UIVisualEffectView(effect: blurEffect)\n    blurEffectView.frame = view.bounds\n    blurEffectView.autoresizingMask = [.flexibleWidth, .flexibleHeight]\n    view.addSubview(blurEffectView)\n}\n\n// Usage:\n// addBlurEffect(to: myView, style: .light)"
    },
    {
      "instruction": " Write a Swift function to round the corners of a UIView using CALayer and a specified corner radius",
      "input": "",
      "output": "func roundCorners(view: UIView, cornerRadius: CGFloat) {\n    view.layer.cornerRadius = cornerRadius\n    view.clipsToBounds = true\n}\n\n// Usage:\n// roundCorners(view: myView, cornerRadius: 10)"
    },
    {
      "instruction": " Write a Swift function to create and present a UIAlertController with a text field and a save button",
      "input": "",
      "output": "func presentAlertControllerWithTextField(title: String, message: String, saveActionHandler: @escaping (String) -> Void) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n\n    alertController.addTextField { textField in\n        textField.placeholder = \"Enter text\"\n    }\n\n    let saveAction = UIAlertAction(title: \"Save\", style: .default) { _ in\n        if let textField = alertController.textFields?.first, let text = textField.text {\n            saveActionHandler(text)\n        }\n    }\n    alertController.addAction(saveAction)\n\n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel)\n    alertController.addAction(cancelAction)\n\n    self.present(alertController, animated: true)\n}\n\n// Usage:\n// presentAlertControllerWithTextField(title: \"Enter Text\", message: \"Please enter your text\") { text in\n//     print(\"Entered text: \\(text)\")\n// }"
    },
    {
      "instruction": " Write a Swift function to create and configure a UIStackView with an array of UIButtons",
      "input": "",
      "output": "func createStackViewWithButtons(buttons: [UIButton], axis: NSLayoutConstraint.Axis, distribution: UIStackView.Distribution, spacing: CGFloat) -> UIStackView {\n    let stackView = UIStackView(arrangedSubviews: buttons)\n    stackView.axis = axis\n    stackView.distribution = distribution\n    stackView.spacing = spacing\n    return stackView\n}\n\n// Usage:\n// let buttons = [UIButton(title: \"Button 1\"), UIButton(title: \"Button 2\"), UIButton(title: \"Button 3\")]\n// let stackView = createStackViewWithButtons(buttons: buttons, axis: .horizontal, distribution: .fillEqually, spacing: 10)"
    },
    {
      "instruction": " Write a Swift function to animate a UIView's background color using UIViewPropertyAnimator",
      "input": "",
      "output": "func animateBackgroundColor(view: UIView, to color: UIColor, duration: TimeInterval) {\n    let animator = UIViewPropertyAnimator(duration: duration, curve: .linear) {\n        view.backgroundColor = color\n    }\n    animator.startAnimation()\n}\n\n// Usage:\n// animateBackgroundColor(view: myView, to: .red, duration: 1.0)"
    },
    {
      "instruction": " Write a Swift function to create a UIBarButtonItem with a custom image and a target action",
      "input": "",
      "output": "func createBarButtonItem(image: UIImage, target: Any, action: Selector) -> UIBarButtonItem {\n    let button = UIButton(type: .custom)\n    button.setImage(image, for: .normal)\n    button.addTarget(target, action: action, for: .touchUpInside)\n    return UIBarButtonItem(customView: button)\n}\n\n// Usage:\n// let customBarButton = createBarButtonItem(image: UIImage(named: \"customImage\")!, target: self, action: #selector(customButtonTapped))"
    },
    {
      "instruction": " Write a Swift function to programmatically create a UICollectionView with a specified layout",
      "input": "",
      "output": "func createCollectionView(frame: CGRect, collectionViewLayout: UICollectionViewLayout) -> UICollectionView {\n   let collectionView = UICollectionView(frame: frame, collectionViewLayout: collectionViewLayout)\n    collectionView.backgroundColor = .clear\n    collectionView.showsVerticalScrollIndicator = false\n    collectionView.showsHorizontalScrollIndicator = false\n    return collectionView\n}\n\n// Usage:\n// let layout = UICollectionViewFlowLayout()\n// layout.scrollDirection = .horizontal\n// let collectionView = createCollectionView(frame: view.bounds, collectionViewLayout: layout)"
    },
    {
      "instruction": "Create a custom UITableViewCell with an image, a title, and a subtitle.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n\n    private lazy var cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    private lazy var titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    private lazy var subtitleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textColor = .gray\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        \n        contentView.addSubview(cellImageView)\n        contentView.addSubview(titleLabel)\n        contentView.addSubview(subtitleLabel)\n        \n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            cellImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            cellImageView.widthAnchor.constraint(equalToConstant: 50),\n            cellImageView.heightAnchor.constraint(equalToConstant: 50),\n            \n            titleLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 16),\n            titleLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 16),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\n            \n            subtitleLabel.leadingAnchor.constraint(equalTo: titleLabel.leadingAnchor),\n            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 8),\n            subtitleLabel.trailingAnchor.constraint(equalTo: titleLabel.trailingAnchor),\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " Implement a simple notification center in Swift.",
      "input": "",
      "output": "import Foundation\n\nclass NotificationCenter {\n\n    static let shared = NotificationCenter()\n    \n    private var observers: [String: [(AnyObject, Selector)]] = [:]\n\n    private init() {}\n    \n    func addObserver(_ observer: AnyObject, selector: Selector, name: String) {\n        if observers[name] == nil {\n            observers[name] = []\n        }\n        observers[name]?.append((observer, selector))\n    }\n    \n    func removeObserver(_ observer: AnyObject, name: String) {\n        observers[name]?.removeAll(where: { $0.0 === observer })\n    }\n    \n    func post(name: String) {\n        observers[name]?.forEach { observer, selector in\n            _ = observer.perform(selector)\n        }\n    }\n}"
    },
    {
      "instruction": " Implement a Swift function to filter an array of integers to only even numbers using a closure.",
      "input": "",
      "output": "func filterEvenNumbers(from numbers: [Int], completion: ([Int]) -> Void) {\n    let evenNumbers = numbers.filter { $0 % 2 == 0 }\n    completion(evenNumbers)\n}\n\nlet numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nfilterEvenNumbers(from: numbers) { evenNumbers in\n    print(evenNumbers)\n}"
    },
    {
      "instruction": " Implement a Swift function that downloads an image from a URL and sets it to a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nextension UIImageView {\n    func setImage(from url: URL, completionHandler: ((UIImage?) -> Void)? = nil) {\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            guard let data = data, error == nil, let image = UIImage(data: data) else {\n                completionHandler?(nil)\n                return\n            }\n            \n            DispatchQueue.main.async {\n                self.image = image\n                completionHandler?(image)\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " Implement a Swift function that saves data to UserDefaults.",
      "input": "",
      "output": "import Foundation\n\nfunc saveData<T: Codable>(_ data: T, forKey key: String) {\n    let encoder = JSONEncoder()\n    if let encodedData = try? encoder.encode(data) {\n        UserDefaults.standard.set(encodedData, forKey: key)\n    }\n}"
    },
    {
      "instruction": " Implement a Swift function that retrieves data from UserDefaults.",
      "input": "",
      "output": "import Foundation\n\nfunc retrieveData<T: Codable>(forKey key: String, ofType type: T.Type) -> T? {\n    if let data = UserDefaults.standard.data(forKey: key) {\n        let decoder = JSONDecoder()\n        return try? decoder.decode(type, from: data)\n    }\n    return nil\n}"
    },
    {
      "instruction": " Implement a simple custom view with rounded corners and a shadow in Swift.",
      "input": "",
      "output": "import UIKit\n\nclass RoundedShadowView: UIView {\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup    }\n    \n    private func setup() {\n        layer.cornerRadius = 10\n        layer.shadowColor = UIColor.black.cgColor\n        layer.shadowOffset = CGSize(width: 0, height: 2)\n        layer.shadowRadius = 4\n        layer.shadowOpacity = 0.3\n    }\n}"
    },
    {
      "instruction": " Create a Swift function that takes a UICollectionView and an array of images and displays them in the collection view.",
      "input": "",
      "output": "import UIKit\n\nclass ImageCollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    \n    private let images: [UIImage]\n    private let collectionView: UICollectionView\n    \n    init(images: [UIImage]) {\n        self.images = images\n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .vertical\n        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        \n        super.init(nibName: nil, bundle: nil)\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupCollectionView()\n    }\n    \n    private func setupCollectionView() {\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(ImageCollectionViewCell.self, forCellWithReuseIdentifier: \"ImageCell\")\n        collectionView.backgroundColor = .white\n        \n        view.addSubview(collectionView)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            collectionView.topAnchor.constraint(equalTo: view.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor)\n        ])\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return images.count\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"ImageCell\", for: indexPath) as! ImageCollectionViewCell\n        cell.imageView.image = images[indexPath.item]\n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        let width = collectionView.bounds.width / 2 - 10\n        return CGSize(width: width, height: width)\n    }\n}\n\nclass ImageCollectionViewCell: UICollectionViewCell {\n    \n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(imageView)\n        NSLayoutConstraint.activate([\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to request user's location permission and start updating location",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n\n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n    }\n\n    func requestLocationPermission() {\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    func startUpdatingLocation() {\n        locationManager.startUpdatingLocation()\n    }\n\n    // CLLocationManagerDelegate methods\n\n    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {\n        if status == .authorizedWhenInUse {\n            startUpdatingLocation()\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        // Handle location updates\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to add a custom UIButton with rounded corners to a view programmatically",
      "input": "",
      "output": "import UIKit\n\nclass CustomButton: UIButton {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        self.setupButton()\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        self.setupButton()\n    }\n\n    func setupButton() {\n        self.backgroundColor = .systemBlue\n        self.setTitle(\"Custom Button\", for: .normal)\n        self.layer.cornerRadius = self.frame.size.height / 2\n    }\n}\n\nclass ViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        let customButton = CustomButton(frame: CGRect(x: 100, y: 100, width: 200, height: 50))\n        self.view.addSubview(customButton)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to programmatically create and present a UIAlertController with a text field and a submit button",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    func presentAlertController() {\n        let alertController = UIAlertController(title: \"Enter Text\", message: nil, preferredStyle: .alert)\n        alertController.addTextField { textField in\n            textField.placeholder = \"Type here...\"\n        }\n\n        let submitAction = UIAlertAction(title: \"Submit\", style: .default) { _ in\n            if let textField = alertController.textFields?.first, let text = textField.text {\n                // Handle submitted text\n            }\n        }\n\n        alertController.addAction(submitAction)\n        self.present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to download and cache an image from a URL using URLSession and store it in a UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass ImageDownloader {\n    static let shared = ImageDownloader()\n    private let imageCache = NSCache<NSURL, UIImage>()\n\n    func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n        if let cachedImage = imageCache.object(forKey: url as NSURL) {\n            completion(cachedImage)\n            return\n        }\n\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            guard let data = data, error == nil, let image = UIImage(data: data) else {\n                completion(nil)\n                return\n            }\n            self.imageCache.setObject(image, forKey: url as NSURL)\n            completion(image)\n        }.resume()\n    }\n}\n\nextension UIImageView {\n    func setImage(from url: URL) {\n        ImageDownloader.shared.downloadImage(from: url) { image in\n            DispatchQueue.main.async {\n                self.image = image\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UICollectionViewCell with a UIImageView and UILabel",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n\n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupViews()\n    }\n\n    private func setupViews() {\n        addSubview(imageView)\n        addSubview(titleLabel)\n\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n\n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a UIView with a UITapGestureRecognizer and handle the tap event",
      "input": "",
      "output": "import UIKit\n\nclass ViewController:UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        let tapableView = UIView(frame: CGRect(x: 100, y: 100, width: 100, height: 100))\n        tapableView.backgroundColor = .systemBlue\n        view.addSubview(tapableView)\n\n        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(handleTap))\n        tapableView.addGestureRecognizer(tapGestureRecognizer)\n    }\n\n    @objc func handleTap() {\n        print(\"View tapped!\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a UITableView with a custom UITableViewCell and register the cell",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    // Custom UITableViewCell implementation\n}\n\nclass TableViewController: UITableViewController {\n    let cellReuseIdentifier = \"customCell\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)\n    }\n\n    // UITableViewDataSource methods\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        // Return the number of rows in the section\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier, for: indexPath) as! CustomTableViewCell\n        // Configure the cell\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a UICollectionView with a flow layout and register a custom UICollectionViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // Custom UICollectionViewCell implementation\n}\n\nclass CollectionViewController: UICollectionViewController {\n    let cellReuseIdentifier = \"customCell\"\n\n    init() {\n        let flowLayout = UICollectionViewFlowLayout()\n        flowLayout.itemSize = CGSize(width: 100, height: 100)\n        flowLayout.sectionInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10)\n\n        super.init(collectionViewLayout: flowLayout)\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: cellReuseIdentifier)\n    }\n\n    // UICollectionViewDataSource methods\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        // Return the number of items in the section\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellReuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        // Configure the cell\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that presents a UIAlertController with a title, message, and a single UIAlertAction.",
      "input": "",
      "output": "import UIKit\n\nclass MyViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        presentAlert(title: \"Hello\", message: \"This is an alert.\")\n    }\n    \n    func presentAlert(title: String, message: String) {\n        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n        let okAction = UIAlertAction(title: \"OK\", style: .default, handler: nil)\n        alertController.addAction(okAction)\n        present(alertController, animated: true, completion: nil)\n    }\n    \n}"
    },
    {
      "instruction": " Write a Swift function that creates a UICollectionView with a custom UICollectionViewCell.",
      "input": "",
      "output": "import UIKit\n\nclass MyCustomCell: UICollectionViewCell {\n    static let reuseIdentifier = \"MyCustomCell\"\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.backgroundColor = .red\n    }\n    \n    required init?(coder: NSCoder) {"
    },
    {
      "instruction": "Implement a custom UITableViewController with a search bar that filters the displayed data based on user input.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewController: UITableViewController, UISearchBarDelegate {\n    let cellIdentifier = \"customCell\"\n    var dataArray = [\"Apple\", \"Banana\", \"Grape\", \"Orange\", \"Peach\", \"Strawberry\", \"Watermelon\"]\n    var filteredDataArray: [String] = []\n    var isSearching = false\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        let searchBar = UISearchBar()\n        searchBar.searchBarStyle = .minimal\n        searchBar.placeholder = \"Search\"\n        searchBar.delegate = self\n        navigationItem.titleView = searchBar\n\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: cellIdentifier)\n    }\n\n    // MARK: - UITableViewDataSource\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return isSearching ? filteredDataArray.count : dataArray.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath)\n\n        let data = isSearching ? filteredDataArray[indexPath.row] : dataArray[indexPath.row]\n        cell.textLabel?.text = data\n\n        return cell\n    }\n\n    // MARK: - UISearchBarDelegate\n\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            isSearching = false\n            tableView.reloadData()\n        } else {\n            isSearching = true\n            filteredDataArray = dataArray.filter { $0.lowercased().contains(searchText.lowercased()) }\n            tableView.reloadData()\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that asynchronously downloads an image from a URL and sets it as the image of a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let data = data, let image = UIImage(data: data) {\n            completion(image)\n        } else {\n            completion(nil)\n        }\n    }\n    task.resume()\n}\n\nfunc setImageAsync(for imageView: UIImageView, from url: URL) {\n    downloadImage(from: url) { image in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " Create a custom UICollectionViewCell with a UILabel and UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let imageView = UIImageView()\n    let label = UILabel()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        label.translatesAutoresizingMaskIntoConstraints = false\n\n        contentView.addSubview(imageView)\n        contentView.addSubview(label)\n\n        NSLayoutConstraint.activate([\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n\n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            label.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " Implement a custom UIPickerView with a custom data source.",
      "input": "",
      "output": "import UIKit\n\nclass CustomPickerView: UIPickerView, UIPickerViewDataSource, UIPickerViewDelegate {\n    let data: [String] = [\"Option 1\", \"Option 2\", \"Option 3\", \"Option 4\", \"Option 5\"]\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n\n        self.dataSource = self\n        self.delegate = self\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    // MARK: - UIPickerViewDataSource\n\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return data.count\n    }\n\n    // MARK: - UIPickerViewDelegate\n\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return data[row]\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that animates the change of a UIView's background color.",
      "input": "",
      "output": "import UIKit\n\nfunc animateBackgroundColorChange(for view: UIView, to color: UIColor, duration: TimeInterval = 0.3) {\n    UIView.animate(withDuration: duration) {\n        view.backgroundColor = color\n    }\n}"
    },
    {
      "instruction": " Create a custom UIButton with rounded corners and a custombackground color.",
      "input": "",
      "output": "import UIKit\n\nclass CustomRoundedButton: UIButton {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupButton()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupButton()\n    }\n\n    func setupButton() {\n        self.backgroundColor = UIColor.systemBlue\n        self.layer.cornerRadius = 10\n        self.setTitleColor(.white, for: .normal)\n    }\n}"
    },
    {
      "instruction": " Implement a custom UITextField with a left inset.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTextField: UITextField {\n    let leftInset: CGFloat = 10\n\n    override func textRect(forBounds bounds: CGRect) -> CGRect {\n        return CGRect(x: bounds.origin.x + leftInset,\n                      y: bounds.origin.y,\n                      width: bounds.width - leftInset,\n                      height: bounds.height)\n    }\n\n    override func editingRect(forBounds bounds: CGRect) -> CGRect {\n        return textRect(forBounds: bounds)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that presents a UIAlertController with a Title, Message, and OK button.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(title: String, message: String, on viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let okAction = UIAlertAction(title: \"OK\", style: .default, handler: nil)\n    alertController.addAction(okAction)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": "Write a Swift function to create and configure a UITableView with custom cell registration and delegation.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    // TODO: Add custom cell UI elements here\n}\n\nclass CustomTableViewController: UITableViewController {\n    \n    let cellReuseIdentifier = \"CustomCell\"\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)\n        tableView.delegate = self\n        tableView.dataSource = self\n    }\n    \n    // MARK: - Table view data source\n    \n    override func numberOfSections(in tableView: UITableView) -> Int {\n        return 1\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        // TODO: Return the number of rows\n        return 0\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier, for: indexPath) as! CustomTableViewCell\n        \n        // TODO: Configure the cell's UI elements\n        \n        return cell\n    }\n    \n    // MARK: - Table view delegate\n    \n    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        // TODO: Handle row selection\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to fetch data from a remote API using URLSession and decode the JSON response into a Codable model.",
      "input": "",
      "output": "import Foundation\n\nstruct APIResponse: Codable {\n    // TODO: Define the model properties\n}\n\nfunc fetchData(completion: @escaping (Result<APIResponse, Error>) -> Void) {\n    let urlString = \"https://api.example.com/data\"\n    guard let url = URL(string: urlString) else {\n        completion(.failure(NSError(domain: \"Invalid URL\", code: -1, userInfo: nil)))\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { data, _, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data else {\n            completion(.failure(NSError(domain: \"No data\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        do {\n            let decoder = JSONDecoder()\n            let response = try decoder.decode(APIResponse.self, from: data)\n            completion(.success(response))\n        } catch {\n            completion(.failure(error))\n        }\n    }\n    \n    task.resume()\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UIView subclass with a programmatically created UILabel and UIButton, and a callback for button tap events.",
      "input": "",
      "output": "import UIKit\n\nclass CustomView: UIView {\n    private let label = UILabel()\n    private let button = UIButton(type: .system)\n    var buttonTapped: (() -> Void)?\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n    \n    private func setupView() {\n        addSubview(label)\n        label.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            label.centerXAnchor.constraint(equalTo: centerXAnchor),\n            label.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n        \n        addSubview(button)\n        button.setTitle(\"Tap me\", for: .normal)\n        button.addTarget(self, action: #selector(buttonAction), for: .touchUpInside)\n        button.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            button.centerXAnchor.constraint(equalTo: centerXAnchor),\n            button.topAnchor.constraint(equalTo: label.bottomAnchor, constant: 10)\n        ])\n    }\n    \n    @objc private func buttonAction() {\n        buttonTapped?()\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement a custom UISearchBarDelegate method to filter an array of strings based on the entered search query.",
      "input": "",
      "output": "import UIKit\n\nclass SearchViewController: UIViewController, UISearchBarDelegate {\n    private let searchBar = UISearchBar()\n    private var data: [String] = [] // Your data array\n    private var filteredData: [String] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        searchBar.delegate = self\n        filteredData = data\n    }\n\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        if searchText.isEmpty {\n            filteredData = data\n        } else {\n            filteredData = data.filter { $0.lowercased().contains(searchText.lowercased()) }\n        }\n        // TODO: Update your data display (e.g., reload table view data)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to save an object conforming to Codable into UserDefaults.",
      "input": "",
      "output": "import Foundation\n\nstruct CodableModel:Codable {\n    // TODO: Define the model properties\n}\n\nfunc save(model: CodableModel, forKey key: String) {\n    let encoder = JSONEncoder()\n    if let encodedData = try? encoder.encode(model) {\n        UserDefaults.standard.set(encodedData, forKey: key)\n    } else {\n        print(\"Unable to encode model\")\n    }\n}\n\nfunc load(forKey key: String) -> CodableModel? {\n    if let savedData = UserDefaults.standard.data(forKey: key) {\n        let decoder = JSONDecoder()\n        if let loadedModel = try? decoder.decode(CodableModel.self, from: savedData) {\n            return loadedModel\n        }\n    }\n    return nil\n}"
    },
    {
      "instruction": " Write a Swift function to create and present a UIAlertController with multiple actions and a completion handler for each action.",
      "input": "",
      "output": "import UIKit\n\nfunc presentAlertController() {\n    let alertController = UIAlertController(title: \"Alert\", message: \"Choose an option\", preferredStyle: .alert)\n    \n    let action1 = UIAlertAction(title: \"Option 1\", style: .default) { _ in\n        // Handle Option 1 selection\n    }\n    \n    let action2 = UIAlertAction(title: \"Option 2\", style: .default) { _ in\n        // Handle Option 2 selection\n    }\n    \n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n    \n    alertController.addAction(action1)\n    alertController.addAction(action2)\n    alertController.addAction(cancelAction)\n    \n    self.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift function to create a UICollectionView with a custom UICollectionViewCell and configure its layout.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // TODO: Add custom cell UI elements here\n}\n\nclass CustomCollectionViewController: UICollectionViewController, UICollectionViewDelegateFlowLayout {\n    \n    let cellReuseIdentifier = \"CustomCollectionCell\"\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: cellReuseIdentifier)\n        collectionView.delegate = self\n        collectionView.dataSource = self\n        \n        let layout = UICollectionViewFlowLayout()\n        layout.itemSize = CGSize(width: 100, height: 100) // Set the desired item size\n        layout.sectionInset = UIEdgeInsets(top: 10, left: 10, bottom: 10, right: 10) // Set the desired section insets\n        collectionView.collectionViewLayout = layout\n    }\n    \n    // MARK: - UICollectionViewDataSource\n    \n    override func numberOfSections(in collectionView: UICollectionView) -> Int {\n        return 1\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        // TODO: Return the number of items\n        return 0\n    }\n    \n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellReuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        \n        // TODO: Configure the cell's UI elements\n        \n        return cell\n    }\n    \n    // MARK: - UICollectionViewDelegate\n    \n    override func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {\n        // TODO: Handle item selection\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create and configure a UIPageViewController with three child view controllers.",
      "input": "",
      "output": "import UIKit\n\nclass PageViewController: UIViewController, UIPageViewControllerDataSource, UIPageViewControllerDelegate {\n    \n    private var pageViewController: UIPageViewController!\n    private var pages: [UIViewController] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let viewController1 = UIViewController() // Replace with your desired view controller\n        let viewController2 = UIViewController() // Replace with your desired view controller\n        let viewController3 = UIViewController() // Replace with your desired view controller\n        \n        pages = [viewController1, viewController2, viewController3]\n        \n        pageViewController = UIPageViewController(transitionStyle: .scroll, navigationOrientation: .horizontal, options: nil)\n        pageViewController.dataSource = self\n        pageViewController.delegate = self\n        \n        if let firstViewController = pages.first {\n            pageViewController.setViewControllers([firstViewController], direction: .forward, animated: true, completion: nil)\n        }\n        \n        addChild(pageViewController)\n        view.addSubview(pageViewController.view)\n        pageViewController.didMove(toParent: self)\n    }\n    \n    // MARK: - UIPageViewControllerDataSource\n    \n    func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -> UIViewController? {\n        guard let index = pages.firstIndex(of: viewController) else {\n            return nil\n        }\n        \n        let previousIndex = index - 1\n        \n        if previousIndex < 0 {\n            return nil\n        }\n        \n        return pages[previous"
    },
    {
      "instruction": "Implement a custom UICollectionViewCell with a UIImageView, UILabel, and a UIButton.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    \n    private lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFit\n        return imageView\n    }()\n    \n    private lazy var label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textAlignment = .center\n        return label\n    }()\n    \n    private lazy var button: UIButton = {\n        let button = UIButton(type: .system)\n        button.translatesAutoresizingMaskIntoConstraints = false\n        button.setTitle(\"Tap me\", for: .normal)\n        return button\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupSubviews()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupSubviews()\n    }\n    \n    private func setupSubviews() {\n        contentView.addSubview(imageView)\n        contentView.addSubview(label)\n        contentView.addSubview(button)\n        \n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.centerXAnchor.constraint(equalTo: contentView.centerXAnchor),\n            imageView.widthAnchor.constraint(equalToConstant: 100),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n            \n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n            label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            \n            button.topAnchor.constraint(equalTo: label.bottomAnchor, constant: 8),\n            button.centerXAnchor.constraint(equalTo: contentView.centerXAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " Create a custom UIView subclass with a UILabel and a UISlider to control the font size of the UILabel.",
      "input": "",
      "output": "import UIKit\n\nclass FontSizeControlView: UIView {\n    \n    private lazy var label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textAlignment = .center\n        return label\n    }()\n    \n    private lazy var slider: UISlider = {\n        let slider = UISlider()\n        slider.translatesAutoresizingMaskIntoConstraints = false\n        slider.addTarget(self, action: #selector(sliderValueChanged(_:)), for: .valueChanged)\n        return slider\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupSubviews()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupSubviews()\n    }\n    \n    private func setupSubviews() {\n        addSubview(label)\n        addSubview(slider)\n        \n        NSLayoutConstraint.activate([\n            label.topAnchor.constraint(equalTo: topAnchor),\n            label.leadingAnchor.constraint(equalTo: leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: trailingAnchor),\n            \n            slider.topAnchor.constraint(equalTo: label.bottomAnchor, constant: 8),\n            slider.leadingAnchor.constraint(equalTo: leadingAnchor),\n            slider.trailingAnchor.constraint(equalTo: trailingAnchor),\n            slider.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n    \n    @objc private func sliderValueChanged(_ sender: UISlider) {\n        let fontSize = CGFloat(sender.value)\n        label.font = UIFont.systemFont(ofSize: fontSize)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UIAlertController with a title, message, and an action button.",
      "input": "",
      "output": "func presentAlertController(title: String, message: String, actionTitle: String, viewController: UIViewController) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: actionTitle, style: .default, handler: nil)\n    alertController.addAction(action)\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift function to display a local notification with a title, body, and a time interval.",
      "input": "",
      "output": "import UserNotifications\n\nfunc scheduleLocalNotification(title: String, body: String, timeInterval: TimeInterval) {\n    let content = UNMutableNotificationContent()\n    content.title = title\n    content.body = body\n    \n    let trigger = UNTimeIntervalNotificationTrigger(timeInterval: timeInterval, repeats: false)\n    let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)\n    \n    UNUserNotificationCenter.current().add(request) { (error) in\n        if let error = error {\n            print(\"Error scheduling notification: \\(error.localizedDescription)\")\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a programmatic UIButton with a target and action.",
      "input": "",
      "output": "func createButton(title: String, target: Any, action: Selector) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.addTarget(target, action: action, for: .touchUpInside)\n    return button\n}"
    },
    {
      "instruction": " Write a Swift function to play a sound file from the application's main bundle.",
      "input": "",
      "output": "import AVFoundation\n\nfunc playSound(fileName: String, fileType: String) {\n    guard let url = Bundle.main.url(forResource: fileName, withExtension: fileType) else {\n        print(\"Unable to find sound file\")\n        return\n    }\n\n    do {\n        let audioPlayer = try AVAudioPlayer(contentsOf: url)\n        audioPlayer.play()\n    } catch let error {\n        print(\"Error playing sound: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to animate a UIView's position change using CGAffineTransform.",
      "input": "",
      "output": "func animateViewPositionChange(_ view: UIView, translationX: CGFloat, translationY: CGFloat, duration: TimeInterval) {\n    UIView.animate(withDuration: duration) {\n        view.transform = CGAffineTransform(translationX: translationX, translationY: translationY)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to save an object to UserDefaults and read it back.",
      "input": "",
      "output": "import Foundation\n\nfunc saveObjectToUserDefaults<T: Codable>(_ object: T, forKey key: String) {\n    let encoder = JSONEncoder()\n    if let encodedObject = try? encoder.encode(object) {\n        UserDefaults.standard.set(encodedObject, forKey: key)\n    }\n}\n\nfunc getObjectFromUserDefaults<T: Codable>(forKey key: String) -> T? {\n    guard let data = UserDefaults.standard.data(forKey: key) else {\n        return nil\n    }\n    \n    let decoder = JSONDecoder()\n    return try? decoder.decode(T.self, from: data)\n}"
    },
    {
      "instruction": " Write a Swift function to register and dequeue a UICollectionViewCell with an identifier in cellForItemAt indexPath function.",
      "input": "",
      "output": "func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"MyCollectionViewCell\", for: indexPath) as! MyCollectionViewCell\n    // Configure cell\n    return cell\n}"
    },
    {
      "instruction": " Implement a Swift function that creates a custom UITableViewCell with a UILabel and a UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    let customImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        addSubview(titleLabel)\n        addSubview(customImageView)\n        \n        NSLayoutConstraint.activate([\n            titleLabel.topAnchor.constraint(equalTo: topAnchor),\n            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 16),\n            customImageView.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 8),\n            customImageView.leadingAnchor.constraint(equalTo: titleLabel.trailingAnchor, constant: 8),\n            customImageView.bottomAnchor.constraint(equalTo: bottomAnchor),\n            customImageView.widthAnchor.constraint(equalToConstant: 50),\n            customImageView.heightAnchor.constraint(equalToConstant: 50)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that handles user location updates using CoreLocation and displays the updated location coordinates in a UILabel",
      "input": "",
      "output": "import UIKit\nimport CoreLocation\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n    let locationLabel = UILabel()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        locationManager.requestWhenInUseAuthorization()\n        \n        if CLLocationManager.locationServicesEnabled() {\n            locationManager.delegate = self\n            locationManager.desiredAccuracy = kCLLocationAccuracyBest\n            locationManager.startUpdatingLocation()\n        }\n        \n        view.addSubview(locationLabel)\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            locationLabel.text = \"Latitude: \\(location.coordinate.latitude), Longitude: \\(location.coordinate.longitude)\"\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error updating location: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " Implement a Swift function that adds a gesture recognizer to a UIView, triggering an action when the view is tapped",
      "input": "",
      "output": "import UIKit\n\nclass TapGestureViewController: UIViewController {\n    let customView = UIView()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        customView.frame = CGRect(x: 0, y: 0, width: 150, height: 150)\n        customView.center = view.center\n        customView.backgroundColor = .red\n        view.addSubview(customView)\n        \n        let tapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(handleTap))\n        customView.addGestureRecognizer(tapGestureRecognizer)\n    }\n    \n    @objc func handleTap() {\n        print(\"View tapped\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that creates a UICollectionView with a custom UICollectionViewCell that displays an image and a label",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let identifier = \"CustomCollectionViewCell\"\n    \n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(imageView)\n        contentView.addSubview(titleLabel)\n        \n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n            \n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n\nclass CustomCollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    private var collectionView: UICollectionView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let layout = UICollectionViewFlowLayout()\n        layout.itemSize = CGSize(width: 120, height: 150)\n        \n        collectionView = UICollectionView(frame: view.bounds, collectionViewLayout: layout)\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.identifier)\n        collectionView.backgroundColor = .white\n        \n        view.addSubview(collectionView)\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 20\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.identifier, for: indexPath) as! CustomCollectionViewCell\n        cell.imageView.image = UIImage(systemName: \"photo\")\n        cell.titleLabel.text = \"Item \\(indexPath.row + 1)\"\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that configures a UISlider with a custom minimum and maximum value, and a target action when the value changes",
      "input": "",
      "output": "import UIKit\n\nclass SliderViewController: UIViewController {\n    let customSlider = UISlider()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        customSlider.frame = CGRect(x: 0, y: 0, width: 300, height: 40)\n        customSlider.center = view.center\n        customSlider.minimumValue = 0\n        customSlider.maximumValue = 100\n        customSlider.addTarget(self, action: #selector(sliderValueChanged), for: .valueChanged)\n        view.addSubview(customSlider)\n    }\n    \n    @objc func sliderValueChanged() {\n        print(\"Slider value changed to: \\(customSlider.value)\")\n    }\n}"
    },
    {
      "instruction": " Implement a Swift function that uses NotificationCenter to post and observe a custom notification, updating a UILabel with the received data",
      "input": "",
      "output": "import UIKit\n\nclass NotificationCenterViewController: UIViewController {\n    let notificationName = Notification.Name(rawValue: \"customNotification\")\n    let dataLabel = UILabel()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        NotificationCenter.default.addObserver(self, selector: #selector(handleNotification(_:)), name: notificationName, object: nil)\n        \n        dataLabel.frame = CGRect(x: 0, y: 0, width: 200, height: 40)\n        dataLabel.center = view.center\n        dataLabel.textAlignment = .center\n        view.addSubview(dataLabel"
    },
    {
      "instruction": "Write a Swift function that displays an action sheet with multiple options and a cancel button.",
      "input": "",
      "output": "import UIKit\n\nclass MyViewController: UIViewController {\n\n    @objc func showActionSheet() {\n        let actionSheet = UIAlertController(title: nil, message: \"Choose an option\", preferredStyle: .actionSheet)\n\n        let option1 = UIAlertAction(title: \"Option 1\", style: .default) { _ in\n            print(\"Option 1 selected\")\n        }\n        let option2 = UIAlertAction(title: \"Option 2\", style: .default) { _ in\n            print(\"Option 2 selected\")\n        }\n        let cancel = UIAlertAction(title: \"Cancel\", style: .cancel)\n\n        actionSheet.addAction(option1)\n        actionSheet.addAction(option2)\n        actionSheet.addAction(cancel)\n\n        present(actionSheet, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that plays a sound file from the app bundle.",
      "input": "",
      "output": "import AVFoundation\n\nclass SoundPlayer {\n    var audioPlayer: AVAudioPlayer?\n    \n    func playSound(filename: String, fileType: String) {\n        guard let soundURL = Bundle.main.url(forResource: filename, withExtension: fileType) else {\n            print(\"Unable to locate sound file\")\n            return\n        }\n        \n        do {\n            audioPlayer = try AVAudioPlayer(contentsOf: soundURL)\n            audioPlayer?.play()\n        } catch {\n            print(\"Error playing sound:\", error)\n        }\n    }\n}"
    },
    {
      "instruction": " Create a Swift class that manages downloading and caching of images.",
      "input": "",
      "output": "import UIKit\n\nclass ImageCacheManager {\n    static let shared = ImageCacheManager()\n    private let imageCache = NSCache<NSString, UIImage>()\n    \n    func downloadImage(url: URL, completion: @escaping (UIImage?) -> Void) {\n        if let cachedImage = imageCache.object(forKey: url.absoluteString as NSString) {\n            completion(cachedImage)\n        } else {\n            URLSession.shared.dataTask(with: url) { (data, response, error) in\n                guard let data = data, error == nil, let image = UIImage(data: data) else {\n                    completion(nil)\n                    return\n                }\n                self.imageCache.setObject(image, forKey: url.absoluteString as NSString)\n                completion(image)\n            }.resume()\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that creates and presents a UIAlertController with an error message.",
      "input": "",
      "output": "import UIKit\n\nclass MyViewController: UIViewController {\n    \n    func showErrorAlert(message: String) {\n        let alertController = UIAlertController(title: \"Error\", message: message, preferredStyle: .alert)\n        let okAction = UIAlertAction(title: \"OK\", style: .default)\n        alertController.addAction(okAction)\n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that generates a random UIColor.",
      "input": "",
      "output": "import UIKit\n\nfunc randomColor() -> UIColor {\n    let red = CGFloat(arc4random_uniform(256)) / 255.0\n    let green = CGFloat(arc4random_uniform(256)) / 255.0\n    let blue = CGFloat(arc4random_uniform(256)) / 255.0\n    return UIColor(red: red, green: green, blue: blue, alpha: 1.0)\n}"
    },
    {
      "instruction": " Write a Swift function that converts a date to a formatted string.",
      "input": "",
      "output": "import Foundation\n\nfunc formatDate(date: Date, format: String = \"yyyy-MM-dd\") -> String {\n    let dateFormatter = DateFormatter()\n    dateFormatter.dateFormat = format\n    return dateFormatter.string(from: date)\n}"
    },
    {
      "instruction": " Write a Swift function that fetches JSON data from a given URL and decodes it into a specific model type.",
      "input": "",
      "output": "import Foundation\n\nclass NetworkManager {\n    func fetchData<T: Decodable>(url: String, modelType: T.Type, completion: @escaping (Result<T, Error>) -> Void) {\n        guard let requestURL = URL(string: url) else {\n            completion(.failure(NSError(domain: \"Invalid URL\", code: -1, userInfo: nil)))\n            return\n        }\n        \n        URLSession.shared.dataTask(with: requestURL) { (data, response, error) in\n            if let error = error {\n                completion(.failure(error))\n            } else if let data = data {\n                do {\n                    let decodedData = try JSONDecoder().decode(T.self, from: data)\n                    completion(.success(decodedData))\n                } catch {\n                    completion(.failure(error))\n                }\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " Write a Swift function thatconfigures and displays a UICollectionView with a custom UICollectionViewCell.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n    \n    // Add your custom UI elements and layout code here\n}\n\nclass MyViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    private var collectionView: UICollectionView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .vertical\n        \n        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n        \n        view.addSubview(collectionView)\n        \n        NSLayoutConstraint.activate([\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            collectionView.topAnchor.constraint(equalTo: view.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor)\n        ])\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 20 // Replace with your data count\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        // Configure your custom cell\n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: collectionView.bounds.width, height: 100)\n    }\n}"
    },
    {
      "instruction": "Write a function in Swift to reverse the words in a given string, without reversing the characters within the words. The function should take a string as input and return the reversed string.",
      "input": "\"Hello world\"",
      "output": "func reverseWords(_ str: String) -> String {\n    let words = str.split(separator: \" \")\n    var reversedWords: [String] = []\n    for word in words {\n        reversedWords.insert(String(word), at: 0)\n    }\n    return reversedWords.joined(separator: \" \")\n}\nprint(reverseWords(\"Hello world\"))"
    },
    {
      "instruction": " Write a function in Swift to find the largest and smallest numbers in an array of integers. The function should take an array of integers as input and return a tuple with the smallest and largest numbers.",
      "input": "[1, 7, -2, 4, 8, 0]",
      "output": "func findMinMax(_ arr: [Int]) -> (Int, Int) {\n    var min = arr[0]\n    var max = arr[0]\n    for num in arr {\n        if num < min {\n            min = num\n        }\n        if num > max {\n            max = num\n        }\n    }\n    return (min, max)\n}\nprint(findMinMax([1, 7, -2, 4, 8, 0]))"
    },
    {
      "instruction": " Write a function in Swift to calculate the factorial of a given non-negative integer. The function should take an integer as input and return the factorial as an integer.",
      "input": "5",
      "output": "func factorial(_ n: Int) -> Int {\n    if n <= 1 {\n        return 1\n    } else {\n        return n * factorial(n - 1)\n    }\n}\nprint(factorial(5))"
    },
    {
      "instruction": " Write a function in Swift to convert a given decimal number to its binary equivalent. The function should take an integer as input and return a string representing the binary equivalent.",
      "input": "42",
      "output": "func decimalToBinary(_ num: Int) -> String {\n    var binary = \"\"\n    var n = num\n    while n > 0 {\n        binary = \"\\(n % 2)\" + binary\n        n = n / 2\n    }\n    return binary\n}\nprint(decimalToBinary(42))"
    },
    {
      "instruction": " Write a function in Swift to find the common elements between two arrays of integers. The function should take two arrays of integers as input and return an array of integers containing the common elements.",
      "input": "[1, 2, 3, 4, 5], [4, 5, 6, 7, 8]",
      "output": "func findCommonElements(_ arr1: [Int], _ arr2: [Int]) -> [Int] {\n    var common: [Int] = []\n    for num in arr1 {\n        if arr2.contains(num) {\n            common.append(num)\n        }\n    }\n    return common\n}\nprint(findCommonElements([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))"
    },
    {
      "instruction": " Write a function in Swift to calculate the distance between two points in a 2D space. The function should take two tuples as input, each tuple representing the (x, y) coordinates of a point, and return the distance as a Double.",
      "input": "(1, 1), (3, 2)",
      "output": "import Foundation\n\nfunc distanceBetweenPoints(_ point1: (x: Int, y: Int), _ point2: (x: Int, y: Int)) -> Double {\n    let dx = Double(point1.x - point2.x)\n    let dy = Double(point1.y - point2.y)\n    return sqrt(dx * dx + dy * dy)\n}\nprint(distanceBetweenPoints((1, 1), (3, 2)))"
    },
    {
      "instruction": " Write a function in Swift to calculate the area of a circle given its radius. The function should take a Double as input, representing the radius, and return the area as a Double.",
      "input": "5.0",
      "output": "import Foundation\n\nfunc circleArea(_ radius: Double) -> Double {\n    return Double.pi * pow(radius, 2)\n}\nprint(circleArea(5.0))"
    },
    {
      "instruction": " Write a function in Swift to implement a simple calculator that performs addition, subtraction, multiplication, and division. The function should take two numbers and a character representing the operation (+, -, *, /) as input and return the result as a Double.",
      "input": "5, 2, '+'",
      "output": "func calculator(_ num1: Double, _ num2: Double, _ operation: Character) -> Double {\n    switch operation {\n    case \"+\":\n        return num1 + num2\n    case \"-\":\n        return num1 - num2\n    case \"*\":\n        return num1 * num2\n    case \"/\":\n        if num2 != 0 {\n            return num1 / num2\n        } else {\n            print(\"Error: Division by zero.\")\n            return Double.nan\n        }\n    default:\n        print(\"Error: Invalid operation.\")\n        return Double.nan\n    }\n}\nprint(calculator(5, 2, '+'))"
    },
    {
      "instruction": " Write a function in Swift to filter out the even numbers from an array of integers. The function should take an array of integers as input and return a new array with only the even numbers.",
      "input": "[1, 2, 3, 4, 5, 6, 7, 8]",
      "output": "func filterEvenNumbers(_ arr: [Int]) -> [Int] {\n    return arr.filter { $0 % 2 == 0 }\n}\nprint(filterEvenNumbers([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "instruction": " Write a function in Swift to sort an array of strings alphabetically in ascending order. The function should take an array of strings as input and return a new array with the strings sorted.",
      "input": "[\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]",
      "output": "func sortStringsAlphabetically(_ arr: [String]) -> [String] {\n    return arr.sorted()\n}\nprint(sortStringsAlphabetically([\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]))"
    },
    {
      "instruction": "Write a Swift function to programmatically create and configure a UICollectionView with custom UICollectionViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // Add custom subviews and styling here\n}\n\nclass CustomCollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    private var collectionView: UICollectionView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupCollectionView()\n    }\n\n    private func setupCollectionView() {\n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .vertical\n        layout.itemSize = CGSize(width: 100, height: 100)\n        layout.minimumLineSpacing = 10\n        layout.minimumInteritemSpacing = 10\n\n        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"CustomCell\")\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.backgroundColor = .clear\n\n        view.addSubview(collectionView)\n\n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor)\n        ])\n    }\n\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10 // Replace with desired number of items\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CustomCell\", for: indexPath) as! CustomCollectionViewCell\n        // Configure cell\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to handle push notifications registration, receiving and handling in a mobile app",
      "input": "",
      "output": "import UIKit\nimport UserNotifications\n\nclass AppDelegate: UIResponder, UIApplicationDelegate, UNUserNotificationCenterDelegate {\n    \n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        registerForPushNotifications(application)\n        return true\n    }\n    \n    func registerForPushNotifications(_ application: UIApplication) {\n        UNUserNotificationCenter.current().delegate = self\n        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in\n            guard granted else { return }\n            DispatchQueue.main.async {\n                application.registerForRemoteNotifications()\n            }\n        }\n    }\n    \n    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n        // Handle successful push notifications registration\n    }\n    \n    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n        // Handle failed push notifications registration\n    }\n    \n    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {\n        completionHandler([.banner, .sound, .badge])\n    }\n    \n    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n        // Handle received push notification\n        completionHandler()\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UITableViewCell with an image, title and subtitle",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    private let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n    \n    private let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.font = UIFont.systemFont(ofSize: 18, weight: .bold)\n        return label\n    }()\n    \n    private let subtitleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.font = UIFont.systemFont(ofSize: 16, weight: .regular)\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        addSubview(cellImageView)\n        addSubview(titleLabel)\n        addSubview(subtitleLabel)\n        \n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 10),\n            cellImageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            cellImageView.widthAnchor.constraint(equalToConstant: 40),\n            cellImageView.heightAnchor.constraint(equalToConstant: 40),\n            \n            titleLabel.topAnchor.constraint(equalTo: topAnchor, constant: 10),\n            titleLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 10),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -10),\n            \n            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 5),\n            subtitleLabel.leadingAnchor.constraint(equalTo: titleLabel.leadingAnchor),\n            subtitleLabel.trailingAnchor.constraint(equalTo: titleLabel.trailingAnchor),\n            subtitleLabel.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -10)\n        ])\n    }\n    \n    func configure(image: UIImage, title: String, subtitle: String) {\n        cellImageView.image = image\n        titleLabel.text = title\n        subtitleLabel.text = subtitle\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to fetch and decode JSON data from a REST API using URLSession and the Codable protocol",
      "input": "",
      "output": "import Foundation\n\nstruct APIResponse: Codable {\n    let title: String\n    let description: String\n}\n\nfunc fetchData(completion: @escaping (APIResponse?, Error?) -> Void) {\n    let urlString = \"https://api.example.com/data\" // Replace with the actual API URL\n    guard let url = URL(string: urlString) else { return }\n\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(nil, error)\n            return\n        }\n        \n        guard let data = data else { return }\n        \n        do {\n            let decoder = JSONDecoder()\n            let apiResponse = try decoder.decode(APIResponse.self, from: data)\n            completion(apiResponse, nil)\n        } catch let error {\n            completion(nil, error)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " Write a Swift function to implement a basic authentication login using Alamofire and SwiftUI",
      "input": "",
      "output": "import SwiftUI\nimport Alamofire\n\nstruct ContentView: View {\n    @State private var username: String = \"\"\n    @State private var password: String = \"\"\n    \n    var body: some View {\n        VStack {\n            TextField(\"Username\", text: $username)\n                .padding()\n                .autocapitalization(.none)\n            \n            SecureField(\"Password\", text: $password)\n                .padding()\n            \n            Button(\"Login\", action: login)\n                .padding()\n        }.padding()\n    }\n    \n    func login() {\n        let parameters = [\n            \"username\": username,\n            \"password\": password\n        ]\n        \n        let headers: HTTPHeaders = [\n            \"Accept\": \"application/json\"\n        ]\n        \n        AF.request(\"https://api.example.com/login\", method: .post, parameters: parameters, encoding: JSONEncoding.default, headers: headers).responseJSON { response in\n            switch response.result {\n            case .success(let value):\n                print(\"Login successful: \\(value)\")\n            case .failure(let error):\n                print(\"Login error: \\(error.localizedDescription)\")\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom SwiftUI View with a TextField and a Picker",
      "input": "",
      "output": "import SwiftUI\n\nstruct CustomView: View {\n    @State private var text = \"\"\n    @State private var selectedOption = 0\n    private let options = [\"Option 1\", \"Option 2\", \"Option 3\"]\n\n    var body: some View {\n        VStack {\n            TextField(\"Enter text\", text: $text)\n                .padding()\n                .textFieldStyle(RoundedBorderTextFieldStyle())\n\n            Picker(\"Select an option\", selection: $selectedOption) {\n                ForEach(0..<options.count) { index in\n                    Text(self.options[index]).tag(index)\n                }\n            }\n            .padding()\n            .pickerStyle(MenuPickerStyle())\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a timer using Combine framework and SwiftUI",
      "input": "",
      "output": "import SwiftUI\nimport Combine\n\nclass TimerViewModel: ObservableObject {\n    @Published var timeRemaining = 10\n    private var timer: AnyCancellable?\n\n    func startTimer() {\n        timer = Timer.publish(every: 1, on: .main, in: .common)\n            .autoconnect()\n            .sink { [weak self] _ in\n                guard let self = self else { return }\n                if self.timeRemaining > 0 {\n                    self.timeRemaining -= 1\n                } else {\n                    self.timer?.cancel()\n                }\n            }\n    }\n}\n\nstruct TimerView: View {\n    @StateObject private var viewModel = TimerViewModel()\n\n    var body: some View {\n        VStack {\n            Text(\"\\(viewModel.timeRemaining)\")\n                .font(.largeTitle)\n\n            Button(\"Start Timer\") {\n                viewModel.startTimer()\n            }\n            .padding()\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to display a map in SwiftUI using MapKit",
      "input": "",
      "output": "import SwiftUI\nimport MapKit\n\nstruct MapView: UIViewRepresentable {\n    let coordinate: CLLocationCoordinate2D\n\n    func makeUIView(context: Context)"
    },
    {
      "instruction": " Implement a function that takes an image and a compression quality as input, and returns a JPEG representation of the image with the specified compression quality.",
      "input": "    import UIKit",
      "output": "    import UIKit\n\n    func jpegData(from image: UIImage, compressionQuality: CGFloat) -> Data? {\n        return image.jpegData(compressionQuality: compressionQuality)\n    }"
    },
    {
      "instruction": " Write a function that asynchronously downloads an image from a given URL and sets that image to a UIImageView.",
      "input": "    import UIKit",
      "output": "    import UIKit\n\n    extension UIImageView {\n        func setImage(from url: URL) {\n            URLSession.shared.dataTask(with: url) { data, response, error in\n                guard let data = data, error == nil, let image = UIImage(data: data) else {\n                    return\n                }\n\n                DispatchQueue.main.async {\n                    self.image = image\n                }\n            }.resume()\n        }\n    }"
    },
    {
      "instruction": " Implement a function that creates a custom UIButton with a rounded border, background color, and title.",
      "input": "    import UIKit",
      "output": "    import UIKit\n\n    func createRoundedButton(title: String, backgroundColor: UIColor, borderColor: UIColor, cornerRadius: CGFloat) -> UIButton {\n        let button = UIButton(type: .system)\n        button.setTitle(title, for: .normal)\n        button.backgroundColor = backgroundColor\n        button.layer.borderColor = borderColor.cgColor\n        button.layer.borderWidth = 1\n        button.layer.cornerRadius = cornerRadius\n        button.clipsToBounds = true\n        return button\n    }"
    },
    {
      "instruction": " Write a function that uses CoreMotion to start updating accelerometer data, and then prints the accelerometer data to the console.",
      "input": "    import CoreMotion",
      "output": "    import CoreMotion\n\n    func startAccelerometerUpdates() {\n        let motionManager = CMMotionManager()\n        \n        if motionManager.isAccelerometerAvailable {\n            motionManager.accelerometerUpdateInterval = 0.1\n            motionManager.startAccelerometerUpdates(to: .main) { data, error in\n                guard let data = data, error == nil else {\n                    return\n                }\n\n                print(\"Accelerometer Data: \\(data)\")\n            }\n        } else {\n            print(\"Accelerometer not available on this device.\")\n        }\n    }"
    },
    {
      "instruction": " Write a function that takes a string and a UIFont as input and returns the size of the string when rendered with the given font.",
      "input": "    import UIKit",
      "output": "    import UIKit\n\n    func textSize(for text: String, font: UIFont) -> CGSize {\n        let attributedString = NSAttributedString(string: text, attributes: [.font: font])\n        return attributedString.size()\n    }"
    },
    {
      "instruction": " Implement a function that takes a UITableView, an array of data, and a cell configuration closure, and then registers, dequeues, and configures cells using the provided closure.",
      "input": "    import UIKit",
      "output": "    import UIKit\n\n    func configureTableView<T: UITableViewCell>(_ tableView: UITableView, data: [Any], cellIdentifier: String, configureCell: @escaping (T, Any) -> Void) {\n        tableView.register(T.self, forCellReuseIdentifier: cellIdentifier)\n        \n        let numberOfRows = data.count\n        for row in 0..<numberOfRows {\n            let indexPath = IndexPath(row: row, section: 0)\n            guard let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath) as? T else {\n                continue\n            }\n            configureCell(cell, data[row])\n        }\n    }"
    },
    {
      "instruction": " Write a function that takes a date and a format string as input and returns a string representation of the date using the given format.",
      "input": "    import Foundation",
      "output": "    import Foundation\n\n    func formatDate(_ date: Date, format: String) -> String {\n        let dateFormatter = DateFormatter()\n        dateFormatter.dateFormat = format\n        return dateFormatter.string(from: date)\n    }"
    },
    {
      "instruction": "Write a Swift function to download an image from a URL and set it to a UIImageView",
      "input": "",
      "output": "import UIKit\n\nclass ImageDownloader {\n    static func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n        URLSession.shared.dataTask(with: url) { data, response, error in\n            guard let data = data, error == nil else {\n                print(\"Error downloading image: \\(error?.localizedDescription ?? \"Unknown error\")\")\n                completion(nil)\n                return\n            }\n\n            DispatchQueue.main.async {\n                let image = UIImage(data: data)\n                completion(image)\n            }\n        }.resume()\n    }\n}\n\nextension UIImageView {\n    func setImage(from url: URL) {\n        ImageDownloader.downloadImage(from: url) { [weak self] image in\n            self?.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift class for a custom UITableViewCell that displays a thumbnail, title, and subtitle",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let thumbnailImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.font = UIFont.systemFont(ofSize: 16, weight: .bold)\n        return label\n    }()\n    \n    let subtitleLabel: UILabel = {\n        let label = UILabel()\n        label.font = UIFont.systemFont(ofSize: 14, weight: .regular)\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        \n        addSubview(thumbnailImageView)\n        addSubview(titleLabel)\n        addSubview(subtitleLabel)\n        \n        setupLayout()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupLayout() {\n        thumbnailImageView.translatesAutoresizingMaskIntoConstraints = false\n        titleLabel.translatesAutoresizingMaskIntoConstraints = false\n        subtitleLabel.translatesAutoresizingMaskIntoConstraints = false\n        \n        NSLayoutConstraint.activate([\n            thumbnailImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 16),\n            thumbnailImageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            thumbnailImageView.widthAnchor.constraint(equalToConstant: 50),\n            thumbnailImageView.heightAnchor.constraint(equalToConstant: 50),\n            \n            titleLabel.leadingAnchor.constraint(equalTo: thumbnailImageView.trailingAnchor, constant: 16),\n            titleLabel.topAnchor.constraint(equalTo: topAnchor, constant: 16),\n            \n            subtitleLabel.leadingAnchor.constraint(equalTo: titleLabel.leadingAnchor),\n            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 8)\n        ])\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that creates a custom UIAlertController with a text field, and returns the entered text when the user taps \"Submit\"",
      "input": "",
      "output": "import UIKit\n\nfunc presentCustomAlertController(withTitle title: String, message: String, in viewController: UIViewController, submitHandler: @escaping (String?) -> Void) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    alertController.addTextField { textField in\n        textField.placeholder = \"Enter text here\"\n    }\n    \n    let submitAction = UIAlertAction(title: \"Submit\", style: .default) { _ in\n        let enteredText = alertController.textFields?.first?.text\n        submitHandler(enteredText)\n    }\n    \n    let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n    \n    alertController.addAction(submitAction)\n    alertController.addAction(cancelAction)\n    \n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift function that animates a view's alpha from 0 to 1 with a specified duration",
      "input": "",
      "output": "import UIKit\n\nfunc fadeIn(_ view: UIView, duration: TimeInterval) {\n    view.alpha = 0\n    UIView.animate(withDuration: duration) {\n        view.alpha = 1\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that retrieves a list of contacts stored on the user's device, displaying the contact's name and phone number",
      "input": "",
      "output": "import Contacts\n\nfunc fetchContacts(completion: @escaping ([CNContact]) -> Void) {\n    let store = CNContactStore()\n    store.requestAccess(for: .contacts) { granted, error in\n        if granted {\n            let keysToFetch = [CNContactFormatter.descriptorForRequiredKeys(for: .fullName), CNContactPhoneNumbersKey] as [Any]\n            let request = CNContactFetchRequest(keysToFetch: keysToFetch as! [CNKeyDescriptor])\n            \n            var contacts: [CNContact] = []\n            do {\n                try store.enumerateContacts(with: request) { contact, _ in\n                    contacts.append(contact)\n                }\n            } catch {\n                print(\"Error fetching contacts: \\(error.localizedDescription)\")\n            }\n            completion(contacts)\n        } else {\n            print(\"Access to contacts not granted\")\n            completion([])\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that uses CoreLocation to retrieve the user's current location and display it in a UILabel",
      "input": "",
      "output": "import CoreLocation\nimport UIKit\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n    let locationLabel = UILabel()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupLocationManager()\n        setupLocationLabel()\n    }\n    \n    private func setupLocationManager() {\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n    \n    private func setupLocationLabel() {\n        locationLabel.translatesAutoresizingMaskIntoConstraints = false\n        locationLabel.numberOfLines = 0\n        view.addSubview(locationLabel)\n        \n        NSLayoutConstraint.activate([\n            locationLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            locationLabel.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n            locationLabel.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),\n            locationLabel.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16)\n        ])\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            locationLabel.text = \"Latitude: \\(location.coordinate.latitude)\\nLongitude: \\(location.coordinate.longitude)\"\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error getting location: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that creates a custom UIButton with rounded corners and a gradient background",
      "input": "",
      "output": "import UIKit\n\nclass CustomGradientButton: UIButton {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupButton()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupButton()\n    }\n    \n    private func setupButton() {\n        layer.cornerRadius = frame.height / 2\n        \n        let gradientLayer = CAGradientLayer()\n        gradientLayer.frame = bounds\n        gradientLayer.colors = [UIColor.red.cgColor, UIColor.orange.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0.5)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 0.5)\n        gradientLayer.cornerRadius = layer.cornerRadius\n        \n        layer.insertSublayer(gradientLayer, at: 0)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that plays a sound file using AVFoundation",
      "input": "",
      "output": "import AVFoundation\n\nclass SoundPlayer {\n    private var audioPlayer: AVAudioPlayer?\n\n    func playSound(named soundName: String) {\n        guard let url = Bundle.main.url(forResource: soundName, withExtension: nil) else {\n            print(\"Sound file not found\")\n            return\n        }\n\n        do {\n            audioPlayer = try AVAudioPlayer(contentsOf: url)\n            audioPlayer?.play()\n        } catch {\n            print(\"Error playing sound: \\(error.localizedDescription)\")\n        }\n    }\n}"
    },
    {
      "instruction": " Implement a custom UICollectionView flow layout to display items in a grid with 2 columns and a fixed item height.",
      "input": "",
      "output": "import UIKit\n\nclass CustomFlowLayout: UICollectionViewFlowLayout {\n\n    private let numberOfColumns = 2\n    private let itemHeight: CGFloat = 200\n\n    override func prepare() {\n        super.prepare()\n\n        guard let collectionView = collectionView else { return }\n\n        let availableWidth = collectionView.bounds.width - (sectionInset.left + sectionInset.right)\n        let itemWidth = (availableWidth / CGFloat(numberOfColumns)).rounded(.down)\n\n        itemSize = CGSize(width: itemWidth, height: itemHeight)\n        minimumLineSpacing = 20\n        minimumInteritemSpacing = 0\n        sectionInset = UIEdgeInsets(top: 20, left: 20, bottom: 20, right: 20)\n    }\n}"
    },
    {
      "instruction": " Write a function in Swift language that takes an array of integers as input and returns the sum of all even numbers within the array.",
      "input": "let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
      "output": "func sumOfEvenNumbers(_ numbers: [Int]) -> Int {\n    return numbers.filter { $0 % 2 == 0 }.reduce(0, +)\n}\n\nlet sum = sumOfEvenNumbers(numbers)\nprint(sum)"
    },
    {
      "instruction": " Write a Swift function to calculate the factorial of a given non-negative integer using recursion.",
      "input": "5",
      "output": "func factorial(_ n: Int) -> Int {\n    if n <= 1 {\n        return 1\n    }\n    return n * factorial(n - 1)\n}\n\nlet result = factorial(5)\nprint(result)"
    },
    {
      "instruction": " Write a function in Swift language that takes a string as input and returns a dictionary with the count of each character (excluding spaces) in the string.",
      "input": "let inputString = \"hello world\"",
      "output": "func characterCount(_ input: String) -> [Character: Int] {\n    var countDict: [Character: Int] = [:]\n    for char in input where char != \" \" {\n        countDict[char] = (countDict[char] ?? 0) + 1\n    }\n    return countDict\n}\n\nlet count = characterCount(inputString)\nprint(count)"
    },
    {
      "instruction": " Write a function in Swift language to generate a random password of given length with at least one uppercase letter, one lowercase letter, and one digit.",
      "input": "8",
      "output": "import Foundation\n\nfunc generateRandomPassword(_ length: Int) -> String {\n    let uppercaseLetters = Array(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    let lowercaseLetters = Array(\"abcdefghijklmnopqrstuvwxyz\")\n    let digits = Array(\"0123456789\")\n\n    var password = [Character]()\n    password.append(uppercaseLetters.randomElement()!)\n    password.append(lowercaseLetters.randomElement()!)\n    password.append(digits.randomElement()!)\n\n    while password.count < length {\n        password.append([uppercaseLetters, lowercaseLetters, digits].flatMap { $0 }.randomElement()!)\n    }\n\n    password.shuffle()\n\n    return String(password)\n}\n\nlet randomPassword = generateRandomPassword(8)\nprint(randomPassword)"
    },
    {
      "instruction": " Write a function in Swift language that takes a collection of UIView instances and applies a rounded corner radius to each view.",
      "input": "let views: [UIView] = [view1, view2, view3]",
      "output": "import UIKit\n\nfunc applyRoundedCornersToViews(_ views: [UIView], cornerRadius: CGFloat) {\n    for view in views {\n        view.layer.cornerRadius = cornerRadius\n        view.clipsToBounds = true\n    }\n}\n\napplyRoundedCornersToViews(views, cornerRadius: 10.0)"
    },
    {
      "instruction": " Write a Swift function that takes a string as input and removes all vowels from the string.",
      "input": "let inputString = \"Hello, world!\"",
      "output": "func removeVowels(_ input: String) -> String {\n    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"]\n    return String(input.filter { !vowels.contains($0) })\n}\n\nlet stringWithoutVowels = removeVowels(inputString)\nprint(stringWithoutVowels)"
    },
    {
      "instruction": " Write a function in Swift language that takes an array of integers as input and returns an array with the squares of all input integers.",
      "input": "let numbers = [1, 2, 3, 4, 5]",
      "output": "func squareOfNumbers(_ numbers: [Int]) -> [Int] {\n    return numbers.map { $0 * $0 }\n}\n\nlet squaredNumbers = squareOfNumbers(numbers)\nprint(squaredNumbers)"
    },
    {
      "instruction": "Create a custom UICollectionViewCell with a UIImageView and UILabel",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    private lazy var imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n    \n    private lazy var label: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textAlignment = .center\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        addSubview(imageView)\n        addSubview(label)\n        \n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.heightAnchor.constraint(equalTo: heightAnchor, multiplier: 0.75),\n            \n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            label.leadingAnchor.constraint(equalTo: leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: trailingAnchor),\n            label.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " Implement a custom UITableViewHeaderFooterView with a UILabel and a UIButton",
      "input": "",
      "output": "import UIKit\n\nclass CustomHeaderFooterView: UITableViewHeaderFooterView {\n    private lazy var titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    private lazy var actionButton: UIButton = {\n        let button = UIButton(type: .system)\n        button.translatesAutoresizingMaskIntoConstraints = false\n        return button\n    }()\n    \n    override init(reuseIdentifier: String?) {\n        super.init(reuseIdentifier: reuseIdentifier)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        addSubview(titleLabel)\n        addSubview(actionButton)\n        \n        NSLayoutConstraint.activate([\n            titleLabel.centerYAnchor.constraint(equalTo: centerYAnchor),\n            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 16),\n            \n            actionButton.centerYAnchor.constraint(equalTo: centerYAnchor),\n            actionButton.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -16),\n        ])\n    }\n}"
    },
    {
      "instruction": " Create a custom UITextField with a left icon image and padding",
      "input": "",
      "output": "import UIKit\n\nclass CustomTextField: UITextField {\n    var padding: UIEdgeInsets\n    var leftIcon: UIImage? {\n        didSet {\n            updateLeftIcon()\n        }\n    }\n\n    init(padding: UIEdgeInsets = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0)) {\n        self.padding = padding\n        super.init(frame: .zero)\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    override func textRect(forBounds bounds: CGRect) -> CGRect {\n        return bounds.inset(by: padding)\n    }\n\n    override func editingRect(forBounds bounds: CGRect) -> CGRect {\n        return textRect(forBounds: bounds)\n    }\n\n    private func updateLeftIcon() {\n        if let icon = leftIcon {\n            let iconView = UIImageView(image: icon)\n            leftView = iconView\n            leftViewMode = .always\n            padding.left = iconView.frame.width + 8\n        } else {\n            leftView = nil\n            leftViewMode = .never\n            padding.left = 0\n        }\n    }\n}"
    },
    {
      "instruction": " Implement a UIViewController with a UIScrollView and a UIStackView containing multiple UILabels",
      "input": "",
      "output": "import UIKit\n\nclass ScrollableStackViewController: UIViewController {\n    private lazy var scrollView: UIScrollView = {\n        let scrollView = UIScrollView()\n        scrollView.translatesAutoresizingMaskIntoConstraints = false\n        return scrollView\n    }()\n    \n    private lazy var stackView: UIStackView = {\n        let stackView = UIStackView()\n        stackView.translatesAutoresizingMaskIntoConstraints = false\n        stackView.axis = .vertical\n        stackView.spacing = 8\n        return stackView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupViews()\n    }\n    \n    private func setupViews() {\n        view.addSubview(scrollView)\n        scrollView.addSubview(stackView)\n        \n        for _ in 0..<10 {\n            let label = UILabel()\n            label.text = \"Lorem ipsum dolor sit amet\"\n            stackView.addArrangedSubview(label)\n        }\n        \n        NSLayoutConstraint.activate([\n            scrollView.topAnchor.constraint(equalTo: view.topAnchor),\n            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            \n            stackView.topAnchor.constraint(equalTo: scrollView.contentLayoutGuide.topAnchor),\n            stackView.bottomAnchor.constraint(equalTo: scrollView.contentLayoutGuide.bottomAnchor),\n           stackView.leadingAnchor.constraint(equalTo: scrollView.frameLayoutGuide.leadingAnchor),\n            stackView.trailingAnchor.constraint(equalTo: scrollView.frameLayoutGuide.trailingAnchor),\n            stackView.widthAnchor.constraint(equalTo: scrollView.frameLayoutGuide.widthAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " Create a custom UIButton with rounded corners, a background color, and a shadow",
      "input": "",
      "output": "import UIKit\n\nclass CustomButton: UIButton {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        setupView()\n    }\n    \n    private func setupView() {\n        setTitleColor(.white, for: .normal)\n        backgroundColor = .systemBlue\n        layer.cornerRadius = 12\n        layer.shadowColor = UIColor.black.cgColor\n        layer.shadowOffset = CGSize(width: 0, height: 2)\n        layer.shadowOpacity = 0.3\n        layer.shadowRadius = 4\n    }\n}"
    },
    {
      "instruction": " Implement a custom UISlider with a custom track and thumb image",
      "input": "",
      "output": "import UIKit\n\nclass CustomSlider: UISlider {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        setupView()\n    }\n    \n    private func setupView() {\n        setThumbImage(UIImage(named: \"thumbImage\"), for: .normal)\n        setMinimumTrackImage(UIImage(named: \"minTrackImage\"), for: .normal)\n        setMaximumTrackImage(UIImage(named: \"maxTrackImage\"), for: .normal)\n    }\n}"
    },
    {
      "instruction": " Create a UIViewController with a UICollectionView displaying images in a grid layout",
      "input": "",
      "output": "import UIKit\n\nclass ImageGridViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    private let cellReuseIdentifier = \"ImageCell\"\n    private let images: [UIImage] = [] // Your array of images\n    \n    private lazy var collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        layout.minimumInteritemSpacing = 8\n        layout.minimumLineSpacing = 8\n        \n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: cellReuseIdentifier)\n        return collectionView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupViews()\n    }\n    \n    private func setupViews() {\n        view.addSubview(collectionView)\n        \n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return images.count\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellReuseIdentifier, for: indexPath)\n        let imageView = UIImageView(image: images[indexPath.item])\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        cell.contentView.addSubview(imageView)\n        imageView.frame = cell.contentView.bounds\n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        let numberOfColumns: CGFloat = 3\n        let spacing: CGFloat = 8\n        let totalSpacing = (numberOfColumns - 1) * spacing\n        let itemWidth = (collectionView.bounds.width - totalSpacing) / numberOfColumns\n        return CGSize(width: itemWidth, height: itemWidth)\n    }\n}"
    },
    {
      "instruction": " Implement a UITableViewController with a search bar and a filtered list of items",
      "input": "",
      "output": "import UIKit\n\nclass SearchTableViewController: UITableViewController, UISearchBarDelegate {\n    private let cellReuseIdentifier = \"SearchCell\"\n    private let items: [String] = [\"Apple\", \"Banana\", \"Orange\", \"Grape\", \"Mango\"]\n    private var filteredItems: [String] = []\n    \n    private lazy var searchBar: UISearchBar = {\n        let searchBar = UISearchBar()\n        searchBar.delegate = self\n        return searchBar\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupViews()\n    }\n    \n    private func setupViews() {\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)\n        tableView.tableHeaderView = searchBar\n        filteredItems = items\n    }\n    \n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return filteredItems.count\n    }\n    \n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView"
    },
    {
      "instruction": " Write a Swift function to fetch JSON data from a URL and decode it into a custom data model",
      "input": "",
      "output": "import Foundation\n\nstruct User: Decodable {\n    let id: Int\n    let name: String\n}\n\nfunc fetchJSONData(url: String, completion: @escaping (User?, Error?) -> Void) {\n    guard let url = URL(string: url) else {\n        completion(nil, NSError(domain: \"Invalid URL\", code: -1, userInfo: nil))\n        return\n    }\n\n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil else {\n            completion(nil, error)\n            return\n        }\n\n        do {\n            let decoder = JSONDecoder()\n            let user = try decoder.decode(User.self, from: data)\n            completion(user, nil)\n        } catch {\n            completion(nil, error)\n        }\n    }.resume()\n}\n\n// Usage example\nfetchJSONData(url: \"https://jsonplaceholder.typicode.com/users/1\") { user, error in\n    if let user = user {\n        print(\"User name: \\(user.name)\")\n    } else {\n        print(\"Error: \\(error?.localizedDescription ?? \"Unknown error\")\")\n    }\n}"
    },
    {
      "instruction": "Implement a function that fetches data from a JSON API and parses it into Swift objects.",
      "input": "struct User: Codable {\n    let id: Int\n    let name: String\n    let email: String\n}\n\nfunc fetchUsers(completion: @escaping ([User]?) -> ()) {\n    // TODO: Add your code here\n}",
      "output": "import Foundation\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let email: String\n}\n\nfunc fetchUsers(completion: @escaping ([User]?) -> ()) {\n    let url = URL(string: \"https://api.example.com/users\")!\n    \n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil else {\n            completion(nil)\n            return\n        }\n        \n        let decoder = JSONDecoder()\n        let users = try? decoder.decode([User].self, from: data)\n        completion(users)\n    }.resume()\n}"
    },
    {
      "instruction": " Create a custom UITableViewCell with a label and an image view.",
      "input": "// TODO: Add your code here",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let nameLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    let iconImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        \n        addSubview(nameLabel)\n        addSubview(iconImageView)\n        \n        NSLayoutConstraint.activate([\n            iconImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 16),\n            iconImageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            iconImageView.widthAnchor.constraint(equalToConstant: 40),\n            iconImageView.heightAnchor.constraint(equalToConstant: 40),\n            \n            nameLabel.leadingAnchor.constraint(equalTo: iconImageView.trailingAnchor, constant: 16),\n            nameLabel.centerYAnchor.constraint(equalTo: centerYAnchor),\n            nameLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -16),\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " Implement a view controller that uses UICollectionView with a custom UICollectionViewCell.",
      "input": "// TODO: Add your code here",
      "output": "import UIKit\n\nclass CustomCollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    private let reuseIdentifier = \"customCell\"\n    private var collectionView: UICollectionView!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let layout = UICollectionViewFlowLayout()\n        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: reuseIdentifier)\n        \n        view.addSubview(collectionView)\n        \n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),\n        ])\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        \n        // Configure the cell\n        cell.backgroundColor = .red\n        \n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: 100, height: 100)\n    }\n}"
    },
    {
      "instruction": " Implement a function that saves an image to the user's photo library.",
      "input": "import UIKit\n\nfunc saveImageToLibrary(image: UIImage) {\n    // TODO: Add your code here\n}",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToLibrary(image: UIImage) {\n    PHPhotoLibrary.requestAuthorization { status in\n        if status == .authorized {\n            PHPhotoLibrary.shared().performChanges({\n                PHAssetChangeRequest.creationRequestForAsset(from: image)\n            }, completionHandler: { success, error in\n                if success {\n                    print(\"Image saved to photo library.\")\n                } else {\n                    print(\"Error saving image: \\(error?.localizedDescription ?? \"Unknown error\")\")\n                }\n            })\n        } else {\n            print(\"Photo library access not granted.\")\n        }\n    }\n}"
    },
    {
      "instruction": " Implement a function that handles push notifications when a user receives a new message.",
      "input": "importUserNotifications\n\nfunc handleNewMessageNotification(userInfo: [AnyHashable: Any]) {\n    // TODO: Add your code here\n}",
      "output": "import UserNotifications\n\nfunc handleNewMessageNotification(userInfo: [AnyHashable: Any]) {\n    let content = UNMutableNotificationContent()\n    content.title = \"New Message\"\n    content.body = userInfo[\"message\"] as? String ?? \"You have a new message.\"\n    content.sound = UNNotificationSound.default\n    \n    let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 1, repeats: false)\n    let request = UNNotificationRequest(identifier: \"newMessage\", content: content, trigger: trigger)\n    \n    UNUserNotificationCenter.current().add(request) { error in\n        if let error = error {\n            print(\"Error scheduling notification: \\(error.localizedDescription)\")\n        } else {\n            print(\"Notification scheduled successfully.\")\n        }\n    }\n}"
    },
    {
      "instruction": " Implement a function that downloads and caches an image from a URL.",
      "input": "import UIKit\n\nfunc loadImage(url: URL, completion: @escaping (UIImage?) -> ()) {\n    // TODO: Add your code here\n}",
      "output": "import UIKit\n\nlet imageCache = NSCache<NSURL, UIImage>()\n\nfunc loadImage(url: URL, completion: @escaping (UIImage?) -> ()) {\n    if let cachedImage = imageCache.object(forKey: url as NSURL) {\n        completion(cachedImage)\n        return\n    }\n    \n    URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, let image = UIImage(data: data), error == nil else {\n            completion(nil)\n            return\n        }\n        \n        imageCache.setObject(image, forKey: url as NSURL)\n        completion(image)\n    }.resume()\n}"
    },
    {
      "instruction": " Implement a view controller that plays a video from a remote URL.",
      "input": "// TODO: Add your code here",
      "output": "import UIKit\nimport AVFoundation\nimport AVKit\n\nclass VideoPlayerViewController: UIViewController {\n    private var player: AVPlayer!\n    private var playerLayer: AVPlayerLayer!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        guard let url = URL(string: \"https://example.com/video.mp4\") else { return }\n        player = AVPlayer(url: url)\n        playerLayer = AVPlayerLayer(player: player)\n        playerLayer.frame = view.bounds\n        playerLayer.videoGravity = .resizeAspect\n        view.layer.addSublayer(playerLayer)\n        \n        playVideo()\n    }\n    \n    func playVideo() {\n        player.play()\n    }\n    \n    override func viewWillDisappear(_ animated: Bool) {\n        super.viewWillDisappear(animated)\n        player.pause()\n    }\n    \n    deinit {\n        player.replaceCurrentItem(with: nil)\n    }\n}"
    },
    {
      "instruction": " Implement a function that reads a text file from the app bundle and returns its content as a string.",
      "input": "func readTextFile(named fileName: String) -> String? {\n    // TODO: Add your code here\n}",
      "output": "import Foundation\n\nfunc readTextFile(named fileName: String) -> String? {\n    guard let path = Bundle.main.path(forResource: fileName, ofType: \"txt\") else { return nil }\n    \n    do {\n        let contents = try String(contentsOfFile: path, encoding: .utf8)\n        return contents\n    } catch {\n        print(\"Error reading text file: \\(error.localizedDescription)\")\n        return nil\n    }\n}"
    },
    {
      "instruction": "Implement a TableView with a custom TableViewCell that displays a user's name, profile picture, and a short bio.",
      "input": "1. Create a custom TableViewCell by subclassing UITableViewCell and adding three UI elements: a UILabel for the user's name, a UIImageView for the profile picture, and another UILabel for the short bio.\n2. Set up the UI elements' constraints in the custom cell's init() method.\n3. Implement a TableView in a UIViewController, registering the custom cell with a reuse identifier.\n4. Set up the UITableViewDataSource and UITableViewDelegate protocols, and the required methods to display the custom cells with data.",
      "output": "class CustomTableViewCell: UITableViewCell {\n    let nameLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    let profileImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let bioLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        contentView.addSubview(nameLabel)\n        contentView.addSubview(profileImageView)\n        contentView.addSubview(bioLabel)\n        \n        NSLayoutConstraint.activate([\n            profileImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 8),\n            profileImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            profileImageView.widthAnchor.constraint(equalToConstant: 50),\n            profileImageView.heightAnchor.constraint(equalToConstant: 50),\n            \n            nameLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 8),\n            nameLabel.leadingAnchor.constraint(equalTo: profileImageView.trailingAnchor, constant: 8),\n            nameLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -8),\n            \n            bioLabel.topAnchor.constraint(equalTo: nameLabel.bottomAnchor, constant: 8),\n            bioLabel.leadingAnchor.constraint(equalTo: nameLabel.leadingAnchor),\n            bioLabel.trailingAnchor.constraint(equalTo: nameLabel.trailingAnchor),\n            bioLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -8),\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n\nclass UsersTableViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n    private let tableView = UITableView()\n    private let cellReuseIdentifier = \"CustomTableViewCell\"\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        tableView.translatesAutoresizingMaskIntoConstraints = false\n        view.addSubview(tableView)\n        NSLayoutConstraint.activate([\n            tableView.topAnchor.constraint(equalTo: view.topAnchor),\n            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n        ])\n        \n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)\n        \n        tableView.dataSource = self\n        tableView.delegate = self\n    }\n    \n    // UITableViewDataSource methods\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return users.count\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier, for: indexPath) as! CustomTableViewCell\n        let user = users[indexPath.row]\n        \n        cell.nameLabel.text = user.name\n        cell.profileImageView.image = user.profileImage\n        cell.bioLabel.text = user.bio\n        \n        return cell\n    }\n    \n    // UITableViewDelegate methods\n    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {\n        return 80\n    }\n}"
    },
    {
      "instruction": " \n\n\nCreate a simple login screen with email and password input fields, a \"Login\" button, and an activity indicator that appears while the login request is in progress.",
      "input": "1. Add two UITextField instances for the email and password input fields.\n2. Add a UIButton for the \"Login\" action.\n3. Add a UIActivityIndicatorView for displaying the login request progress.\n4. Set up the UI elements' constraints in a UIViewController's viewDidLoad() method.\n5. Implement the login button's action to toggle the activity indicator and simulate a login request.",
      "output": "class LoginViewController: UIViewController {\n    private let emailTextField: UITextField = {\n        let textField = UITextField()\n        textField.translatesAutoresizingMaskIntoConstraints = false\n        textField.placeholder = \"Email\"\n        textField.borderStyle = .roundedRect\n        return textField\n    }()\n    \n    private let passwordTextField: UITextField = {\n        let textField = UITextField()\n        textField.translatesAutoresizingMaskIntoConstraints = false\n        textField.placeholder = \"Password\"\n        textField.borderStyle = .roundedRect\n        textField.isSecureTextEntry = true\n        return textField\n    }()\n    \n    private let loginButton: UIButton = {\n        let button = UIButton(type: .system)\n        button.translatesAutoresizingMaskIntoConstraints = false\n        button.setTitle(\"Login\", for: .normal)\n        return button\n    }()\n    \n    private let activityIndicator: UIActivityIndicatorView = {\n        let indicator = UIActivityIndicatorView(style: .medium)\n        indicator.translatesAutoresizingMaskIntoConstraints = false\n        indicator.hidesWhenStopped = true\n        return indicator\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(emailTextField)\n        view.addSubview(passwordTextField)\n        view.addSubview(loginButton)\n        view.addSubview(activityIndicator)\n        \n        NSLayoutConstraint.activate([\n            emailTextField.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            emailTextField.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 100),\n            emailTextField.widthAnchor.constraint(equalToConstant: 200),\n            emailTextField.heightAnchor.constraint(equalToConstant: 40),\n            \n            passwordTextField.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            passwordTextField.topAnchor.constraint(equalTo: emailTextField.bottomAnchor, constant: 16),\n            passwordTextField.widthAnchor.constraint(equalToConstant: 200),\n            passwordTextField.heightAnchor.constraint(equalToConstant: 40),\n            \n            loginButton.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            loginButton.topAnchor.constraint(equalTo: passwordTextField.bottomAnchor, constant: 16),\n            \n            activityIndicator.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            activityIndicator.centerYAnchor.constraint(equalTo: view.centerYAnchor),\n        ])\n        \n        loginButton.addTarget(self, action: #selector(loginButtonTapped), for: .touchUpInside)\n    }\n    \n    @objc private func loginButtonTapped() {\n        activityIndicator.startAnimating()\n        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {\n            self.activityIndicator.stopAnimating()\n        }\n    }\n}"
    },
    {
      "instruction": " \n\n\nCreate a custom UIView class that displays a circular progress bar using Core Graphics.",
      "input": "1. Subclass UIView and override the draw(_ rect: CGRect) method to draw a circular progress bar using Core Graphics.\n2. Add a public property to set the progress value (between 0 and 1).",
      "output": "class CircularProgressView: UIView {\n    private let progressLayer = CAShapeLayer()\n    private let backgroundLayer = CAShapeLayer()\n    \n    var progress: CGFloat = 0 {\n        didSet {\n            setNeedsDisplay()\n        }\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupLayers()\n    }\n    \n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        setupLayers()\n    }\n    \n    private func setupLayers() {\n        layer.addSublayer(backgroundLayer)\n        layer.addSublayer(progressLayer)\n    }\n    \n    override func draw(_ rect: CGRect) {\n        let lineWidth: CGFloat = 10\n        let startAngle: CGFloat = -.pi / 2\n        let endAngle: CGFloat = 2 * .pi * progress + startAngle\n        \n        let center = CGPoint(x: rect.midX, y: rect.midY)\n        let radius = min(rect.width, rect.height) / 2 - lineWidth / 2\n        \n        let backgroundPath = UIBezierPath(arcCenter: center, radius: radius, startAngle: 0, endAngle: 2 * .pi, clockwise: true)\n        backgroundLayer.path = backgroundPath.cgPath\n        backgroundLayer.strokeColor = UIColor.lightGray.cgColor\n        backgroundLayer.lineWidth = lineWidth\n        backgroundLayer.fillColor = UIColor.clear.cgColor\n        \n        let progressPath = UIBezierPath(arcCenter: center, radius: radius, startAngle: startAngle, endAngle: endAngle, clockwise: true)\n        progressLayer.path = progressPath.cgPath\n        progressLayer.strokeColor = UIColor.blue.cgColor\n        progressLayer.lineWidth = lineWidth\n        progressLayer.lineCap = .round\n        progressLayer.fillColor = UIColor.clear.cgColor\n    }\n}"
    },
    {
      "instruction": "Create a custom UICollectionViewCell that displays an image and a label in a grid layout.",
      "input": "1. Subclass UICollectionViewCell, adding a UIImageView and a UILabel as subviews.\n2. Set up the UI elements' constraints in the custom cell's init() method.\n3. Implement a UICollectionView in a UIViewController, registering the custom cell with a reuse identifier.\n4. Set up the UICollectionViewDataSource protocol and the required methods to display the custom cells with data.",
      "output": "class CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textAlignment = .center\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(imageView)\n        contentView.addSubview(titleLabel)\n        \n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n            \n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 4),\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented"
    },
    {
      "instruction": " \nWrite a Swift function to create a UICollectionView with custom UICollectionViewCell to display a list of movies with their title, poster image, and release date.",
      "input": "class MovieCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var posterImageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n    @IBOutlet weak var releaseDateLabel: UILabel!\n}\n\nstruct Movie {\n    let title: String\n    let posterImage: UIImage\n    let releaseDate: String\n}\n\nclass ViewController: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource {\n    @IBOutlet weak var collectionView: UICollectionView!\n\n    private var movies: [Movie] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        configureCollectionView()\n    }\n\n    func configureCollectionView() {\n        collectionView.delegate = self\n        collectionView.dataSource = self\n        collectionView.register(UINib(nibName: \"MovieCollectionViewCell\", bundle: nil), forCellWithReuseIdentifier: \"MovieCollectionViewCell\")\n    }\n    // other code\n}",
      "output": "    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return movies.count\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"MovieCollectionViewCell\", for: indexPath) as? MovieCollectionViewCell else {\n            fatalError(\"Unable to dequeue MovieCollectionViewCell\")\n        }\n        \n        let movie = movies[indexPath.row]\n        cell.titleLabel.text = movie.title\n        cell.posterImageView.image = movie.posterImage\n        cell.releaseDateLabel.text = movie.releaseDate\n        \n        return cell\n    }"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIView with a circular progress bar that represents the percentage of a task completed.",
      "input": "class CircleProgressView: UIView {\n    private var circleLayer = CAShapeLayer()\n    private var progressLayer = CAShapeLayer()\n\n    var progress: CGFloat = 0 {\n        didSet {\n            progressLayer.strokeEnd = progress\n        }\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        createCircularPath()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        createCircularPath()\n    }\n    \n    private func createCircularPath() {\n        // code to create path\n    }\n}",
      "output": "    private func createCircularPath() {\n        let circularPath = UIBezierPath(arcCenter: CGPoint(x: frame.size.width / 2.0, y: frame.size.height / 2.0), radius: frame.size.width / 2.0, startAngle: -.pi / 2, endAngle: 3 * .pi / 2, clockwise: true)\n        \n        circleLayer.path = circularPath.cgPath\n        circleLayer.fillColor = UIColor.clear.cgColor\n        circleLayer.lineCap = .round\n        circleLayer.lineWidth = 10.0\n        circleLayer.strokeColor = UIColor.lightGray.cgColor\n        \n        progressLayer.path = circularPath.cgPath\n        progressLayer.fillColor = UIColor.clear.cgColor\n        progressLayer.lineCap = .round\n        progressLayer.lineWidth = 10.0\n        progressLayer.strokeColor = UIColor.red.cgColor\n        progressLayer.strokeEnd = 0\n        \n        layer.addSublayer(circleLayer)\n        layer.addSublayer(progressLayer)\n    }"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UISlider with a custom thumb image and custom track colors.",
      "input": "class CustomSlider: UISlider {\n\n    override func awakeFromNib() {\n        super.awakeFromNib()\n        configureCustomSlider()\n    }\n    \n    func configureCustomSlider() {\n        setThumbImage(UIImage(named: \"customThumbImage\"), for: .normal)\n        setMinimumTrackTintColor(UIColor.red)\n        setMaximumTrackTintColor(UIColor.green)\n    }\n}",
      "output": "// Use the CustomSlider in your view controller's storyboard or programmatically initialize it.\n// Make sure to add the \"customThumbImage\" in your project's assets."
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UITextField that shows a UIPickerView instead of a keyboard, allowing users to select one option from a list of strings.",
      "input": "class CustomPickerTextField: UITextField, UIPickerViewDataSource, UIPickerViewDelegate {\n\n    private var pickerData: [String] = []\n    private var pickerView: UIPickerView?\n\n    func configure(with data: [String]) {\n        pickerData = data\n        createPickerView()\n    }\n    \n    private func createPickerView() {\n        // code to create UIPickerView\n    }\n}",
      "output": "    private func createPickerView() {\n        pickerView = UIPickerView()\n        pickerView?.delegate = self\n        pickerView?.dataSource = self\n        inputView = pickerView\n    }\n    \n    // UIPickerViewDataSource and UIPickerViewDelegate methods\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return pickerData.count\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return pickerData[row]\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        text = pickerData[row]\n    }"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIButton with a gradient background and rounded corners.",
      "input": "class GradientButton: UIButton {\n    \n    override func awakeFromNib() {\n        super.awakeFromNib()\n        configureGradientBackground()\n    }\n    \n    func configureGradientBackground() {\n        // code to create gradient background and rounded corners\n    }\n}",
      "output": "    func configureGradientBackground() {\n        let gradientLayer = CAGradientLayer()\n        gradientLayer.frame = bounds\n        gradientLayer.colors = [UIColor.red.cgColor, UIColor.blue.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 1)\n        \n        layer.insertSublayer(gradientLayer, at: 0)\n        layer.cornerRadius = bounds.height / 2\n        clipsToBounds = true\n    }"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UIViewController transition animation when presenting a new view controller.",
      "input": "class CustomTransition: NSObject, UIViewControllerAnimatedTransitioning {\n\n    func transitionDuration(using transitionContext: UIViewControllerContextTransitioning?) -> TimeInterval {\n        return 0.5\n    }\n    \n    func animateTransition(using transitionContext: UIViewControllerContextTransitioning) {\n        // code to animate custom transition\n    }\n}\n\nclass ViewController: UIViewController, UIViewControllerTransitioningDelegate {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    @IBAction func presentNewViewController(_ sender: UIButton) {\n        let newViewController = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"NewViewController\")\n        newViewController.modalPresentationStyle = .custom\n        newViewController.transitioningDelegate = self\n        present(newViewController, animated: true, completion: nil)\n    }\n    // other code\n}",
      "output": "    func animationController(forPresented presented: UIViewController, presenting: UIViewController, source: UIViewController) -> UIViewControllerAnimatedTransitioning? {\n        return CustomTransition()\n    }\n\n    func animateTransition(using transitionContext: UIViewControllerContextTransitioning) {\n        guard let toViewController = transitionContext.viewController(forKey: .to) else {\n            return\n        }\n        \n        let containerView = transitionContext.containerView\n        containerView.addSubview(toViewController.view)\n        \n        toViewController.view.alpha = 0.0\n        UIView.animate(withDuration: transitionDuration(using: transitionContext), animations: {\n            toViewController.view.alpha = 1.0\n        }, completion: { _ in\n            transitionContext.completeTransition(true)\n        })\n    }"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom pull-to-refresh control in a UITableView.",
      "input": "class ViewController: UITableViewController {\n\n    private let refresh = UIRefreshControl()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        configureRefreshControl()\n    }\n    \n    func configureRefreshControl() {\n        // code to create custom pull-to-refresh control\n    }\n    \n    @objc func refreshData(_ sender: AnyObject) {\n        // code to refresh data\n    }\n}",
      "output": "    func configureRefreshControl() {\n        refresh.addTarget(self, action: #selector(refreshData(_:)), for: .valueChanged"
    },
    {
      "instruction": " Write a Swift function to create a UICollectionView with a custom UICollectionViewCell that contains a UILabel and a UIImageView, using UICollectionViewFlowLayout",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n    \n    let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let cellLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    func setupViews() {\n        addSubview(cellImageView)\n        addSubview(cellLabel)\n        \n        NSLayoutConstraint.activate([\n            cellImageView.centerXAnchor.constraint(equalTo: centerXAnchor),\n            cellImageView.topAnchor.constraint(equalTo: topAnchor, constant: 8),\n            cellImageView.heightAnchor.constraint(equalToConstant: 40),\n            cellImageView.widthAnchor.constraint(equalToConstant: 40),\n            \n            cellLabel.topAnchor.constraint(equalTo: cellImageView.bottomAnchor, constant: 8),\n            cellLabel.leadingAnchor.constraint(equalTo: leadingAnchor),\n            cellLabel.trailingAnchor.constraint(equalTo: trailingAnchor),\n            cellLabel.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -8)\n        ])\n    }\n}\n\nfunc createCustomCollectionView() -> UICollectionView {\n    let layout = UICollectionViewFlowLayout()\n    layout.itemSize = CGSize(width: 100, height: 100)\n    layout.minimumInteritemSpacing = 8\n    layout.minimumLineSpacing = 8\n    \n    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n    collectionView.backgroundColor = .clear\n    collectionView.translatesAutoresizingMaskIntoConstraints = false\n    collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n    return collectionView\n}"
    },
    {
      "instruction": " Write a Swift function to create a UIStackView containing a UITextField, a UIButton, and a UILabel, with specified alignments and spacings",
      "input": "",
      "output": "func createStackView() -> UIStackView {\n    let textField = UITextField()\n    textField.translatesAutoresizingMaskIntoConstraints = false\n    textField.placeholder = \"Enter text\"\n    \n    let button = UIButton(type: .system)\n    button.translatesAutoresizingMaskIntoConstraints = false\n    button.setTitle(\"Submit\", for: .normal)\n    \n    let label = UILabel()\n    label.translatesAutoresizingMaskIntoConstraints = false\n    label.text = \"Result\"\n    \n    let stackView = UIStackView(arrangedSubviews: [textField, button, label])\n    stackView.translatesAutoresizingMaskIntoConstraints = false\n    stackView.axis = .vertical\n    stackView.alignment = .fill\n    stackView.spacing = 8\n    \n    return stackView\n}"
    },
    {
      "instruction": " \nImplement a custom UITableView cell that displays an image, title, and subtitle.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    let subtitleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupViews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupViews() {\n        addSubview(cellImageView)\n        addSubview(titleLabel)\n        addSubview(subtitleLabel)\n        \n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 8),\n            cellImageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            cellImageView.widthAnchor.constraint(equalToConstant: 50),\n            cellImageView.heightAnchor.constraint(equalToConstant: 50),\n            \n            titleLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 8),\n            titleLabel.topAnchor.constraint(equalTo: topAnchor, constant: 8),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -8),\n            \n            subtitleLabel.leadingAnchor.constraint(equalTo: titleLabel.leadingAnchor),\n            subtitleLabel.topAnchor.constraint(equalTo: titleLabel.bottomAnchor, constant: 4),\n            subtitleLabel.trailingAnchor.constraint(equalTo: titleLabel.trailingAnchor),\n            subtitleLabel.bottomAnchor.constraint(equalTo: bottomAnchor, constant: -8)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that takes a CLLocation, a CLLocationDistance, and a CLLocationDirection, and returns a new CLLocation at the specified distance and direction.",
      "input": "",
      "output": "import CoreLocation\n\nfunc location(at distance: CLLocationDistance, from startLocation: CLLocation, direction: CLLocationDirection) -> CLLocation {\n    let distanceRadians = distance / 6_367_000.0\n    let bearingRadians = direction * .pi / 180.0\n\n    let startLatitudeRadians = startLocation.coordinate.latitude * .pi / 180.0\n    let startLongitudeRadians = startLocation.coordinate.longitude * .pi / 180.0\n\n    let endLatitudeRadians = asin(sin(startLatitudeRadians) * cos(distanceRadians) + cos(startLatitudeRadians) * sin(distanceRadians) * cos(bearingRadians))\n    let endLongitudeRadians = startLongitudeRadians + atan2(sin(bearingRadians) * sin(distanceRadians) * cos(startLatitudeRadians), cos(distanceRadians) - sin(startLatitudeRadians) * sin(endLatitudeRadians))\n\n    let endLatitude = endLatitudeRadians * 180.0 / .pi\n    let endLongitude = endLongitudeRadians * 180.0 / .pi\n\n    return CLLocation(latitude: endLatitude, longitude: endLongitude)\n}"
    },
    {
      "instruction": " \nImplement a function that takes a string containing HTML and returns an NSAttributedString with the HTML tags applied.",
      "input": "",
      "output": "import UIKit\n\nfunc attributedStringFromHTML(_ htmlString: String) -> NSAttributedString? {\n    guard let data = htmlString.data(using: .utf8) else {\n        return nil\n    }\n\n    let options: [NSAttributedString.DocumentReadingOptionKey: Any] = [\n        .documentType: NSAttributedString.DocumentType.html,\n        .characterEncoding: String.Encoding.utf8.rawValue\n    ]\n\n    return try? NSAttributedString(data: data, options: options, documentAttributes: nil)\n}"
    },
    {
      "instruction": " \nImplement a function that saves an UIImage to the user's photo library and returns a success or failure message.",
      "input": "",
      "output": "import UIKit\nimport Photos\n\nfunc saveImageToPhotoLibrary(_ image: UIImage, completion: @escaping (Result<Void, Error>) -> Void) {\n    PHPhotoLibrary.requestAuthorization { (status) in\n        switch status {\n        case .authorized:\n            PHPhotoLibrary.shared().performChanges({\n                PHAssetChangeRequest.creationRequestForAsset(from: image)\n            }) { (success, error) in\n                DispatchQueue.main.async {\n                    if let error = error {\n                        completion(.failure(error))\n                    } else {\n                        completion(.success(()))\n                    }\n                }\n            }\n        case .denied, .restricted, .notDetermined:\n            DispatchQueue.main.async {\n                completion(.failure(NSError(domain: \"PhotoLibraryError\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"Unauthorized access to photo library\"])))\n            }\n        @unknown default:\n            fatalError(\"Unknown authorization status\")\n        }\n    }\n}"
    },
    {
      "instruction": " \nImplement a function that takes a UIView and a CGPoint, and returns the UIView's subview at the given point (if any).",
      "input": "",
      "output": "func subview(at point: CGPoint, in view: UIView) -> UIView? {\n    for subview in view.subviews {\n        if subview.frame.contains(point) {\n            return subview\n        }\n    }\n    return nil\n}"
    },
    {
      "instruction": " \nImplement a function that adds a simple animation to a UIButton, making it pulse when tapped.",
      "input": "",
      "output": "import UIKit\n\nfunc addPulseAnimation(to button: UIButton) {\n    let pulseAnimation = CASpringAnimation(keyPath: \"transform.scale\")\n    pulseAnimation.duration = 0.4\n    pulseAnimation.fromValue = 0.95\n    pulseAnimation.toValue = 1.0\n    pulseAnimation.autoreverses = true\n    pulseAnimation.repeatCount = 1\n    pulseAnimation.initialVelocity = 0.5\n    pulseAnimation.damping = 1.0\n\n    button.layer.add(pulseAnimation, forKey: \"pulse\")\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UICollectionViewCell with an ImageView and a UILabel",
      "input": "",
      "output": "class CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView = {\n        let iv = UIImageView()\n        iv.contentMode = .scaleAspectFill\n        iv.clipsToBounds = true\n        iv.translatesAutoresizingMaskIntoConstraints = false\n        return iv\n    }()\n\n    let label: UILabel = {\n        let lbl = UILabel()\n        lbl.textAlignment = .center\n        lbl.translatesAutoresizingMaskIntoConstraints = false\n        return lbl\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        contentView.addSubview(imageView)\n        contentView.addSubview(label)\n\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.heightAnchor.constraint(equalTo: contentView.heightAnchor, multiplier: 0.7),\n\n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            label.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            label.bottomAnchor.constraint(equalTo: contentView.bottomAnchor)\n        ])\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to register a custom UITableViewCell and dequeue it for use in a UITableView",
      "input": "",
      "output": "class CustomTableViewCell: UITableViewCell {\n    // Custom cell content\n}\n\nextension UITableViewController {\n    func registerAndDequeueCustomCell(tableView: UITableView) -> CustomTableViewCell {\n        let cellIdentifier = \"CustomTableViewCell\"\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: cellIdentifier)\n        guard let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier) as? CustomTableViewCell else {\n            fatalError(\"CustomTableViewCell not found\")\n        }\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a UIButton with a custom title and target action",
      "input": "",
      "output": "func createButton(title: String, target: Any, action: Selector) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.addTarget(target, action: action, for: .touchUpInside)\n    button.translatesAutoresizingMaskIntoConstraints = false\n    return button\n}"
    },
    {
      "instruction": " Write a Swift function to create and configure a UIPickerView with a custom data source and delegate",
      "input": "",
      "output": "class CustomPickerView: UIPickerView, UIPickerViewDataSource, UIPickerViewDelegate {\n    var data: [String] = []\n\n    init(data: [String]) {\n        super.init(frame: .zero)\n        self.data = data\n        self.delegate = self\n        self.dataSource = self\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    // UIPickerViewDataSource\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return data.count\n    }\n\n    // UIPickerViewDelegate\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return data[row]\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create and configure a UIPageControl with a custom number of pages and tint colors",
      "input": "",
      "output": "func createPageControl(numberOfPages: Int, currentPageIndicatorTintColor: UIColor, pageIndicatorTintColor: UIColor) -> UIPageControl {\n    let pageControl = UIPageControl()\n    pageControl.numberOfPages = numberOfPages\n    pageControl.currentPageIndicatorTintColor = currentPageIndicatorTintColor\n    pageControl.pageIndicatorTintColor = pageIndicatorTintColor\n    pageControl.translatesAutoresizingMaskIntoConstraints = false\n    return pageControl\n}"
    },
    {
      "instruction": " Write a Swift function to create and configure a UISlider with a custom minimum, maximum, and current value",
      "input": "",
      "output": "func createSlider(minimumValue: Float, maximumValue: Float, currentValue: Float) -> UISlider {\n    let slider = UISlider()\n    slider.minimumValue = minimumValue\n    slider.maximumValue = maximumValue\n    slider.value = currentValue\n    slider.translatesAutoresizingMaskIntoConstraints = false\n    return slider\n}"
    },
    {
      "instruction": " Write a Swift function to create and configure a UISwitch with acustom onTintColor and initial state",
      "input": "",
      "output": "func createSwitch(onTintColor: UIColor, isOn: Bool) -> UISwitch {\n    let switchControl = UISwitch()\n    switchControl.onTintColor = onTintColor\n    switchControl.isOn = isOn\n    switchControl.translatesAutoresizingMaskIntoConstraints = false\n    return switchControl\n}"
    },
    {
      "instruction": "Write a Swift function to create a UIAlertController with an action sheet style that presents a list of options and handles user selection",
      "input": "",
      "output": "func presentActionSheet() {\n    let alertController = UIAlertController(title: \"Choose an option\", message: nil, preferredStyle: .actionSheet)\n\n    let option1 = UIAlertAction(title: \"Option 1\", style: .default) { (action) in\n        print(\"Option 1 selected\")\n    }\n    let option2 = UIAlertAction(title: \"Option 2\", style: .default) { (action) in\n        print(\"Option 2 selected\")\n    }\n    let cancel = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n\n    alertController.addAction(option1)\n    alertController.addAction(option2)\n    alertController.addAction(cancel)\n\n    self.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift code to create a custom UICollectionViewCell with a UIImageView and a UILabel using programmatic layout",
      "input": "",
      "output": "class CustomCollectionViewCell: UICollectionViewCell {\n    let imageView = UIImageView()\n    let titleLabel = UILabel()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    func setupViews() {\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        titleLabel.translatesAutoresizingMaskIntoConstraints = false\n\n        addSubview(imageView)\n        addSubview(titleLabel)\n\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n\n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8),\n            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " Implement a Swift function to fetch data from a remote API using URLSession and decode the JSON response into a Codable model",
      "input": "",
      "output": "struct ApiResponse: Codable {\n    let data: [String: String]\n}\n\nfunc fetchData(completion: @escaping (ApiResponse?, Error?) -> Void) {\n    let urlString = \"https://api.example.com/data\"\n    guard let url = URL(string: urlString) else { return }\n\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        if let error = error {\n            completion(nil, error)\n            return\n        }\n\n        guard let data = data else { return }\n        do {\n            let decodedData = try JSONDecoder().decode(ApiResponse.self, from: data)\n            completion(decodedData, nil)\n        } catch {\n            completion(nil, error)\n        }\n    }.resume()\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UIButton with rounded corners and a drop shadow",
      "input": "",
      "output": "class CustomButton: UIButton {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupButton()\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        setupButton()\n    }\n\n    private func setupButton() {\n        layer.cornerRadius = 10\n        layer.shadowColor = UIColor.black.cgColor\n        layer.shadowOffset = CGSize(width: 0, height: 2)\n        layer.shadowOpacity = 0.2\n        layer.shadowRadius = 4\n    }\n}"
    },
    {
      "instruction": " Implement a Swift function to save and retrieve a String value from UserDefaults",
      "input": "",
      "output": "func saveToUserDefaults(value: String, forKey key: String) {\n    UserDefaults.standard.set(value, forKey: key)\n}\n\nfunc retrieveFromUserDefaults(forKey key: String) -> String? {\n    return UserDefaults.standard.string(forKey: key)\n}"
    },
    {
      "instruction": " Write a Swift function to implement a custom UITableViewController that displays a list of items using a custom UITableViewCell",
      "input": "",
      "output": "class CustomTableViewController: UITableViewController {\n    let items = [\"Item 1\", \"Item 2\", \"Item 3\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"customCell\")\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"customCell\", for: indexPath) as! CustomTableViewCell\n        cell.textLabel?.text = items[indexPath.row]\n        return cell\n    }\n}\n\nclass CustomTableViewCell: UITableViewCell {\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: .subtitle, reuseIdentifier: reuseIdentifier)\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UIView with a gradient background",
      "input": "",
      "output": "class GradientView: UIView {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupGradient()\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        super.init(coder: aDecoder)\n        setupGradient()\n    }\n\n    private func setupGradient() {\n        let gradientLayer = CAGradientLayer()\n        gradientLayer.colors = [UIColor.red.cgColor, UIColor.blue.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 1)\n        gradientLayer.frame = bounds\n        layer.insertSublayer(gradientLayer, at: 0)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement a custom UIViewController that displays a UICollectionView with a custom UICollectionViewCell",
      "input": "",
      "output": "class CustomCollectionViewController: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource {\n    let items = [\"Item 1\", \"Item 2\", \"Item 3\"]\n    var collectionView: UICollectionView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupCollectionView()\n    }\n\n    func setupCollectionView() {\n        let layout = UICollectionViewFlowLayout()\n        layout.itemSize = CGSize(width: 100, height: 100)\n\n        collectionView = UICollectionView(frame: view.bounds, collectionViewLayout: layout)\n        collectionView.delegate = self\n        collectionView.dataSource = self\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: \"customCell\")\n\n        view.addSubview(collectionView)\n    }\n\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"customCell\", for: indexPath) as! CustomCollectionViewCell\n        cell.titleLabel.text = items[indexPath.item]\n        return cell\n    }\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let titleLabel = UILabel()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupViews()\n    }\n\n    required init?(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    func setupViews() {\n        titleLabel.translatesAutoresizingMaskIntoConstraints = false\n        addSubview(titleLabel)\n\n        NSLayoutConstraint.activate([\n            titleLabel.centerXAnchor.constraint(equalTo: centerXAnchor),\n            titleLabel.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " Write a function that creates a horizontal UICollectionView with a custom UICollectionViewCell",
      "input": "",
      "output": "import UIKit\n\nclass CollectionViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate {\n    private let cellReuseIdentifier = \"CustomCell\"\n    private var collectionView: UICollectionView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .horizontal\n        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: cellReuseIdentifier)\n        collectionView.dataSource = self\n        collectionView.delegate = self\n\n        view.addSubview(collectionView)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            collectionView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            collectionView.topAnchor.constraint(equalTo: view.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.bottomAnchor)\n        ])\n    }\n\n    // MARK: - UICollectionViewDataSource\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellReuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        // Configure cell\n        return cell\n    }\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    // Customize your UICollectionViewCell implementation\n}"
    },
    {
      "instruction": " Write a function that creates a UITableViewController with a custom UITableViewCell",
      "input": "",
      "output": "import UIKit\n\nclass TableViewController: UITableViewController {\n    private let cellReuseIdentifier = \"CustomCell\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: cellReuseIdentifier)\n    }\n\n    // MARK: - UITableViewDataSource\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 10\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: cellReuseIdentifier, for: indexPath) as! CustomTableViewCell\n        // Configure cell\n        return cell\n    }\n}\n\nclass CustomTableViewCell: UITableViewCell {\n    // Customize your UITableViewCell implementation\n}"
    },
    {
      "instruction": " Write a function that adds a UIPageControl to a UIScrollView",
      "input": "",
      "output": "import UIKit\n\nclass PageController: UIViewController, UIScrollViewDelegate {\n    private var scrollView: UIScrollView!\n    private var pageControl: UIPageControl!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        scrollView = UIScrollView()\n        scrollView.delegate = self\n        scrollView.isPagingEnabled = true\n        view.addSubview(scrollView)\n        scrollView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            scrollView.topAnchor.constraint(equalTo: view.topAnchor),\n            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor)\n        ])\n\n        pageControl = UIPageControl()\n        pageControl.numberOfPages = 3\n        view.addSubview(pageControl)\n        pageControl.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            pageControl.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n            pageControl.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -10)\n        ])\n    }\n\n    // MARK: - UIScrollViewDelegate\n    func scrollViewDidScroll(_ scrollView: UIScrollView) {\n        let pageIndex = round(scrollView.contentOffset.x / view.frame.width)\n        pageControl.currentPage = Int(pageIndex)\n    }\n}"
    },
    {
      "instruction": " Write a function that creates a custom UIView with a UIImageView and UILabel",
      "input": "",
      "output": "import UIKit\n\nclass CustomView: UIView {\n    private let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFit\n        return imageView\n    }()\n\n    private let label: UILabel = {\n        let label = UILabel()\n        label.textAlignment = .center\n        return label\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n\n    private func setupView() {\n        addSubview(imageView)\n        addSubview(label)\n\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        label.translatesAutoresizingMaskIntoConstraints = false\n\n        NSLayoutConstraint.activate([\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n\n            label.leadingAnchor.constraint(equalTo: leadingAnchor),\n            label.trailingAnchor.constraint(equalTo: trailingAnchor),\n            label.topAnchor.constraint(equalTo: imageView.bottomAnchor),\n            label.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n    }\n\n    func configure(image: UIImage, text: String) {\n        imageView.image = image\n        label.text = text\n    }\n}"
    },
    {
      "instruction": " Write a function that creates a UITextField with a left and right UIView as padding",
      "input": "",
      "output": "import UIKit\n\nclass PaddedTextField: UITextField {\n    private let leftPaddingView: UIView = {\n        let view = UIView()\n        view.backgroundColor = .clear\n        return view\n    }()\n\n    private let rightPaddingView: UIView = {\n        let view = UIView()\n        view.backgroundColor = .clear\n        return view\n    }()\n\n    func configure(leftPadding: CGFloat, rightPadding: CGFloat) {\n        leftPaddingView.frame = CGRect(x: 0, y: 0, width: leftPadding, height: frame.height)\n        leftView = leftPaddingView\n        leftViewMode = .always\n\n        rightPaddingView.frame = CGRect(x: 0, y: 0, width: rightPadding, height: frame.height)\n        rightView = rightPaddingView\n        rightViewMode = .always\n    }\n}"
    },
    {
      "instruction": " Write a function that creates a custom UISlider with a track image and a thumb image",
      "input": "",
      "output": "import UIKit\n\nclass CustomSlider: UISlider {\n\n    func configure(trackImage: UIImage, thumbImage: UIImage) {\n        setMinimumTrackImage(trackImage, for: .normal)\n        setMaximumTrackImage(trackImage, for: .normal)\n        setThumbImage(thumbImage, for: .normal)\n    }\n}"
    },
    {
      "instruction": " Write a function that creates a custom loading indicator using a UIActivityIndicatorView",
      "input": "",
      "output": "import UIKit\n\nclass LoadingIndicatorView: UIView {\n    private let activityIndicator: UIActivityIndicatorView = {\n        let indicator = UIActivityIndicatorView(style: .large)\n        indicator.color = .white\n        indicator.hidesWhenStopped = true\n        return indicator\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupView()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupView()\n    }\n\n    private func setupView() {\n        backgroundColor = UIColor.black.withAlphaComponent(0.7)\n        addSubview(activityIndicator)\n        activityIndicator.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            activityIndicator.centerXAnchor.constraint(equalTo: centerXAnchor),\n            activityIndicator.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n\n    func startAnimating() {\n        activityIndicator.startAnimating()\n        isHidden = false\n    }\n\n    func stopAnimating() {\n        activityIndicator.stopAnimating()\n        isHidden = true\n    }\n}"
    },
    {
      "instruction": " Create a Swift function that deletes a file from the device's local storage",
      "input": "",
      "output": "import Foundation\n\nfunc deleteFileFromLocalStorage(fileName: String) -> Bool {\n    let fileManager = FileManager.default\n    guard let documentsDirectory = fileManager.urls(for: .documentDirectory, in: .userDomainMask).first else {\n        return false\n    }\n\n    let fileURL = documentsDirectory.appendingPathComponent(fileName)\n\n    do {\n        try fileManager.removeItem(at: fileURL)\n        return true\n    } catch {\n        print(\"Error deleting file: \\(error)\")\n        return false\n    }\n}"
    },
    {
      "instruction": " Create a Swift function that retrieves the user's current location using CLLocationManager",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    private let locationManager = CLLocationManager()\n\n    var currentLocation: CLLocation?\n\n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    func startUpdatingLocation() {\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        guard let location = locations.last else { return }\n        currentLocation = location\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error retrieving location: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " Create a Swift function that plays a sound using AVAudioPlayer",
      "input": "",
      "output": "import AVFoundation\n\nclass SoundPlayer {\n    private var audioPlayer: AVAudioPlayer?\n\n    func playSound(resourceName: String, fileType: String) {\n        guard let url = Bundle.main.url(forResource: resourceName, withExtension: fileType) else { return }\n\n        do {\n            audioPlayer = try AVAudioPlayer(contentsOf: url)\n            audioPlayer?.prepareToPlay()\n            audioPlayer?.play()\n        } catch {\n            print(\"Error playing sound: \\(error)\")\n        }\n    }\n\n    func stopPlaying() {\n        audioPlayer?.stop()\n    }\n}"
    },
    {
      "instruction": " Create a Swift function that sends a push notification using UserNotifications framework",
      "input": "",
      "output": "import UserNotifications\n\nfunc sendPushNotification(title: String, body: String, identifier: String, delay: TimeInterval) {\n    let content = UNMutableNotificationContent()\n    content.title = title\n    content.body = body\n\n    let trigger = UNTimeIntervalNotificationTrigger(timeInterval: delay, repeats: false)\n\n    let request = UNNotificationRequest(identifier: identifier, content: content, trigger: trigger)\n\n    UNUserNotificationCenter.current().add(request) { error in\n        if let error = error {\n            print(\"Error sending push notification: \\(error)\")\n        }\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift class that manages the user location and notifies a delegate when the location is updated.",
      "input": "",
      "output": "import CoreLocation\n\nprotocol LocationManagerDelegate: AnyObject {\n    func didUpdateLocation(_ location: CLLocation)\n}\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    static let shared = LocationManager()\n    private let locationManager = CLLocationManager()\n    weak var delegate: LocationManagerDelegate?\n\n    private override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n    }\n\n    func startUpdatingLocation() {\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        guard let location = locations.last else { return }\n        delegate?.didUpdateLocation(location)\n    }\n}\n\n// Usage\nclass ViewController: UIViewController, LocationManagerDelegate {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        LocationManager.shared.delegate = self\n        LocationManager.shared.startUpdatingLocation()\n    }\n\n    func didUpdateLocation(_ location: CLLocation) {\n        print(\"Location updated: \\(location)\")\n    }\n}"
    },
    {
      "instruction": " \nCreate a Swift function that performs a network request using URLSession to fetch data from a REST API and returns the result in a completion block.",
      "input": "",
      "output": "import Foundation\n\nenum NetworkError: Error {\n    case invalidURL\n    case dataFetchError\n}\n\nfunc fetchData(from urlString: String, completion: @escaping (Result<Data, NetworkError>) -> Void) {\n    guard let url = URL(string: urlString) else {\n        completion(.failure(.invalidURL))\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let data = data {\n            completion(.success(data))\n        } else {\n            completion(.failure(.dataFetchError))\n        }\n    }\n    \n    task.resume()\n}\n\n// Usage\nfetchData(from: \"https://api.example.com/data\") { result in\n    switch result {\n    case .success(let data):\n        print(\"Fetched data: \\(data)\")\n    case .failure(let error):\n        print(\"Error fetching data: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " \nImplement a Swift function that asynchronously downloads an image from a URL and sets it to a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (Result<UIImage, Error>) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(.failure(error))\n            return\n        }\n        \n        guard let data = data, let image = UIImage(data: data) else {\n            let error = NSError(domain: \"ImageDownload\", code: -1, userInfo: [NSLocalizedDescriptionKey: \"Invalid image data\"])\n            completion(.failure(error))\n            return\n        }\n\n        completion(.success(image))\n    }\n    \n    task.resume()\n}\n\nextension UIImageView {\n    func setImage(from url: URL) {\n        downloadImage(from: url) { [weak self] result in\n            DispatchQueue.main.async {\n                switch result {\n                case .success(let image):\n                    self?.image = image\n                case .failure(let error):\n                    print(\"Error downloading image: \\(error)\")\n                }\n            }\n        }\n    }\n}\n\n// Usage\nlet imageView = UIImageView()\nif let url = URL(string: \"https://example.com/image.jpg\") {\n    imageView.setImage(from: url)\n}"
    },
    {
      "instruction": " \nCreate a custom UIView with a gradient background.",
      "input": "",
      "output": "import UIKit\n\nclass GradientView: UIView {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupGradient()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupGradient()\n    }\n    \n    private func setupGradient() {\n        let gradientLayer = CAGradientLayer()\n        gradientLayer.frame = bounds\n        gradientLayer.colors = [UIColor.red.cgColor, UIColor.blue.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 1)\n        layer.insertSublayer(gradientLayer, at: 0)\n    }\n}\n\n// Usage\nlet gradientView = GradientView(frame: CGRect(x: 0, y: 0, width: 200, height: 200))"
    },
    {
      "instruction": " \nImplement UIAlertController with a text field and handle the user input.",
      "input": "",
      "output": "import UIKit\n\nclass ViewController: UIViewController {\n    @objc func showAlert() {\n        let alertController = UIAlertController(title: \"Enter text\", message: nil, preferredStyle: .alert)\n        alertController.addTextField { textField in\n            textField.placeholder = \"Type here...\"\n        }\n        \n        let submitAction = UIAlertAction(title: \"Submit\", style: .default) { [unowned alertController] _ in\n            if let textField = alertController.textFields?.first, let text = textField.text {\n                print(\"User entered: \\(text)\")\n            }\n        }\n        \n        let cancelAction = UIAlertAction(title: \"Cancel\", style: .cancel, handler: nil)\n        \n        alertController.addAction(submitAction)\n        alertController.addAction(cancelAction)\n        \n        present(alertController, animated: true)\n    }\n}\n\n// Usage\nlet viewController = ViewController()\nviewController.showAlert()"
    },
    {
      "instruction": " \nCreate a Swift class that acts as a wrapper for UserDefaults to store and retrieve different data types.",
      "input": "",
      "output": "import Foundation\n\nclass UserDefaultsWrapper {\n    private let defaults = UserDefaults.standard\n\n    func set(value: Any?, forKey key: String) {\n        defaults.set(value, forKey: key)\n    }\n\n    func value(forKey key: String) -> Any? {\n        return defaults.value(forKey: key)\n    }\n\n    func string(forKey key: String) -> String? {\n        return defaults.string(forKey: key)\n    }\n\n    func integer(forKey key: String) -> Int {\n        return defaults.integer(forKey: key)\n    }\n\n    func bool(forKey key: String) -> Bool {\n        return defaults.bool(forKey: key)\n    }\n\n    func double(forKey key: String) -> Double {\n        return defaults.double(forKey: key)\n    }\n\n    func array(forKey key: String) -> [Any]? {\n        return defaults.array(forKey: key)\n    }\n\n    func dictionary(forKey key: String) -> [String: Any]? {\n        return defaults.dictionary(forKey: key)\n    }\n}\n\n// Usage\nlet userDefaults = UserDefaultsWrapper()\nuserDefaults.set(value: \"John Doe\", forKey: \"username\")\nprint(userDefaults.string(forKey: \"username\") ?? \"\")"
    },
    {
      "instruction": " \nImplement a custom UIButton that has a loading indicator and toggles between loading and normal states.",
      "input": "",
      "output": "import UIKit\n\nclass LoadingButton: UIButton {\n    private let activityIndicator = UIActivityIndicatorView(style: .medium)\n\n    var isLoading: Bool = false {\n        didSet {\n            updateButtonState()\n        }\n    }\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupActivityIndicator()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupActivityIndicator()\n    }\n\n    private func setupActivityIndicator() {\n        activityIndicator.translatesAutoresizingMaskIntoConstraints = false\n        addSubview(activityIndicator)\n\n        NSLayoutConstraint.activate([\n            activityIndicator.centerXAnchor.constraint(equalTo: centerXAnchor),\n            activityIndicator.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n\n    private func updateButtonState() {\n        if isLoading {\n            setTitle(nil, for: .normal)\n            activityIndicator.startAnimating()\n        } else {\n            setTitle(\"Submit\", for: .normal)\n            activityIndicator.stopAnimating()\n        }\n    }\n}\n\n// Usage\nlet loadingButton = LoadingButton()\nloadingButton.addTarget(self, action: #selector(buttonTapped), for: .touchUpInside)\n\n@objc func button"
    },
    {
      "instruction": " Create a custom UICollectionViewCell class with an image and a label, and register it for use in a UICollectionView.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    @IBOutlet weak var imageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n\n    override func awakeFromNib() {\n        super.awakeFromNib()\n    }\n}\n\nclass ViewController: UIViewController, UICollectionViewDataSource {\n    @IBOutlet weak var collectionView: UICollectionView!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        collectionView.register(UINib(nibName: CustomCollectionViewCell.reuseIdentifier, bundle: nil),\n                                forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n        collectionView.dataSource = self\n    }\n\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath)\n        -> UICollectionViewCell {\n            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n\n            cell.imageView.image = UIImage(named: \"your_image_name\")\n            cell.titleLabel.text = \"Title \\(indexPath.row)\"\n\n            return cell\n    }\n}"
    },
    {
      "instruction": " Implement a UIViewController with a UICollectionView that displays images fetched from a remote API using URLSession and displays them in a grid layout.",
      "input": "",
      "output": "import UIKit\n\nclass ImageCollectionViewController: UIViewController, UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {\n    \n    private var collectionView: UICollectionView!\n    private var imageURLs: [URL] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        setupCollectionView()\n        fetchData()\n    }\n    \n    private func setupCollectionView() {\n        let layout = UICollectionViewFlowLayout()\n        collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        collectionView.delegate = self\n        collectionView.dataSource = self\n        collectionView.register(ImageCollectionViewCell.self, forCellWithReuseIdentifier: \"ImageCollectionViewCell\")\n        \n        view.addSubview(collectionView)\n        \n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor)\n        ])\n    }\n    \n    private func fetchData() {\n        // Fetch image URLs from remote API using URLSession and update the imageURLs array\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return imageURLs.count\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"ImageCollectionViewCell\", for: indexPath) as! ImageCollectionViewCell\n        cell.configure(with: imageURLs[indexPath.item])\n        return cell\n    }\n    \n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        let width = (view.frame.width - 30) / 2\n        return CGSize(width: width, height: width)\n    }\n}"
    },
    {
      "instruction": " Implement a SwiftUI View that displays a list of contacts with their names and phone numbers using a custom SwiftUI row view.",
      "input": "",
      "output": "import SwiftUI\n\nstruct Contact: Identifiable {\n    var id = UUID()\n    var name: String\n    var phoneNumber: String\n}\n\nstruct ContactRow: View {\n    var contact: Contact\n\n    var body: some View {\n        HStack {\n            VStack(alignment: .leading) {\n                Text(contact.name)\n                    .font(.headline)\n                Text(contact.phoneNumber)\n                    .font(.subheadline)\n            }\n            Spacer()\n        }\n    }\n}\n\nstruct ContactsListView: View {\n    @State private var contacts = [\n        Contact(name: \"John Doe\", phoneNumber: \"123-456-7890\"),\n        Contact(name: \"Jane Smith\", phoneNumber: \"234-567-8901\"),\n        // Add more contacts\n    ]\n\n    var body: some View {\n        NavigationView {\n            List(contacts) { contact in\n                ContactRow(contact: contact)\n            }\n            .navigationTitle(\"Contacts\")\n        }\n    }\n}"
    },
    {
      "instruction": " Write a function that makes an HTTP POST request using URLSession with a JSON payload and handles the response.",
      "input": "",
      "output": "import Foundation\n\nfunc makePostRequest(url: URL, payload: [String: Any], completionHandler: @escaping (Result<Data, Error>) -> Void) {\n    var request = URLRequest(url: url)\n    request.httpMethod = \"POST\"\n    request.setValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n    \n    do {\n        request.httpBody = try JSONSerialization.data(withJSONObject: payload, options: [])\n    } catch {\n        completionHandler(.failure(error))\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: request) { data, response, error in\n        if let error = error {\n            completionHandler(.failure(error))\n            return\n        }\n        \n        if let data = data {\n            completionHandler(.success(data))\n        }\n    }\n    \n    task.resume()\n}"
    },
    {
      "instruction": " Implement a custom UIPickerView that allows users to select a date in the format \"Month Day, Year\" with month and day as words.",
      "input": "",
      "output": "import UIKit\n\nclass CustomDatePickerView: UIPickerView, UIPickerViewDelegate, UIPickerViewDataSource {\n    \n    private let months = DateFormatter().monthSymbols!\n    private let days = Array(1...31)\n    private let years = Array(1950...2100)\n    \n    var selectedDate: Date {\n        let month = selectedRow(inComponent: 0) + 1\n        let day = selectedRow(inComponent: 1) + 1\n        let year = years[selectedRow(inComponent: 2)]\n        \n        let components = DateComponents(year: year, month: month, day: day)\n        let calendar = Calendar.current\n        \n        return calendar.date(from: components) ?? Date()\n    }\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n    \n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup()\n    }\n    \n    private func setup() {\n        delegate = self\n        dataSource = self\n    }\n    \n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 3\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        switch component {\n        case 0:\n            return months.count\n        case 1:\n            return days.count\n        case 2:\n            return years.count\n        default:\n            return 0\n        }\n    }\n    \n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        switch component {\n        case 0:\n            return months[row]\n        case 1:\n            return String(days[row])\n        case 2:\n            return String(years[row])\n        default:\n            return nil\n        }\n    }\n}"
    },
    {
      "instruction": " Create a SwiftUI view that displays a horizontal scroll view of image thumbnails and allows users to tap on a thumbnail to present a full-screen view of the image.",
      "input": "",
      "output": "import SwiftUI\n\nstruct ImageThumbnail: Identifiable {\n    var id = UUID()\n    var image: Image\n}\n\nstruct FullImageView: View {\n    @Environment(\\.presentationMode) var presentationMode\n    var image: Image\n\n    var body: some View {\n        VStack {\n            image\n                .resizable()\n                .aspectRatio(contentMode: .fit)\n        }\n        .onTapGesture {\n            presentationMode.wrappedValue.dismiss()\n        }\n    }\n}\n\nstruct ImageScrollView: View {\n    @State private var thumbnails = [\n        ImageThumbnail(image: Image(\"example1\")),\n        ImageThumbnail(image: Image(\"example2\")),\n        // Add more image thumbnails\n    ]\n    @State private var selectedImage: Image?\n    \n    var body: some View {\n        VStack {\n            ScrollView(.horizontal, showsIndicators: false) {\n                HStack(spacing: 10) {\n                    ForEach(thumbnails) { thumbnail in\n                        thumbnail.image\n                            .resizable()\n                            .frame(width: 100, height: 100)\n                            .onTapGesture {\n                                selectedImage = thumbnail.image\n                            }\n                    }\n                }\n                .padding()\n            }\n        }\n        .sheet(item: $selectedImage, content: { image in\n            FullImageView(image: image)\n        })\n    }\n}"
    },
    {
      "instruction": "Using the comment as a guide, complete the following code to create a custom UICollectionViewCell with a UIImageView and a UILabel.",
      "input": "class CustomCollectionViewCell: UICollectionViewCell {\n    // TODO: Add your code here\n}",
      "output": "class CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n\n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.textColor = .black\n        label.textAlignment = .center\n        return label\n    }()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        addSubview(imageView)\n        addSubview(titleLabel)\n        setupConstraints()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupConstraints() {\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        titleLabel.translatesAutoresizingMaskIntoConstraints = false\n\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: topAnchor),\n            imageView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            imageView.bottomAnchor.constraint(equalTo: titleLabel.topAnchor),\n\n            titleLabel.leadingAnchor.constraint(equalTo: leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor),\n            titleLabel.bottomAnchor.constraint(equalTo: bottomAnchor),\n            titleLabel.heightAnchor.constraint(equalToConstant: 40)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nUsing the comment as a guide, complete the following code to create a custom UIButton with rounded corners and a gradient background.",
      "input": "class CustomGradientButton: UIButton {\n    // TODO: Add your code here\n}",
      "output": "class CustomGradientButton: UIButton {\n    private let gradientLayer = CAGradientLayer()\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup()\n    }\n\n    private func setup() {\n        layer.cornerRadius = 12\n        layer.masksToBounds = true\n\n        gradientLayer.colors = [UIColor.red.cgColor, UIColor.orange.cgColor]\n        gradientLayer.startPoint = CGPoint(x: 0, y: 0)\n        gradientLayer.endPoint = CGPoint(x: 1, y: 0)\n        layer.insertSublayer(gradientLayer, at: 0)\n    }\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n        gradientLayer.frame = bounds\n    }\n}"
    },
    {
      "instruction": " \nUsing the comment as a guide, complete the following code to create a custom UITableView cell with a profile image and two labels for name and email.",
      "input": "class ProfileTableViewCell: UITableViewCell {\n    // TODO: Add your code here\n}",
      "output": "class ProfileTableViewCell: UITableViewCell {\n    let profileImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.layer.cornerRadius = 25\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n\n    let nameLabel: UILabel = {\n        let label = UILabel()\n        label.font = UIFont.systemFont(ofSize: 16, weight: .bold)\n        return label\n    }()\n\n    let emailLabel: UILabel = {\n        let label = UILabel()\n        label.font = UIFont.systemFont(ofSize: 14)\n        label.textColor = .gray\n        return label\n    }()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        contentView.addSubview(profileImageView)\n        contentView.addSubview(nameLabel)\n        contentView.addSubview(emailLabel)\n        setupConstraints()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func setupConstraints() {\n        profileImageView.translatesAutoresizingMaskIntoConstraints = false\n        nameLabel.translatesAutoresizingMaskIntoConstraints = false\n        emailLabel.translatesAutoresizingMaskIntoConstraints = false\n\n        NSLayoutConstraint.activate([\n            profileImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            profileImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            profileImageView.widthAnchor.constraint(equalToConstant: 50),\n            profileImageView.heightAnchor.constraint(equalToConstant: 50),\n\n            nameLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 12),\n            nameLabel.leadingAnchor.constraint(equalTo: profileImageView.trailingAnchor, constant: 12),\n            nameLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\n\n            emailLabel.topAnchor.constraint(equalTo: nameLabel.bottomAnchor, constant: 4),\n            emailLabel.leadingAnchor.constraint(equalTo: nameLabel.leadingAnchor),\n            emailLabel.trailingAnchor.constraint(equalTo: nameLabel.trailingAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nUsing the comment as a guide, complete the following code to add a UISearchBar to the navigation bar.",
      "input": "class SearchTableViewController: UITableViewController {\n    // TODO: Add your code here\n}",
      "output": "class SearchTableViewController: UITableViewController, UISearchBarDelegate {\n    let searchBar = UISearchBar()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // TODO: Add your code here\n        setupSearchBar()\n    }\n\n    private func setupSearchBar() {\n        searchBar.delegate = self\n        searchBar.placeholder = \"Search\"\n        navigationItem.titleView = searchBar\n    }\n\n    // UISearchBarDelegate\n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        // Perform search or filtering with searchText here\n    }\n}"
    },
    {
      "instruction": " \nUsing the comment as a guide, complete the following code to implement a custom UIView with a shadow and rounded corners.",
      "input": "class ShadowRoundedView: UIView {\n    // TODO: Add your code here\n}",
      "output": "class ShadowRoundedView: UIView {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup()\n    }\n\n    private func setup() {\n        layer.cornerRadius = 12\n        layer.shadowColor = UIColor.black.cgColor\n        layer.shadowOffset = CGSize(width: 0, height: 2)\n        layer.shadowOpacity = 0.1\n        layer.shadowRadius = 4\n    }\n}"
    },
    {
      "instruction": " \nUsing the comment as a guide, complete the following code to implement a custom UITextField with a left icon and padding.",
      "input": "class IconTextField: UITextField {\n    // TODO: Add your code here\n}",
      "output": "class IconTextField: UITextField {\n    var iconImage: UIImage? {\n        didSet {\n            setupIcon()\n        }\n    }\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup()\n    }\n\n    private func setup() {\n        layer.cornerRadius = 6\n        layer.borderWidth = 1.0\n        layer.borderColor = UIColor.lightGray.cgColor\n        setupIcon()\n    }\n\n    private func setupIcon() {\n        guard let image = iconImage else { return }\n        let iconView = UIImageView(image: image)\n        iconView.contentMode = .scaleAspectFit\n        iconView.frame = CGRect(x: 12, y: 0, width: 20, height: 20)\n        leftView = iconView\n        leftViewMode = .always\n    }\n\n    override func textRect(forBounds bounds: CGRect) -> CGRect {\n        return bounds.insetBy(dx: 40, dy: 0)\n    }\n\n    override func editingRect(forBounds bounds: CGRect) -> CGRect {\n        return textRect(forBounds: bounds)\n    }\n}"
    },
    {
      "instruction": " \nUsing the comment as a guide, complete the following code to implement a custom UIPickerView as the inputView for a UITextField.",
      "input": "class PickerViewTextField: UITextField {\n    // TODO: Add your code here\n}",
      "output": "class PickerViewTextField: UITextField, UIPickerViewDataSource, UIPickerViewDelegate {\n    private let pickerView = UIPickerView()\n    var pickerData: [String] = [] {\n        didSet {\n            pickerView.reloadAllComponents()\n        }\n    }\n\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setup()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setup()\n    }\n\n    private func setup() {\n        pickerView.dataSource = self\n        pickerView.delegate = self\n        inputView = pickerView\n    }\n\n    // UIPickerViewDataSource\n    func numberOfComponents(in pickerView: UIPickerView) -> Int {\n        return 1\n    }\n\n    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {\n        return pickerData.count\n    }\n\n    // UIPickerViewDelegate\n    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {\n        return pickerData[row]\n    }\n\n    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {\n        text = pickerData[row]\n    }\n}"
    },
    {
      "instruction": " \nUsing the comment as a guide, complete the following code to implement a custom UIPageControl with custom colors and size for the dots.",
      "input": "class CustomPageControl: UIPageControl {\n    // TODO: Add your code here\n}",
      "output": "class CustomPageControl: UIPageControl {\n    var activeDotColor: UIColor = .black\n    var inactiveDotColor: UIColor = .lightGray\n    var dotSize: CGSize = CGSize(width: 10, height: 10)\n\n    override func layoutSubviews() {\n        super.layoutSubviews()\n\n        for (index, subview) in subviews.enumerated() {\n            let color = (index == currentPage) ? activeDotColor : inactiveDotColor\n            subview.backgroundColor = color\n\n            sub"
    },
    {
      "instruction": " Write a Swift function that creates a custom UIButton with rounded corners and a background color.",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomButton(title: String, backgroundColor: UIColor, cornerRadius: CGFloat) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.backgroundColor = backgroundColor\n    button.layer.cornerRadius = cornerRadius\n    button.setTitleColor(.white, for: .normal)\n    return button\n}\n\nlet customButton = createCustomButton(title: \"Click me!\", backgroundColor: .blue, cornerRadius: 10)\ncustomButton.frame = CGRect(x: 0, y: 0, width: 150, height: 50)"
    },
    {
      "instruction": " Write a Swift function that asynchronously downloads an image from a URL and sets it to a UIImageView.",
      "input": "let imageUrlString = \"https://example.com/image.jpg\"\nlet imageView = UIImageView()",
      "output": "import UIKit\n\nfunc downloadImage(from urlString: String, to imageView: UIImageView) {\n    guard let url = URL(string: urlString) else { return }\n    \n    DispatchQueue.global().async {\n        if let data = try? Data(contentsOf: url), let image = UIImage(data: data) {\n            DispatchQueue.main.async {\n                imageView.image = image\n            }\n        }\n    }\n}\n\ndownloadImage(from: \"https://example.com/image.jpg\", to: imageView)"
    },
    {
      "instruction": " Write a Swift function that creates and presents an UIAlertController with a given title, message, and UIAlertAction.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(on viewController: UIViewController, title: String, message: String, actionTitle: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let action = UIAlertAction(title: actionTitle, style: .default, handler: nil)\n    alertController.addAction(action)\n    viewController.present(alertController, animated: true, completion: nil)\n}\n\n// Usage\nlet viewController = UIViewController()\nshowAlert(on: viewController, title: \"Alert\", message: \"This is an alert message.\", actionTitle: \"OK\")"
    },
    {
      "instruction": " Write a Swift function that saves a string value to UserDefaults and another function that retrieves the saved value.",
      "input": "",
      "output": "import Foundation\n\nfunc saveStringToUserDefaults(key: String, value: String) {\n    UserDefaults.standard.set(value, forKey: key)\n}\n\nfunc getStringFromUserDefaults(key: String) -> String? {\n    return UserDefaults.standard.string(forKey: key)\n}\n\nlet key = \"exampleKey\"\nlet value = \"exampleValue\"\n\nsaveStringToUserDefaults(key: key, value: value)\nif let retrievedValue = getStringFromUserDefaults(key: key) {\n    print(\"Retrieved value: \\(retrievedValue)\")\n}"
    },
    {
      "instruction": " Write a Swift function that starts a timer that prints \"Hello, World!\" every second.",
      "input": "",
      "output": "import Foundation\n\nfunc startTimer() {\n    Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { _ in\n        print(\"Hello, World!\")\n    }\n}\n\nstartTimer()\nRunLoop.main.run()"
    },
    {
      "instruction": " Write a Swift function that creates a UILabel with a given font size, text color, and number of lines.",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomLabel(fontSize:CGFloat, textColor: UIColor, numberOfLines: Int) -> UILabel {\n    let label = UILabel()\n    label.font = UIFont.systemFont(ofSize: fontSize)\n    label.textColor = textColor\n    label.numberOfLines = numberOfLines\n    return label\n}\n\nlet customLabel = createCustomLabel(fontSize: 14, textColor: .black, numberOfLines: 2)\ncustomLabel.text = \"This is a custom UILabel with a specified font size, text color, and number of lines.\""
    },
    {
      "instruction": " Write a Swift function that creates an instance of a custom UIView subclass with a given frame and adds a gesture recognizer to it.",
      "input": "",
      "output": "import UIKit\n\nclass CustomView: UIView {\n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        self.backgroundColor = .blue\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n}\n\nfunc createCustomView(with frame: CGRect, tapAction: Selector, target: AnyObject) -> CustomView {\n    let customView = CustomView(frame: frame)\n    let tapGestureRecognizer = UITapGestureRecognizer(target: target, action: tapAction)\n    customView.addGestureRecognizer(tapGestureRecognizer)\n    return customView\n}\n\n// Usage\nclass ViewController: UIViewController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let customView = createCustomView(with: CGRect(x: 0, y: 0, width: 100, height: 100), tapAction: #selector(viewTapped), target: self)\n        self.view.addSubview(customView)\n    }\n    \n    @objc func viewTapped() {\n        print(\"Custom view tapped\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create a custom UITableViewCell with a UILabel and UIImageView.",
      "input": "",
      "output": "class CustomTableViewCell: UITableViewCell {\n    let titleLabel = UILabel()\n    let thumbnailImageView = UIImageView()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        addSubview(titleLabel)\n        addSubview(thumbnailImageView)\n        configureConstraints()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func configureConstraints() {\n        titleLabel.translatesAutoresizingMaskIntoConstraints = false\n        thumbnailImageView.translatesAutoresizingMaskIntoConstraints = false\n\n        NSLayoutConstraint.activate([\n            thumbnailImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 8),\n            thumbnailImageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            titleLabel.leadingAnchor.constraint(equalTo: thumbnailImageView.trailingAnchor, constant: 8),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -8),\n            titleLabel.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to create and display a UICollectionView with custom UICollectionViewCell.",
      "input": "",
      "output": "class CustomCollectionViewController: UICollectionViewController {\n    private let reuseIdentifier = \"CustomCell\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(CustomCollectionViewCell.self, forCellWithReuseIdentifier: reuseIdentifier)\n        collectionView.backgroundColor = .white\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        cell.configureCell()\n        return cell\n    }\n}\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    func configureCell() {\n        backgroundColor = .blue\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to handle user location updates using CLLocationManager.",
      "input": "",
      "output": "class LocationHandler: NSObject, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n\n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        guard let location = locations.last else { return }\n        print(\"Current location: \\(location)\")\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error updating location: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to store and retrieve data using UserDefaults.",
      "input": "",
      "output": "func storeData(key: String, value: String) {\n    UserDefaults.standard.set(value, forKey: key)\n}\n\nfunc retrieveData(key: String) -> String? {\n    return UserDefaults.standard.string(forKey: key)\n}"
    },
    {
      "instruction": " Write a Swift function to download an image from a URL and display it in an UIImageView.",
      "input": "",
      "output": "func downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    URLSession.shared.dataTask(with: url) { (data, response, error) in\n        guard let data = data, error == nil else {\n            completion(nil)\n            return\n        }\n        let image = UIImage(data: data)\n        completion(image)\n    }.resume()\n}\n\nfunc displayImageInImageView(imageView: UIImageView, url: URL) {\n    downloadImage(from: url) { image in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to implement a login flow using Firebase Authentication.",
      "input": "",
      "output": "import FirebaseAuth\n\nfunc loginUser(email: String, password: String, completion: @escaping (Result<User, Error>) -> Void) {\n    Auth.auth().signIn(withEmail: email, password: password) { [weak self] authResult, error in\n        guard let strongSelf = self else { return }\n        if let error = error {\n            completion(.failure(error))\n        } else if let authResult = authResult {\n            completion(.success(authResult.user))\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swiftfunction to create and display a UITableView with a custom UITableViewCell.",
      "input": "",
      "output": "class CustomTableViewController: UITableViewController {\n    private let reuseIdentifier = \"CustomTableViewCell\"\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: reuseIdentifier)\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 10\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: reuseIdentifier, for: indexPath) as! CustomTableViewCell\n        cell.titleLabel.text = \"Example \\(indexPath.row + 1)\"\n        cell.thumbnailImageView.image = UIImage(named: \"example_image\")\n        return cell\n    }\n}\n\nclass CustomTableViewCell: UITableViewCell {\n    let titleLabel = UILabel()\n    let thumbnailImageView = UIImageView()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        addSubview(titleLabel)\n        addSubview(thumbnailImageView)\n        configureConstraints()\n    }\n\n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    private func configureConstraints() {\n        titleLabel.translatesAutoresizingMaskIntoConstraints = false\n        thumbnailImageView.translatesAutoresizingMaskIntoConstraints = false\n\n        NSLayoutConstraint.activate([\n            thumbnailImageView.leadingAnchor.constraint(equalTo: leadingAnchor, constant: 8),\n            thumbnailImageView.centerYAnchor.constraint(equalTo: centerYAnchor),\n            titleLabel.leadingAnchor.constraint(equalTo: thumbnailImageView.trailingAnchor, constant: 8),\n            titleLabel.trailingAnchor.constraint(equalTo: trailingAnchor, constant: -8),\n            titleLabel.centerYAnchor.constraint(equalTo: centerYAnchor)\n        ])\n    }\n}"
    },
    {
      "instruction": " Create a Swift function that configures a UITableView with a custom cell using a UITableViewCell subclass",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    \n    @IBOutlet weak var titleLabel: UILabel!\n    @IBOutlet weak var descriptionLabel: UILabel!\n    \n    func configure(title: String, description: String) {\n        titleLabel.text = title\n        descriptionLabel.text = description\n    }\n}\n\nclass ViewController: UIViewController, UITableViewDataSource {\n    \n    @IBOutlet weak var tableView: UITableView!\n    \n    let data = [(\"Title 1\", \"Description 1\"), (\"Title 2\", \"Description 2\")]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.dataSource = self\n        tableView.register(UINib(nibName: \"CustomTableViewCell\", bundle: nil), forCellReuseIdentifier: \"CustomCell\")\n    }\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return data.count\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"CustomCell\", for: indexPath) as! CustomTableViewCell\n        let item = data[indexPath.row]\n        cell.configure(title: item.0, description: item.1)\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that adds a UIBarButtonItem to the navigation bar and triggers a segue when tapped.",
      "input": "",
      "output": "import UIKit\n\nclass MyViewController: UIViewController {\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let barButtonItem = UIBarButtonItem(title: \"Next\", style: .plain, target: self, action: #selector(barButtonTapped))\n        navigationItem.rightBarButtonItem = barButtonItem\n    }\n    \n    @objc func barButtonTapped() {\n        performSegue(withIdentifier: \"showNextViewController\", sender: self)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that handles user location updates using CoreLocation.",
      "input": "",
      "output": "import UIKit\nimport CoreLocation\n\nclass LocationViewController: UIViewController, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            print(\"User location updated: \\(location)\")\n        }\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Failed to get user location: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that takes a UIImage, resizes it, and returns the resized image.",
      "input": "",
      "output": "import UIKit\n\nfunc resizeImage(image: UIImage, targetSize: CGSize) -> UIImage {\n    let originalSize = image.size\n    let widthRatio  = targetSize.width / originalSize.width\n    let heightRatio = targetSize.height / originalSize.height\n    \n    let newSize: CGSize\n    if widthRatio > heightRatio {\n        newSize = CGSize(width: originalSize.width * heightRatio, height: originalSize.height * heightRatio)\n    } else {\n        newSize = CGSize(width: originalSize.width * widthRatio, height: originalSize.height * widthRatio)\n    }\n    \n    let rect = CGRect(x: 0, y: 0, width: newSize.width, height: newSize.height)\n    \n    UIGraphicsBeginImageContextWithOptions(newSize, false, 1.0)\n    image.draw(in: rect)\n    let newImage = UIGraphicsGetImageFromCurrentImageContext()\n    UIGraphicsEndImageContext()\n    \n    return newImage!\n}"
    },
    {
      "instruction": " Write a Swift function that creates a UIAlertController with a text field and an action button to submit the input.",
      "input": "",
      "output": "import UIKit\n\nclass MyViewController: UIViewController {\n\n    func presentTextInputAlert() {\n        let alertController = UIAlertController(title: \"Enter Text\", message: \"Please enter some text:\", preferredStyle: .alert)\n        \n        alertController.addTextField()\n        \n        let submitAction = UIAlertAction(title: \"Submit\", style: .default) { [unowned alertController] _ in\n            let textField = alertController.textFields![0]\n            print(\"Text submitted: \\(textField.text ?? \"\")\")\n        }\n        \n        alertController.addAction(submitAction)\n        \n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that fetches the user's contacts using CNContactStore and prints them.",
      "input": "",
      "output": "import Contacts\n\nfunc fetchContacts() {\n    let contactStore = CNContactStore()\n    let keysToFetch = [CNContactGivenNameKey, CNContactFamilyNameKey, CNContactPhoneNumbersKey] as [CNKeyDescriptor]\n    var contacts = [CNContact]()\n    let request = CNContactFetchRequest(keysToFetch: keysToFetch)\n\n    do {\n        try contactStore.enumerateContacts(with: request) { (contact, stop) in\n            contacts.append(contact)\n        }\n    } catch {\n        print(\"Failed to fetch contacts: \\(error.localizedDescription)\")\n    }\n    \n    for contact in contacts {\n        print(\"Name: \\(contact.givenName) \\(contact.familyName)\")\n        for phoneNumber in contact.phoneNumbers {\n            print(\"Phone number: \\(phoneNumber.value.stringValue)\")\n        }\n    }\n}"
    },
    {
      "instruction": "Implement a table view with custom cells that display a user's name, email, and phone number.",
      "input": "",
      "output": "import UIKit\n\nclass UserTableViewCell: UITableViewCell {\n    static let reuseIdentifier = \"UserTableViewCell\"\n    \n    @IBOutlet weak var nameLabel: UILabel!\n    @IBOutlet weak var emailLabel: UILabel!\n    @IBOutlet weak var phoneNumberLabel: UILabel!\n    \n    func configure(with user: User) {\n        nameLabel.text = user.name\n        emailLabel.text = user.email\n        phoneNumberLabel.text = user.phoneNumber\n    }\n}\n\nclass UsersTableViewController: UITableViewController {\n    private var users: [User] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UINib(nibName: \"UserTableViewCell\", bundle: nil), forCellReuseIdentifier: UserTableViewCell.reuseIdentifier)\n    }\n\n    // MARK: - UITableViewDataSource\n\n    override func numberOfSections(in tableView: UITableView) -> Int {\n        return 1\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return users.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: UserTableViewCell.reuseIdentifier, for: indexPath) as! UserTableViewCell\n        let user = users[indexPath.row]\n        cell.configure(with: user)\n        return cell\n    }\n}"
    },
    {
      "instruction": " Write a Swift function to make a network request to a given URL and parse the JSON response into a specified model object.",
      "input": "",
      "output": "import Foundation\n\nclass NetworkManager {\n    func fetch<T: Decodable>(url: URL, completion: @escaping (Result<T, Error>) -> Void) {\n        let task = URLSession.shared.dataTask(with: url) { data, response, error in\n            if let error = error {\n                completion(.failure(error))\n                return\n            }\n            \n            guard let data = data else {\n                completion(.failure(NSError(domain: \"\", code: -1, userInfo: nil)))\n                return\n            }\n            \n            do {\n                let decoder = JSONDecoder()\n                let model = try decoder.decode(T.self, from: data)\n                completion(.success(model))\n            } catch {\n                completion(.failure(error))\n            }\n        }\n        task.resume()\n    }\n}"
    },
    {
      "instruction": " Create a view controller to display a user's details and update their information.",
      "input": "",
      "output": "import UIKit\n\nprotocol UserDetailsViewControllerDelegate: AnyObject {\n    func userDetailsViewControllerDidUpdateUser(_ controller: UserDetailsViewController)\n}\n\nclass UserDetailsViewController: UIViewController {\n    @IBOutlet weak var nameTextField: UITextField!\n    @IBOutlet weak var emailTextField: UITextField!\n    @IBOutlet weak var phoneNumberTextField: UITextField!\n    \n    weak var delegate: UserDetailsViewControllerDelegate?\n    var user: User!\n    let userManager = UserManager()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        populateFields()\n    }\n    \n    private func populateFields() {\n        nameTextField.text = user.name\n        emailTextField.text = user.email\n        phoneNumberTextField.text = user.phoneNumber\n    }\n    \n    @IBAction func saveButtonTapped(_ sender: UIBarButtonItem) {\n        updateUser()\n        delegate?.userDetailsViewControllerDidUpdateUser(self)\n        navigationController?.popViewController(animated: true)\n    }\n    \n    private func updateUser() {\n        let updatedUser = User(id: user.id, name: nameTextField.text ?? \"\", email: emailTextField.text ?? \"\", phoneNumber: phoneNumberTextField.text ?? \"\")\n        userManager.removeUser(withId: user.id)\n        userManager.addUser(updatedUser)\n        user = updatedUser\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that asynchronously downloads an image from a URL and sets it as the background image of a UIButton.",
      "input": "",
      "output": "import UIKit\n\nextension UIButton {\n    func setBackgroundImageAsync(from url: URL) {\n        URLSession.shared.dataTask(with: url) { [weak self] data, response, error in\n            if let data = data, let image = UIImage(data: data) {\n                DispatchQueue.main.async {\n                    self?.setBackgroundImage(image, for: .normal)\n                }\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " Create a custom UICollectionViewCell that displays an image and a label.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    static let reuseIdentifier = \"CustomCollectionViewCell\"\n    \n    @IBOutlet weak var imageView: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n    \n    func configure(image: UIImage, title: String) {\n        imageView.image = image\n        titleLabel.text = title\n    }\n}"
    },
    {
      "instruction": " Implement a UICollectionView with a custom UICollectionViewCell displaying a list of images and titles.",
      "input": "",
      "output": "importUIKit\n\nclass CustomCollectionViewController: UICollectionViewController {\n    private var items: [(image: UIImage, title: String)] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        collectionView.register(UINib(nibName: \"CustomCollectionViewCell\", bundle: nil), forCellWithReuseIdentifier: CustomCollectionViewCell.reuseIdentifier)\n    }\n\n    // MARK: - UICollectionViewDataSource\n\n    override func numberOfSections(in collectionView: UICollectionView) -> Int {\n        return 1\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CustomCollectionViewCell.reuseIdentifier, for: indexPath) as! CustomCollectionViewCell\n        let item = items[indexPath.row]\n        cell.configure(image: item.image, title: item.title)\n        return cell\n    }\n}\n\nextension CustomCollectionViewController: UICollectionViewDelegateFlowLayout {\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        let width = collectionView.bounds.width / 2 - 10\n        let height = width * 1.2\n        return CGSize(width: width, height: height)\n    }\n}"
    },
    {
      "instruction": " Implement a simple image caching mechanism for UIImageView.",
      "input": "",
      "output": "import UIKit\n\nclass ImageCache {\n    static let shared = ImageCache()\n    private let cache = NSCache<NSURL, UIImage>()\n\n    func setImage(_ image: UIImage, for url: NSURL) {\n        cache.setObject(image, forKey: url)\n    }\n\n    func image(for url: NSURL) -> UIImage? {\n        return cache.object(forKey: url)\n    }\n}\n\nextension UIImageView {\n    func setImageAsync(from url: URL) {\n        if let cachedImage = ImageCache.shared.image(for: url as NSURL) {\n            self.image = cachedImage\n            return\n        }\n\n        URLSession.shared.dataTask(with: url) { [weak self] data, response, error in\n            if let data = data, let image = UIImage(data: data) {\n                ImageCache.shared.setImage(image, for: url as NSURL)\n                DispatchQueue.main.async {\n                    self?.image = image\n                }\n            }\n        }.resume()\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that animates the transition between two views using a cross dissolve effect.",
      "input": "",
      "output": "import UIKit\n\nextension UIView {\n    func crossDissolveTransition(to newView: UIView, duration: TimeInterval = 0.5, completion: ((Bool) -> Void)? = nil) {\n        newView.alpha = 0\n        addSubview(newView)\n        newView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            newView.topAnchor.constraint(equalTo: topAnchor),\n            newView.leadingAnchor.constraint(equalTo: leadingAnchor),\n            newView.trailingAnchor.constraint(equalTo: trailingAnchor),\n            newView.bottomAnchor.constraint(equalTo: bottomAnchor)\n        ])\n\n        UIView.animate(withDuration: duration, animations: {\n            newView.alpha = 1\n        }) { finished in\n            self.subviews.filter { $0 != newView }.forEach { $0.removeFromSuperview() }\n            completion?(finished)\n        }\n    }\n}"
    },
    {
      "instruction": "Write a Swift function to fetch data from a given URL and return the result as a string.",
      "input": "",
      "output": "import Foundation\n\nfunc fetchData(from url: URL, completion: @escaping (String?, Error?) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let error = error {\n            completion(nil, error)\n        } else if let data = data {\n            let result = String(data: data, encoding: .utf8)\n            completion(result, nil)\n        }\n    }\n    task.resume()\n}"
    },
    {
      "instruction": " \nWrite a Swift function to asynchronously download an image from a URL and set it as the image of a UIImageView.",
      "input": "",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, completion: @escaping (UIImage?) -> Void) {\n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        if let data = data, let image = UIImage(data: data) {\n            completion(image)\n        } else {\n            completion(nil)\n        }\n    }\n    task.resume()\n}\n\nfunc setImageAsync(for imageView: UIImageView, from url: URL) {\n    downloadImage(from: url) { image in\n        DispatchQueue.main.async {\n            imageView.image = image\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a UIAlertController with a title, message, and a single \"OK\" button.",
      "input": "",
      "output": "import UIKit\n\nfunc createAlertController(title: String, message: String) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let okAction = UIAlertAction(title: \"OK\", style: .default, handler: nil)\n    alertController.addAction(okAction)\n    return alertController\n}"
    },
    {
      "instruction": " \nWrite a Swift function to register a UITableViewCell subclass in a UITableView.",
      "input": "",
      "output": "import UIKit\n\nfunc registerCell<T: UITableViewCell>(tableView: UITableView, cellType: T.Type, reuseIdentifier: String) {\n    tableView.register(cellType, forCellReuseIdentifier: reuseIdentifier)\n}"
    },
    {
      "instruction": " \nWrite a Swift function to dequeue a reusable UITableViewCell for a given IndexPath in a UITableView.",
      "input": "",
      "output": "import UIKit\n\nfunc dequeueReusableCell<T: UITableViewCell>(tableView: UITableView, indexPath: IndexPath, reuseIdentifier: String) -> T {\n    guard let cell = tableView.dequeueReusableCell(withIdentifier: reuseIdentifier, for: indexPath) as? T else {\n        fatalError(\"Failed to dequeue cell with identifier: \\(reuseIdentifier)\")\n    }\n    return cell\n}"
    },
    {
      "instruction": " \nWrite a Swift function to create a custom UIButton with a specified title, font, text color, and background color.",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomButton(title: String, font: UIFont, textColor: UIColor, backgroundColor: UIColor) -> UIButton {\n    let button = UIButton(type: .system)\n    button.setTitle(title, for: .normal)\n    button.titleLabel?.font = font\n    button.setTitleColor(textColor, for: .normal)\n    button.backgroundColor = backgroundColor\n    return button\n}"
    },
    {
      "instruction": " \nWrite a Swift function to implement a custom UITableViewCell that displays a label and an imageView.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    let customImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupSubviews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupSubviews() {\n        contentView.addSubview(titleLabel)\n        contentView.addSubview(customImageView)\n        \n        NSLayoutConstraint.activate([\n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 16),\n            titleLabel.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            \n            customImageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -16),\n            customImageView.centerYAnchor.constraint(equalTo: contentView.centerYAnchor),\n            customImageView.widthAnchor.constraint(equalToConstant: 50),\n            customImageView.heightAnchor.constraint(equalToConstant: 50)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function to present a UIViewController modally with a specified presentation style and animation.",
      "input": "",
      "output": "import UIKit\n\nfunc presentViewController(_ viewControllerToPresent: UIViewController, on parentViewController: UIViewController, with presentationStyle: UIModalPresentationStyle, animation: UIModalTransitionStyle) {\n    viewControllerToPresent.modalPresentationStyle = presentationStyle\n    viewControllerToPresent.modalTransitionStyle = animation\n    parentViewController.present(viewControllerToPresent, animated: true, completion: nil)\n}"
    },
    {
      "instruction": "Write a Swift function that creates a custom UITableViewCell with a label and an image view",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    \n    private let cellImageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFill\n        imageView.clipsToBounds = true\n        return imageView\n    }()\n    \n    private let cellLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        label.textAlignment = .left\n        label.numberOfLines = 0\n        return label\n    }()\n    \n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupSubviews()\n        setupConstraints()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    private func setupSubviews() {\n        contentView.addSubview(cellImageView)\n        contentView.addSubview(cellLabel)\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            cellImageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 10),\n            cellImageView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 10),\n            cellImageView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -10),\n            cellImageView.widthAnchor.constraint(equalToConstant: 80),\n            \n            cellLabel.leadingAnchor.constraint(equalTo: cellImageView.trailingAnchor, constant: 10),\n            cellLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -10),\n            cellLabel.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 10),\n            cellLabel.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -10)\n        ])\n    }\n    \n    func configure(image: UIImage, text: String) {\n        cellImageView.image = image\n        cellLabel.text = text\n    }\n    \n}"
    },
    {
      "instruction": " Write a Swift function that handles push notifications using UNUserNotificationCenter",
      "input": "",
      "output": "import UIKit\nimport UserNotifications\n\nclass AppDelegate: UIResponder, UIApplicationDelegate, UNUserNotificationCenterDelegate {\n    \n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        registerForPushNotifications()\n        return true\n    }\n    \n    func registerForPushNotifications() {\n        let center = UNUserNotificationCenter.current()\n        center.delegate = self\n        center.requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in\n            guard granted else { return }\n            DispatchQueue.main.async {\n                UIApplication.shared.registerForRemoteNotifications()\n            }\n        }\n    }\n    \n    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n        // Handle device token registration\n    }\n    \n    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n        // Handle error\n    }\n    \n    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {\n        completionHandler([.banner, .sound])\n    }\n    \n    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n        // Handle notification tap\n        completionHandler()\n    }\n    \n}"
    },
    {
      "instruction": " Write a Swift function that sets up Core Data stack",
      "input": "",
      "output": "import CoreData\n\nclass CoreDataStack {\n    \n    lazy var persistentContainer: NSPersistentContainer = {\n        let container = NSPersistentContainer(name: \"Model\")\n        container.loadPersistentStores(completionHandler: { (storeDescription, error) in\n            if let error = error as NSError? {\n                fatalError(\"Unresolved error \\(error), \\(error.userInfo)\")\n            }\n        })\n        return container\n    }()\n    \n    func saveContext () {\n        let context = persistentContainer.viewContext\n        if context.hasChanges {\n            do {\n                try context.save()\n            } catch {\n                let nserror = error as NSError\n                fatalError(\"Unresolved error \\(nserror), \\(nserror.userInfo)\")\n            }\n        }\n    }\n    \n}"
    },
    {
      "instruction": " Write a Swift function that allows a user to choose an image from their photo library using UIImagePickerController",
      "input": "",
      "output": "import UIKit\n\nclass ImagePickerController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {\n    \n    private let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        imageView.contentMode = .scaleAspectFit\n        return imageView\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(imageView)\n        setupConstraints()\n        presentImagePicker()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            imageView.topAnchor.constraint(equalTo: view.topAnchor),\n            imageView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            imageView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    funcpresentImagePicker() {\n        let imagePicker = UIImagePickerController()\n        imagePicker.delegate = self\n        imagePicker.sourceType = .photoLibrary\n        present(imagePicker, animated: true, completion: nil)\n    }\n    \n    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {\n        if let selectedImage = info[.originalImage] as? UIImage {\n            imageView.image = selectedImage\n        }\n        picker.dismiss(animated: true, completion: nil)\n    }\n    \n    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {\n        picker.dismiss(animated: true, completion: nil)\n    }\n    \n}"
    },
    {
      "instruction": " Write a Swift function that uses Core Location to get the user's current location",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    \n    private let locationManager = CLLocationManager()\n    \n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        guard let currentLocation = locations.last else { return }\n        print(\"Current location: \\(currentLocation)\")\n    }\n    \n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error getting location: \\(error)\")\n    }\n    \n}"
    },
    {
      "instruction": " Write a Swift function that performs a search using the MapKit framework",
      "input": "",
      "output": "import MapKit\n\nclass SearchViewController: UIViewController, MKMapViewDelegate, UISearchBarDelegate {\n    \n    private lazy var mapView: MKMapView = {\n        let mapView = MKMapView()\n        mapView.translatesAutoresizingMaskIntoConstraints = false\n        mapView.delegate = self\n        return mapView\n    }()\n    \n    private lazy var searchBar: UISearchBar = {\n        let searchBar = UISearchBar()\n        searchBar.translatesAutoresizingMaskIntoConstraints = false\n        searchBar.delegate = self\n        return searchBar\n    }()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        view.addSubview(mapView)\n        view.addSubview(searchBar)\n        setupConstraints()\n    }\n    \n    private func setupConstraints() {\n        NSLayoutConstraint.activate([\n            searchBar.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            searchBar.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            searchBar.trailingAnchor.constraint(equalTo: view.trailingAnchor),\n            \n            mapView.topAnchor.constraint(equalTo: searchBar.bottomAnchor),\n            mapView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            mapView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            mapView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n    }\n    \n    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {\n        searchBar.resignFirstResponder()\n        performSearch(searchText: searchBar.text)\n    }\n    \n    func performSearch(searchText: String?) {\n        guard let searchText = searchText else { return }\n        let searchRequest = MKLocalSearch.Request()\n        searchRequest.naturalLanguageQuery = searchText\n        searchRequest.region = mapView.region\n        \n        let search = MKLocalSearch(request: searchRequest)\n        search.start { response, error in\n            guard let response = response else { return }\n            \n            for item in response.mapItems {\n                let annotation = MKPointAnnotation()\n                annotation.coordinate = item.placemark.coordinate\n                annotation.title = item.name\n                self.mapView.addAnnotation(annotation)\n            }\n        }\n    }\n    \n}"
    },
    {
      "instruction": " Write a Swift function that establishes a connection to a WebSocket server using URLSessionWebSocketTask",
      "input": "",
      "output": "import Foundation\n\nclass WebSocketManager: NSObject, URLSessionWebSocketDelegate {\n    \n    private let url: URL\n    private var webSocketTask: URLSessionWebSocketTask?\n    \n    init(url: URL) {\n        self.url = url\n    }\n    \n    func connect() {\n        let session = URLSession(configuration: .default, delegate: self, delegateQueue: OperationQueue.main)\n        webSocketTask = session.webSocketTask(with: url)\n        webSocketTask?.resume()\n        receiveMessage()\n    }\n    \n    func disconnect() {\n        webSocketTask?.cancel(with: .goingAway, reason: nil)\n    }\n    \n    func sendMessage(message: String) {\n        let data = URLSessionWebSocketTask.Message.string(message)\n        webSocketTask?.send(data) { error in\n            if let error = error {\n                print(\"Error sending message: \\(error)\")\n            }\n        }\n    }\n    \n    func receiveMessage() {\n        webSocketTask?.receive { [weak self] result in\n            switch result {\n            case .success(let message):\n                switch message {\n                case .string(let text):\n                    print(\"Received text message: \\(text)\")\n                case .data(let data):\n                    print(\"Received data message: \\(data)\")\n                @unknown default:\n                    fatalError(\"Unknown message type\")\n                }\n            case .failure(let error):\n                print(\"Error receiving message: \\(error)\")\n            }\n            \n            self?.receiveMessage"
    },
    {
      "instruction": " Write a Swift function that retrieves the user's location using CoreLocation",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    private let locationManager = CLLocationManager()\n    var currentLocation: CLLocation?\n\n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n    }\n\n    func requestLocation() {\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.first {\n            currentLocation = location\n            locationManager.stopUpdatingLocation()\n            print(\"Latitude: \\(location.coordinate.latitude), Longitude: \\(location.coordinate.longitude)\")\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error getting location: \\(error.localizedDescription)\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that animates a UIView with a spring effect",
      "input": "",
      "output": "import UIKit\n\nextension UIView {\n    func animateWithSpring(duration: TimeInterval, delay: TimeInterval, dampingRatio: CGFloat, velocity: CGFloat) {\n        self.transform = CGAffineTransform(scaleX: 0.1, y: 0.1)\n        UIView.animate(withDuration: duration, delay: delay, usingSpringWithDamping: dampingRatio, initialSpringVelocity: velocity, options: [], animations: {\n            self.transform = CGAffineTransform.identity\n        }, completion: nil)\n    }\n}"
    },
    {
      "instruction": " Write a Swift UITableViewController that displays a list of items and supports deletion",
      "input": "",
      "output": "import UIKit\n\nclass ListTableViewController: UITableViewController {\n    var items: [String] = [\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\"]\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(UITableViewCell.self, forCellReuseIdentifier: \"cell\")\n        tableView.allowsMultipleSelectionDuringEditing = false\n    }\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        cell.textLabel?.text = items[indexPath.row]\n        return cell\n    }\n\n    override func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {\n        return true\n    }\n\n    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) {\n        if editingStyle == .delete {\n            items.remove(at: indexPath.row)\n            tableView.deleteRows(at: [indexPath], with: .fade)\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that creates and presents a UIAlertController with a single \"OK\" button",
      "input": "",
      "output": "import UIKit\n\nextension UIViewController {\n    func showAlert(title: String, message: String) {\n        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n        let okAction = UIAlertAction(title: \"OK\", style: .default, handler: nil)\n        alertController.addAction(okAction)\n        present(alertController, animated: true, completion: nil)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that saves an image to the user's photo library",
      "input": "",
      "output": "import Photos\n\nclass PhotoSaver: NSObject {\n    func saveImageToLibrary(_ image: UIImage, completion: @escaping (Bool, Error?) -> Void) {\n        PHPhotoLibrary.requestAuthorization { status in\n            guard status == .authorized else {\n                completion(false, nil)\n                return\n            }\n\n            PHPhotoLibrary.shared().performChanges({\n                PHAssetChangeRequest.creationRequestForAsset(from: image)\n            }) {(success, error) in\n                DispatchQueue.main.async {\n                    completion(success, error)\n                }\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that registers a custom UITableViewCell class to be used in a UITableView",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewCell: UITableViewCell {\n    // Custom cell implementation\n}\n\nclass CustomTableViewController: UITableViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.register(CustomTableViewCell.self, forCellReuseIdentifier: \"CustomCell\")\n    }\n\n    // UITableViewDataSource methods implementation\n}"
    },
    {
      "instruction": " Write a Swift function that parses a JSON response from a network request and decodes it into a custom Swift object",
      "input": "",
      "output": "import Foundation\n\nstruct User: Codable {\n    let id: Int\n    let name: String\n    let email: String\n}\n\nclass NetworkManager {\n    func fetchUser(completion: @escaping (User?) -> Void) {\n        guard let url = URL(string: \"https://api.example.com/user\") else {\n            completion(nil)\n            return\n        }\n\n        let task = URLSession.shared.dataTask(with: url) { data, response, error in\n            guard let data = data, error == nil else {\n                completion(nil)\n                return\n            }\n\n            let decoder = JSONDecoder()\n            do {\n                let user = try decoder.decode(User.self, from: data)\n                completion(user)\n            } catch {\n                print(\"Error decoding JSON: \\(error.localizedDescription)\")\n                completion(nil)\n            }\n        }\n        task.resume()\n    }\n}"
    },
    {
      "instruction": " Write a Swift code snippet that demonstrates how to use the Core Location framework to get the user's current location",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n\n    override init() {\n        super.init()\n        locationManager.delegate = self\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        if let location = locations.last {\n            print(\"Current location: \\(location)\")\n        }\n    }\n\n    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {\n        print(\"Error getting location: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that saves a given text to a file in the app's Documents directory",
      "input": "",
      "output": "import Foundation\n\nfunc saveTextToFile(_ text: String, fileName: String) {\n    let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!\n    let fileURL = documentsDirectory.appendingPathComponent(fileName)\n\n    do {\n        try text.write(to: fileURL, atomically: true, encoding: .utf8)\n    } catch {\n        print(\"Error writing to file: \\(error)\")\n    }\n}"
    },
    {
      "instruction": " Write a Swift code snippet that demonstrates how to use the PusherSwift framework to subscribe to a channel and bind to an event",
      "input": "",
      "output": "import PusherSwift\n\nclass PusherManager {\n    let pusher: Pusher\n\n    init() {\n        let options = PusherClientOptions(\n            host: .cluster(\"eu\")\n        )\n        pusher = Pusher(key: \"YOUR_APP_KEY\", options: options)\n        pusher.connect()\n\n        let channel = pusher.subscribe(\"my-channel\")\n        channel.bind(eventName: \"my-event\") { eventData in\n            if let data = eventData.data {\n                print(\"Received data: \\(data)\")\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that creates a custom UIAlertController with a title, message, and action buttons",
      "input": "",
      "output": "import UIKit\n\nfunc createCustomAlertController(title: String, message: String, actions: [UIAlertAction]) -> UIAlertController {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    \n    for action in actions {\n        alertController.addAction(action)\n    }\n    \n    return alertController\n}"
    },
    {
      "instruction": " Write a Swift function that demonstrates how to use the Firebase Realtime Database to save data",
      "input": "",
      "output": "import FirebaseDatabase\n\nfunc saveDataToFirebaseDatabase(data: [String: Any], path: String) {\n    let databaseReference = Database.database().reference()\n    let dataReference = databaseReference.child(path)\n    \n    dataReference.setValue(data) { error, _ in\n        if let error = error {\n            print(\"Error saving data: \\(error)\")\n        } else {\n            print(\"Data saved successfully\")\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that demonstrates how to use the Alamofire framework to make a GET request",
      "input": "",
      "output": "import Alamofire\n\nfunc makeGetRequest(url: String, parameters: [String: Any], completionHandler: @escaping (Result<Data, AFError>) -> Void) {\n    AF.request(url, parameters: parameters).responseData { response in\n        completionHandler(response.result)\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that demonstrates how to use the RealmSwift framework to add and retrieve objects",
      "input": "",
      "output": "import RealmSwift\n\nclass MyObject: Object {\n    @objc dynamic var id = 0\n    @objc dynamic var name = \"\"\n}\n\nfunc addAndRetrieveObjects() {\n    let realm = try! Realm()\n\n    // Adding an object\n    let newObject = MyObject()\n    newObject.id = 1\n    newObject.name = \"Example\"\n\n    try! realm.write {\n        realm.add(newObject)\n    }\n\n    // Retrieving objects\n    let results = realm.objects(MyObject.self)\n    for object in results {\n        print(\"ID: \\(object.id), Name: \\(object.name)\")\n   }"
    },
    {
      "instruction": " Implement a Swift function that saves data to UserDefaults.",
      "input": "",
      "output": "import Foundation\n\nfunc saveData(_ data: Any, forKey key: String) {\n    let userDefaults = UserDefaults.standard\n    userDefaults.set(data, forKey: key)\n    userDefaults.synchronize()\n}"
    },
    {
      "instruction": " Write a Swift function that retrieves data from UserDefaults.",
      "input": "",
      "output": "import Foundation\n\nfunc retrieveData(forKey key: String) -> Any? {\n    let userDefaults = UserDefaults.standard\n    return userDefaults.object(forKey: key)\n}"
    },
    {
      "instruction": " Create a Swift function that takes an array of CLLocation objects and returns the center coordinate.",
      "input": "",
      "output": "import CoreLocation\n\nfunc centerCoordinate(of locations: [CLLocation]) -> CLLocationCoordinate2D {\n    var latitudeSum: Double = 0.0\n    var longitudeSum: Double = 0.0\n    let count = Double(locations.count)\n\n    for location in locations {\n        latitudeSum += location.coordinate.latitude\n        longitudeSum += location.coordinate.longitude\n    }\n    \n    return CLLocationCoordinate2D(latitude: latitudeSum / count, longitude: longitudeSum / count)\n}"
    },
    {
      "instruction": " Write a Swift function to display a UIAlertController with a title, message, and a single \"OK\" button.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlert(in viewController: UIViewController, title: String, message: String) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    let okAction = UIAlertAction(title: \"OK\", style: .default)\n    alertController.addAction(okAction)\n    viewController.present(alertController, animated: true)\n}"
    },
    {
      "instruction": " Create a Swift function that adds a gradient background to a UIView.",
      "input": "",
      "output": "import UIKit\n\nfunc addGradientBackground(to view: UIView, colors: [CGColor]) {\n    let gradientLayer = CAGradientLayer()\n    gradientLayer.frame = view.bounds\n    gradientLayer.colors = colors\n    gradientLayer.locations = [0.0, 1.0]\n    view.layer.insertSublayer(gradientLayer, at: 0)\n}"
    },
    {
      "instruction": " Implement a Swift function that sets the height constraint of a UIView to a specific value.",
      "input": "",
      "output": "import UIKit\n\nfunc setHeight(_ height: CGFloat, for view: UIView) {\n    view.translatesAutoresizingMaskIntoConstraints = false\n    NSLayoutConstraint.activate([\n        view.heightAnchor.constraint(equalToConstant: height)\n    ])\n}"
    },
    {
      "instruction": " Write a Swift function that takes a JSON string and decodes it into a Codable object.",
      "input": "",
      "output": "import Foundation\n\nfunc decodeJSON<T: Codable>(jsonString: String, to type: T.Type) -> T? {\n    guard let jsonData = jsonString.data(using: .utf8) else { return nil }\n    let decoder = JSONDecoder()\n\n    do {\n        let decodedObject = try decoder.decode(T.self, from: jsonData)\n        return decodedObject\n    } catch {\n        print(\"Error decoding JSON: \\(error.localizedDescription)\")\n        return nil\n    }\n}"
    },
    {
      "instruction": "Write a Swift function that takes a UITableView and a custom UITableViewCell class and registers the cell for reuse in the table view.",
      "input": "",
      "output": "import UIKit\n\nfunc registerCustomCell<T: UITableViewCell>(_ tableView: UITableView, cellClass: T.Type) {\n    let reuseIdentifier = String(describing: T.self)\n    let nib = UINib(nibName: reuseIdentifier, bundle: nil)\n    tableView.register(nib, forCellReuseIdentifier: reuseIdentifier)\n}"
    },
    {
      "instruction": " Write a Swift function that asynchronously downloads an image from a URL and sets it as the background of a UIButton.",
      "input": "",
      "output": "import UIKit\n\nfunc setBackgroundImageFromURL(_ button: UIButton, imageURL: URL) {\n    DispatchQueue.global().async {\n        if let data = try? Data(contentsOf: imageURL),\n           let image = UIImage(data: data) {\n            DispatchQueue.main.async {\n                button.setBackgroundImage(image, for: .normal)\n            }\n        }\n    }\n}"
    },
    {
      "instruction": " Write a Swift function that allows you to present a UIAlertController with a title, message, and a list of UIAlertAction buttons.",
      "input": "",
      "output": "import UIKit\n\nfunc showAlertWithActions(_ viewController: UIViewController, title: String, message: String, actions: [UIAlertAction]) {\n    let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)\n    for action in actions {\n        alertController.addAction(action)\n    }\n    viewController.present(alertController, animated: true, completion: nil)\n}"
    },
    {
      "instruction": " Write a Swift function that sets up a UIGestureRecognizer to detect taps on a UIView and execute a specified closure.",
      "input": "",
      "output": "import UIKit\n\nfunc addTapGestureToView(_ view: UIView, onTap: @escaping () -> Void) {\n    let tapGesture = UITapGestureRecognizer(target: view, action: nil)\n    tapGesture.numberOfTapsRequired = 1\n    tapGesture.addAction {\n        onTap()\n    }\n    view.addGestureRecognizer(tapGesture)\n    view.isUserInteractionEnabled = true\n}"
    },
    {
      "instruction": " Write a Swift function that takes a UICollectionView and a custom UICollectionViewCell class and registers the cell for reuse in the collection view.",
      "input": "",
      "output": "import UIKit\n\nfunc registerCustomCollectionCell<T: UICollectionViewCell>(_ collectionView: UICollectionView, cellClass: T.Type) {\n    let reuseIdentifier = String(describing: T.self)\n    let nib = UINib(nibName: reuseIdentifier, bundle: nil)\n    collectionView.register(nib, forCellWithReuseIdentifier: reuseIdentifier)\n}"
    },
    {
      "instruction": " Write a Swift function that creates a NSLayoutConstraint to align the top edge of one view to another view with a specified constant.",
      "input": "",
      "output": "import UIKit\n\nfunc constraintAlignTopEdge(of view1: UIView, to view2: UIView, constant: CGFloat) -> NSLayoutConstraint {\n    return NSLayoutConstraint(item: view1, attribute: .top, relatedBy: .equal, toItem: view2, attribute: .top, multiplier: 1, constant: constant)\n}"
    },
    {
      "instruction": " Write a Swift function that adds a UIActivityIndicatorView to a view and starts animating it.",
      "input": "",
      "output": "import UIKit\n\nfunc addAndStartActivityIndicator(_ view: UIView) {\n    let activityIndicator = UIActivityIndicatorView(style: .medium)\n    activityIndicator.translatesAutoresizingMaskIntoConstraints = false\n    view.addSubview(activityIndicator)\n    NSLayoutConstraint.activate([\n        activityIndicator.centerXAnchor.constraint(equalTo: view.centerXAnchor),\n        activityIndicator.centerYAnchor.constraint(equalTo: view.centerYAnchor)\n    ])\n    activityIndicator.startAnimating()\n}"
    },
    {
      "instruction": " Write a Swift function that takes a dictionary with string keys and values, and returns a URL encoded query string.",
      "input": "",
      "output": "import Foundation\n\nfunc urlEncodedQueryString(from parameters: [String: String]) -> String {\n    var components: [String] = []\n    for (key, value) in parameters {\n        let encodedKey = key.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) ?? \"\"\n        let encodedValue = value.addingPercentEncoding(withAllowedCharacters: .urlQueryAllowed) ?? \"\"\n        components.append(\"\\(encodedKey)=\\(encodedValue)\")\n    }\n    return components.joined(separator: \"&\")\n}"
    },
    {
      "instruction": "Write a Swift function that downloads an image from a URL and sets it to a UIImageView.",
      "input": "let imageURL = URL(string: \"https://example.com/image.jpg\")\nlet imageView = UIImageView()",
      "output": "import UIKit\n\nfunc downloadImage(from url: URL, to imageView: UIImageView) {\n    URLSession.shared.dataTask(with: url) { (data, _, error) in\n        guard let data = data, error == nil else { return }\n        DispatchQueue.main.async {\n            imageView.image = UIImage(data: data)\n        }\n    }.resume()\n}\n\nlet imageURL = URL(string: \"https://example.com/image.jpg\")!\nlet imageView = UIImageView()\ndownloadImage(from: imageURL, to: imageView)"
    },
    {
      "instruction": " \nWrite a Swift function that returns the user's location using CoreLocation.",
      "input": "",
      "output": "import CoreLocation\n\nclass LocationManager: NSObject, CLLocationManagerDelegate {\n    let locationManager = CLLocationManager()\n    var userLocation: CLLocation?\n\n    func requestUserLocation() {\n        locationManager.delegate = self\n        locationManager.requestWhenInUseAuthorization()\n        locationManager.startUpdatingLocation()\n    }\n\n    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {\n        guard let location = locations.last else { return }\n        userLocation = location\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that animates a UIButton's background color change.",
      "input": "let button = UIButton()",
      "output": "import UIKit\n\nfunc animateBackgroundColorChange(for button: UIButton, to color: UIColor, duration: TimeInterval) {\n    UIView.animate(withDuration: duration) {\n        button.backgroundColor = color\n    }\n}\n\nlet button = UIButton()\nanimateBackgroundColorChange(for: button, to: .red, duration: 0.5)"
    },
    {
      "instruction": " \nWrite a Swift function that implements a custom UITableViewController with a search bar.",
      "input": "",
      "output": "import UIKit\n\nclass CustomTableViewController: UITableViewController, UISearchBarDelegate {\n    let searchBar = UISearchBar()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupSearchBar()\n    }\n    \n    func setupSearchBar() {\n        searchBar.delegate = self\n        searchBar.sizeToFit()\n        tableView.tableHeaderView = searchBar\n    }\n    \n    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {\n        // Implement search filtering logic here\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that handles user authentication with Firebase.",
      "input": "",
      "output": "import FirebaseAuth\n\nfunc authenticateUser(email: String, password: String, completion: @escaping (Result<AuthDataResult, Error>) -> Void) {\n    Auth.auth().signIn(withEmail: email, password: password) { (authResult, error) in\n        if let error = error {\n            completion(.failure(error))\n        } else if let authResult = authResult {\n            completion(.success(authResult))\n        }\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that creates a custom UICollectionViewCell with an image and a label.",
      "input": "",
      "output": "import UIKit\n\nclass CustomCollectionViewCell: UICollectionViewCell {\n    let imageView: UIImageView = {\n        let imageView = UIImageView()\n        imageView.contentMode = .scaleAspectFill\n        imageView.translatesAutoresizingMaskIntoConstraints = false\n        return imageView\n    }()\n    \n    let titleLabel: UILabel = {\n        let label = UILabel()\n        label.translatesAutoresizingMaskIntoConstraints = false\n        return label\n    }()\n    \n    override init(frame: CGRect) {\n        super.init(frame: frame)\n        setupSubviews()\n    }\n    \n    required init?(coder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    func setupSubviews() {\n        contentView.addSubview(imageView)\n        contentView.addSubview(titleLabel)\n        \n        NSLayoutConstraint.activate([\n            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            imageView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            imageView.heightAnchor.constraint(equalToConstant: 100),\n            \n            titleLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            titleLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor),\n            titleLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 8)\n        ])\n    }\n}"
    },
    {
      "instruction": " \nWrite a Swift function that plays an audio file using AVFoundation.",
      "input": "let audioURL = URL(fileURLWithPath: \"path/to/audiofile.mp3\")",
      "output": "import AVFoundation\n\nvar audioPlayer: AVAudioPlayer?\n\nfunc playAudio(from url: URL) {\n    do {\n        audioPlayer = try AVAudioPlayer(contentsOf: url)\n        audioPlayer?.prepareToPlay()\n        audioPlayer?.play()\n    } catch let error {\n        print(\"Error playing audio: \\(error.localizedDescription)\")\n    }\n}\n\nlet audioURL = URL(fileURLWithPath: \"path/to/audiofile.mp3\")\nplayAudio(from:audioURL)"
    }
  ]